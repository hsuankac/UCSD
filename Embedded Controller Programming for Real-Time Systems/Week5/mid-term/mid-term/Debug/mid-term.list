
mid-term.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069a8  080069a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080069a8  080069a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b0  080069b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080069b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  20000070  08006a28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  08006a28  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a529  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003338  00000000  00000000  0003a5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0003d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  0003efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285df  00000000  00000000  00040550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a451  00000000  00000000  00068b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3ed1  00000000  00000000  00082f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000653c  00000000  00000000  00176ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066fc 	.word	0x080066fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080066fc 	.word	0x080066fc

080001d0 <mySquareSum>:
    .section .text
    .global mySquareSum

mySquareSum:
    @ Initialize variables
    mov r4, #0      @ Sum
 80001d0:	2400      	movs	r4, #0
    mov r5, #1      @ Current number to square
 80001d2:	2501      	movs	r5, #1

080001d4 <loop>:

loop:
    @ Calculate square of r5 and add to accumulator
    mla r4, r5, r5, r4  @ r4 += r5 * r5 (square of r5)
 80001d4:	fb05 4405 	mla	r4, r5, r5, r4

    @ Check if we've squared up to n
    cmp r5, r0
 80001d8:	4285      	cmp	r5, r0
    bge done        @ Branch to done if r5 >= n
 80001da:	da01      	bge.n	80001e0 <done>

    @ Increment r5 and loop
    add r5, r5, #1
 80001dc:	3501      	adds	r5, #1
    b loop
 80001de:	e7f9      	b.n	80001d4 <loop>

080001e0 <done>:

done:
    @ Place the result in r0
    mov r0, r4
 80001e0:	1c20      	adds	r0, r4, #0

    bx lr           @ Return using lr
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <logMsg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void logMsg(UART_HandleTypeDef *huart, char _out[])
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	tx_flag = 0;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <logMsg+0x3c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) _out, strlen(_out));
 80005b4:	6838      	ldr	r0, [r7, #0]
 80005b6:	f7ff fe15 	bl	80001e4 <strlen>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29b      	uxth	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	6839      	ldr	r1, [r7, #0]
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <logMsg+0x40>)
 80005c4:	f003 fd7a 	bl	80040bc <HAL_UART_Transmit_IT>
	while(tx_flag == 0);
 80005c8:	bf00      	nop
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <logMsg+0x3c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0fa      	beq.n	80005ca <logMsg+0x26>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200007d4 	.word	0x200007d4
 80005e4:	200001c0 	.word	0x200001c0

080005e8 <logGetMsg>:

void logGetMsg(UART_HandleTypeDef *huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) in, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	4904      	ldr	r1, [pc, #16]	; (8000604 <logGetMsg+0x1c>)
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <logGetMsg+0x20>)
 80005f6:	f003 fdcf 	bl	8004198 <HAL_UART_Receive_IT>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200007d8 	.word	0x200007d8
 8000608:	200001c0 	.word	0x200001c0

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09c      	sub	sp, #112	; 0x70
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f001 f8bc 	bl	800178e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f911 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 fad9 	bl	8000bd0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800061e:	f000 f96f 	bl	8000900 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000622:	f000 f9a5 	bl	8000970 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000626:	f000 f9e1 	bl	80009ec <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800062a:	f000 fa05 	bl	8000a38 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800062e:	f000 fa41 	bl	8000ab4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000632:	f000 fa6f 	bl	8000b14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000636:	f000 fa9d 	bl	8000b74 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  logMsg(&huart1, "Welcome to Embedded controller programming \r\n");
 800063a:	496c      	ldr	r1, [pc, #432]	; (80007ec <main+0x1e0>)
 800063c:	486c      	ldr	r0, [pc, #432]	; (80007f0 <main+0x1e4>)
 800063e:	f7ff ffb1 	bl	80005a4 <logMsg>

  logMsg(&huart1, "Enter g for toggling Green LED \r\n");
 8000642:	496c      	ldr	r1, [pc, #432]	; (80007f4 <main+0x1e8>)
 8000644:	486a      	ldr	r0, [pc, #424]	; (80007f0 <main+0x1e4>)
 8000646:	f7ff ffad 	bl	80005a4 <logMsg>

  logMsg(&huart1, "Enter b for toggling Blue LED \r\n");
 800064a:	496b      	ldr	r1, [pc, #428]	; (80007f8 <main+0x1ec>)
 800064c:	4868      	ldr	r0, [pc, #416]	; (80007f0 <main+0x1e4>)
 800064e:	f7ff ffa9 	bl	80005a4 <logMsg>

  logMsg(&huart1, "Enter v to find the sum of squares of a number: 3 \r\n");
 8000652:	496a      	ldr	r1, [pc, #424]	; (80007fc <main+0x1f0>)
 8000654:	4866      	ldr	r0, [pc, #408]	; (80007f0 <main+0x1e4>)
 8000656:	f7ff ffa5 	bl	80005a4 <logMsg>

  logMsg(&huart1, "Enter n to find number of 1’s  \r\n");
 800065a:	4969      	ldr	r1, [pc, #420]	; (8000800 <main+0x1f4>)
 800065c:	4864      	ldr	r0, [pc, #400]	; (80007f0 <main+0x1e4>)
 800065e:	f7ff ffa1 	bl	80005a4 <logMsg>

  logMsg(&huart1, "Enter d to disable a interrupt \r\n");
 8000662:	4968      	ldr	r1, [pc, #416]	; (8000804 <main+0x1f8>)
 8000664:	4862      	ldr	r0, [pc, #392]	; (80007f0 <main+0x1e4>)
 8000666:	f7ff ff9d 	bl	80005a4 <logMsg>

  logMsg(&huart1, "Enter e to enable the interrupt \r\n");
 800066a:	4967      	ldr	r1, [pc, #412]	; (8000808 <main+0x1fc>)
 800066c:	4860      	ldr	r0, [pc, #384]	; (80007f0 <main+0x1e4>)
 800066e:	f7ff ff99 	bl	80005a4 <logMsg>

  logMsg(&huart1, "Enter a to disable all interrupts \r\n");
 8000672:	4966      	ldr	r1, [pc, #408]	; (800080c <main+0x200>)
 8000674:	485e      	ldr	r0, [pc, #376]	; (80007f0 <main+0x1e4>)
 8000676:	f7ff ff95 	bl	80005a4 <logMsg>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	logGetMsg(&huart1);
 800067a:	485d      	ldr	r0, [pc, #372]	; (80007f0 <main+0x1e4>)
 800067c:	f7ff ffb4 	bl	80005e8 <logGetMsg>
	char buf[100];
	if(rx_flag)
 8000680:	4b63      	ldr	r3, [pc, #396]	; (8000810 <main+0x204>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	f000 80ae 	beq.w	80007e8 <main+0x1dc>
	{
		rx_flag = 0;
 800068c:	4b60      	ldr	r3, [pc, #384]	; (8000810 <main+0x204>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		switch(in[0])
 8000692:	4b60      	ldr	r3, [pc, #384]	; (8000814 <main+0x208>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3b61      	subs	r3, #97	; 0x61
 8000698:	2b15      	cmp	r3, #21
 800069a:	f200 80a0 	bhi.w	80007de <main+0x1d2>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <main+0x98>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	080007c3 	.word	0x080007c3
 80006a8:	08000721 	.word	0x08000721
 80006ac:	080007df 	.word	0x080007df
 80006b0:	08000787 	.word	0x08000787
 80006b4:	080007a5 	.word	0x080007a5
 80006b8:	080007df 	.word	0x080007df
 80006bc:	080006fd 	.word	0x080006fd
 80006c0:	080007df 	.word	0x080007df
 80006c4:	080007df 	.word	0x080007df
 80006c8:	080007df 	.word	0x080007df
 80006cc:	080007df 	.word	0x080007df
 80006d0:	080007df 	.word	0x080007df
 80006d4:	080007df 	.word	0x080007df
 80006d8:	08000765 	.word	0x08000765
 80006dc:	080007df 	.word	0x080007df
 80006e0:	080007df 	.word	0x080007df
 80006e4:	080007df 	.word	0x080007df
 80006e8:	080007df 	.word	0x080007df
 80006ec:	080007df 	.word	0x080007df
 80006f0:	080007df 	.word	0x080007df
 80006f4:	080007df 	.word	0x080007df
 80006f8:	08000745 	.word	0x08000745
		{
		case 'g':
		{
			snprintf(buf, sizeof(buf), "Received char %c\r\n", in[0]);
 80006fc:	4b45      	ldr	r3, [pc, #276]	; (8000814 <main+0x208>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	1d38      	adds	r0, r7, #4
 8000702:	4a45      	ldr	r2, [pc, #276]	; (8000818 <main+0x20c>)
 8000704:	2164      	movs	r1, #100	; 0x64
 8000706:	f005 fb77 	bl	8005df8 <sniprintf>
			logMsg(&huart1, buf);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4838      	ldr	r0, [pc, #224]	; (80007f0 <main+0x1e4>)
 8000710:	f7ff ff48 	bl	80005a4 <logMsg>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000718:	4840      	ldr	r0, [pc, #256]	; (800081c <main+0x210>)
 800071a:	f001 fd31 	bl	8002180 <HAL_GPIO_TogglePin>
			break;
 800071e:	e064      	b.n	80007ea <main+0x1de>
		}
		case 'b':
		{
			snprintf(buf, sizeof(buf), "Received char %c\r\n", in[0]);
 8000720:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <main+0x208>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	1d38      	adds	r0, r7, #4
 8000726:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <main+0x20c>)
 8000728:	2164      	movs	r1, #100	; 0x64
 800072a:	f005 fb65 	bl	8005df8 <sniprintf>
			logMsg(&huart1, buf);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	482f      	ldr	r0, [pc, #188]	; (80007f0 <main+0x1e4>)
 8000734:	f7ff ff36 	bl	80005a4 <logMsg>
			HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	4838      	ldr	r0, [pc, #224]	; (8000820 <main+0x214>)
 800073e:	f001 fd1f 	bl	8002180 <HAL_GPIO_TogglePin>
			break;
 8000742:	e052      	b.n	80007ea <main+0x1de>
		}
		case 'v':
		{
			int result = mySquareSum(3);
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff fd43 	bl	80001d0 <mySquareSum>
 800074a:	66f8      	str	r0, [r7, #108]	; 0x6c
			snprintf(buf, sizeof(buf), "Result is %d\r\n", result);
 800074c:	1d38      	adds	r0, r7, #4
 800074e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000750:	4a34      	ldr	r2, [pc, #208]	; (8000824 <main+0x218>)
 8000752:	2164      	movs	r1, #100	; 0x64
 8000754:	f005 fb50 	bl	8005df8 <sniprintf>
			logMsg(&huart1, buf);
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4824      	ldr	r0, [pc, #144]	; (80007f0 <main+0x1e4>)
 800075e:	f7ff ff21 	bl	80005a4 <logMsg>
			break;
 8000762:	e042      	b.n	80007ea <main+0x1de>
		}
		case 'n':
		{
			int result = numOnes(7);
 8000764:	2007      	movs	r0, #7
 8000766:	f000 fc15 	bl	8000f94 <numOnes>
 800076a:	4603      	mov	r3, r0
 800076c:	66bb      	str	r3, [r7, #104]	; 0x68
			snprintf(buf, sizeof(buf), "Number of 1's for 7 is %d\r\n", result);
 800076e:	1d38      	adds	r0, r7, #4
 8000770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000772:	4a2d      	ldr	r2, [pc, #180]	; (8000828 <main+0x21c>)
 8000774:	2164      	movs	r1, #100	; 0x64
 8000776:	f005 fb3f 	bl	8005df8 <sniprintf>
			logMsg(&huart1, buf);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	481c      	ldr	r0, [pc, #112]	; (80007f0 <main+0x1e4>)
 8000780:	f7ff ff10 	bl	80005a4 <logMsg>
			break;
 8000784:	e031      	b.n	80007ea <main+0x1de>
		}
		case 'd':
		{
			snprintf(buf, sizeof(buf), "Disable the button interrupt\r\n");
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4a28      	ldr	r2, [pc, #160]	; (800082c <main+0x220>)
 800078a:	2164      	movs	r1, #100	; 0x64
 800078c:	4618      	mov	r0, r3
 800078e:	f005 fb33 	bl	8005df8 <sniprintf>
			logMsg(&huart1, buf);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <main+0x1e4>)
 8000798:	f7ff ff04 	bl	80005a4 <logMsg>
			myDisableIntr(EXTI15_10_IRQn);
 800079c:	2028      	movs	r0, #40	; 0x28
 800079e:	f000 fc33 	bl	8001008 <myDisableIntr>
			break;
 80007a2:	e022      	b.n	80007ea <main+0x1de>
		}
		case 'e':
		{
			snprintf(buf, sizeof(buf), "Enable the button interrupt\r\n");
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4a22      	ldr	r2, [pc, #136]	; (8000830 <main+0x224>)
 80007a8:	2164      	movs	r1, #100	; 0x64
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 fb24 	bl	8005df8 <sniprintf>
			logMsg(&huart1, buf);
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	480e      	ldr	r0, [pc, #56]	; (80007f0 <main+0x1e4>)
 80007b6:	f7ff fef5 	bl	80005a4 <logMsg>
			myEnableIntr(EXTI15_10_IRQn);
 80007ba:	2028      	movs	r0, #40	; 0x28
 80007bc:	f000 fc3c 	bl	8001038 <myEnableIntr>
			break;
 80007c0:	e013      	b.n	80007ea <main+0x1de>
		}
		case 'a':
		{
			snprintf(buf, sizeof(buf), "Disable all the interrupt\r\n");
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <main+0x228>)
 80007c6:	2164      	movs	r1, #100	; 0x64
 80007c8:	4618      	mov	r0, r3
 80007ca:	f005 fb15 	bl	8005df8 <sniprintf>
			logMsg(&huart1, buf);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <main+0x1e4>)
 80007d4:	f7ff fee6 	bl	80005a4 <logMsg>
			myDisableAllIntr();
 80007d8:	f000 fc46 	bl	8001068 <myDisableAllIntr>
			break;
 80007dc:	e005      	b.n	80007ea <main+0x1de>
		}
		default:
		{
			logMsg(&huart1, "unknown character received\r\n");
 80007de:	4916      	ldr	r1, [pc, #88]	; (8000838 <main+0x22c>)
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <main+0x1e4>)
 80007e2:	f7ff fedf 	bl	80005a4 <logMsg>
			break;
 80007e6:	e000      	b.n	80007ea <main+0x1de>
		}
		}
	}
 80007e8:	bf00      	nop
  {
 80007ea:	e746      	b.n	800067a <main+0x6e>
 80007ec:	08006714 	.word	0x08006714
 80007f0:	200001c0 	.word	0x200001c0
 80007f4:	08006744 	.word	0x08006744
 80007f8:	08006768 	.word	0x08006768
 80007fc:	0800678c 	.word	0x0800678c
 8000800:	080067c4 	.word	0x080067c4
 8000804:	080067e8 	.word	0x080067e8
 8000808:	0800680c 	.word	0x0800680c
 800080c:	08006830 	.word	0x08006830
 8000810:	200007d5 	.word	0x200007d5
 8000814:	200007d8 	.word	0x200007d8
 8000818:	08006858 	.word	0x08006858
 800081c:	48000400 	.word	0x48000400
 8000820:	48000800 	.word	0x48000800
 8000824:	0800686c 	.word	0x0800686c
 8000828:	0800687c 	.word	0x0800687c
 800082c:	08006898 	.word	0x08006898
 8000830:	080068b8 	.word	0x080068b8
 8000834:	080068d8 	.word	0x080068d8
 8000838:	080068f4 	.word	0x080068f4

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b096      	sub	sp, #88	; 0x58
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2244      	movs	r2, #68	; 0x44
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f005 facc 	bl	8005de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000862:	f001 ff4b 	bl	80026fc <HAL_PWREx_ControlVoltageScaling>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800086c:	f000 fc04 	bl	8001078 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000870:	f001 ff26 	bl	80026c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <SystemClock_Config+0xc0>)
 8000876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800087a:	4a20      	ldr	r2, [pc, #128]	; (80008fc <SystemClock_Config+0xc0>)
 800087c:	f023 0318 	bic.w	r3, r3, #24
 8000880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000884:	2314      	movs	r3, #20
 8000886:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000894:	2360      	movs	r3, #96	; 0x60
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800089c:	2301      	movs	r3, #1
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008a4:	2328      	movs	r3, #40	; 0x28
 80008a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a8:	2307      	movs	r3, #7
 80008aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 f841 	bl	8002940 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008c4:	f000 fbd8 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2303      	movs	r3, #3
 80008ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	2104      	movs	r1, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 fc09 	bl	80030f8 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008ec:	f000 fbc4 	bl	8001078 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008f0:	f003 f910 	bl	8003b14 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008f4:	bf00      	nop
 80008f6:	3758      	adds	r7, #88	; 0x58
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000

08000900 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <MX_DFSDM1_Init+0x6c>)
 8000908:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_DFSDM1_Init+0x68>)
 800090c:	2201      	movs	r2, #1
 800090e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000918:	2202      	movs	r2, #2
 800091a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_DFSDM1_Init+0x68>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_DFSDM1_Init+0x68>)
 800092a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000938:	2204      	movs	r2, #4
 800093a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_DFSDM1_Init+0x68>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000944:	2201      	movs	r2, #1
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_DFSDM1_Init+0x68>)
 800094a:	2200      	movs	r2, #0
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_DFSDM1_Init+0x68>)
 8000956:	f001 f8c5 	bl	8001ae4 <HAL_DFSDM_ChannelInit>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000960:	f000 fb8a 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000008c 	.word	0x2000008c
 800096c:	40016020 	.word	0x40016020

08000970 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_I2C2_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_I2C2_Init+0x74>)
 800097c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000980:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_I2C2_Init+0x74>)
 800098a:	2201      	movs	r2, #1
 800098c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_I2C2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009ae:	f001 fc19 	bl	80021e4 <HAL_I2C_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009b8:	f000 fb5e 	bl	8001078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009c0:	f001 fc9f 	bl	8002302 <HAL_I2CEx_ConfigAnalogFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80009ca:	f000 fb55 	bl	8001078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009d2:	f001 fce1 	bl	8002398 <HAL_I2CEx_ConfigDigitalFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80009dc:	f000 fb4c 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000c4 	.word	0x200000c4
 80009e8:	40005800 	.word	0x40005800

080009ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_QUADSPI_Init+0x44>)
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <MX_QUADSPI_Init+0x48>)
 80009f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_QUADSPI_Init+0x44>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_QUADSPI_Init+0x44>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a04:	2210      	movs	r2, #16
 8000a06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a0a:	2217      	movs	r2, #23
 8000a0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_QUADSPI_Init+0x44>)
 8000a1c:	f001 fed4 	bl	80027c8 <HAL_QSPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a26:	f000 fb27 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000118 	.word	0x20000118
 8000a34:	a0001000 	.word	0xa0001000

08000a38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <MX_SPI3_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a86:	2207      	movs	r2, #7
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a92:	2208      	movs	r2, #8
 8000a94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_SPI3_Init+0x74>)
 8000a98:	f003 fa1e 	bl	8003ed8 <HAL_SPI_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000aa2:	f000 fae9 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000015c 	.word	0x2000015c
 8000ab0:	40003c00 	.word	0x40003c00

08000ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_USART1_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af8:	f003 fa91 	bl	800401e <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f000 fab9 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001c0 	.word	0x200001c0
 8000b10:	40013800 	.word	0x40013800

08000b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b1a:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <MX_USART3_UART_Init+0x5c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b58:	f003 fa61 	bl	800401e <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b62:	f000 fa89 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000244 	.word	0x20000244
 8000b70:	40004800 	.word	0x40004800

08000b74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b82:	2206      	movs	r2, #6
 8000b84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	f001 fc3a 	bl	8002430 <HAL_PCD_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f000 fa59 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200002c8 	.word	0x200002c8

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	4bbd      	ldr	r3, [pc, #756]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4abc      	ldr	r2, [pc, #752]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4bba      	ldr	r3, [pc, #744]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4bb7      	ldr	r3, [pc, #732]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4ab6      	ldr	r2, [pc, #728]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4bb4      	ldr	r3, [pc, #720]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4bb1      	ldr	r3, [pc, #708]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4ab0      	ldr	r2, [pc, #704]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4bae      	ldr	r3, [pc, #696]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4bab      	ldr	r3, [pc, #684]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4aaa      	ldr	r2, [pc, #680]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4ba8      	ldr	r3, [pc, #672]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	4ba5      	ldr	r3, [pc, #660]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4aa4      	ldr	r2, [pc, #656]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4ba2      	ldr	r3, [pc, #648]	; (8000edc <MX_GPIO_Init+0x30c>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c64:	489e      	ldr	r0, [pc, #632]	; (8000ee0 <MX_GPIO_Init+0x310>)
 8000c66:	f001 fa73 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f001 fa6c 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c7e:	4899      	ldr	r0, [pc, #612]	; (8000ee4 <MX_GPIO_Init+0x314>)
 8000c80:	f001 fa66 	bl	8002150 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c8a:	4897      	ldr	r0, [pc, #604]	; (8000ee8 <MX_GPIO_Init+0x318>)
 8000c8c:	f001 fa60 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4894      	ldr	r0, [pc, #592]	; (8000ee8 <MX_GPIO_Init+0x318>)
 8000c98:	f001 fa5a 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ca2:	4892      	ldr	r0, [pc, #584]	; (8000eec <MX_GPIO_Init+0x31c>)
 8000ca4:	f001 fa54 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2120      	movs	r1, #32
 8000cac:	488d      	ldr	r0, [pc, #564]	; (8000ee4 <MX_GPIO_Init+0x314>)
 8000cae:	f001 fa4f 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	488a      	ldr	r0, [pc, #552]	; (8000ee0 <MX_GPIO_Init+0x310>)
 8000cb8:	f001 fa4a 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cbc:	f240 1315 	movw	r3, #277	; 0x115
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4882      	ldr	r0, [pc, #520]	; (8000ee0 <MX_GPIO_Init+0x310>)
 8000cd6:	f001 f891 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000cda:	236a      	movs	r3, #106	; 0x6a
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	487c      	ldr	r0, [pc, #496]	; (8000ee0 <MX_GPIO_Init+0x310>)
 8000cf0:	f001 f884 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4878      	ldr	r0, [pc, #480]	; (8000eec <MX_GPIO_Init+0x31c>)
 8000d0c:	f001 f876 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d10:	233f      	movs	r3, #63	; 0x3f
 8000d12:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d14:	230b      	movs	r3, #11
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4872      	ldr	r0, [pc, #456]	; (8000eec <MX_GPIO_Init+0x31c>)
 8000d24:	f001 f86a 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f001 f859 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d4a:	f248 1304 	movw	r3, #33028	; 0x8104
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f001 f849 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f001 f838 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d90:	230b      	movs	r3, #11
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f001 f82b 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000da6:	23e0      	movs	r3, #224	; 0xe0
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db6:	2305      	movs	r3, #5
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc4:	f001 f81a 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4841      	ldr	r0, [pc, #260]	; (8000ee4 <MX_GPIO_Init+0x314>)
 8000dde:	f001 f80d 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000de6:	230b      	movs	r3, #11
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	483b      	ldr	r0, [pc, #236]	; (8000ee4 <MX_GPIO_Init+0x314>)
 8000df6:	f001 f801 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dfa:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000dfe:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4834      	ldr	r0, [pc, #208]	; (8000ee4 <MX_GPIO_Init+0x314>)
 8000e14:	f000 fff2 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e18:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e1c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	482e      	ldr	r0, [pc, #184]	; (8000ee8 <MX_GPIO_Init+0x318>)
 8000e30:	f000 ffe4 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e34:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4826      	ldr	r0, [pc, #152]	; (8000ee8 <MX_GPIO_Init+0x318>)
 8000e4e:	f000 ffd5 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e52:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4820      	ldr	r0, [pc, #128]	; (8000eec <MX_GPIO_Init+0x31c>)
 8000e6c:	f000 ffc6 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4819      	ldr	r0, [pc, #100]	; (8000eec <MX_GPIO_Init+0x31c>)
 8000e88:	f000 ffb8 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <MX_GPIO_Init+0x318>)
 8000ea8:	f000 ffa8 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000eac:	2378      	movs	r3, #120	; 0x78
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <MX_GPIO_Init+0x318>)
 8000ec8:	f000 ff98 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ecc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed2:	2312      	movs	r3, #18
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e00a      	b.n	8000ef0 <MX_GPIO_Init+0x320>
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48001000 	.word	0x48001000
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	48000c00 	.word	0x48000c00
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <MX_GPIO_Init+0x360>)
 8000f02:	f000 ff7b 	bl	8001dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2017      	movs	r0, #23
 8000f0c:	f000 fdb3 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f10:	2017      	movs	r0, #23
 8000f12:	f000 fdcc 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	2028      	movs	r0, #40	; 0x28
 8000f1c:	f000 fdab 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f20:	2028      	movs	r0, #40	; 0x28
 8000f22:	f000 fdc4 	bl	8001aae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	48000400 	.word	0x48000400

08000f34 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	 if(huart1.Instance == USART1)
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_UART_TxCpltCallback+0x24>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_UART_TxCpltCallback+0x28>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d102      	bne.n	8000f4c <HAL_UART_TxCpltCallback+0x18>
	 {
		 tx_flag = 1;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_UART_TxCpltCallback+0x2c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
	 }
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	200001c0 	.word	0x200001c0
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	200007d4 	.word	0x200007d4

08000f64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	 if(huart1.Instance == USART1)
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_UART_RxCpltCallback+0x24>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_UART_RxCpltCallback+0x28>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d102      	bne.n	8000f7c <HAL_UART_RxCpltCallback+0x18>
	 {
		 rx_flag = 1;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_UART_RxCpltCallback+0x2c>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
	 }
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	200001c0 	.word	0x200001c0
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	200007d5 	.word	0x200007d5

08000f94 <numOnes>:

uint32_t numOnes(uint32_t a) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    uint32_t count;

    __ASM volatile (
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0

08000fa2 <loop_start>:
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <loop_done>
 8000fa6:	f003 0001 	and.w	r0, r3, #1
 8000faa:	4402      	add	r2, r0
 8000fac:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000fb0:	e7f7      	b.n	8000fa2 <loop_start>

08000fb2 <loop_done>:
 8000fb2:	60fa      	str	r2, [r7, #12]
 8000fb4:	607b      	str	r3, [r7, #4]
        : [count] "=r" (count), [a] "+r" (a)
        :
        : "r0"
    );

    return count;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin)
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fd4:	d110      	bne.n	8000ff8 <HAL_GPIO_EXTI_Callback+0x34>
	{
        char data[] = "Blue button pressed\r\n";
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000fd8:	f107 0408 	add.w	r4, r7, #8
 8000fdc:	461d      	mov	r5, r3
 8000fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fe6:	6020      	str	r0, [r4, #0]
 8000fe8:	3404      	adds	r4, #4
 8000fea:	8021      	strh	r1, [r4, #0]
        logMsg(&huart1, data);
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <HAL_GPIO_EXTI_Callback+0x40>)
 8000ff4:	f7ff fad6 	bl	80005a4 <logMsg>
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	08006914 	.word	0x08006914
 8001004:	200001c0 	.word	0x200001c0

08001008 <myDisableIntr>:

void myDisableIntr(uint32_t IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	// Set the corresponding bit in the NVIC ICER (Interrupt Clear-Enable Register)
	NVIC->ICER[IRQn >> 5] = (1 << (IRQn & 0x1F));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	2201      	movs	r2, #1
 8001018:	fa02 f103 	lsl.w	r1, r2, r3
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <myDisableIntr+0x2c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	3320      	adds	r3, #32
 8001024:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100

08001038 <myEnableIntr>:

void myEnableIntr(uint32_t IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// Set the corresponding bit in the NVIC ISER (Interrupt Set-Enable Register)
	NVIC->ISER[IRQn >> 5] = (1 << (IRQn & 0x1F));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	2201      	movs	r2, #1
 8001048:	fa02 f103 	lsl.w	r1, r2, r3
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <myEnableIntr+0x2c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	095b      	lsrs	r3, r3, #5
 8001052:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <myDisableAllIntr>:

void myDisableAllIntr(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	__ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x44>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x44>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x44>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x44>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x44>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x44>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ac      	sub	sp, #176	; 0xb0
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2288      	movs	r2, #136	; 0x88
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 fe7b 	bl	8005de8 <memset>
  if(DFSDM1_Init == 0)
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d142      	bne.n	8001180 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fa18 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001116:	f7ff ffaf 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001124:	6613      	str	r3, [r2, #96]	; 0x60
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a15      	ldr	r2, [pc, #84]	; (800118c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800114a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001164:	2306      	movs	r3, #6
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800116a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800116e:	4619      	mov	r1, r3
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001172:	f000 fe43 	bl	8001dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a02      	ldr	r2, [pc, #8]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800117e:	6013      	str	r3, [r2, #0]
  }

}
 8001180:	bf00      	nop
 8001182:	37b0      	adds	r7, #176	; 0xb0
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200007dc 	.word	0x200007dc
 800118c:	40021000 	.word	0x40021000
 8001190:	48001000 	.word	0x48001000

08001194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0ac      	sub	sp, #176	; 0xb0
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2288      	movs	r2, #136	; 0x88
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fe17 	bl	8005de8 <memset>
  if(hi2c->Instance==I2C2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a21      	ldr	r2, [pc, #132]	; (8001244 <HAL_I2C_MspInit+0xb0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d13b      	bne.n	800123c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 f9b5 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011dc:	f7ff ff4c 	bl	8001078 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_I2C_MspInit+0xb4>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	4a18      	ldr	r2, [pc, #96]	; (8001248 <HAL_I2C_MspInit+0xb4>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_I2C_MspInit+0xb4>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001200:	2312      	movs	r3, #18
 8001202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001206:	2301      	movs	r3, #1
 8001208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001212:	2304      	movs	r3, #4
 8001214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800121c:	4619      	mov	r1, r3
 800121e:	480b      	ldr	r0, [pc, #44]	; (800124c <HAL_I2C_MspInit+0xb8>)
 8001220:	f000 fdec 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_I2C_MspInit+0xb4>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_I2C_MspInit+0xb4>)
 800122a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800122e:	6593      	str	r3, [r2, #88]	; 0x58
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_I2C_MspInit+0xb4>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	37b0      	adds	r7, #176	; 0xb0
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40005800 	.word	0x40005800
 8001248:	40021000 	.word	0x40021000
 800124c:	48000400 	.word	0x48000400

08001250 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_QSPI_MspInit+0x7c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d128      	bne.n	80012c4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_QSPI_MspInit+0x80>)
 8001274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <HAL_QSPI_MspInit+0x80>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6513      	str	r3, [r2, #80]	; 0x50
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_QSPI_MspInit+0x80>)
 8001280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_QSPI_MspInit+0x80>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <HAL_QSPI_MspInit+0x80>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_QSPI_MspInit+0x80>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012a2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80012a6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012b4:	230a      	movs	r3, #10
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_QSPI_MspInit+0x84>)
 80012c0:	f000 fd9c 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	a0001000 	.word	0xa0001000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48001000 	.word	0x48001000

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_SPI_MspInit+0x7c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_SPI_MspInit+0x80>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <HAL_SPI_MspInit+0x80>)
 8001300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001304:	6593      	str	r3, [r2, #88]	; 0x58
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_SPI_MspInit+0x80>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_SPI_MspInit+0x80>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <HAL_SPI_MspInit+0x80>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_SPI_MspInit+0x80>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800132a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800133c:	2306      	movs	r3, #6
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_SPI_MspInit+0x84>)
 8001348:	f000 fd58 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40003c00 	.word	0x40003c00
 8001358:	40021000 	.word	0x40021000
 800135c:	48000800 	.word	0x48000800

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ae      	sub	sp, #184	; 0xb8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	2288      	movs	r2, #136	; 0x88
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fd31 	bl	8005de8 <memset>
  if(huart->Instance==USART1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d143      	bne.n	8001418 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001390:	2301      	movs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001394:	2300      	movs	r3, #0
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4618      	mov	r0, r3
 800139e:	f002 f8cf 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013a8:	f7ff fe66 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ac:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	4a3d      	ldr	r2, [pc, #244]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b6:	6613      	str	r3, [r2, #96]	; 0x60
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	4a37      	ldr	r2, [pc, #220]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80013dc:	23c0      	movs	r3, #192	; 0xc0
 80013de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f4:	2307      	movs	r3, #7
 80013f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013fe:	4619      	mov	r1, r3
 8001400:	482a      	ldr	r0, [pc, #168]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001402:	f000 fcfb 	bl	8001dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2025      	movs	r0, #37	; 0x25
 800140c:	f000 fb33 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001410:	2025      	movs	r0, #37	; 0x25
 8001412:	f000 fb4c 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001416:	e040      	b.n	800149a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_UART_MspInit+0x150>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d13b      	bne.n	800149a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001422:	2304      	movs	r3, #4
 8001424:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4618      	mov	r0, r3
 8001430:	f002 f886 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800143a:	f7ff fe1d 	bl	8001078 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_UART_MspInit+0x148>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_UART_MspInit+0x148>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_UART_MspInit+0x148>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_UART_MspInit+0x148>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_UART_MspInit+0x148>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0x148>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001492:	4619      	mov	r1, r3
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <HAL_UART_MspInit+0x154>)
 8001496:	f000 fcb1 	bl	8001dfc <HAL_GPIO_Init>
}
 800149a:	bf00      	nop
 800149c:	37b8      	adds	r7, #184	; 0xb8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400
 80014b0:	40004800 	.word	0x40004800
 80014b4:	48000c00 	.word	0x48000c00

080014b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0ac      	sub	sp, #176	; 0xb0
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2288      	movs	r2, #136	; 0x88
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 fc85 	bl	8005de8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e6:	d17c      	bne.n	80015e2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014fe:	2318      	movs	r3, #24
 8001500:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001502:	2307      	movs	r3, #7
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800150a:	2302      	movs	r3, #2
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800150e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4618      	mov	r0, r3
 800151a:	f002 f811 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001524:	f7ff fda8 	bl	8001078 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <HAL_PCD_MspInit+0x134>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <HAL_PCD_MspInit+0x134>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_PCD_MspInit+0x134>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f000 fc4d 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001562:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800157c:	230a      	movs	r3, #10
 800157e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158c:	f000 fc36 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_PCD_MspInit+0x134>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	4a15      	ldr	r2, [pc, #84]	; (80015ec <HAL_PCD_MspInit+0x134>)
 8001596:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800159a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_PCD_MspInit+0x134>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_PCD_MspInit+0x134>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d114      	bne.n	80015de <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_PCD_MspInit+0x134>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b8:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <HAL_PCD_MspInit+0x134>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015be:	6593      	str	r3, [r2, #88]	; 0x58
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_PCD_MspInit+0x134>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80015cc:	f001 f8ec 	bl	80027a8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_PCD_MspInit+0x134>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	4a05      	ldr	r2, [pc, #20]	; (80015ec <HAL_PCD_MspInit+0x134>)
 80015d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015da:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015dc:	e001      	b.n	80015e2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80015de:	f001 f8e3 	bl	80027a8 <HAL_PWREx_EnableVddUSB>
}
 80015e2:	bf00      	nop
 80015e4:	37b0      	adds	r7, #176	; 0xb0
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f8fc 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001648:	2020      	movs	r0, #32
 800164a:	f000 fdb3 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800164e:	2040      	movs	r0, #64	; 0x40
 8001650:	f000 fdb0 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001654:	2080      	movs	r0, #128	; 0x80
 8001656:	f000 fdad 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800165a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800165e:	f000 fda9 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <USART1_IRQHandler+0x10>)
 800166e:	f002 fde9 	bl	8004244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200001c0 	.word	0x200001c0

0800167c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001680:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001684:	f000 fd96 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001688:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800168c:	f000 fd92 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001690:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001694:	f000 fd8e 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800169c:	f000 fd8a 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80016a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016a4:	f000 fd86 	bl	80021b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f004 fb5a 	bl	8005d94 <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20018000 	.word	0x20018000
 800170c:	00000400 	.word	0x00000400
 8001710:	200007e0 	.word	0x200007e0
 8001714:	20000820 	.word	0x20000820

08001718 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001774 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001740:	f7ff ffea 	bl	8001718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <LoopForever+0x6>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <LoopForever+0xe>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <LoopForever+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f004 fb19 	bl	8005da0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176e:	f7fe ff4d 	bl	800060c <main>

08001772 <LoopForever>:

LoopForever:
    b LoopForever
 8001772:	e7fe      	b.n	8001772 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001774:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001780:	080069b8 	.word	0x080069b8
  ldr r2, =_sbss
 8001784:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001788:	2000081c 	.word	0x2000081c

0800178c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>

0800178e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f961 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f80e 	bl	80017c0 <HAL_InitTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	e001      	b.n	80017b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b0:	f7ff fc68 	bl	8001084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_InitTick+0x6c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_InitTick+0x70>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_InitTick+0x6c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f96d 	bl	8001aca <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d809      	bhi.n	8001810 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f937 	bl	8001a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_InitTick+0x74>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e007      	b.n	8001820 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e004      	b.n	8001820 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e001      	b.n	8001820 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008
 800185c:	200007e4 	.word	0x200007e4

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	200007e4 	.word	0x200007e4

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0ac      	b.n	8001c50 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f8b2 	bl	8001c64 <DFSDM_GetChannelFromInstance>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a55      	ldr	r2, [pc, #340]	; (8001c58 <HAL_DFSDM_ChannelInit+0x174>)
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e09f      	b.n	8001c50 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fadb 	bl	80010cc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001b16:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <HAL_DFSDM_ChannelInit+0x178>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <HAL_DFSDM_ChannelInit+0x178>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_DFSDM_ChannelInit+0x178>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d125      	bne.n	8001b74 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b32:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4948      	ldr	r1, [pc, #288]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a46      	ldr	r2, [pc, #280]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b48:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001b4c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d108      	bne.n	8001b68 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	493f      	ldr	r1, [pc, #252]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b68:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b72:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b82:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b92:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b98:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 020f 	bic.w	r2, r2, #15
 8001bb0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001bd8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	3b01      	subs	r3, #1
 8001bea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f002 0207 	and.w	r2, r2, #7
 8001c04:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c30:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f810 	bl	8001c64 <DFSDM_GetChannelFromInstance>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4904      	ldr	r1, [pc, #16]	; (8001c58 <HAL_DFSDM_ChannelInit+0x174>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200007ec 	.word	0x200007ec
 8001c5c:	200007e8 	.word	0x200007e8
 8001c60:	40016000 	.word	0x40016000

08001c64 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d102      	bne.n	8001c7a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e02b      	b.n	8001cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <DFSDM_GetChannelFromInstance+0x80>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d102      	bne.n	8001c88 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e024      	b.n	8001cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <DFSDM_GetChannelFromInstance+0x84>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d102      	bne.n	8001c96 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001c90:	2302      	movs	r3, #2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e01d      	b.n	8001cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <DFSDM_GetChannelFromInstance+0x88>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d102      	bne.n	8001ca4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e016      	b.n	8001cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d102      	bne.n	8001cb2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001cac:	2305      	movs	r3, #5
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e00f      	b.n	8001cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <DFSDM_GetChannelFromInstance+0x90>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d102      	bne.n	8001cc0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001cba:	2306      	movs	r3, #6
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e008      	b.n	8001cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <DFSDM_GetChannelFromInstance+0x94>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d102      	bne.n	8001cce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e001      	b.n	8001cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40016000 	.word	0x40016000
 8001ce4:	40016020 	.word	0x40016020
 8001ce8:	40016040 	.word	0x40016040
 8001cec:	40016080 	.word	0x40016080
 8001cf0:	400160a0 	.word	0x400160a0
 8001cf4:	400160c0 	.word	0x400160c0
 8001cf8:	400160e0 	.word	0x400160e0

08001cfc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2204      	movs	r2, #4
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e022      	b.n	8001d6c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 020e 	bic.w	r2, r2, #14
 8001d34:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f003 021c 	and.w	r2, r3, #28
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d005      	beq.n	8001d9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2204      	movs	r2, #4
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	e029      	b.n	8001df0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 020e 	bic.w	r2, r2, #14
 8001daa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f003 021c 	and.w	r2, r3, #28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	2101      	movs	r1, #1
 8001dca:	fa01 f202 	lsl.w	r2, r1, r2
 8001dce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
    }
  }
  return status;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e17f      	b.n	800210c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8171 	beq.w	8002106 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x40>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d118      	bne.n	8001edc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80ac 	beq.w	8002106 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	4a5e      	ldr	r2, [pc, #376]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc6:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <HAL_GPIO_Init+0x334>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff0:	d025      	beq.n	800203e <HAL_GPIO_Init+0x242>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4f      	ldr	r2, [pc, #316]	; (8002134 <HAL_GPIO_Init+0x338>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <HAL_GPIO_Init+0x23e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4e      	ldr	r2, [pc, #312]	; (8002138 <HAL_GPIO_Init+0x33c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x23a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4d      	ldr	r2, [pc, #308]	; (800213c <HAL_GPIO_Init+0x340>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x236>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x344>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x232>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4b      	ldr	r2, [pc, #300]	; (8002144 <HAL_GPIO_Init+0x348>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x22e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <HAL_GPIO_Init+0x34c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x22a>
 8002022:	2306      	movs	r3, #6
 8002024:	e00c      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002026:	2307      	movs	r3, #7
 8002028:	e00a      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800202a:	2305      	movs	r3, #5
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800202e:	2304      	movs	r3, #4
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800203e:	2300      	movs	r3, #0
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002050:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_GPIO_Init+0x334>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_GPIO_Init+0x350>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002082:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_GPIO_Init+0x350>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_GPIO_Init+0x350>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <HAL_GPIO_Init+0x350>)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_GPIO_Init+0x350>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_GPIO_Init+0x350>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_GPIO_Init+0x350>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <HAL_GPIO_Init+0x350>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	f47f ae78 	bne.w	8001e0c <HAL_GPIO_Init+0x10>
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40010000 	.word	0x40010000
 8002134:	48000400 	.word	0x48000400
 8002138:	48000800 	.word	0x48000800
 800213c:	48000c00 	.word	0x48000c00
 8002140:	48001000 	.word	0x48001000
 8002144:	48001400 	.word	0x48001400
 8002148:	48001800 	.word	0x48001800
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800216c:	e002      	b.n	8002174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43d9      	mvns	r1, r3
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	400b      	ands	r3, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	619a      	str	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ca:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fef6 	bl	8000fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40010400 	.word	0x40010400

080021e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e081      	b.n	80022fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe ffc2 	bl	8001194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	; 0x24
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e006      	b.n	800226c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800226a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d104      	bne.n	800227e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800228c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b20      	cmp	r3, #32
 8002316:	d138      	bne.n	800238a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002322:	2302      	movs	r3, #2
 8002324:	e032      	b.n	800238c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2224      	movs	r2, #36	; 0x24
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002354:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800238a:	2302      	movs	r3, #2
  }
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d139      	bne.n	8002422 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e033      	b.n	8002424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	; 0x24
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	b08f      	sub	sp, #60	; 0x3c
 8002434:	af0a      	add	r7, sp, #40	; 0x28
 8002436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e116      	b.n	8002670 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff f82b 	bl	80014b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f003 f9fe 	bl	8005882 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	687e      	ldr	r6, [r7, #4]
 800248e:	466d      	mov	r5, sp
 8002490:	f106 0410 	add.w	r4, r6, #16
 8002494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a4:	1d33      	adds	r3, r6, #4
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	6838      	ldr	r0, [r7, #0]
 80024aa:	f003 f9be 	bl	800582a <USB_CoreInit>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0d7      	b.n	8002670 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 f9ec 	bl	80058a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e04a      	b.n	8002568 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	333d      	adds	r3, #61	; 0x3d
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	333c      	adds	r3, #60	; 0x3c
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	b298      	uxth	r0, r3
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3344      	adds	r3, #68	; 0x44
 800250e:	4602      	mov	r2, r0
 8002510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3348      	adds	r3, #72	; 0x48
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	334c      	adds	r3, #76	; 0x4c
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3354      	adds	r3, #84	; 0x54
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	3301      	adds	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	d3af      	bcc.n	80024d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e044      	b.n	8002602 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d3b5      	bcc.n	8002578 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	687e      	ldr	r6, [r7, #4]
 8002614:	466d      	mov	r5, sp
 8002616:	f106 0410 	add.w	r4, r6, #16
 800261a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002626:	e885 0003 	stmia.w	r5, {r0, r1}
 800262a:	1d33      	adds	r3, r6, #4
 800262c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262e:	6838      	ldr	r0, [r7, #0]
 8002630:	f003 f984 	bl	800593c <USB_DevInit>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e014      	b.n	8002670 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f80a 	bl	8002678 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fb30 	bl	8005cce <USB_DevDisconnect>

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002678 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	f043 0303 	orr.w	r3, r3, #3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40007000 	.word	0x40007000

080026e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40007000 	.word	0x40007000

080026fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270a:	d130      	bne.n	800276e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002718:	d038      	beq.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2232      	movs	r2, #50	; 0x32
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0c9b      	lsrs	r3, r3, #18
 800273c:	3301      	adds	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002740:	e002      	b.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3b01      	subs	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d102      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f2      	bne.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d110      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e00f      	b.n	800278e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d007      	beq.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000
 80027a0:	20000000 	.word	0x20000000
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b6:	6053      	str	r3, [r2, #4]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40007000 	.word	0x40007000

080027c8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80027d0:	f7ff f846 	bl	8001860 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e063      	b.n	80028a8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fe fd2b 	bl	8001250 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80027fa:	f241 3188 	movw	r1, #5000	; 0x1388
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f858 	bl	80028b4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	3b01      	subs	r3, #1
 8002814:	021a      	lsls	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	2120      	movs	r1, #32
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f850 	bl	80028d0 <QSPI_WaitFlagStateUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d131      	bne.n	800289e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002844:	f023 0310 	bic.w	r3, r3, #16
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6852      	ldr	r2, [r2, #4]
 800284c:	0611      	lsls	r1, r2, #24
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68d2      	ldr	r2, [r2, #12]
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	430b      	orrs	r3, r1
 800285a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_QSPI_Init+0xe8>)
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6912      	ldr	r2, [r2, #16]
 800286a:	0411      	lsls	r1, r2, #16
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6952      	ldr	r2, [r2, #20]
 8002870:	4311      	orrs	r1, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6992      	ldr	r2, [r2, #24]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80028a6:	7afb      	ldrb	r3, [r7, #11]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	ffe0f8fe 	.word	0xffe0f8fe

080028b4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80028e0:	e01a      	b.n	8002918 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d016      	beq.n	8002918 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7fe ffb9 	bl	8001860 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10b      	bne.n	8002918 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2204      	movs	r2, #4
 8002904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e00e      	b.n	8002936 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	429a      	cmp	r2, r3
 8002932:	d1d6      	bne.n	80028e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e3ca      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002952:	4b97      	ldr	r3, [pc, #604]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295c:	4b94      	ldr	r3, [pc, #592]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80e4 	beq.w	8002b3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_RCC_OscConfig+0x4a>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	f040 808b 	bne.w	8002a98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 8087 	bne.w	8002a98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800298a:	4b89      	ldr	r3, [pc, #548]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e3a2      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1a      	ldr	r2, [r3, #32]
 80029a6:	4b82      	ldr	r3, [pc, #520]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <HAL_RCC_OscConfig+0x7c>
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ba:	e005      	b.n	80029c8 <HAL_RCC_OscConfig+0x88>
 80029bc:	4b7c      	ldr	r3, [pc, #496]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d223      	bcs.n	8002a14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fd55 	bl	8003480 <RCC_SetFlashLatencyFromMSIRange>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e383      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e0:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a72      	ldr	r2, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b70      	ldr	r3, [pc, #448]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	496d      	ldr	r1, [pc, #436]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fe:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	4968      	ldr	r1, [pc, #416]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
 8002a12:	e025      	b.n	8002a60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	4b66      	ldr	r3, [pc, #408]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a65      	ldr	r2, [pc, #404]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4960      	ldr	r1, [pc, #384]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	495b      	ldr	r1, [pc, #364]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fd15 	bl	8003480 <RCC_SetFlashLatencyFromMSIRange>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e343      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a60:	f000 fc4a 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	4950      	ldr	r1, [pc, #320]	; (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	4a4e      	ldr	r2, [pc, #312]	; (8002bb8 <HAL_RCC_OscConfig+0x278>)
 8002a7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a80:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fe9b 	bl	80017c0 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d052      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	e327      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d032      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fed8 	bl	8001860 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab4:	f7fe fed4 	bl	8001860 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e310      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a36      	ldr	r2, [pc, #216]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4931      	ldr	r1, [pc, #196]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af0:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	492c      	ldr	r1, [pc, #176]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e01a      	b.n	8002b3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b12:	f7fe fea5 	bl	8001860 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fea1 	bl	8001860 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e2dd      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x1da>
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d074      	beq.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x21a>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b0c      	cmp	r3, #12
 8002b52:	d10e      	bne.n	8002b72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d10b      	bne.n	8002b72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d064      	beq.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d160      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e2ba      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x24a>
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x298>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b92:	d115      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x280>
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a02      	ldr	r2, [pc, #8]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e014      	b.n	8002bd8 <HAL_RCC_OscConfig+0x298>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	0800692c 	.word	0x0800692c
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	4ba0      	ldr	r3, [pc, #640]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a9f      	ldr	r2, [pc, #636]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b9d      	ldr	r3, [pc, #628]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a9c      	ldr	r2, [pc, #624]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fe3e 	bl	8001860 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe fe3a 	bl	8001860 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e276      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	4b92      	ldr	r3, [pc, #584]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x2a8>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fe2a 	bl	8001860 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fe26 	bl	8001860 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e262      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x2d0>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d060      	beq.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x310>
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d119      	bne.n	8002c7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d116      	bne.n	8002c7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c50:	4b7c      	ldr	r3, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_OscConfig+0x328>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e23f      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4973      	ldr	r1, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7c:	e040      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d023      	beq.n	8002cce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c86:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fde5 	bl	8001860 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7fe fde1 	bl	8001860 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e21d      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cac:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	495f      	ldr	r1, [pc, #380]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
 8002ccc:	e018      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cce:	4b5d      	ldr	r3, [pc, #372]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5c      	ldr	r2, [pc, #368]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fe fdc1 	bl	8001860 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe fdbd 	bl	8001860 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1f9      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf4:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d03c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01c      	beq.n	8002d4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d14:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fd9c 	bl	8001860 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fd98 	bl	8001860 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1d4      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3e:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ef      	beq.n	8002d2c <HAL_RCC_OscConfig+0x3ec>
 8002d4c:	e01b      	b.n	8002d86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d54:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fd7f 	bl	8001860 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe fd7b 	bl	8001860 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1b7      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ef      	bne.n	8002d66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80a6 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d98:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6593      	str	r3, [r2, #88]	; 0x58
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_RCC_OscConfig+0x508>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d118      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_RCC_OscConfig+0x508>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_RCC_OscConfig+0x508>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fd42 	bl	8001860 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fe fd3e 	bl	8001860 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e17a      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_RCC_OscConfig+0x508>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4d8>
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e16:	e029      	b.n	8002e6c <HAL_RCC_OscConfig+0x52c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d115      	bne.n	8002e4c <HAL_RCC_OscConfig+0x50c>
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x52c>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	4b9c      	ldr	r3, [pc, #624]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	4a9b      	ldr	r2, [pc, #620]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e5c:	4b98      	ldr	r3, [pc, #608]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	4a97      	ldr	r2, [pc, #604]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d016      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe fcf4 	bl	8001860 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fcf0 	bl	8001860 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e12a      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e92:	4b8b      	ldr	r3, [pc, #556]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ed      	beq.n	8002e7c <HAL_RCC_OscConfig+0x53c>
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fcdd 	bl	8001860 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe fcd9 	bl	8001860 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e113      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ec0:	4b7f      	ldr	r3, [pc, #508]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1ed      	bne.n	8002eaa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b7a      	ldr	r3, [pc, #488]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	4a79      	ldr	r2, [pc, #484]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80fe 	beq.w	80030e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	f040 80d0 	bne.w	8003094 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ef4:	4b72      	ldr	r3, [pc, #456]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d130      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	3b01      	subs	r3, #1
 8002f14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d127      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11f      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f34:	2a07      	cmp	r2, #7
 8002f36:	bf14      	ite	ne
 8002f38:	2201      	movne	r2, #1
 8002f3a:	2200      	moveq	r2, #0
 8002f3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d113      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d109      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d06e      	beq.n	8003048 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	d069      	beq.n	8003044 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0ad      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f98:	f7fe fc62 	bl	8001860 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fc5e 	bl	8001860 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e09a      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb2:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbe:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <HAL_RCC_OscConfig+0x784>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fce:	3a01      	subs	r2, #1
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	4311      	orrs	r1, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd8:	0212      	lsls	r2, r2, #8
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0552      	lsls	r2, r2, #21
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fec:	0852      	lsrs	r2, r2, #1
 8002fee:	3a01      	subs	r2, #1
 8002ff0:	0652      	lsls	r2, r2, #25
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff8:	0912      	lsrs	r2, r2, #4
 8002ffa:	0452      	lsls	r2, r2, #17
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	4930      	ldr	r1, [pc, #192]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003000:	4313      	orrs	r3, r2
 8003002:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800301c:	f7fe fc20 	bl	8001860 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fc1c 	bl	8001860 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e058      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003042:	e050      	b.n	80030e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04f      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d148      	bne.n	80030e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003060:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800306c:	f7fe fbf8 	bl	8001860 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fbf4 	bl	8001860 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e030      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x734>
 8003092:	e028      	b.n	80030e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d023      	beq.n	80030e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 80030a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fbdb 	bl	8001860 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ac:	e00c      	b.n	80030c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe fbd7 	bl	8001860 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d905      	bls.n	80030c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e013      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
 80030c0:	40021000 	.word	0x40021000
 80030c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x7b0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ec      	bne.n	80030ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x7b0>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	4905      	ldr	r1, [pc, #20]	; (80030f0 <HAL_RCC_OscConfig+0x7b0>)
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_OscConfig+0x7b4>)
 80030dc:	4013      	ands	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
 80030e0:	e001      	b.n	80030e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3720      	adds	r7, #32
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	feeefffc 	.word	0xfeeefffc

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0e7      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d910      	bls.n	800313c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b72      	ldr	r3, [pc, #456]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 0207 	bic.w	r2, r3, #7
 8003122:	4970      	ldr	r1, [pc, #448]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b6e      	ldr	r3, [pc, #440]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0cf      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	4b66      	ldr	r3, [pc, #408]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003154:	429a      	cmp	r2, r3
 8003156:	d908      	bls.n	800316a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4960      	ldr	r1, [pc, #384]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d04c      	beq.n	8003210 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	4b5a      	ldr	r3, [pc, #360]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d121      	bne.n	80031ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0a6      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003196:	4b54      	ldr	r3, [pc, #336]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d115      	bne.n	80031ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e09a      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ae:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e08e      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e086      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4943      	ldr	r1, [pc, #268]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e0:	f7fe fb3e 	bl	8001860 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe fb3a 	bl	8001860 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e06e      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003228:	429a      	cmp	r2, r3
 800322a:	d208      	bcs.n	800323e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	492b      	ldr	r1, [pc, #172]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323e:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d210      	bcs.n	800326e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 0207 	bic.w	r2, r3, #7
 8003254:	4923      	ldr	r1, [pc, #140]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e036      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4918      	ldr	r1, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4910      	ldr	r1, [pc, #64]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ac:	f000 f824 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	490b      	ldr	r1, [pc, #44]	; (80032ec <HAL_RCC_ClockConfig+0x1f4>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
 80032c8:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1f8>)
 80032ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1fc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fa75 	bl	80017c0 <HAL_InitTick>
 80032d6:	4603      	mov	r3, r0
 80032d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80032da:	7afb      	ldrb	r3, [r7, #11]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	0800692c 	.word	0x0800692c
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000004 	.word	0x20000004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003306:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d121      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11e      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003338:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e005      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d102      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e004      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d101      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800337c:	4b23      	ldr	r3, [pc, #140]	; (800340c <HAL_RCC_GetSysClockFreq+0x114>)
 800337e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d134      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0xa6>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d003      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0xac>
 800339c:	e005      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 80033a0:	617b      	str	r3, [r7, #20]
      break;
 80033a2:	e005      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_GetSysClockFreq+0x114>)
 80033a6:	617b      	str	r3, [r7, #20]
      break;
 80033a8:	e002      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	617b      	str	r3, [r7, #20]
      break;
 80033ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	3301      	adds	r3, #1
 80033bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	fb03 f202 	mul.w	r2, r3, r2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	0e5b      	lsrs	r3, r3, #25
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	3301      	adds	r3, #1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033f0:	69bb      	ldr	r3, [r7, #24]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3724      	adds	r7, #36	; 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	08006944 	.word	0x08006944
 8003408:	00f42400 	.word	0x00f42400
 800340c:	007a1200 	.word	0x007a1200

08003410 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_RCC_GetHCLKFreq+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000000 	.word	0x20000000

08003428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800342c:	f7ff fff0 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4904      	ldr	r1, [pc, #16]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	0800693c 	.word	0x0800693c

08003454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003458:	f7ff ffda 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0adb      	lsrs	r3, r3, #11
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4904      	ldr	r1, [pc, #16]	; (800347c <HAL_RCC_GetPCLK2Freq+0x28>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	0800693c 	.word	0x0800693c

08003480 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800348c:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003498:	f7ff f922 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 800349c:	6178      	str	r0, [r7, #20]
 800349e:	e014      	b.n	80034ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	4a24      	ldr	r2, [pc, #144]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6593      	str	r3, [r2, #88]	; 0x58
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034b8:	f7ff f912 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 80034bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d0:	d10b      	bne.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d919      	bls.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2ba0      	cmp	r3, #160	; 0xa0
 80034dc:	d902      	bls.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034de:	2302      	movs	r3, #2
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	e013      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e4:	2301      	movs	r3, #1
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e010      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d902      	bls.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034f0:	2303      	movs	r3, #3
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e00a      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d102      	bne.n	8003502 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034fc:	2302      	movs	r3, #2
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	e004      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b70      	cmp	r3, #112	; 0x70
 8003506:	d101      	bne.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003508:	2301      	movs	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 0207 	bic.w	r2, r3, #7
 8003514:	4909      	ldr	r1, [pc, #36]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	429a      	cmp	r2, r3
 8003528:	d001      	beq.n	800352e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	40022000 	.word	0x40022000

08003540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003548:	2300      	movs	r3, #0
 800354a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800354c:	2300      	movs	r3, #0
 800354e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003558:	2b00      	cmp	r3, #0
 800355a:	d041      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003560:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003564:	d02a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003566:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800356a:	d824      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800356c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003576:	d81e      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800357c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003580:	d010      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003582:	e018      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003584:	4b86      	ldr	r3, [pc, #536]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a85      	ldr	r2, [pc, #532]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003590:	e015      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f000 facb 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a2:	e00c      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3320      	adds	r3, #32
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fbb6 	bl	8003d1c <RCCEx_PLLSAI2_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b4:	e003      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	74fb      	strb	r3, [r7, #19]
      break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c4:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d2:	4973      	ldr	r1, [pc, #460]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035da:	e001      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d041      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035f4:	d02a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035fa:	d824      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003600:	d008      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003606:	d81e      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800360c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003610:	d010      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003612:	e018      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003614:	4b62      	ldr	r3, [pc, #392]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4a61      	ldr	r2, [pc, #388]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003620:	e015      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fa83 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003632:	e00c      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3320      	adds	r3, #32
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fb6e 	bl	8003d1c <RCCEx_PLLSAI2_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003644:	e003      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	74fb      	strb	r3, [r7, #19]
      break;
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800364c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003654:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003662:	494f      	ldr	r1, [pc, #316]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800366a:	e001      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a0 	beq.w	80037be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003692:	2300      	movs	r3, #0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	4a40      	ldr	r2, [pc, #256]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6593      	str	r3, [r2, #88]	; 0x58
 80036a4:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b4:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3a      	ldr	r2, [pc, #232]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036c0:	f7fe f8ce 	bl	8001860 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036c6:	e009      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c8:	f7fe f8ca 	bl	8001860 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d902      	bls.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	74fb      	strb	r3, [r7, #19]
        break;
 80036da:	e005      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036dc:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d15c      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036ee:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01f      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d019      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003716:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7fe f889 	bl	8001860 <HAL_GetTick>
 800374e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003750:	e00b      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe f885 	bl	8001860 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d902      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	74fb      	strb	r3, [r7, #19]
            break;
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ec      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003796:	e009      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ac:	7c7b      	ldrb	r3, [r7, #17]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b2:	4b9e      	ldr	r3, [pc, #632]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	4a9d      	ldr	r2, [pc, #628]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ca:	4b98      	ldr	r3, [pc, #608]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f023 0203 	bic.w	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	4994      	ldr	r1, [pc, #592]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ec:	4b8f      	ldr	r3, [pc, #572]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f023 020c 	bic.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	498c      	ldr	r1, [pc, #560]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800380e:	4b87      	ldr	r3, [pc, #540]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	4983      	ldr	r1, [pc, #524]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003830:	4b7e      	ldr	r3, [pc, #504]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	497b      	ldr	r1, [pc, #492]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003852:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	4972      	ldr	r1, [pc, #456]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003874:	4b6d      	ldr	r3, [pc, #436]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	496a      	ldr	r1, [pc, #424]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	4961      	ldr	r1, [pc, #388]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038b8:	4b5c      	ldr	r3, [pc, #368]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	4959      	ldr	r1, [pc, #356]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038da:	4b54      	ldr	r3, [pc, #336]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	4950      	ldr	r1, [pc, #320]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038fc:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	4948      	ldr	r1, [pc, #288]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800391e:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	493f      	ldr	r1, [pc, #252]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d028      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003940:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	4937      	ldr	r1, [pc, #220]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800395e:	d106      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003960:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396a:	60d3      	str	r3, [r2, #12]
 800396c:	e011      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003976:	d10c      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f8d8 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d028      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800399e:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	491f      	ldr	r1, [pc, #124]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039bc:	d106      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c8:	60d3      	str	r3, [r2, #12]
 80039ca:	e011      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3304      	adds	r3, #4
 80039da:	2101      	movs	r1, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f8a9 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02b      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a02      	ldr	r2, [pc, #8]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a26:	60d3      	str	r3, [r2, #12]
 8003a28:	e014      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f877 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02f      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6e:	4928      	ldr	r1, [pc, #160]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7e:	d10d      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f854 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	74bb      	strb	r3, [r7, #18]
 8003a9a:	e011      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3320      	adds	r3, #32
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f935 	bl	8003d1c <RCCEx_PLLSAI2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab6:	7cfb      	ldrb	r3, [r7, #19]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ada:	490d      	ldr	r1, [pc, #52]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afe:	4904      	ldr	r1, [pc, #16]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b06:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000

08003b14 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b1e:	f043 0304 	orr.w	r3, r3, #4
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b42:	4b75      	ldr	r3, [pc, #468]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b4e:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d10d      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
       ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b66:	4b6c      	ldr	r3, [pc, #432]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
       ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d047      	beq.n	8003c0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e044      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d018      	beq.n	8003bba <RCCEx_PLLSAI1_Config+0x86>
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d825      	bhi.n	8003bd8 <RCCEx_PLLSAI1_Config+0xa4>
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <RCCEx_PLLSAI1_Config+0x62>
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d009      	beq.n	8003ba8 <RCCEx_PLLSAI1_Config+0x74>
 8003b94:	e020      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b96:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11d      	bne.n	8003bde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba6:	e01a      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ba8:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d116      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb8:	e013      	b.n	8003be2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bba:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bc6:	4b54      	ldr	r3, [pc, #336]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bd6:	e006      	b.n	8003be6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	e004      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	430b      	orrs	r3, r1
 8003c04:	4944      	ldr	r1, [pc, #272]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d17d      	bne.n	8003d0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a40      	ldr	r2, [pc, #256]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fd fe20 	bl	8001860 <HAL_GetTick>
 8003c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c22:	e009      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c24:	f7fd fe1c 	bl	8001860 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	73fb      	strb	r3, [r7, #15]
        break;
 8003c36:	e005      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c38:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ef      	bne.n	8003c24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d160      	bne.n	8003d0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d111      	bne.n	8003c74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	0211      	lsls	r1, r2, #8
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	0912      	lsrs	r2, r2, #4
 8003c68:	0452      	lsls	r2, r2, #17
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	492a      	ldr	r1, [pc, #168]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	610b      	str	r3, [r1, #16]
 8003c72:	e027      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d112      	bne.n	8003ca0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c7a:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6892      	ldr	r2, [r2, #8]
 8003c8a:	0211      	lsls	r1, r2, #8
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6912      	ldr	r2, [r2, #16]
 8003c90:	0852      	lsrs	r2, r2, #1
 8003c92:	3a01      	subs	r2, #1
 8003c94:	0552      	lsls	r2, r2, #21
 8003c96:	430a      	orrs	r2, r1
 8003c98:	491f      	ldr	r1, [pc, #124]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	610b      	str	r3, [r1, #16]
 8003c9e:	e011      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6952      	ldr	r2, [r2, #20]
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	4916      	ldr	r1, [pc, #88]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fdc6 	bl	8001860 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd8:	f7fd fdc2 	bl	8001860 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	4904      	ldr	r1, [pc, #16]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000

08003d1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d2a:	4b6a      	ldr	r3, [pc, #424]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d018      	beq.n	8003d68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d36:	4b67      	ldr	r3, [pc, #412]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0203 	and.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d10d      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
       ||
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d4e:	4b61      	ldr	r3, [pc, #388]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d047      	beq.n	8003df2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	e044      	b.n	8003df2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d018      	beq.n	8003da2 <RCCEx_PLLSAI2_Config+0x86>
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d825      	bhi.n	8003dc0 <RCCEx_PLLSAI2_Config+0xa4>
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d002      	beq.n	8003d7e <RCCEx_PLLSAI2_Config+0x62>
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d009      	beq.n	8003d90 <RCCEx_PLLSAI2_Config+0x74>
 8003d7c:	e020      	b.n	8003dc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d7e:	4b55      	ldr	r3, [pc, #340]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11d      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8e:	e01a      	b.n	8003dc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d90:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d116      	bne.n	8003dca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da0:	e013      	b.n	8003dca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003da2:	4b4c      	ldr	r3, [pc, #304]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dae:	4b49      	ldr	r3, [pc, #292]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dbe:	e006      	b.n	8003dce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc4:	e004      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e002      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e000      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dce:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10d      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dd6:	4b3f      	ldr	r3, [pc, #252]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	430b      	orrs	r3, r1
 8003dec:	4939      	ldr	r1, [pc, #228]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d167      	bne.n	8003ec8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003df8:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a35      	ldr	r2, [pc, #212]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e04:	f7fd fd2c 	bl	8001860 <HAL_GetTick>
 8003e08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e0a:	e009      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e0c:	f7fd fd28 	bl	8001860 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d902      	bls.n	8003e20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e1e:	e005      	b.n	8003e2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ef      	bne.n	8003e0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d14a      	bne.n	8003ec8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d111      	bne.n	8003e5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e38:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6892      	ldr	r2, [r2, #8]
 8003e48:	0211      	lsls	r1, r2, #8
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68d2      	ldr	r2, [r2, #12]
 8003e4e:	0912      	lsrs	r2, r2, #4
 8003e50:	0452      	lsls	r2, r2, #17
 8003e52:	430a      	orrs	r2, r1
 8003e54:	491f      	ldr	r1, [pc, #124]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	614b      	str	r3, [r1, #20]
 8003e5a:	e011      	b.n	8003e80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	0211      	lsls	r1, r2, #8
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6912      	ldr	r2, [r2, #16]
 8003e72:	0852      	lsrs	r2, r2, #1
 8003e74:	3a01      	subs	r2, #1
 8003e76:	0652      	lsls	r2, r2, #25
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	4916      	ldr	r1, [pc, #88]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e80:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fd fce8 	bl	8001860 <HAL_GetTick>
 8003e90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e92:	e009      	b.n	8003ea8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e94:	f7fd fce4 	bl	8001860 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d902      	bls.n	8003ea8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ea6:	e005      	b.n	8003eb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ef      	beq.n	8003e94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4904      	ldr	r1, [pc, #16]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000

08003ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e095      	b.n	8004016 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d108      	bne.n	8003f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efa:	d009      	beq.n	8003f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	61da      	str	r2, [r3, #28]
 8003f02:	e005      	b.n	8003f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd f9d4 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f50:	d902      	bls.n	8003f58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e002      	b.n	8003f5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f66:	d007      	beq.n	8003f78 <HAL_SPI_Init+0xa0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f70:	d002      	beq.n	8003f78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	ea42 0103 	orr.w	r1, r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	f003 0204 	and.w	r2, r3, #4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ff4:	ea42 0103 	orr.w	r1, r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e040      	b.n	80040b2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fd f98d 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fbe9 	bl	8004834 <UART_SetConfig>
 8004062:	4603      	mov	r3, r0
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e022      	b.n	80040b2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fe95 	bl	8004da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004088:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004098:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 ff1c 	bl	8004ee8 <UART_CheckIdleState>
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80040bc:	b480      	push	{r7}
 80040be:	b08b      	sub	sp, #44	; 0x2c
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d156      	bne.n	8004180 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_UART_Transmit_IT+0x22>
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e04f      	b.n	8004182 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Transmit_IT+0x34>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e048      	b.n	8004182 <HAL_UART_Transmit_IT+0xc6>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2221      	movs	r2, #33	; 0x21
 8004120:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	d107      	bne.n	800413c <HAL_UART_Transmit_IT+0x80>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a16      	ldr	r2, [pc, #88]	; (8004190 <HAL_UART_Transmit_IT+0xd4>)
 8004138:	669a      	str	r2, [r3, #104]	; 0x68
 800413a:	e002      	b.n	8004142 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <HAL_UART_Transmit_IT+0xd8>)
 8004140:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	613b      	str	r3, [r7, #16]
   return(result);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	69f9      	ldr	r1, [r7, #28]
 800416e:	6a3a      	ldr	r2, [r7, #32]
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	61bb      	str	r3, [r7, #24]
   return(result);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e6      	bne.n	800414a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	372c      	adds	r7, #44	; 0x2c
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	08005443 	.word	0x08005443
 8004194:	0800538b 	.word	0x0800538b

08004198 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	4613      	mov	r3, r2
 80041a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d142      	bne.n	8004234 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_UART_Receive_IT+0x22>
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e03b      	b.n	8004236 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_UART_Receive_IT+0x34>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e034      	b.n	8004236 <HAL_UART_Receive_IT+0x9e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_UART_Receive_IT+0xa8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01f      	beq.n	8004224 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	623b      	str	r3, [r7, #32]
 8004212:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	61bb      	str	r3, [r7, #24]
   return(result);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e6      	bne.n	80041f2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	461a      	mov	r2, r3
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 ff6a 	bl	8005104 <UART_Start_Receive_IT>
 8004230:	4603      	mov	r3, r0
 8004232:	e000      	b.n	8004236 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3728      	adds	r7, #40	; 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40008000 	.word	0x40008000

08004244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b0ba      	sub	sp, #232	; 0xe8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800426a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800426e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004272:	4013      	ands	r3, r2
 8004274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d115      	bne.n	80042ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00f      	beq.n	80042ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 82a6 	beq.w	80047ee <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
      }
      return;
 80042aa:	e2a0      	b.n	80047ee <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8117 	beq.w	80044e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042c6:	4b85      	ldr	r3, [pc, #532]	; (80044dc <HAL_UART_IRQHandler+0x298>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 810a 	beq.w	80044e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d011      	beq.n	8004300 <HAL_UART_IRQHandler+0xbc>
 80042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2201      	movs	r2, #1
 80042ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d011      	beq.n	8004330 <HAL_UART_IRQHandler+0xec>
 800430c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2202      	movs	r2, #2
 800431e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004326:	f043 0204 	orr.w	r2, r3, #4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d011      	beq.n	8004360 <HAL_UART_IRQHandler+0x11c>
 800433c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2204      	movs	r2, #4
 800434e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004356:	f043 0202 	orr.w	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d017      	beq.n	800439c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d105      	bne.n	8004384 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2208      	movs	r2, #8
 800438a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004392:	f043 0208 	orr.w	r2, r3, #8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d012      	beq.n	80043ce <HAL_UART_IRQHandler+0x18a>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00c      	beq.n	80043ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 820c 	beq.w	80047f2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004408:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800441a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800441e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004422:	2b00      	cmp	r3, #0
 8004424:	d04f      	beq.n	80044c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 ff36 	bl	8005298 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d141      	bne.n	80044be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004466:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800446a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800447e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1d9      	bne.n	800443a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	2b00      	cmp	r3, #0
 800448c:	d013      	beq.n	80044b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <HAL_UART_IRQHandler+0x29c>)
 8004494:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd fc6c 	bl	8001d78 <HAL_DMA_Abort_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d017      	beq.n	80044d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80044b0:	4610      	mov	r0, r2
 80044b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e00f      	b.n	80044d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9a6 	bl	8004808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	e00b      	b.n	80044d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9a2 	bl	8004808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	e007      	b.n	80044d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f99e 	bl	8004808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80044d4:	e18d      	b.n	80047f2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d6:	bf00      	nop
    return;
 80044d8:	e18b      	b.n	80047f2 <HAL_UART_IRQHandler+0x5ae>
 80044da:	bf00      	nop
 80044dc:	04000120 	.word	0x04000120
 80044e0:	0800535f 	.word	0x0800535f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	f040 8146 	bne.w	800477a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 813f 	beq.w	800477a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8138 	beq.w	800477a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2210      	movs	r2, #16
 8004510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	f040 80b4 	bne.w	800468a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800452e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 815f 	beq.w	80047f6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800453e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004542:	429a      	cmp	r2, r3
 8004544:	f080 8157 	bcs.w	80047f6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800454e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 8085 	bne.w	800466e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800457c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800458e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004592:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800459a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1da      	bne.n	8004564 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3308      	adds	r3, #8
 80045ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e1      	bne.n	80045ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800460e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004610:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004614:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800461c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e3      	bne.n	80045ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800463c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463e:	f023 0310 	bic.w	r3, r3, #16
 8004642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004650:	65bb      	str	r3, [r7, #88]	; 0x58
 8004652:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800465e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e4      	bne.n	800462e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd fb47 	bl	8001cfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800467a:	b29b      	uxth	r3, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	b29b      	uxth	r3, r3
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8ca 	bl	800481c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004688:	e0b5      	b.n	80047f6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004696:	b29b      	uxth	r3, r3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80a7 	beq.w	80047fa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80046ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80a2 	beq.w	80047fa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44
 80046da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e4      	bne.n	80046b6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3308      	adds	r3, #8
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	623b      	str	r3, [r7, #32]
   return(result);
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3308      	adds	r3, #8
 800470c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004710:	633a      	str	r2, [r7, #48]	; 0x30
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e3      	bne.n	80046ec <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	60fb      	str	r3, [r7, #12]
   return(result);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0310 	bic.w	r3, r3, #16
 800474a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	617b      	str	r3, [r7, #20]
   return(result);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e4      	bne.n	8004736 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800476c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f852 	bl	800481c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004778:	e03f      	b.n	80047fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00e      	beq.n	80047a4 <HAL_UART_IRQHandler+0x560>
 8004786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800479a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 f83a 	bl	8005816 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047a2:	e02d      	b.n	8004800 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00e      	beq.n	80047ce <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01c      	beq.n	80047fe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
    }
    return;
 80047cc:	e017      	b.n	80047fe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d012      	beq.n	8004800 <HAL_UART_IRQHandler+0x5bc>
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fe8b 	bl	8005502 <UART_EndTransmit_IT>
    return;
 80047ec:	e008      	b.n	8004800 <HAL_UART_IRQHandler+0x5bc>
      return;
 80047ee:	bf00      	nop
 80047f0:	e006      	b.n	8004800 <HAL_UART_IRQHandler+0x5bc>
    return;
 80047f2:	bf00      	nop
 80047f4:	e004      	b.n	8004800 <HAL_UART_IRQHandler+0x5bc>
      return;
 80047f6:	bf00      	nop
 80047f8:	e002      	b.n	8004800 <HAL_UART_IRQHandler+0x5bc>
      return;
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <HAL_UART_IRQHandler+0x5bc>
    return;
 80047fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004800:	37e8      	adds	r7, #232	; 0xe8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop

08004808 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004838:	b08a      	sub	sp, #40	; 0x28
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	431a      	orrs	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	431a      	orrs	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4313      	orrs	r3, r2
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4ba4      	ldr	r3, [pc, #656]	; (8004af4 <UART_SetConfig+0x2c0>)
 8004864:	4013      	ands	r3, r2
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486c:	430b      	orrs	r3, r1
 800486e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a99      	ldr	r2, [pc, #612]	; (8004af8 <UART_SetConfig+0x2c4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	4313      	orrs	r3, r2
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a90      	ldr	r2, [pc, #576]	; (8004afc <UART_SetConfig+0x2c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d126      	bne.n	800490c <UART_SetConfig+0xd8>
 80048be:	4b90      	ldr	r3, [pc, #576]	; (8004b00 <UART_SetConfig+0x2cc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d81b      	bhi.n	8004904 <UART_SetConfig+0xd0>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0xa0>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ea:	e116      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048ec:	2302      	movs	r3, #2
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f2:	e112      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fa:	e10e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004902:	e10a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e106      	b.n	8004b1a <UART_SetConfig+0x2e6>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <UART_SetConfig+0x2d0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d138      	bne.n	8004988 <UART_SetConfig+0x154>
 8004916:	4b7a      	ldr	r3, [pc, #488]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d82d      	bhi.n	8004980 <UART_SetConfig+0x14c>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0xf8>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004961 	.word	0x08004961
 8004930:	08004981 	.word	0x08004981
 8004934:	08004981 	.word	0x08004981
 8004938:	08004981 	.word	0x08004981
 800493c:	08004971 	.word	0x08004971
 8004940:	08004981 	.word	0x08004981
 8004944:	08004981 	.word	0x08004981
 8004948:	08004981 	.word	0x08004981
 800494c:	08004969 	.word	0x08004969
 8004950:	08004981 	.word	0x08004981
 8004954:	08004981 	.word	0x08004981
 8004958:	08004981 	.word	0x08004981
 800495c:	08004979 	.word	0x08004979
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e0d8      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004968:	2302      	movs	r3, #2
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e0d4      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e0d0      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e0cc      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e0c8      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5e      	ldr	r2, [pc, #376]	; (8004b08 <UART_SetConfig+0x2d4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d125      	bne.n	80049de <UART_SetConfig+0x1aa>
 8004992:	4b5b      	ldr	r3, [pc, #364]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800499c:	2b30      	cmp	r3, #48	; 0x30
 800499e:	d016      	beq.n	80049ce <UART_SetConfig+0x19a>
 80049a0:	2b30      	cmp	r3, #48	; 0x30
 80049a2:	d818      	bhi.n	80049d6 <UART_SetConfig+0x1a2>
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d00a      	beq.n	80049be <UART_SetConfig+0x18a>
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d814      	bhi.n	80049d6 <UART_SetConfig+0x1a2>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <UART_SetConfig+0x182>
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d008      	beq.n	80049c6 <UART_SetConfig+0x192>
 80049b4:	e00f      	b.n	80049d6 <UART_SetConfig+0x1a2>
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049bc:	e0ad      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049be:	2302      	movs	r3, #2
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c4:	e0a9      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049c6:	2304      	movs	r3, #4
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049cc:	e0a5      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049ce:	2308      	movs	r3, #8
 80049d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d4:	e0a1      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049d6:	2310      	movs	r3, #16
 80049d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049dc:	e09d      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a4a      	ldr	r2, [pc, #296]	; (8004b0c <UART_SetConfig+0x2d8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d125      	bne.n	8004a34 <UART_SetConfig+0x200>
 80049e8:	4b45      	ldr	r3, [pc, #276]	; (8004b00 <UART_SetConfig+0x2cc>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049f2:	2bc0      	cmp	r3, #192	; 0xc0
 80049f4:	d016      	beq.n	8004a24 <UART_SetConfig+0x1f0>
 80049f6:	2bc0      	cmp	r3, #192	; 0xc0
 80049f8:	d818      	bhi.n	8004a2c <UART_SetConfig+0x1f8>
 80049fa:	2b80      	cmp	r3, #128	; 0x80
 80049fc:	d00a      	beq.n	8004a14 <UART_SetConfig+0x1e0>
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d814      	bhi.n	8004a2c <UART_SetConfig+0x1f8>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <UART_SetConfig+0x1d8>
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d008      	beq.n	8004a1c <UART_SetConfig+0x1e8>
 8004a0a:	e00f      	b.n	8004a2c <UART_SetConfig+0x1f8>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e082      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e07e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e07a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e076      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a32:	e072      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a35      	ldr	r2, [pc, #212]	; (8004b10 <UART_SetConfig+0x2dc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d12a      	bne.n	8004a94 <UART_SetConfig+0x260>
 8004a3e:	4b30      	ldr	r3, [pc, #192]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4c:	d01a      	beq.n	8004a84 <UART_SetConfig+0x250>
 8004a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a52:	d81b      	bhi.n	8004a8c <UART_SetConfig+0x258>
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d00c      	beq.n	8004a74 <UART_SetConfig+0x240>
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5e:	d815      	bhi.n	8004a8c <UART_SetConfig+0x258>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <UART_SetConfig+0x238>
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a68:	d008      	beq.n	8004a7c <UART_SetConfig+0x248>
 8004a6a:	e00f      	b.n	8004a8c <UART_SetConfig+0x258>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e052      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a74:	2302      	movs	r3, #2
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e04e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e04a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8a:	e046      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a92:	e042      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <UART_SetConfig+0x2c4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d13a      	bne.n	8004b14 <UART_SetConfig+0x2e0>
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aac:	d01a      	beq.n	8004ae4 <UART_SetConfig+0x2b0>
 8004aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ab2:	d81b      	bhi.n	8004aec <UART_SetConfig+0x2b8>
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab8:	d00c      	beq.n	8004ad4 <UART_SetConfig+0x2a0>
 8004aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abe:	d815      	bhi.n	8004aec <UART_SetConfig+0x2b8>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <UART_SetConfig+0x298>
 8004ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac8:	d008      	beq.n	8004adc <UART_SetConfig+0x2a8>
 8004aca:	e00f      	b.n	8004aec <UART_SetConfig+0x2b8>
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e022      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e01e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e01a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e016      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e012      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004af4:	efff69f3 	.word	0xefff69f3
 8004af8:	40008000 	.word	0x40008000
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40004400 	.word	0x40004400
 8004b08:	40004800 	.word	0x40004800
 8004b0c:	40004c00 	.word	0x40004c00
 8004b10:	40005000 	.word	0x40005000
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a9f      	ldr	r2, [pc, #636]	; (8004d9c <UART_SetConfig+0x568>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d17a      	bne.n	8004c1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d824      	bhi.n	8004b76 <UART_SetConfig+0x342>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x300>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b77 	.word	0x08004b77
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b77 	.word	0x08004b77
 8004b44:	08004b67 	.word	0x08004b67
 8004b48:	08004b77 	.word	0x08004b77
 8004b4c:	08004b77 	.word	0x08004b77
 8004b50:	08004b77 	.word	0x08004b77
 8004b54:	08004b6f 	.word	0x08004b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe fc66 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61f8      	str	r0, [r7, #28]
        break;
 8004b5e:	e010      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b60:	4b8f      	ldr	r3, [pc, #572]	; (8004da0 <UART_SetConfig+0x56c>)
 8004b62:	61fb      	str	r3, [r7, #28]
        break;
 8004b64:	e00d      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b66:	f7fe fbc7 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8004b6a:	61f8      	str	r0, [r7, #28]
        break;
 8004b6c:	e009      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b72:	61fb      	str	r3, [r7, #28]
        break;
 8004b74:	e005      	b.n	8004b82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80fb 	beq.w	8004d80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d305      	bcc.n	8004ba6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d903      	bls.n	8004bae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bac:	e0e8      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	461c      	mov	r4, r3
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	022b      	lsls	r3, r5, #8
 8004bc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bc4:	0222      	lsls	r2, r4, #8
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	6849      	ldr	r1, [r1, #4]
 8004bca:	0849      	lsrs	r1, r1, #1
 8004bcc:	2000      	movs	r0, #0
 8004bce:	4688      	mov	r8, r1
 8004bd0:	4681      	mov	r9, r0
 8004bd2:	eb12 0a08 	adds.w	sl, r2, r8
 8004bd6:	eb43 0b09 	adc.w	fp, r3, r9
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be8:	4650      	mov	r0, sl
 8004bea:	4659      	mov	r1, fp
 8004bec:	f7fb fb58 	bl	80002a0 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d308      	bcc.n	8004c12 <UART_SetConfig+0x3de>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c06:	d204      	bcs.n	8004c12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e0b6      	b.n	8004d80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c18:	e0b2      	b.n	8004d80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c22:	d15e      	bne.n	8004ce2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d828      	bhi.n	8004c7e <UART_SetConfig+0x44a>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x400>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe fbe6 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	61f8      	str	r0, [r7, #28]
        break;
 8004c5e:	e014      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fe fbf8 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8004c64:	61f8      	str	r0, [r7, #28]
        break;
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b4d      	ldr	r3, [pc, #308]	; (8004da0 <UART_SetConfig+0x56c>)
 8004c6a:	61fb      	str	r3, [r7, #28]
        break;
 8004c6c:	e00d      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fe fb43 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8004c72:	61f8      	str	r0, [r7, #28]
        break;
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	61fb      	str	r3, [r7, #28]
        break;
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d077      	beq.n	8004d80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005a      	lsls	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	441a      	add	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b0f      	cmp	r3, #15
 8004caa:	d916      	bls.n	8004cda <UART_SetConfig+0x4a6>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb2:	d212      	bcs.n	8004cda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f023 030f 	bic.w	r3, r3, #15
 8004cbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	8afb      	ldrh	r3, [r7, #22]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	8afa      	ldrh	r2, [r7, #22]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	e052      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ce0:	e04e      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d827      	bhi.n	8004d3a <UART_SetConfig+0x506>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x4bc>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d25 	.word	0x08004d25
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d2b 	.word	0x08004d2b
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d3b 	.word	0x08004d3b
 8004d10:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe fb88 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004d18:	61f8      	str	r0, [r7, #28]
        break;
 8004d1a:	e014      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fe fb9a 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8004d20:	61f8      	str	r0, [r7, #28]
        break;
 8004d22:	e010      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <UART_SetConfig+0x56c>)
 8004d26:	61fb      	str	r3, [r7, #28]
        break;
 8004d28:	e00d      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7fe fae5 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8004d2e:	61f8      	str	r0, [r7, #28]
        break;
 8004d30:	e009      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	61fb      	str	r3, [r7, #28]
        break;
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d44:	bf00      	nop
    }

    if (pclk != 0U)
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d019      	beq.n	8004d80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	085a      	lsrs	r2, r3, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	441a      	add	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	d909      	bls.n	8004d7a <UART_SetConfig+0x546>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d205      	bcs.n	8004d7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	e002      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3728      	adds	r7, #40	; 0x28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40008000 	.word	0x40008000
 8004da0:	00f42400 	.word	0x00f42400

08004da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01a      	beq.n	8004eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea2:	d10a      	bne.n	8004eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef8:	f7fc fcb2 	bl	8001860 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d10e      	bne.n	8004f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f82d 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e023      	b.n	8004f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d10e      	bne.n	8004f56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f817 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e00d      	b.n	8004f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b09c      	sub	sp, #112	; 0x70
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4613      	mov	r3, r2
 8004f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8a:	e0a5      	b.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	f000 80a1 	beq.w	80050d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fc fc63 	bl	8001860 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <UART_WaitOnFlagUntilTimeout+0x32>
 8004fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d13e      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fcc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ffe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e5      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e067      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04f      	beq.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005046:	d147      	bne.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005050:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
 8005072:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3308      	adds	r3, #8
 800508a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	613b      	str	r3, [r7, #16]
   return(result);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	66bb      	str	r3, [r7, #104]	; 0x68
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050a4:	623a      	str	r2, [r7, #32]
 80050a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	69f9      	ldr	r1, [r7, #28]
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e010      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	f43f af4a 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3770      	adds	r7, #112	; 0x70
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005104:	b480      	push	{r7}
 8005106:	b097      	sub	sp, #92	; 0x5c
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005136:	d10e      	bne.n	8005156 <UART_Start_Receive_IT+0x52>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d105      	bne.n	800514c <UART_Start_Receive_IT+0x48>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005146:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800514a:	e02d      	b.n	80051a8 <UART_Start_Receive_IT+0xa4>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	22ff      	movs	r2, #255	; 0xff
 8005150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005154:	e028      	b.n	80051a8 <UART_Start_Receive_IT+0xa4>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10d      	bne.n	800517a <UART_Start_Receive_IT+0x76>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <UART_Start_Receive_IT+0x6c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800516e:	e01b      	b.n	80051a8 <UART_Start_Receive_IT+0xa4>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	227f      	movs	r2, #127	; 0x7f
 8005174:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005178:	e016      	b.n	80051a8 <UART_Start_Receive_IT+0xa4>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005182:	d10d      	bne.n	80051a0 <UART_Start_Receive_IT+0x9c>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <UART_Start_Receive_IT+0x92>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	227f      	movs	r2, #127	; 0x7f
 8005190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005194:	e008      	b.n	80051a8 <UART_Start_Receive_IT+0xa4>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	223f      	movs	r2, #63	; 0x3f
 800519a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800519e:	e003      	b.n	80051a8 <UART_Start_Receive_IT+0xa4>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2222      	movs	r2, #34	; 0x22
 80051b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	657b      	str	r3, [r7, #84]	; 0x54
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80051d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e5      	bne.n	80051b6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f2:	d107      	bne.n	8005204 <UART_Start_Receive_IT+0x100>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a24      	ldr	r2, [pc, #144]	; (8005290 <UART_Start_Receive_IT+0x18c>)
 8005200:	665a      	str	r2, [r3, #100]	; 0x64
 8005202:	e002      	b.n	800520a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a23      	ldr	r2, [pc, #140]	; (8005294 <UART_Start_Receive_IT+0x190>)
 8005208:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d019      	beq.n	800524e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800522e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
 800523a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800523e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e6      	bne.n	800521a <UART_Start_Receive_IT+0x116>
 800524c:	e018      	b.n	8005280 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	613b      	str	r3, [r7, #16]
   return(result);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f043 0320 	orr.w	r3, r3, #32
 8005262:	653b      	str	r3, [r7, #80]	; 0x50
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526c:	623b      	str	r3, [r7, #32]
 800526e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	69f9      	ldr	r1, [r7, #28]
 8005272:	6a3a      	ldr	r2, [r7, #32]
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	61bb      	str	r3, [r7, #24]
   return(result);
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e6      	bne.n	800524e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	375c      	adds	r7, #92	; 0x5c
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	080056b7 	.word	0x080056b7
 8005294:	08005557 	.word	0x08005557

08005298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b095      	sub	sp, #84	; 0x54
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
 80052c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e6      	bne.n	80052a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530a:	2b01      	cmp	r3, #1
 800530c:	d118      	bne.n	8005340 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	60bb      	str	r3, [r7, #8]
   return(result);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	647b      	str	r3, [r7, #68]	; 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6979      	ldr	r1, [r7, #20]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	613b      	str	r3, [r7, #16]
   return(result);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005352:	bf00      	nop
 8005354:	3754      	adds	r7, #84	; 0x54
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fa43 	bl	8004808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800538a:	b480      	push	{r7}
 800538c:	b08f      	sub	sp, #60	; 0x3c
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005396:	2b21      	cmp	r3, #33	; 0x21
 8005398:	d14d      	bne.n	8005436 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d132      	bne.n	800540c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e6      	bne.n	80053a6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ec:	633b      	str	r3, [r7, #48]	; 0x30
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6979      	ldr	r1, [r7, #20]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	613b      	str	r3, [r7, #16]
   return(result);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e6      	bne.n	80053d8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800540a:	e014      	b.n	8005436 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	b292      	uxth	r2, r2
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005436:	bf00      	nop
 8005438:	373c      	adds	r7, #60	; 0x3c
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005442:	b480      	push	{r7}
 8005444:	b091      	sub	sp, #68	; 0x44
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800544e:	2b21      	cmp	r3, #33	; 0x21
 8005450:	d151      	bne.n	80054f6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d132      	bne.n	80054c4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	623b      	str	r3, [r7, #32]
   return(result);
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	633b      	str	r3, [r7, #48]	; 0x30
 800547e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	60fb      	str	r3, [r7, #12]
   return(result);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	69b9      	ldr	r1, [r7, #24]
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	617b      	str	r3, [r7, #20]
   return(result);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e6      	bne.n	8005490 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80054c2:	e018      	b.n	80054f6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80054ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054d6:	b292      	uxth	r2, r2
 80054d8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054de:	1c9a      	adds	r2, r3, #2
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80054f6:	bf00      	nop
 80054f8:	3744      	adds	r7, #68	; 0x44
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b088      	sub	sp, #32
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	60bb      	str	r3, [r7, #8]
   return(result);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6979      	ldr	r1, [r7, #20]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	613b      	str	r3, [r7, #16]
   return(result);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fb fcf3 	bl	8000f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800554e:	bf00      	nop
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b096      	sub	sp, #88	; 0x58
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005564:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800556c:	2b22      	cmp	r3, #34	; 0x22
 800556e:	f040 8094 	bne.w	800569a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005578:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800557c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005580:	b2d9      	uxtb	r1, r3
 8005582:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005586:	b2da      	uxtb	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	400a      	ands	r2, r1
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d179      	bne.n	80056ae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ce:	653b      	str	r3, [r7, #80]	; 0x50
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d8:	647b      	str	r3, [r7, #68]	; 0x44
 80055da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	623b      	str	r3, [r7, #32]
   return(result);
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800560c:	633a      	str	r2, [r7, #48]	; 0x30
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e5      	bne.n	80055ec <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005630:	2b01      	cmp	r3, #1
 8005632:	d12e      	bne.n	8005692 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	60fb      	str	r3, [r7, #12]
   return(result);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0310 	bic.w	r3, r3, #16
 800564e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	69b9      	ldr	r1, [r7, #24]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	617b      	str	r3, [r7, #20]
   return(result);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e6      	bne.n	800563a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b10      	cmp	r3, #16
 8005678:	d103      	bne.n	8005682 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2210      	movs	r2, #16
 8005680:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff f8c6 	bl	800481c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005690:	e00d      	b.n	80056ae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fb fc66 	bl	8000f64 <HAL_UART_RxCpltCallback>
}
 8005698:	e009      	b.n	80056ae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	8b1b      	ldrh	r3, [r3, #24]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	b292      	uxth	r2, r2
 80056ac:	831a      	strh	r2, [r3, #24]
}
 80056ae:	bf00      	nop
 80056b0:	3758      	adds	r7, #88	; 0x58
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b096      	sub	sp, #88	; 0x58
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056cc:	2b22      	cmp	r3, #34	; 0x22
 80056ce:	f040 8094 	bne.w	80057fa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80056e2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80056e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80056ea:	4013      	ands	r3, r2
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d179      	bne.n	800580e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800572e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005738:	643b      	str	r3, [r7, #64]	; 0x40
 800573a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800573e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3308      	adds	r3, #8
 8005752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	61fb      	str	r3, [r7, #28]
   return(result);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	64bb      	str	r3, [r7, #72]	; 0x48
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800576c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	2b01      	cmp	r3, #1
 8005792:	d12e      	bne.n	80057f2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f023 0310 	bic.w	r3, r3, #16
 80057ae:	647b      	str	r3, [r7, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6979      	ldr	r1, [r7, #20]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	613b      	str	r3, [r7, #16]
   return(result);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e6      	bne.n	800579a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d103      	bne.n	80057e2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2210      	movs	r2, #16
 80057e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff f816 	bl	800481c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057f0:	e00d      	b.n	800580e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb fbb6 	bl	8000f64 <HAL_UART_RxCpltCallback>
}
 80057f8:	e009      	b.n	800580e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	8b1b      	ldrh	r3, [r3, #24]
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	b292      	uxth	r2, r2
 800580c:	831a      	strh	r2, [r3, #24]
}
 800580e:	bf00      	nop
 8005810:	3758      	adds	r7, #88	; 0x58
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800582a:	b084      	sub	sp, #16
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	f107 001c 	add.w	r0, r7, #28
 8005838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa6f 	bl	8005d2c <USB_CoreReset>
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d106      	bne.n	8005866 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38
 8005864:	e005      	b.n	8005872 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800587e:	b004      	add	sp, #16
 8005880:	4770      	bx	lr

08005882 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d115      	bne.n	80058f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058d2:	2001      	movs	r0, #1
 80058d4:	f7fb ffd0 	bl	8001878 <HAL_Delay>
      ms++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa16 	bl	8005d10 <USB_GetMode>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d01e      	beq.n	8005928 <USB_SetCurrentMode+0x84>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b31      	cmp	r3, #49	; 0x31
 80058ee:	d9f0      	bls.n	80058d2 <USB_SetCurrentMode+0x2e>
 80058f0:	e01a      	b.n	8005928 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d115      	bne.n	8005924 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005904:	2001      	movs	r0, #1
 8005906:	f7fb ffb7 	bl	8001878 <HAL_Delay>
      ms++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3301      	adds	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f9fd 	bl	8005d10 <USB_GetMode>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <USB_SetCurrentMode+0x84>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b31      	cmp	r3, #49	; 0x31
 8005920:	d9f0      	bls.n	8005904 <USB_SetCurrentMode+0x60>
 8005922:	e001      	b.n	8005928 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e005      	b.n	8005934 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b32      	cmp	r3, #50	; 0x32
 800592c:	d101      	bne.n	8005932 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800593c:	b084      	sub	sp, #16
 800593e:	b580      	push	{r7, lr}
 8005940:	b086      	sub	sp, #24
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800594a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e009      	b.n	8005970 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3340      	adds	r3, #64	; 0x40
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	2200      	movs	r2, #0
 8005968:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b0e      	cmp	r3, #14
 8005974:	d9f2      	bls.n	800595c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d11c      	bne.n	80059b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800598a:	f043 0302 	orr.w	r3, r3, #2
 800598e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e005      	b.n	80059c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059c8:	461a      	mov	r2, r3
 80059ca:	2300      	movs	r3, #0
 80059cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d4:	4619      	mov	r1, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059dc:	461a      	mov	r2, r3
 80059de:	680b      	ldr	r3, [r1, #0]
 80059e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059e2:	2103      	movs	r1, #3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f959 	bl	8005c9c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059ea:	2110      	movs	r1, #16
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8f1 	bl	8005bd4 <USB_FlushTxFifo>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f91d 	bl	8005c3c <USB_FlushRxFifo>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	461a      	mov	r2, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a30:	2300      	movs	r3, #0
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	e043      	b.n	8005abe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4c:	d118      	bne.n	8005a80 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	461a      	mov	r2, r3
 8005a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e013      	b.n	8005a92 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	461a      	mov	r2, r3
 8005a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e008      	b.n	8005a92 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	3301      	adds	r3, #1
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d3b7      	bcc.n	8005a36 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	e043      	b.n	8005b54 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae2:	d118      	bne.n	8005b16 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	461a      	mov	r2, r3
 8005af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e013      	b.n	8005b28 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	e008      	b.n	8005b28 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	461a      	mov	r2, r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	461a      	mov	r2, r3
 8005b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	3301      	adds	r3, #1
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d3b7      	bcc.n	8005acc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f043 0210 	orr.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <USB_DevInit+0x294>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f043 0208 	orr.w	r2, r3, #8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb6:	f043 0304 	orr.w	r3, r3, #4
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bca:	b004      	add	sp, #16
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	803c3800 	.word	0x803c3800

08005bd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <USB_FlushTxFifo+0x64>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d901      	bls.n	8005bf4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e01b      	b.n	8005c2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	daf2      	bge.n	8005be2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	019b      	lsls	r3, r3, #6
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <USB_FlushTxFifo+0x64>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e006      	b.n	8005c2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d0f0      	beq.n	8005c0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	00030d40 	.word	0x00030d40

08005c3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a11      	ldr	r2, [pc, #68]	; (8005c98 <USB_FlushRxFifo+0x5c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e018      	b.n	8005c8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	daf2      	bge.n	8005c48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a08      	ldr	r2, [pc, #32]	; (8005c98 <USB_FlushRxFifo+0x5c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e006      	b.n	8005c8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d0f0      	beq.n	8005c6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	00030d40 	.word	0x00030d40

08005c9c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	68f9      	ldr	r1, [r7, #12]
 8005cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ce8:	f023 0303 	bic.w	r3, r3, #3
 8005cec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfc:	f043 0302 	orr.w	r3, r3, #2
 8005d00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <USB_CoreReset+0x64>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e01b      	b.n	8005d82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	daf2      	bge.n	8005d38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <USB_CoreReset+0x64>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d901      	bls.n	8005d74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e006      	b.n	8005d82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d0f0      	beq.n	8005d62 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	00030d40 	.word	0x00030d40

08005d94 <__errno>:
 8005d94:	4b01      	ldr	r3, [pc, #4]	; (8005d9c <__errno+0x8>)
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	2000000c 	.word	0x2000000c

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4d0d      	ldr	r5, [pc, #52]	; (8005dd8 <__libc_init_array+0x38>)
 8005da4:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da6:	1b64      	subs	r4, r4, r5
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	2600      	movs	r6, #0
 8005dac:	42a6      	cmp	r6, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	4d0b      	ldr	r5, [pc, #44]	; (8005de0 <__libc_init_array+0x40>)
 8005db2:	4c0c      	ldr	r4, [pc, #48]	; (8005de4 <__libc_init_array+0x44>)
 8005db4:	f000 fca2 	bl	80066fc <_init>
 8005db8:	1b64      	subs	r4, r4, r5
 8005dba:	10a4      	asrs	r4, r4, #2
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	42a6      	cmp	r6, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc8:	4798      	blx	r3
 8005dca:	3601      	adds	r6, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd2:	4798      	blx	r3
 8005dd4:	3601      	adds	r6, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	080069b0 	.word	0x080069b0
 8005ddc:	080069b0 	.word	0x080069b0
 8005de0:	080069b0 	.word	0x080069b0
 8005de4:	080069b4 	.word	0x080069b4

08005de8 <memset>:
 8005de8:	4402      	add	r2, r0
 8005dea:	4603      	mov	r3, r0
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d100      	bne.n	8005df2 <memset+0xa>
 8005df0:	4770      	bx	lr
 8005df2:	f803 1b01 	strb.w	r1, [r3], #1
 8005df6:	e7f9      	b.n	8005dec <memset+0x4>

08005df8 <sniprintf>:
 8005df8:	b40c      	push	{r2, r3}
 8005dfa:	b530      	push	{r4, r5, lr}
 8005dfc:	4b17      	ldr	r3, [pc, #92]	; (8005e5c <sniprintf+0x64>)
 8005dfe:	1e0c      	subs	r4, r1, #0
 8005e00:	681d      	ldr	r5, [r3, #0]
 8005e02:	b09d      	sub	sp, #116	; 0x74
 8005e04:	da08      	bge.n	8005e18 <sniprintf+0x20>
 8005e06:	238b      	movs	r3, #139	; 0x8b
 8005e08:	602b      	str	r3, [r5, #0]
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	b01d      	add	sp, #116	; 0x74
 8005e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e14:	b002      	add	sp, #8
 8005e16:	4770      	bx	lr
 8005e18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e20:	bf14      	ite	ne
 8005e22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e26:	4623      	moveq	r3, r4
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	9307      	str	r3, [sp, #28]
 8005e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e30:	9002      	str	r0, [sp, #8]
 8005e32:	9006      	str	r0, [sp, #24]
 8005e34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e3a:	ab21      	add	r3, sp, #132	; 0x84
 8005e3c:	a902      	add	r1, sp, #8
 8005e3e:	4628      	mov	r0, r5
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	f000 f869 	bl	8005f18 <_svfiprintf_r>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	bfbc      	itt	lt
 8005e4a:	238b      	movlt	r3, #139	; 0x8b
 8005e4c:	602b      	strlt	r3, [r5, #0]
 8005e4e:	2c00      	cmp	r4, #0
 8005e50:	d0dd      	beq.n	8005e0e <sniprintf+0x16>
 8005e52:	9b02      	ldr	r3, [sp, #8]
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	e7d9      	b.n	8005e0e <sniprintf+0x16>
 8005e5a:	bf00      	nop
 8005e5c:	2000000c 	.word	0x2000000c

08005e60 <__ssputs_r>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	688e      	ldr	r6, [r1, #8]
 8005e66:	429e      	cmp	r6, r3
 8005e68:	4682      	mov	sl, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	4690      	mov	r8, r2
 8005e6e:	461f      	mov	r7, r3
 8005e70:	d838      	bhi.n	8005ee4 <__ssputs_r+0x84>
 8005e72:	898a      	ldrh	r2, [r1, #12]
 8005e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e78:	d032      	beq.n	8005ee0 <__ssputs_r+0x80>
 8005e7a:	6825      	ldr	r5, [r4, #0]
 8005e7c:	6909      	ldr	r1, [r1, #16]
 8005e7e:	eba5 0901 	sub.w	r9, r5, r1
 8005e82:	6965      	ldr	r5, [r4, #20]
 8005e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	444b      	add	r3, r9
 8005e90:	106d      	asrs	r5, r5, #1
 8005e92:	429d      	cmp	r5, r3
 8005e94:	bf38      	it	cc
 8005e96:	461d      	movcc	r5, r3
 8005e98:	0553      	lsls	r3, r2, #21
 8005e9a:	d531      	bpl.n	8005f00 <__ssputs_r+0xa0>
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f000 fb63 	bl	8006568 <_malloc_r>
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	b950      	cbnz	r0, 8005ebc <__ssputs_r+0x5c>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	f8ca 3000 	str.w	r3, [sl]
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb2:	81a3      	strh	r3, [r4, #12]
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	6921      	ldr	r1, [r4, #16]
 8005ebe:	464a      	mov	r2, r9
 8005ec0:	f000 fabe 	bl	8006440 <memcpy>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	6126      	str	r6, [r4, #16]
 8005ed2:	6165      	str	r5, [r4, #20]
 8005ed4:	444e      	add	r6, r9
 8005ed6:	eba5 0509 	sub.w	r5, r5, r9
 8005eda:	6026      	str	r6, [r4, #0]
 8005edc:	60a5      	str	r5, [r4, #8]
 8005ede:	463e      	mov	r6, r7
 8005ee0:	42be      	cmp	r6, r7
 8005ee2:	d900      	bls.n	8005ee6 <__ssputs_r+0x86>
 8005ee4:	463e      	mov	r6, r7
 8005ee6:	6820      	ldr	r0, [r4, #0]
 8005ee8:	4632      	mov	r2, r6
 8005eea:	4641      	mov	r1, r8
 8005eec:	f000 fab6 	bl	800645c <memmove>
 8005ef0:	68a3      	ldr	r3, [r4, #8]
 8005ef2:	1b9b      	subs	r3, r3, r6
 8005ef4:	60a3      	str	r3, [r4, #8]
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	4433      	add	r3, r6
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	2000      	movs	r0, #0
 8005efe:	e7db      	b.n	8005eb8 <__ssputs_r+0x58>
 8005f00:	462a      	mov	r2, r5
 8005f02:	f000 fba5 	bl	8006650 <_realloc_r>
 8005f06:	4606      	mov	r6, r0
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d1e1      	bne.n	8005ed0 <__ssputs_r+0x70>
 8005f0c:	6921      	ldr	r1, [r4, #16]
 8005f0e:	4650      	mov	r0, sl
 8005f10:	f000 fabe 	bl	8006490 <_free_r>
 8005f14:	e7c7      	b.n	8005ea6 <__ssputs_r+0x46>
	...

08005f18 <_svfiprintf_r>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	4698      	mov	r8, r3
 8005f1e:	898b      	ldrh	r3, [r1, #12]
 8005f20:	061b      	lsls	r3, r3, #24
 8005f22:	b09d      	sub	sp, #116	; 0x74
 8005f24:	4607      	mov	r7, r0
 8005f26:	460d      	mov	r5, r1
 8005f28:	4614      	mov	r4, r2
 8005f2a:	d50e      	bpl.n	8005f4a <_svfiprintf_r+0x32>
 8005f2c:	690b      	ldr	r3, [r1, #16]
 8005f2e:	b963      	cbnz	r3, 8005f4a <_svfiprintf_r+0x32>
 8005f30:	2140      	movs	r1, #64	; 0x40
 8005f32:	f000 fb19 	bl	8006568 <_malloc_r>
 8005f36:	6028      	str	r0, [r5, #0]
 8005f38:	6128      	str	r0, [r5, #16]
 8005f3a:	b920      	cbnz	r0, 8005f46 <_svfiprintf_r+0x2e>
 8005f3c:	230c      	movs	r3, #12
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e0d1      	b.n	80060ea <_svfiprintf_r+0x1d2>
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	616b      	str	r3, [r5, #20]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4e:	2320      	movs	r3, #32
 8005f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f58:	2330      	movs	r3, #48	; 0x30
 8005f5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006104 <_svfiprintf_r+0x1ec>
 8005f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f62:	f04f 0901 	mov.w	r9, #1
 8005f66:	4623      	mov	r3, r4
 8005f68:	469a      	mov	sl, r3
 8005f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f6e:	b10a      	cbz	r2, 8005f74 <_svfiprintf_r+0x5c>
 8005f70:	2a25      	cmp	r2, #37	; 0x25
 8005f72:	d1f9      	bne.n	8005f68 <_svfiprintf_r+0x50>
 8005f74:	ebba 0b04 	subs.w	fp, sl, r4
 8005f78:	d00b      	beq.n	8005f92 <_svfiprintf_r+0x7a>
 8005f7a:	465b      	mov	r3, fp
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4638      	mov	r0, r7
 8005f82:	f7ff ff6d 	bl	8005e60 <__ssputs_r>
 8005f86:	3001      	adds	r0, #1
 8005f88:	f000 80aa 	beq.w	80060e0 <_svfiprintf_r+0x1c8>
 8005f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f8e:	445a      	add	r2, fp
 8005f90:	9209      	str	r2, [sp, #36]	; 0x24
 8005f92:	f89a 3000 	ldrb.w	r3, [sl]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80a2 	beq.w	80060e0 <_svfiprintf_r+0x1c8>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa6:	f10a 0a01 	add.w	sl, sl, #1
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	9307      	str	r3, [sp, #28]
 8005fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fb4:	4654      	mov	r4, sl
 8005fb6:	2205      	movs	r2, #5
 8005fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fbc:	4851      	ldr	r0, [pc, #324]	; (8006104 <_svfiprintf_r+0x1ec>)
 8005fbe:	f7fa f91f 	bl	8000200 <memchr>
 8005fc2:	9a04      	ldr	r2, [sp, #16]
 8005fc4:	b9d8      	cbnz	r0, 8005ffe <_svfiprintf_r+0xe6>
 8005fc6:	06d0      	lsls	r0, r2, #27
 8005fc8:	bf44      	itt	mi
 8005fca:	2320      	movmi	r3, #32
 8005fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd0:	0711      	lsls	r1, r2, #28
 8005fd2:	bf44      	itt	mi
 8005fd4:	232b      	movmi	r3, #43	; 0x2b
 8005fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fda:	f89a 3000 	ldrb.w	r3, [sl]
 8005fde:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe0:	d015      	beq.n	800600e <_svfiprintf_r+0xf6>
 8005fe2:	9a07      	ldr	r2, [sp, #28]
 8005fe4:	4654      	mov	r4, sl
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f04f 0c0a 	mov.w	ip, #10
 8005fec:	4621      	mov	r1, r4
 8005fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff2:	3b30      	subs	r3, #48	; 0x30
 8005ff4:	2b09      	cmp	r3, #9
 8005ff6:	d94e      	bls.n	8006096 <_svfiprintf_r+0x17e>
 8005ff8:	b1b0      	cbz	r0, 8006028 <_svfiprintf_r+0x110>
 8005ffa:	9207      	str	r2, [sp, #28]
 8005ffc:	e014      	b.n	8006028 <_svfiprintf_r+0x110>
 8005ffe:	eba0 0308 	sub.w	r3, r0, r8
 8006002:	fa09 f303 	lsl.w	r3, r9, r3
 8006006:	4313      	orrs	r3, r2
 8006008:	9304      	str	r3, [sp, #16]
 800600a:	46a2      	mov	sl, r4
 800600c:	e7d2      	b.n	8005fb4 <_svfiprintf_r+0x9c>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	1d19      	adds	r1, r3, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	9103      	str	r1, [sp, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfbb      	ittet	lt
 800601a:	425b      	neglt	r3, r3
 800601c:	f042 0202 	orrlt.w	r2, r2, #2
 8006020:	9307      	strge	r3, [sp, #28]
 8006022:	9307      	strlt	r3, [sp, #28]
 8006024:	bfb8      	it	lt
 8006026:	9204      	strlt	r2, [sp, #16]
 8006028:	7823      	ldrb	r3, [r4, #0]
 800602a:	2b2e      	cmp	r3, #46	; 0x2e
 800602c:	d10c      	bne.n	8006048 <_svfiprintf_r+0x130>
 800602e:	7863      	ldrb	r3, [r4, #1]
 8006030:	2b2a      	cmp	r3, #42	; 0x2a
 8006032:	d135      	bne.n	80060a0 <_svfiprintf_r+0x188>
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	1d1a      	adds	r2, r3, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	9203      	str	r2, [sp, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	bfb8      	it	lt
 8006040:	f04f 33ff 	movlt.w	r3, #4294967295
 8006044:	3402      	adds	r4, #2
 8006046:	9305      	str	r3, [sp, #20]
 8006048:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006114 <_svfiprintf_r+0x1fc>
 800604c:	7821      	ldrb	r1, [r4, #0]
 800604e:	2203      	movs	r2, #3
 8006050:	4650      	mov	r0, sl
 8006052:	f7fa f8d5 	bl	8000200 <memchr>
 8006056:	b140      	cbz	r0, 800606a <_svfiprintf_r+0x152>
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	eba0 000a 	sub.w	r0, r0, sl
 800605e:	fa03 f000 	lsl.w	r0, r3, r0
 8006062:	9b04      	ldr	r3, [sp, #16]
 8006064:	4303      	orrs	r3, r0
 8006066:	3401      	adds	r4, #1
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606e:	4826      	ldr	r0, [pc, #152]	; (8006108 <_svfiprintf_r+0x1f0>)
 8006070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006074:	2206      	movs	r2, #6
 8006076:	f7fa f8c3 	bl	8000200 <memchr>
 800607a:	2800      	cmp	r0, #0
 800607c:	d038      	beq.n	80060f0 <_svfiprintf_r+0x1d8>
 800607e:	4b23      	ldr	r3, [pc, #140]	; (800610c <_svfiprintf_r+0x1f4>)
 8006080:	bb1b      	cbnz	r3, 80060ca <_svfiprintf_r+0x1b2>
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	3307      	adds	r3, #7
 8006086:	f023 0307 	bic.w	r3, r3, #7
 800608a:	3308      	adds	r3, #8
 800608c:	9303      	str	r3, [sp, #12]
 800608e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006090:	4433      	add	r3, r6
 8006092:	9309      	str	r3, [sp, #36]	; 0x24
 8006094:	e767      	b.n	8005f66 <_svfiprintf_r+0x4e>
 8006096:	fb0c 3202 	mla	r2, ip, r2, r3
 800609a:	460c      	mov	r4, r1
 800609c:	2001      	movs	r0, #1
 800609e:	e7a5      	b.n	8005fec <_svfiprintf_r+0xd4>
 80060a0:	2300      	movs	r3, #0
 80060a2:	3401      	adds	r4, #1
 80060a4:	9305      	str	r3, [sp, #20]
 80060a6:	4619      	mov	r1, r3
 80060a8:	f04f 0c0a 	mov.w	ip, #10
 80060ac:	4620      	mov	r0, r4
 80060ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b2:	3a30      	subs	r2, #48	; 0x30
 80060b4:	2a09      	cmp	r2, #9
 80060b6:	d903      	bls.n	80060c0 <_svfiprintf_r+0x1a8>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0c5      	beq.n	8006048 <_svfiprintf_r+0x130>
 80060bc:	9105      	str	r1, [sp, #20]
 80060be:	e7c3      	b.n	8006048 <_svfiprintf_r+0x130>
 80060c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c4:	4604      	mov	r4, r0
 80060c6:	2301      	movs	r3, #1
 80060c8:	e7f0      	b.n	80060ac <_svfiprintf_r+0x194>
 80060ca:	ab03      	add	r3, sp, #12
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	462a      	mov	r2, r5
 80060d0:	4b0f      	ldr	r3, [pc, #60]	; (8006110 <_svfiprintf_r+0x1f8>)
 80060d2:	a904      	add	r1, sp, #16
 80060d4:	4638      	mov	r0, r7
 80060d6:	f3af 8000 	nop.w
 80060da:	1c42      	adds	r2, r0, #1
 80060dc:	4606      	mov	r6, r0
 80060de:	d1d6      	bne.n	800608e <_svfiprintf_r+0x176>
 80060e0:	89ab      	ldrh	r3, [r5, #12]
 80060e2:	065b      	lsls	r3, r3, #25
 80060e4:	f53f af2c 	bmi.w	8005f40 <_svfiprintf_r+0x28>
 80060e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ea:	b01d      	add	sp, #116	; 0x74
 80060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f0:	ab03      	add	r3, sp, #12
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	462a      	mov	r2, r5
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <_svfiprintf_r+0x1f8>)
 80060f8:	a904      	add	r1, sp, #16
 80060fa:	4638      	mov	r0, r7
 80060fc:	f000 f87a 	bl	80061f4 <_printf_i>
 8006100:	e7eb      	b.n	80060da <_svfiprintf_r+0x1c2>
 8006102:	bf00      	nop
 8006104:	08006974 	.word	0x08006974
 8006108:	0800697e 	.word	0x0800697e
 800610c:	00000000 	.word	0x00000000
 8006110:	08005e61 	.word	0x08005e61
 8006114:	0800697a 	.word	0x0800697a

08006118 <_printf_common>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	4616      	mov	r6, r2
 800611e:	4699      	mov	r9, r3
 8006120:	688a      	ldr	r2, [r1, #8]
 8006122:	690b      	ldr	r3, [r1, #16]
 8006124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006128:	4293      	cmp	r3, r2
 800612a:	bfb8      	it	lt
 800612c:	4613      	movlt	r3, r2
 800612e:	6033      	str	r3, [r6, #0]
 8006130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006134:	4607      	mov	r7, r0
 8006136:	460c      	mov	r4, r1
 8006138:	b10a      	cbz	r2, 800613e <_printf_common+0x26>
 800613a:	3301      	adds	r3, #1
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	0699      	lsls	r1, r3, #26
 8006142:	bf42      	ittt	mi
 8006144:	6833      	ldrmi	r3, [r6, #0]
 8006146:	3302      	addmi	r3, #2
 8006148:	6033      	strmi	r3, [r6, #0]
 800614a:	6825      	ldr	r5, [r4, #0]
 800614c:	f015 0506 	ands.w	r5, r5, #6
 8006150:	d106      	bne.n	8006160 <_printf_common+0x48>
 8006152:	f104 0a19 	add.w	sl, r4, #25
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	6832      	ldr	r2, [r6, #0]
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	42ab      	cmp	r3, r5
 800615e:	dc26      	bgt.n	80061ae <_printf_common+0x96>
 8006160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006164:	1e13      	subs	r3, r2, #0
 8006166:	6822      	ldr	r2, [r4, #0]
 8006168:	bf18      	it	ne
 800616a:	2301      	movne	r3, #1
 800616c:	0692      	lsls	r2, r2, #26
 800616e:	d42b      	bmi.n	80061c8 <_printf_common+0xb0>
 8006170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006174:	4649      	mov	r1, r9
 8006176:	4638      	mov	r0, r7
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d01e      	beq.n	80061bc <_printf_common+0xa4>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	68e5      	ldr	r5, [r4, #12]
 8006182:	6832      	ldr	r2, [r6, #0]
 8006184:	f003 0306 	and.w	r3, r3, #6
 8006188:	2b04      	cmp	r3, #4
 800618a:	bf08      	it	eq
 800618c:	1aad      	subeq	r5, r5, r2
 800618e:	68a3      	ldr	r3, [r4, #8]
 8006190:	6922      	ldr	r2, [r4, #16]
 8006192:	bf0c      	ite	eq
 8006194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006198:	2500      	movne	r5, #0
 800619a:	4293      	cmp	r3, r2
 800619c:	bfc4      	itt	gt
 800619e:	1a9b      	subgt	r3, r3, r2
 80061a0:	18ed      	addgt	r5, r5, r3
 80061a2:	2600      	movs	r6, #0
 80061a4:	341a      	adds	r4, #26
 80061a6:	42b5      	cmp	r5, r6
 80061a8:	d11a      	bne.n	80061e0 <_printf_common+0xc8>
 80061aa:	2000      	movs	r0, #0
 80061ac:	e008      	b.n	80061c0 <_printf_common+0xa8>
 80061ae:	2301      	movs	r3, #1
 80061b0:	4652      	mov	r2, sl
 80061b2:	4649      	mov	r1, r9
 80061b4:	4638      	mov	r0, r7
 80061b6:	47c0      	blx	r8
 80061b8:	3001      	adds	r0, #1
 80061ba:	d103      	bne.n	80061c4 <_printf_common+0xac>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c4:	3501      	adds	r5, #1
 80061c6:	e7c6      	b.n	8006156 <_printf_common+0x3e>
 80061c8:	18e1      	adds	r1, r4, r3
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	2030      	movs	r0, #48	; 0x30
 80061ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061d2:	4422      	add	r2, r4
 80061d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061dc:	3302      	adds	r3, #2
 80061de:	e7c7      	b.n	8006170 <_printf_common+0x58>
 80061e0:	2301      	movs	r3, #1
 80061e2:	4622      	mov	r2, r4
 80061e4:	4649      	mov	r1, r9
 80061e6:	4638      	mov	r0, r7
 80061e8:	47c0      	blx	r8
 80061ea:	3001      	adds	r0, #1
 80061ec:	d0e6      	beq.n	80061bc <_printf_common+0xa4>
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7d9      	b.n	80061a6 <_printf_common+0x8e>
	...

080061f4 <_printf_i>:
 80061f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	7e0f      	ldrb	r7, [r1, #24]
 80061fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061fc:	2f78      	cmp	r7, #120	; 0x78
 80061fe:	4691      	mov	r9, r2
 8006200:	4680      	mov	r8, r0
 8006202:	460c      	mov	r4, r1
 8006204:	469a      	mov	sl, r3
 8006206:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800620a:	d807      	bhi.n	800621c <_printf_i+0x28>
 800620c:	2f62      	cmp	r7, #98	; 0x62
 800620e:	d80a      	bhi.n	8006226 <_printf_i+0x32>
 8006210:	2f00      	cmp	r7, #0
 8006212:	f000 80d8 	beq.w	80063c6 <_printf_i+0x1d2>
 8006216:	2f58      	cmp	r7, #88	; 0x58
 8006218:	f000 80a3 	beq.w	8006362 <_printf_i+0x16e>
 800621c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006224:	e03a      	b.n	800629c <_printf_i+0xa8>
 8006226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800622a:	2b15      	cmp	r3, #21
 800622c:	d8f6      	bhi.n	800621c <_printf_i+0x28>
 800622e:	a101      	add	r1, pc, #4	; (adr r1, 8006234 <_printf_i+0x40>)
 8006230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006234:	0800628d 	.word	0x0800628d
 8006238:	080062a1 	.word	0x080062a1
 800623c:	0800621d 	.word	0x0800621d
 8006240:	0800621d 	.word	0x0800621d
 8006244:	0800621d 	.word	0x0800621d
 8006248:	0800621d 	.word	0x0800621d
 800624c:	080062a1 	.word	0x080062a1
 8006250:	0800621d 	.word	0x0800621d
 8006254:	0800621d 	.word	0x0800621d
 8006258:	0800621d 	.word	0x0800621d
 800625c:	0800621d 	.word	0x0800621d
 8006260:	080063ad 	.word	0x080063ad
 8006264:	080062d1 	.word	0x080062d1
 8006268:	0800638f 	.word	0x0800638f
 800626c:	0800621d 	.word	0x0800621d
 8006270:	0800621d 	.word	0x0800621d
 8006274:	080063cf 	.word	0x080063cf
 8006278:	0800621d 	.word	0x0800621d
 800627c:	080062d1 	.word	0x080062d1
 8006280:	0800621d 	.word	0x0800621d
 8006284:	0800621d 	.word	0x0800621d
 8006288:	08006397 	.word	0x08006397
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	1d1a      	adds	r2, r3, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	602a      	str	r2, [r5, #0]
 8006294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800629c:	2301      	movs	r3, #1
 800629e:	e0a3      	b.n	80063e8 <_printf_i+0x1f4>
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	6829      	ldr	r1, [r5, #0]
 80062a4:	0606      	lsls	r6, r0, #24
 80062a6:	f101 0304 	add.w	r3, r1, #4
 80062aa:	d50a      	bpl.n	80062c2 <_printf_i+0xce>
 80062ac:	680e      	ldr	r6, [r1, #0]
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	2e00      	cmp	r6, #0
 80062b2:	da03      	bge.n	80062bc <_printf_i+0xc8>
 80062b4:	232d      	movs	r3, #45	; 0x2d
 80062b6:	4276      	negs	r6, r6
 80062b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062bc:	485e      	ldr	r0, [pc, #376]	; (8006438 <_printf_i+0x244>)
 80062be:	230a      	movs	r3, #10
 80062c0:	e019      	b.n	80062f6 <_printf_i+0x102>
 80062c2:	680e      	ldr	r6, [r1, #0]
 80062c4:	602b      	str	r3, [r5, #0]
 80062c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062ca:	bf18      	it	ne
 80062cc:	b236      	sxthne	r6, r6
 80062ce:	e7ef      	b.n	80062b0 <_printf_i+0xbc>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	6820      	ldr	r0, [r4, #0]
 80062d4:	1d19      	adds	r1, r3, #4
 80062d6:	6029      	str	r1, [r5, #0]
 80062d8:	0601      	lsls	r1, r0, #24
 80062da:	d501      	bpl.n	80062e0 <_printf_i+0xec>
 80062dc:	681e      	ldr	r6, [r3, #0]
 80062de:	e002      	b.n	80062e6 <_printf_i+0xf2>
 80062e0:	0646      	lsls	r6, r0, #25
 80062e2:	d5fb      	bpl.n	80062dc <_printf_i+0xe8>
 80062e4:	881e      	ldrh	r6, [r3, #0]
 80062e6:	4854      	ldr	r0, [pc, #336]	; (8006438 <_printf_i+0x244>)
 80062e8:	2f6f      	cmp	r7, #111	; 0x6f
 80062ea:	bf0c      	ite	eq
 80062ec:	2308      	moveq	r3, #8
 80062ee:	230a      	movne	r3, #10
 80062f0:	2100      	movs	r1, #0
 80062f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062f6:	6865      	ldr	r5, [r4, #4]
 80062f8:	60a5      	str	r5, [r4, #8]
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	bfa2      	ittt	ge
 80062fe:	6821      	ldrge	r1, [r4, #0]
 8006300:	f021 0104 	bicge.w	r1, r1, #4
 8006304:	6021      	strge	r1, [r4, #0]
 8006306:	b90e      	cbnz	r6, 800630c <_printf_i+0x118>
 8006308:	2d00      	cmp	r5, #0
 800630a:	d04d      	beq.n	80063a8 <_printf_i+0x1b4>
 800630c:	4615      	mov	r5, r2
 800630e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006312:	fb03 6711 	mls	r7, r3, r1, r6
 8006316:	5dc7      	ldrb	r7, [r0, r7]
 8006318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800631c:	4637      	mov	r7, r6
 800631e:	42bb      	cmp	r3, r7
 8006320:	460e      	mov	r6, r1
 8006322:	d9f4      	bls.n	800630e <_printf_i+0x11a>
 8006324:	2b08      	cmp	r3, #8
 8006326:	d10b      	bne.n	8006340 <_printf_i+0x14c>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	07de      	lsls	r6, r3, #31
 800632c:	d508      	bpl.n	8006340 <_printf_i+0x14c>
 800632e:	6923      	ldr	r3, [r4, #16]
 8006330:	6861      	ldr	r1, [r4, #4]
 8006332:	4299      	cmp	r1, r3
 8006334:	bfde      	ittt	le
 8006336:	2330      	movle	r3, #48	; 0x30
 8006338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800633c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006340:	1b52      	subs	r2, r2, r5
 8006342:	6122      	str	r2, [r4, #16]
 8006344:	f8cd a000 	str.w	sl, [sp]
 8006348:	464b      	mov	r3, r9
 800634a:	aa03      	add	r2, sp, #12
 800634c:	4621      	mov	r1, r4
 800634e:	4640      	mov	r0, r8
 8006350:	f7ff fee2 	bl	8006118 <_printf_common>
 8006354:	3001      	adds	r0, #1
 8006356:	d14c      	bne.n	80063f2 <_printf_i+0x1fe>
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	b004      	add	sp, #16
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006362:	4835      	ldr	r0, [pc, #212]	; (8006438 <_printf_i+0x244>)
 8006364:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006368:	6829      	ldr	r1, [r5, #0]
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006370:	6029      	str	r1, [r5, #0]
 8006372:	061d      	lsls	r5, r3, #24
 8006374:	d514      	bpl.n	80063a0 <_printf_i+0x1ac>
 8006376:	07df      	lsls	r7, r3, #31
 8006378:	bf44      	itt	mi
 800637a:	f043 0320 	orrmi.w	r3, r3, #32
 800637e:	6023      	strmi	r3, [r4, #0]
 8006380:	b91e      	cbnz	r6, 800638a <_printf_i+0x196>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	f023 0320 	bic.w	r3, r3, #32
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	2310      	movs	r3, #16
 800638c:	e7b0      	b.n	80062f0 <_printf_i+0xfc>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	f043 0320 	orr.w	r3, r3, #32
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	2378      	movs	r3, #120	; 0x78
 8006398:	4828      	ldr	r0, [pc, #160]	; (800643c <_printf_i+0x248>)
 800639a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800639e:	e7e3      	b.n	8006368 <_printf_i+0x174>
 80063a0:	0659      	lsls	r1, r3, #25
 80063a2:	bf48      	it	mi
 80063a4:	b2b6      	uxthmi	r6, r6
 80063a6:	e7e6      	b.n	8006376 <_printf_i+0x182>
 80063a8:	4615      	mov	r5, r2
 80063aa:	e7bb      	b.n	8006324 <_printf_i+0x130>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	6826      	ldr	r6, [r4, #0]
 80063b0:	6961      	ldr	r1, [r4, #20]
 80063b2:	1d18      	adds	r0, r3, #4
 80063b4:	6028      	str	r0, [r5, #0]
 80063b6:	0635      	lsls	r5, r6, #24
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	d501      	bpl.n	80063c0 <_printf_i+0x1cc>
 80063bc:	6019      	str	r1, [r3, #0]
 80063be:	e002      	b.n	80063c6 <_printf_i+0x1d2>
 80063c0:	0670      	lsls	r0, r6, #25
 80063c2:	d5fb      	bpl.n	80063bc <_printf_i+0x1c8>
 80063c4:	8019      	strh	r1, [r3, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	4615      	mov	r5, r2
 80063cc:	e7ba      	b.n	8006344 <_printf_i+0x150>
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	1d1a      	adds	r2, r3, #4
 80063d2:	602a      	str	r2, [r5, #0]
 80063d4:	681d      	ldr	r5, [r3, #0]
 80063d6:	6862      	ldr	r2, [r4, #4]
 80063d8:	2100      	movs	r1, #0
 80063da:	4628      	mov	r0, r5
 80063dc:	f7f9 ff10 	bl	8000200 <memchr>
 80063e0:	b108      	cbz	r0, 80063e6 <_printf_i+0x1f2>
 80063e2:	1b40      	subs	r0, r0, r5
 80063e4:	6060      	str	r0, [r4, #4]
 80063e6:	6863      	ldr	r3, [r4, #4]
 80063e8:	6123      	str	r3, [r4, #16]
 80063ea:	2300      	movs	r3, #0
 80063ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f0:	e7a8      	b.n	8006344 <_printf_i+0x150>
 80063f2:	6923      	ldr	r3, [r4, #16]
 80063f4:	462a      	mov	r2, r5
 80063f6:	4649      	mov	r1, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	47d0      	blx	sl
 80063fc:	3001      	adds	r0, #1
 80063fe:	d0ab      	beq.n	8006358 <_printf_i+0x164>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	079b      	lsls	r3, r3, #30
 8006404:	d413      	bmi.n	800642e <_printf_i+0x23a>
 8006406:	68e0      	ldr	r0, [r4, #12]
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	4298      	cmp	r0, r3
 800640c:	bfb8      	it	lt
 800640e:	4618      	movlt	r0, r3
 8006410:	e7a4      	b.n	800635c <_printf_i+0x168>
 8006412:	2301      	movs	r3, #1
 8006414:	4632      	mov	r2, r6
 8006416:	4649      	mov	r1, r9
 8006418:	4640      	mov	r0, r8
 800641a:	47d0      	blx	sl
 800641c:	3001      	adds	r0, #1
 800641e:	d09b      	beq.n	8006358 <_printf_i+0x164>
 8006420:	3501      	adds	r5, #1
 8006422:	68e3      	ldr	r3, [r4, #12]
 8006424:	9903      	ldr	r1, [sp, #12]
 8006426:	1a5b      	subs	r3, r3, r1
 8006428:	42ab      	cmp	r3, r5
 800642a:	dcf2      	bgt.n	8006412 <_printf_i+0x21e>
 800642c:	e7eb      	b.n	8006406 <_printf_i+0x212>
 800642e:	2500      	movs	r5, #0
 8006430:	f104 0619 	add.w	r6, r4, #25
 8006434:	e7f5      	b.n	8006422 <_printf_i+0x22e>
 8006436:	bf00      	nop
 8006438:	08006985 	.word	0x08006985
 800643c:	08006996 	.word	0x08006996

08006440 <memcpy>:
 8006440:	440a      	add	r2, r1
 8006442:	4291      	cmp	r1, r2
 8006444:	f100 33ff 	add.w	r3, r0, #4294967295
 8006448:	d100      	bne.n	800644c <memcpy+0xc>
 800644a:	4770      	bx	lr
 800644c:	b510      	push	{r4, lr}
 800644e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006456:	4291      	cmp	r1, r2
 8006458:	d1f9      	bne.n	800644e <memcpy+0xe>
 800645a:	bd10      	pop	{r4, pc}

0800645c <memmove>:
 800645c:	4288      	cmp	r0, r1
 800645e:	b510      	push	{r4, lr}
 8006460:	eb01 0402 	add.w	r4, r1, r2
 8006464:	d902      	bls.n	800646c <memmove+0x10>
 8006466:	4284      	cmp	r4, r0
 8006468:	4623      	mov	r3, r4
 800646a:	d807      	bhi.n	800647c <memmove+0x20>
 800646c:	1e43      	subs	r3, r0, #1
 800646e:	42a1      	cmp	r1, r4
 8006470:	d008      	beq.n	8006484 <memmove+0x28>
 8006472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800647a:	e7f8      	b.n	800646e <memmove+0x12>
 800647c:	4402      	add	r2, r0
 800647e:	4601      	mov	r1, r0
 8006480:	428a      	cmp	r2, r1
 8006482:	d100      	bne.n	8006486 <memmove+0x2a>
 8006484:	bd10      	pop	{r4, pc}
 8006486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800648a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800648e:	e7f7      	b.n	8006480 <memmove+0x24>

08006490 <_free_r>:
 8006490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006492:	2900      	cmp	r1, #0
 8006494:	d044      	beq.n	8006520 <_free_r+0x90>
 8006496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800649a:	9001      	str	r0, [sp, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f1a1 0404 	sub.w	r4, r1, #4
 80064a2:	bfb8      	it	lt
 80064a4:	18e4      	addlt	r4, r4, r3
 80064a6:	f000 f913 	bl	80066d0 <__malloc_lock>
 80064aa:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <_free_r+0x94>)
 80064ac:	9801      	ldr	r0, [sp, #4]
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	b933      	cbnz	r3, 80064c0 <_free_r+0x30>
 80064b2:	6063      	str	r3, [r4, #4]
 80064b4:	6014      	str	r4, [r2, #0]
 80064b6:	b003      	add	sp, #12
 80064b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064bc:	f000 b90e 	b.w	80066dc <__malloc_unlock>
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d908      	bls.n	80064d6 <_free_r+0x46>
 80064c4:	6825      	ldr	r5, [r4, #0]
 80064c6:	1961      	adds	r1, r4, r5
 80064c8:	428b      	cmp	r3, r1
 80064ca:	bf01      	itttt	eq
 80064cc:	6819      	ldreq	r1, [r3, #0]
 80064ce:	685b      	ldreq	r3, [r3, #4]
 80064d0:	1949      	addeq	r1, r1, r5
 80064d2:	6021      	streq	r1, [r4, #0]
 80064d4:	e7ed      	b.n	80064b2 <_free_r+0x22>
 80064d6:	461a      	mov	r2, r3
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	b10b      	cbz	r3, 80064e0 <_free_r+0x50>
 80064dc:	42a3      	cmp	r3, r4
 80064de:	d9fa      	bls.n	80064d6 <_free_r+0x46>
 80064e0:	6811      	ldr	r1, [r2, #0]
 80064e2:	1855      	adds	r5, r2, r1
 80064e4:	42a5      	cmp	r5, r4
 80064e6:	d10b      	bne.n	8006500 <_free_r+0x70>
 80064e8:	6824      	ldr	r4, [r4, #0]
 80064ea:	4421      	add	r1, r4
 80064ec:	1854      	adds	r4, r2, r1
 80064ee:	42a3      	cmp	r3, r4
 80064f0:	6011      	str	r1, [r2, #0]
 80064f2:	d1e0      	bne.n	80064b6 <_free_r+0x26>
 80064f4:	681c      	ldr	r4, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	6053      	str	r3, [r2, #4]
 80064fa:	4421      	add	r1, r4
 80064fc:	6011      	str	r1, [r2, #0]
 80064fe:	e7da      	b.n	80064b6 <_free_r+0x26>
 8006500:	d902      	bls.n	8006508 <_free_r+0x78>
 8006502:	230c      	movs	r3, #12
 8006504:	6003      	str	r3, [r0, #0]
 8006506:	e7d6      	b.n	80064b6 <_free_r+0x26>
 8006508:	6825      	ldr	r5, [r4, #0]
 800650a:	1961      	adds	r1, r4, r5
 800650c:	428b      	cmp	r3, r1
 800650e:	bf04      	itt	eq
 8006510:	6819      	ldreq	r1, [r3, #0]
 8006512:	685b      	ldreq	r3, [r3, #4]
 8006514:	6063      	str	r3, [r4, #4]
 8006516:	bf04      	itt	eq
 8006518:	1949      	addeq	r1, r1, r5
 800651a:	6021      	streq	r1, [r4, #0]
 800651c:	6054      	str	r4, [r2, #4]
 800651e:	e7ca      	b.n	80064b6 <_free_r+0x26>
 8006520:	b003      	add	sp, #12
 8006522:	bd30      	pop	{r4, r5, pc}
 8006524:	2000080c 	.word	0x2000080c

08006528 <sbrk_aligned>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	4e0e      	ldr	r6, [pc, #56]	; (8006564 <sbrk_aligned+0x3c>)
 800652c:	460c      	mov	r4, r1
 800652e:	6831      	ldr	r1, [r6, #0]
 8006530:	4605      	mov	r5, r0
 8006532:	b911      	cbnz	r1, 800653a <sbrk_aligned+0x12>
 8006534:	f000 f8bc 	bl	80066b0 <_sbrk_r>
 8006538:	6030      	str	r0, [r6, #0]
 800653a:	4621      	mov	r1, r4
 800653c:	4628      	mov	r0, r5
 800653e:	f000 f8b7 	bl	80066b0 <_sbrk_r>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d00a      	beq.n	800655c <sbrk_aligned+0x34>
 8006546:	1cc4      	adds	r4, r0, #3
 8006548:	f024 0403 	bic.w	r4, r4, #3
 800654c:	42a0      	cmp	r0, r4
 800654e:	d007      	beq.n	8006560 <sbrk_aligned+0x38>
 8006550:	1a21      	subs	r1, r4, r0
 8006552:	4628      	mov	r0, r5
 8006554:	f000 f8ac 	bl	80066b0 <_sbrk_r>
 8006558:	3001      	adds	r0, #1
 800655a:	d101      	bne.n	8006560 <sbrk_aligned+0x38>
 800655c:	f04f 34ff 	mov.w	r4, #4294967295
 8006560:	4620      	mov	r0, r4
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	20000810 	.word	0x20000810

08006568 <_malloc_r>:
 8006568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656c:	1ccd      	adds	r5, r1, #3
 800656e:	f025 0503 	bic.w	r5, r5, #3
 8006572:	3508      	adds	r5, #8
 8006574:	2d0c      	cmp	r5, #12
 8006576:	bf38      	it	cc
 8006578:	250c      	movcc	r5, #12
 800657a:	2d00      	cmp	r5, #0
 800657c:	4607      	mov	r7, r0
 800657e:	db01      	blt.n	8006584 <_malloc_r+0x1c>
 8006580:	42a9      	cmp	r1, r5
 8006582:	d905      	bls.n	8006590 <_malloc_r+0x28>
 8006584:	230c      	movs	r3, #12
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	2600      	movs	r6, #0
 800658a:	4630      	mov	r0, r6
 800658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006590:	4e2e      	ldr	r6, [pc, #184]	; (800664c <_malloc_r+0xe4>)
 8006592:	f000 f89d 	bl	80066d0 <__malloc_lock>
 8006596:	6833      	ldr	r3, [r6, #0]
 8006598:	461c      	mov	r4, r3
 800659a:	bb34      	cbnz	r4, 80065ea <_malloc_r+0x82>
 800659c:	4629      	mov	r1, r5
 800659e:	4638      	mov	r0, r7
 80065a0:	f7ff ffc2 	bl	8006528 <sbrk_aligned>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	4604      	mov	r4, r0
 80065a8:	d14d      	bne.n	8006646 <_malloc_r+0xde>
 80065aa:	6834      	ldr	r4, [r6, #0]
 80065ac:	4626      	mov	r6, r4
 80065ae:	2e00      	cmp	r6, #0
 80065b0:	d140      	bne.n	8006634 <_malloc_r+0xcc>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	4631      	mov	r1, r6
 80065b6:	4638      	mov	r0, r7
 80065b8:	eb04 0803 	add.w	r8, r4, r3
 80065bc:	f000 f878 	bl	80066b0 <_sbrk_r>
 80065c0:	4580      	cmp	r8, r0
 80065c2:	d13a      	bne.n	800663a <_malloc_r+0xd2>
 80065c4:	6821      	ldr	r1, [r4, #0]
 80065c6:	3503      	adds	r5, #3
 80065c8:	1a6d      	subs	r5, r5, r1
 80065ca:	f025 0503 	bic.w	r5, r5, #3
 80065ce:	3508      	adds	r5, #8
 80065d0:	2d0c      	cmp	r5, #12
 80065d2:	bf38      	it	cc
 80065d4:	250c      	movcc	r5, #12
 80065d6:	4629      	mov	r1, r5
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ffa5 	bl	8006528 <sbrk_aligned>
 80065de:	3001      	adds	r0, #1
 80065e0:	d02b      	beq.n	800663a <_malloc_r+0xd2>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	442b      	add	r3, r5
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	e00e      	b.n	8006608 <_malloc_r+0xa0>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	1b52      	subs	r2, r2, r5
 80065ee:	d41e      	bmi.n	800662e <_malloc_r+0xc6>
 80065f0:	2a0b      	cmp	r2, #11
 80065f2:	d916      	bls.n	8006622 <_malloc_r+0xba>
 80065f4:	1961      	adds	r1, r4, r5
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	6025      	str	r5, [r4, #0]
 80065fa:	bf18      	it	ne
 80065fc:	6059      	strne	r1, [r3, #4]
 80065fe:	6863      	ldr	r3, [r4, #4]
 8006600:	bf08      	it	eq
 8006602:	6031      	streq	r1, [r6, #0]
 8006604:	5162      	str	r2, [r4, r5]
 8006606:	604b      	str	r3, [r1, #4]
 8006608:	4638      	mov	r0, r7
 800660a:	f104 060b 	add.w	r6, r4, #11
 800660e:	f000 f865 	bl	80066dc <__malloc_unlock>
 8006612:	f026 0607 	bic.w	r6, r6, #7
 8006616:	1d23      	adds	r3, r4, #4
 8006618:	1af2      	subs	r2, r6, r3
 800661a:	d0b6      	beq.n	800658a <_malloc_r+0x22>
 800661c:	1b9b      	subs	r3, r3, r6
 800661e:	50a3      	str	r3, [r4, r2]
 8006620:	e7b3      	b.n	800658a <_malloc_r+0x22>
 8006622:	6862      	ldr	r2, [r4, #4]
 8006624:	42a3      	cmp	r3, r4
 8006626:	bf0c      	ite	eq
 8006628:	6032      	streq	r2, [r6, #0]
 800662a:	605a      	strne	r2, [r3, #4]
 800662c:	e7ec      	b.n	8006608 <_malloc_r+0xa0>
 800662e:	4623      	mov	r3, r4
 8006630:	6864      	ldr	r4, [r4, #4]
 8006632:	e7b2      	b.n	800659a <_malloc_r+0x32>
 8006634:	4634      	mov	r4, r6
 8006636:	6876      	ldr	r6, [r6, #4]
 8006638:	e7b9      	b.n	80065ae <_malloc_r+0x46>
 800663a:	230c      	movs	r3, #12
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	4638      	mov	r0, r7
 8006640:	f000 f84c 	bl	80066dc <__malloc_unlock>
 8006644:	e7a1      	b.n	800658a <_malloc_r+0x22>
 8006646:	6025      	str	r5, [r4, #0]
 8006648:	e7de      	b.n	8006608 <_malloc_r+0xa0>
 800664a:	bf00      	nop
 800664c:	2000080c 	.word	0x2000080c

08006650 <_realloc_r>:
 8006650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006654:	4680      	mov	r8, r0
 8006656:	4614      	mov	r4, r2
 8006658:	460e      	mov	r6, r1
 800665a:	b921      	cbnz	r1, 8006666 <_realloc_r+0x16>
 800665c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	4611      	mov	r1, r2
 8006662:	f7ff bf81 	b.w	8006568 <_malloc_r>
 8006666:	b92a      	cbnz	r2, 8006674 <_realloc_r+0x24>
 8006668:	f7ff ff12 	bl	8006490 <_free_r>
 800666c:	4625      	mov	r5, r4
 800666e:	4628      	mov	r0, r5
 8006670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006674:	f000 f838 	bl	80066e8 <_malloc_usable_size_r>
 8006678:	4284      	cmp	r4, r0
 800667a:	4607      	mov	r7, r0
 800667c:	d802      	bhi.n	8006684 <_realloc_r+0x34>
 800667e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006682:	d812      	bhi.n	80066aa <_realloc_r+0x5a>
 8006684:	4621      	mov	r1, r4
 8006686:	4640      	mov	r0, r8
 8006688:	f7ff ff6e 	bl	8006568 <_malloc_r>
 800668c:	4605      	mov	r5, r0
 800668e:	2800      	cmp	r0, #0
 8006690:	d0ed      	beq.n	800666e <_realloc_r+0x1e>
 8006692:	42bc      	cmp	r4, r7
 8006694:	4622      	mov	r2, r4
 8006696:	4631      	mov	r1, r6
 8006698:	bf28      	it	cs
 800669a:	463a      	movcs	r2, r7
 800669c:	f7ff fed0 	bl	8006440 <memcpy>
 80066a0:	4631      	mov	r1, r6
 80066a2:	4640      	mov	r0, r8
 80066a4:	f7ff fef4 	bl	8006490 <_free_r>
 80066a8:	e7e1      	b.n	800666e <_realloc_r+0x1e>
 80066aa:	4635      	mov	r5, r6
 80066ac:	e7df      	b.n	800666e <_realloc_r+0x1e>
	...

080066b0 <_sbrk_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4d06      	ldr	r5, [pc, #24]	; (80066cc <_sbrk_r+0x1c>)
 80066b4:	2300      	movs	r3, #0
 80066b6:	4604      	mov	r4, r0
 80066b8:	4608      	mov	r0, r1
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	f7fa fff6 	bl	80016ac <_sbrk>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_sbrk_r+0x1a>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_sbrk_r+0x1a>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	20000814 	.word	0x20000814

080066d0 <__malloc_lock>:
 80066d0:	4801      	ldr	r0, [pc, #4]	; (80066d8 <__malloc_lock+0x8>)
 80066d2:	f000 b811 	b.w	80066f8 <__retarget_lock_acquire_recursive>
 80066d6:	bf00      	nop
 80066d8:	20000818 	.word	0x20000818

080066dc <__malloc_unlock>:
 80066dc:	4801      	ldr	r0, [pc, #4]	; (80066e4 <__malloc_unlock+0x8>)
 80066de:	f000 b80c 	b.w	80066fa <__retarget_lock_release_recursive>
 80066e2:	bf00      	nop
 80066e4:	20000818 	.word	0x20000818

080066e8 <_malloc_usable_size_r>:
 80066e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ec:	1f18      	subs	r0, r3, #4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bfbc      	itt	lt
 80066f2:	580b      	ldrlt	r3, [r1, r0]
 80066f4:	18c0      	addlt	r0, r0, r3
 80066f6:	4770      	bx	lr

080066f8 <__retarget_lock_acquire_recursive>:
 80066f8:	4770      	bx	lr

080066fa <__retarget_lock_release_recursive>:
 80066fa:	4770      	bx	lr

080066fc <_init>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr

08006708 <_fini>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr
