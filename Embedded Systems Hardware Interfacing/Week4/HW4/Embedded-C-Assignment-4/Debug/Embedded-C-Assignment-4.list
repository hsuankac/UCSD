
Embedded-C-Assignment-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe0  08008fe0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe8  08008fe8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fec  08008fec  00018fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  20000074  08009064  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  08009064  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198da  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304c  00000000  00000000  0003997e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283d9  00000000  00000000  0003f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199fe  00000000  00000000  000678f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3dca  00000000  00000000  000812ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001750b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006348  00000000  00000000  0017510c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089c0 	.word	0x080089c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080089c0 	.word	0x080089c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <do_who_am_i>:
static uint8_t status_flag = 0;
static uint16_t data = 0;
static uint8_t status_data = 0;

void do_who_am_i()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09e      	sub	sp, #120	; 0x78
 8000588:	af02      	add	r7, sp, #8
	// Step 1. send sub address
	// Write sub address
	uint8_t who_am_i = 0xf; // WHO_AM_I register
 800058a:	230f      	movs	r3, #15
 800058c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &who_am_i, sizeof(who_am_i), 1000);
 8000590:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8000594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	21be      	movs	r1, #190	; 0xbe
 800059e:	4823      	ldr	r0, [pc, #140]	; (800062c <do_who_am_i+0xa8>)
 80005a0:	f002 fc9a 	bl	8002ed8 <HAL_I2C_Master_Transmit>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	char buf[100];
	snprintf(buf, sizeof(buf), "HAL_I2C_Master_Transmit: status: %u\r\n", status);
 80005aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005ae:	f107 0008 	add.w	r0, r7, #8
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <do_who_am_i+0xac>)
 80005b4:	2164      	movs	r1, #100	; 0x64
 80005b6:	f007 fd81 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe06 	bl	80001d0 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f107 0108 	add.w	r1, r7, #8
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	4818      	ldr	r0, [pc, #96]	; (8000634 <do_who_am_i+0xb0>)
 80005d2:	f006 fcc0 	bl	8006f56 <HAL_UART_Transmit>

	// Step 2. read from address to get WHO_AM_I
	uint8_t data = 0x42;
 80005d6:	2342      	movs	r3, #66	; 0x42
 80005d8:	71fb      	strb	r3, [r7, #7]
	status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, &data, sizeof(data), 1000);
 80005da:	1dfa      	adds	r2, r7, #7
 80005dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	21bf      	movs	r1, #191	; 0xbf
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <do_who_am_i+0xa8>)
 80005e8:	f002 fd6a 	bl	80030c0 <HAL_I2C_Master_Receive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	snprintf(buf, sizeof(buf), "HAL_I2C_Master_Receive: status: %u, data: 0x%x\r\n", status, data);
 80005f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005f6:	79fa      	ldrb	r2, [r7, #7]
 80005f8:	f107 0008 	add.w	r0, r7, #8
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <do_who_am_i+0xb4>)
 8000600:	2164      	movs	r1, #100	; 0x64
 8000602:	f007 fd5b 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fde0 	bl	80001d0 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	f107 0108 	add.w	r1, r7, #8
 8000618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <do_who_am_i+0xb0>)
 800061e:	f006 fc9a 	bl	8006f56 <HAL_UART_Transmit>

}
 8000622:	bf00      	nop
 8000624:	3770      	adds	r7, #112	; 0x70
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000c8 	.word	0x200000c8
 8000630:	080089d8 	.word	0x080089d8
 8000634:	20000254 	.word	0x20000254
 8000638:	08008a00 	.word	0x08008a00

0800063c <do_temp_polled>:

void do_temp_polled()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b0a2      	sub	sp, #136	; 0x88
 8000640:	af02      	add	r7, sp, #8
	// Setup control register 1
	uint8_t control_reg1 = 0x20;
 8000642:	2320      	movs	r3, #32
 8000644:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	uint8_t control_data1[] = {control_reg1, 0x85}; // output registers not updated until MSB and LSB reading, 1 Hz
 8000648:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800064c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8000650:	2385      	movs	r3, #133	; 0x85
 8000652:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, control_data1, sizeof(control_data1), 1000);
 8000656:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2302      	movs	r3, #2
 8000662:	21be      	movs	r1, #190	; 0xbe
 8000664:	48cb      	ldr	r0, [pc, #812]	; (8000994 <do_temp_polled+0x358>)
 8000666:	f002 fc37 	bl	8002ed8 <HAL_I2C_Master_Transmit>
 800066a:	4603      	mov	r3, r0
 800066c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

	// Start a conversion
	uint8_t control_reg2 = 0x21;
 8000670:	2321      	movs	r3, #33	; 0x21
 8000672:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t control_data2[] = {control_reg2, 0x01};
 8000676:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800067a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800067e:	2301      	movs	r3, #1
 8000680:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, control_data2, sizeof(control_data2), 1000);
 8000684:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2302      	movs	r3, #2
 8000690:	21be      	movs	r1, #190	; 0xbe
 8000692:	48c0      	ldr	r0, [pc, #768]	; (8000994 <do_temp_polled+0x358>)
 8000694:	f002 fc20 	bl	8002ed8 <HAL_I2C_Master_Transmit>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

	char buf[100];
	snprintf(buf, sizeof(buf), "(One-shot enable) HAL_I2C_Master_Transmit: status: %u\r\n", status);
 800069e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80006a2:	f107 000c 	add.w	r0, r7, #12
 80006a6:	4abc      	ldr	r2, [pc, #752]	; (8000998 <do_temp_polled+0x35c>)
 80006a8:	2164      	movs	r1, #100	; 0x64
 80006aa:	f007 fd07 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fd8c 	bl	80001d0 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c4:	48b5      	ldr	r0, [pc, #724]	; (800099c <do_temp_polled+0x360>)
 80006c6:	f006 fc46 	bl	8006f56 <HAL_UART_Transmit>

	// Wait for conversion complete
	uint8_t status_reg = 0x27;
 80006ca:	2327      	movs	r3, #39	; 0x27
 80006cc:	72fb      	strb	r3, [r7, #11]
	uint8_t status_data = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72bb      	strb	r3, [r7, #10]
	int count = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(count < 10)
 80006d6:	e068      	b.n	80007aa <do_temp_polled+0x16e>
	{
		// Send read status register sub command
		status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &status_reg, sizeof(status_reg), 1000);
 80006d8:	f107 020b 	add.w	r2, r7, #11
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2301      	movs	r3, #1
 80006e4:	21be      	movs	r1, #190	; 0xbe
 80006e6:	48ab      	ldr	r0, [pc, #684]	; (8000994 <do_temp_polled+0x358>)
 80006e8:	f002 fbf6 	bl	8002ed8 <HAL_I2C_Master_Transmit>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "[%d] (status_reg) HAL_I2C_Master_Transmit: status: %u\r\n", count, status);
 80006f2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80006f6:	f107 000c 	add.w	r0, r7, #12
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006fe:	4aa8      	ldr	r2, [pc, #672]	; (80009a0 <do_temp_polled+0x364>)
 8000700:	2164      	movs	r1, #100	; 0x64
 8000702:	f007 fcdb 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd60 	bl	80001d0 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	f107 010c 	add.w	r1, r7, #12
 8000718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071c:	489f      	ldr	r0, [pc, #636]	; (800099c <do_temp_polled+0x360>)
 800071e:	f006 fc1a 	bl	8006f56 <HAL_UART_Transmit>

		// Read conversion status
		status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&status_data, sizeof(status_data), 1000);
 8000722:	f107 020a 	add.w	r2, r7, #10
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	21bf      	movs	r1, #191	; 0xbf
 8000730:	4898      	ldr	r0, [pc, #608]	; (8000994 <do_temp_polled+0x358>)
 8000732:	f002 fcc5 	bl	80030c0 <HAL_I2C_Master_Receive>
 8000736:	4603      	mov	r3, r0
 8000738:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "Status register: 0x%02x\r\n", status_data);
 800073c:	7abb      	ldrb	r3, [r7, #10]
 800073e:	f107 000c 	add.w	r0, r7, #12
 8000742:	4a98      	ldr	r2, [pc, #608]	; (80009a4 <do_temp_polled+0x368>)
 8000744:	2164      	movs	r1, #100	; 0x64
 8000746:	f007 fcb9 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd3e 	bl	80001d0 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f107 010c 	add.w	r1, r7, #12
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	488e      	ldr	r0, [pc, #568]	; (800099c <do_temp_polled+0x360>)
 8000762:	f006 fbf8 	bl	8006f56 <HAL_UART_Transmit>

		// Check for temperature conversion complete
		if(status_data & 0x1)
 8000766:	7abb      	ldrb	r3, [r7, #10]
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	2b00      	cmp	r3, #0
 800076e:	d015      	beq.n	800079c <do_temp_polled+0x160>
		{
			snprintf(buf, sizeof(buf), "New data available!\r\n");
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4a8c      	ldr	r2, [pc, #560]	; (80009a8 <do_temp_polled+0x36c>)
 8000776:	2164      	movs	r1, #100	; 0x64
 8000778:	4618      	mov	r0, r3
 800077a:	f007 fc9f 	bl	80080bc <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fd24 	bl	80001d0 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	f107 010c 	add.w	r1, r7, #12
 8000790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000794:	4881      	ldr	r0, [pc, #516]	; (800099c <do_temp_polled+0x360>)
 8000796:	f006 fbde 	bl	8006f56 <HAL_UART_Transmit>
			break;
 800079a:	e009      	b.n	80007b0 <do_temp_polled+0x174>
		}
		HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f001 fc84 	bl	80020ac <HAL_Delay>
		count++;
 80007a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007a6:	3301      	adds	r3, #1
 80007a8:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(count < 10)
 80007aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007ac:	2b09      	cmp	r3, #9
 80007ae:	dd93      	ble.n	80006d8 <do_temp_polled+0x9c>
	}

	// Toggle between normal poll and address increment poll
	static int toggle = 1;

	if(toggle)
 80007b0:	4b7e      	ldr	r3, [pc, #504]	; (80009ac <do_temp_polled+0x370>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f000 809a 	beq.w	80008ee <do_temp_polled+0x2b2>
	{
		toggle = 0;
 80007ba:	4b7c      	ldr	r3, [pc, #496]	; (80009ac <do_temp_polled+0x370>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]

		// Read temperature LSB
		uint8_t temperature_lsb = 0x2a;
 80007c0:	232a      	movs	r3, #42	; 0x2a
 80007c2:	727b      	strb	r3, [r7, #9]
		status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &temperature_lsb, sizeof(temperature_lsb), 1000);
 80007c4:	f107 0209 	add.w	r2, r7, #9
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	21be      	movs	r1, #190	; 0xbe
 80007d2:	4870      	ldr	r0, [pc, #448]	; (8000994 <do_temp_polled+0x358>)
 80007d4:	f002 fb80 	bl	8002ed8 <HAL_I2C_Master_Transmit>
 80007d8:	4603      	mov	r3, r0
 80007da:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "(LSB) HAL_I2C_Master_Transmit: status: %u\r\n", status);
 80007de:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80007e2:	f107 000c 	add.w	r0, r7, #12
 80007e6:	4a72      	ldr	r2, [pc, #456]	; (80009b0 <do_temp_polled+0x374>)
 80007e8:	2164      	movs	r1, #100	; 0x64
 80007ea:	f007 fc67 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f107 010c 	add.w	r1, r7, #12
 8000800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000804:	4865      	ldr	r0, [pc, #404]	; (800099c <do_temp_polled+0x360>)
 8000806:	f006 fba6 	bl	8006f56 <HAL_UART_Transmit>

		uint8_t data_lsb = 0x42;
 800080a:	2342      	movs	r3, #66	; 0x42
 800080c:	723b      	strb	r3, [r7, #8]
		status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&data_lsb, sizeof(data_lsb), 1000);
 800080e:	f107 0208 	add.w	r2, r7, #8
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	21bf      	movs	r1, #191	; 0xbf
 800081c:	485d      	ldr	r0, [pc, #372]	; (8000994 <do_temp_polled+0x358>)
 800081e:	f002 fc4f 	bl	80030c0 <HAL_I2C_Master_Receive>
 8000822:	4603      	mov	r3, r0
 8000824:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "(LSB) HAL_I2C_Master_Receive: status: %u, data_lsb: 0x%02x\r\n", status, data_lsb);
 8000828:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800082c:	7a3a      	ldrb	r2, [r7, #8]
 800082e:	f107 000c 	add.w	r0, r7, #12
 8000832:	9200      	str	r2, [sp, #0]
 8000834:	4a5f      	ldr	r2, [pc, #380]	; (80009b4 <do_temp_polled+0x378>)
 8000836:	2164      	movs	r1, #100	; 0x64
 8000838:	f007 fc40 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fcc5 	bl	80001d0 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	f107 010c 	add.w	r1, r7, #12
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	4852      	ldr	r0, [pc, #328]	; (800099c <do_temp_polled+0x360>)
 8000854:	f006 fb7f 	bl	8006f56 <HAL_UART_Transmit>

		// Read temperature MSB
		uint8_t temperature_msb = 0x2b;
 8000858:	232b      	movs	r3, #43	; 0x2b
 800085a:	71fb      	strb	r3, [r7, #7]
		status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &temperature_msb, sizeof(temperature_msb), 1000);
 800085c:	1dfa      	adds	r2, r7, #7
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	21be      	movs	r1, #190	; 0xbe
 8000868:	484a      	ldr	r0, [pc, #296]	; (8000994 <do_temp_polled+0x358>)
 800086a:	f002 fb35 	bl	8002ed8 <HAL_I2C_Master_Transmit>
 800086e:	4603      	mov	r3, r0
 8000870:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "(MSB) HAL_I2C_Master_Transmit: status: %u\r\n", status);
 8000874:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000878:	f107 000c 	add.w	r0, r7, #12
 800087c:	4a4e      	ldr	r2, [pc, #312]	; (80009b8 <do_temp_polled+0x37c>)
 800087e:	2164      	movs	r1, #100	; 0x64
 8000880:	f007 fc1c 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fca1 	bl	80001d0 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29a      	uxth	r2, r3
 8000892:	f107 010c 	add.w	r1, r7, #12
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	4840      	ldr	r0, [pc, #256]	; (800099c <do_temp_polled+0x360>)
 800089c:	f006 fb5b 	bl	8006f56 <HAL_UART_Transmit>

		uint8_t data_msb = 0x42;
 80008a0:	2342      	movs	r3, #66	; 0x42
 80008a2:	71bb      	strb	r3, [r7, #6]
		status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&data_msb, sizeof(data_msb), 1000);
 80008a4:	1dba      	adds	r2, r7, #6
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	21bf      	movs	r1, #191	; 0xbf
 80008b0:	4838      	ldr	r0, [pc, #224]	; (8000994 <do_temp_polled+0x358>)
 80008b2:	f002 fc05 	bl	80030c0 <HAL_I2C_Master_Receive>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "(MSB) HAL_I2C_Master_Receive: status: %u, data_msb: 0x%02x\r\n", status, data_msb);
 80008bc:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	f107 000c 	add.w	r0, r7, #12
 80008c6:	9200      	str	r2, [sp, #0]
 80008c8:	4a3c      	ldr	r2, [pc, #240]	; (80009bc <do_temp_polled+0x380>)
 80008ca:	2164      	movs	r1, #100	; 0x64
 80008cc:	f007 fbf6 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fc7b 	bl	80001d0 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	b29a      	uxth	r2, r3
 80008de:	f107 010c 	add.w	r1, r7, #12
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	482d      	ldr	r0, [pc, #180]	; (800099c <do_temp_polled+0x360>)
 80008e8:	f006 fb35 	bl	8006f56 <HAL_UART_Transmit>
		status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&data, sizeof(data), 1000);
		snprintf(buf, sizeof(buf), "(Auto increment) HAL_I2C_Master_Receive: status: %u, data_msb: 0x%04x\r\n", status, data);
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
	}

}
 80008ec:	e04d      	b.n	800098a <do_temp_polled+0x34e>
		toggle = 1;
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <do_temp_polled+0x370>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
		uint8_t temperature_lsb = 0x2a | 0x80;
 80008f4:	23aa      	movs	r3, #170	; 0xaa
 80008f6:	717b      	strb	r3, [r7, #5]
		status = HAL_I2C_Master_Transmit(&hi2c2, HST221_WRITE_ADDRESS, &temperature_lsb, sizeof(temperature_lsb), 1000);
 80008f8:	1d7a      	adds	r2, r7, #5
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	21be      	movs	r1, #190	; 0xbe
 8000904:	4823      	ldr	r0, [pc, #140]	; (8000994 <do_temp_polled+0x358>)
 8000906:	f002 fae7 	bl	8002ed8 <HAL_I2C_Master_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "(Auto increment) HAL_I2C_Master_Transmit: status: %u\r\n", status);
 8000910:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000914:	f107 000c 	add.w	r0, r7, #12
 8000918:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <do_temp_polled+0x384>)
 800091a:	2164      	movs	r1, #100	; 0x64
 800091c:	f007 fbce 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc53 	bl	80001d0 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	f107 010c 	add.w	r1, r7, #12
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	4819      	ldr	r0, [pc, #100]	; (800099c <do_temp_polled+0x360>)
 8000938:	f006 fb0d 	bl	8006f56 <HAL_UART_Transmit>
		uint16_t data = 0x4242;
 800093c:	f244 2342 	movw	r3, #16962	; 0x4242
 8000940:	807b      	strh	r3, [r7, #2]
		status = HAL_I2C_Master_Receive(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&data, sizeof(data), 1000);
 8000942:	1cba      	adds	r2, r7, #2
 8000944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2302      	movs	r3, #2
 800094c:	21bf      	movs	r1, #191	; 0xbf
 800094e:	4811      	ldr	r0, [pc, #68]	; (8000994 <do_temp_polled+0x358>)
 8000950:	f002 fbb6 	bl	80030c0 <HAL_I2C_Master_Receive>
 8000954:	4603      	mov	r3, r0
 8000956:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "(Auto increment) HAL_I2C_Master_Receive: status: %u, data_msb: 0x%04x\r\n", status, data);
 800095a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800095e:	887a      	ldrh	r2, [r7, #2]
 8000960:	f107 000c 	add.w	r0, r7, #12
 8000964:	9200      	str	r2, [sp, #0]
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <do_temp_polled+0x388>)
 8000968:	2164      	movs	r1, #100	; 0x64
 800096a:	f007 fba7 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fc2c 	bl	80001d0 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	f107 010c 	add.w	r1, r7, #12
 8000980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <do_temp_polled+0x360>)
 8000986:	f006 fae6 	bl	8006f56 <HAL_UART_Transmit>
}
 800098a:	bf00      	nop
 800098c:	3780      	adds	r7, #128	; 0x80
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000c8 	.word	0x200000c8
 8000998:	08008a34 	.word	0x08008a34
 800099c:	20000254 	.word	0x20000254
 80009a0:	08008a6c 	.word	0x08008a6c
 80009a4:	08008aa4 	.word	0x08008aa4
 80009a8:	08008ac0 	.word	0x08008ac0
 80009ac:	20000000 	.word	0x20000000
 80009b0:	08008ad8 	.word	0x08008ad8
 80009b4:	08008b04 	.word	0x08008b04
 80009b8:	08008b44 	.word	0x08008b44
 80009bc:	08008b70 	.word	0x08008b70
 80009c0:	08008bb0 	.word	0x08008bb0
 80009c4:	08008be8 	.word	0x08008be8

080009c8 <do_temp_interrupt>:

void do_temp_interrupt()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0a2      	sub	sp, #136	; 0x88
 80009cc:	af02      	add	r7, sp, #8
	irq_complete = 0;
 80009ce:	4b9a      	ldr	r3, [pc, #616]	; (8000c38 <do_temp_interrupt+0x270>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	char buf[100];
	// Setup control register 1
	uint8_t control_reg1 = 0x20;
 80009d4:	2320      	movs	r3, #32
 80009d6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	uint8_t control_data1[] = {control_reg1, 0x85}; // output registers not updated until MSB and LSB reading, 1 Hz
 80009da:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80009de:	733b      	strb	r3, [r7, #12]
 80009e0:	2385      	movs	r3, #133	; 0x85
 80009e2:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit_IT(&hi2c2, HST221_WRITE_ADDRESS, control_data1, sizeof(control_data1));
 80009e4:	f107 020c 	add.w	r2, r7, #12
 80009e8:	2302      	movs	r3, #2
 80009ea:	21be      	movs	r1, #190	; 0xbe
 80009ec:	4893      	ldr	r0, [pc, #588]	; (8000c3c <do_temp_interrupt+0x274>)
 80009ee:	f002 fc5d 	bl	80032ac <HAL_I2C_Master_Transmit_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	snprintf(buf, sizeof(buf), "(Control register 1) HAL_I2C_Master_Transmit_IT: status: %u\r\n", status);
 80009f8:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80009fc:	f107 0010 	add.w	r0, r7, #16
 8000a00:	4a8f      	ldr	r2, [pc, #572]	; (8000c40 <do_temp_interrupt+0x278>)
 8000a02:	2164      	movs	r1, #100	; 0x64
 8000a04:	f007 fb5a 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fbdf 	bl	80001d0 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	f107 0110 	add.w	r1, r7, #16
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	4889      	ldr	r0, [pc, #548]	; (8000c44 <do_temp_interrupt+0x27c>)
 8000a20:	f006 fa99 	bl	8006f56 <HAL_UART_Transmit>
	while(0 == irq_complete)
 8000a24:	e003      	b.n	8000a2e <do_temp_interrupt+0x66>
	{
		HAL_Delay(1000);
 8000a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2a:	f001 fb3f 	bl	80020ac <HAL_Delay>
	while(0 == irq_complete)
 8000a2e:	4b82      	ldr	r3, [pc, #520]	; (8000c38 <do_temp_interrupt+0x270>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0f7      	beq.n	8000a26 <do_temp_interrupt+0x5e>
	}

	irq_complete = 0;
 8000a36:	4b80      	ldr	r3, [pc, #512]	; (8000c38 <do_temp_interrupt+0x270>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
	// Start a conversion but interrupt driven
	int control_reg2 = 0x21;
 8000a3c:	2321      	movs	r3, #33	; 0x21
 8000a3e:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t control_data2[] = {control_reg2, 0x01}; // One-shot enable
 8000a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	723b      	strb	r3, [r7, #8]
 8000a46:	2301      	movs	r3, #1
 8000a48:	727b      	strb	r3, [r7, #9]
	status = HAL_I2C_Master_Transmit_IT(&hi2c2, HST221_WRITE_ADDRESS, control_data2, sizeof(control_data2));
 8000a4a:	f107 0208 	add.w	r2, r7, #8
 8000a4e:	2302      	movs	r3, #2
 8000a50:	21be      	movs	r1, #190	; 0xbe
 8000a52:	487a      	ldr	r0, [pc, #488]	; (8000c3c <do_temp_interrupt+0x274>)
 8000a54:	f002 fc2a 	bl	80032ac <HAL_I2C_Master_Transmit_IT>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	snprintf(buf, sizeof(buf), "(One-shot Enable) HAL_I2C_Master_Transmit_IT: status: %u\r\n", status);
 8000a5e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000a62:	f107 0010 	add.w	r0, r7, #16
 8000a66:	4a78      	ldr	r2, [pc, #480]	; (8000c48 <do_temp_interrupt+0x280>)
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	f007 fb27 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fbac 	bl	80001d0 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	f107 0110 	add.w	r1, r7, #16
 8000a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a84:	486f      	ldr	r0, [pc, #444]	; (8000c44 <do_temp_interrupt+0x27c>)
 8000a86:	f006 fa66 	bl	8006f56 <HAL_UART_Transmit>
	while(0 == irq_complete)
 8000a8a:	e003      	b.n	8000a94 <do_temp_interrupt+0xcc>
	{
		HAL_Delay(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a90:	f001 fb0c 	bl	80020ac <HAL_Delay>
	while(0 == irq_complete)
 8000a94:	4b68      	ldr	r3, [pc, #416]	; (8000c38 <do_temp_interrupt+0x270>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f7      	beq.n	8000a8c <do_temp_interrupt+0xc4>
	}

	irq_complete = 0;
 8000a9c:	4b66      	ldr	r3, [pc, #408]	; (8000c38 <do_temp_interrupt+0x270>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	// Wait for conversion complete
	uint8_t status_reg = 0x27;
 8000aa2:	2327      	movs	r3, #39	; 0x27
 8000aa4:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(count < 10)
 8000aaa:	e064      	b.n	8000b76 <do_temp_interrupt+0x1ae>
	{
		// Send read status register sub command
		status = HAL_I2C_Master_Transmit_IT(&hi2c2, HST221_WRITE_ADDRESS, &status_reg, sizeof(status_reg));
 8000aac:	1dfa      	adds	r2, r7, #7
 8000aae:	2301      	movs	r3, #1
 8000ab0:	21be      	movs	r1, #190	; 0xbe
 8000ab2:	4862      	ldr	r0, [pc, #392]	; (8000c3c <do_temp_interrupt+0x274>)
 8000ab4:	f002 fbfa 	bl	80032ac <HAL_I2C_Master_Transmit_IT>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "[%d] (status_reg) HAL_I2C_Master_Transmit_IT: status: %u\r\n", count, status);
 8000abe:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000ac2:	f107 0010 	add.w	r0, r7, #16
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aca:	4a60      	ldr	r2, [pc, #384]	; (8000c4c <do_temp_interrupt+0x284>)
 8000acc:	2164      	movs	r1, #100	; 0x64
 8000ace:	f007 faf5 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fb7a 	bl	80001d0 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f107 0110 	add.w	r1, r7, #16
 8000ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae8:	4856      	ldr	r0, [pc, #344]	; (8000c44 <do_temp_interrupt+0x27c>)
 8000aea:	f006 fa34 	bl	8006f56 <HAL_UART_Transmit>
		while(0 == irq_complete)
 8000aee:	e003      	b.n	8000af8 <do_temp_interrupt+0x130>
		{
			HAL_Delay(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af4:	f001 fada 	bl	80020ac <HAL_Delay>
		while(0 == irq_complete)
 8000af8:	4b4f      	ldr	r3, [pc, #316]	; (8000c38 <do_temp_interrupt+0x270>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0f7      	beq.n	8000af0 <do_temp_interrupt+0x128>
		}

		irq_complete = 0;
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <do_temp_interrupt+0x270>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
		status_flag = 1;
 8000b06:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <do_temp_interrupt+0x288>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
		// Read conversion status
		status = HAL_I2C_Master_Receive_IT(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&status_data, sizeof(status_data));
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	4a51      	ldr	r2, [pc, #324]	; (8000c54 <do_temp_interrupt+0x28c>)
 8000b10:	21bf      	movs	r1, #191	; 0xbf
 8000b12:	484a      	ldr	r0, [pc, #296]	; (8000c3c <do_temp_interrupt+0x274>)
 8000b14:	f002 fc3a 	bl	800338c <HAL_I2C_Master_Receive_IT>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		while(0 == irq_complete)
 8000b1e:	e003      	b.n	8000b28 <do_temp_interrupt+0x160>
		{
			HAL_Delay(1000);
 8000b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b24:	f001 fac2 	bl	80020ac <HAL_Delay>
		while(0 == irq_complete)
 8000b28:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <do_temp_interrupt+0x270>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d0f7      	beq.n	8000b20 <do_temp_interrupt+0x158>
		}

		// Check for temperature conversion complete
		if(status_data & 0x1)
 8000b30:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <do_temp_interrupt+0x28c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d015      	beq.n	8000b68 <do_temp_interrupt+0x1a0>
		{
			snprintf(buf, sizeof(buf), "New data available!\r\n");
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4a45      	ldr	r2, [pc, #276]	; (8000c58 <do_temp_interrupt+0x290>)
 8000b42:	2164      	movs	r1, #100	; 0x64
 8000b44:	4618      	mov	r0, r3
 8000b46:	f007 fab9 	bl	80080bc <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb3e 	bl	80001d0 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f107 0110 	add.w	r1, r7, #16
 8000b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b60:	4838      	ldr	r0, [pc, #224]	; (8000c44 <do_temp_interrupt+0x27c>)
 8000b62:	f006 f9f8 	bl	8006f56 <HAL_UART_Transmit>
			break;
 8000b66:	e009      	b.n	8000b7c <do_temp_interrupt+0x1b4>
		}
		HAL_Delay(1000);
 8000b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6c:	f001 fa9e 	bl	80020ac <HAL_Delay>
		count++;
 8000b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b72:	3301      	adds	r3, #1
 8000b74:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(count < 10)
 8000b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	dd97      	ble.n	8000aac <do_temp_interrupt+0xe4>
	}


	irq_complete = 0;
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <do_temp_interrupt+0x270>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	// Read using auto increment
	uint8_t temperature_lsb = 0x2a | 0x80;
 8000b82:	23aa      	movs	r3, #170	; 0xaa
 8000b84:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Master_Transmit_IT(&hi2c2, HST221_WRITE_ADDRESS, &temperature_lsb, sizeof(temperature_lsb));
 8000b86:	1dba      	adds	r2, r7, #6
 8000b88:	2301      	movs	r3, #1
 8000b8a:	21be      	movs	r1, #190	; 0xbe
 8000b8c:	482b      	ldr	r0, [pc, #172]	; (8000c3c <do_temp_interrupt+0x274>)
 8000b8e:	f002 fb8d 	bl	80032ac <HAL_I2C_Master_Transmit_IT>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	snprintf(buf, sizeof(buf), "(Auto increment) HAL_I2C_Master_Transmit_IT: status: %u\r\n", status);
 8000b98:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000b9c:	f107 0010 	add.w	r0, r7, #16
 8000ba0:	4a2e      	ldr	r2, [pc, #184]	; (8000c5c <do_temp_interrupt+0x294>)
 8000ba2:	2164      	movs	r1, #100	; 0x64
 8000ba4:	f007 fa8a 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fb0f 	bl	80001d0 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f107 0110 	add.w	r1, r7, #16
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	4821      	ldr	r0, [pc, #132]	; (8000c44 <do_temp_interrupt+0x27c>)
 8000bc0:	f006 f9c9 	bl	8006f56 <HAL_UART_Transmit>
	while(0 == irq_complete)
 8000bc4:	e003      	b.n	8000bce <do_temp_interrupt+0x206>
	{
		HAL_Delay(1000);
 8000bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bca:	f001 fa6f 	bl	80020ac <HAL_Delay>
	while(0 == irq_complete)
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <do_temp_interrupt+0x270>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f7      	beq.n	8000bc6 <do_temp_interrupt+0x1fe>
	}

	irq_complete = 0;
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <do_temp_interrupt+0x270>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
	// Receive using interrupt
	status = HAL_I2C_Master_Receive_IT(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&data, sizeof(data));
 8000bdc:	2302      	movs	r3, #2
 8000bde:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <do_temp_interrupt+0x298>)
 8000be0:	21bf      	movs	r1, #191	; 0xbf
 8000be2:	4816      	ldr	r0, [pc, #88]	; (8000c3c <do_temp_interrupt+0x274>)
 8000be4:	f002 fbd2 	bl	800338c <HAL_I2C_Master_Receive_IT>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	snprintf(buf, sizeof(buf), "(Auto increment) HAL_I2C_Master_Receive_IT: status: %u\r\n", status);
 8000bee:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000bf2:	f107 0010 	add.w	r0, r7, #16
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <do_temp_interrupt+0x29c>)
 8000bf8:	2164      	movs	r1, #100	; 0x64
 8000bfa:	f007 fa5f 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fae4 	bl	80001d0 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f107 0110 	add.w	r1, r7, #16
 8000c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <do_temp_interrupt+0x27c>)
 8000c16:	f006 f99e 	bl	8006f56 <HAL_UART_Transmit>
	while(0 == irq_complete)
 8000c1a:	e003      	b.n	8000c24 <do_temp_interrupt+0x25c>
	{
		HAL_Delay(1000);
 8000c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c20:	f001 fa44 	bl	80020ac <HAL_Delay>
	while(0 == irq_complete)
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <do_temp_interrupt+0x270>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0f7      	beq.n	8000c1c <do_temp_interrupt+0x254>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3780      	adds	r7, #128	; 0x80
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000868 	.word	0x20000868
 8000c3c:	200000c8 	.word	0x200000c8
 8000c40:	08008c30 	.word	0x08008c30
 8000c44:	20000254 	.word	0x20000254
 8000c48:	08008c70 	.word	0x08008c70
 8000c4c:	08008cac 	.word	0x08008cac
 8000c50:	20000869 	.word	0x20000869
 8000c54:	2000086c 	.word	0x2000086c
 8000c58:	08008ac0 	.word	0x08008ac0
 8000c5c:	08008ce8 	.word	0x08008ce8
 8000c60:	2000086a 	.word	0x2000086a
 8000c64:	08008d24 	.word	0x08008d24

08000c68 <do_temp_dma>:

void do_temp_dma()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0a2      	sub	sp, #136	; 0x88
 8000c6c:	af02      	add	r7, sp, #8
	irq_complete = 0;
 8000c6e:	4b9a      	ldr	r3, [pc, #616]	; (8000ed8 <do_temp_dma+0x270>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
	char buf[100];
	// Setup control register 1
	uint8_t control_reg1 = 0x20;
 8000c74:	2320      	movs	r3, #32
 8000c76:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	uint8_t control_data1[] = {control_reg1, 0x85}; // output registers not updated until MSB and LSB reading, 1 Hz
 8000c7a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000c7e:	733b      	strb	r3, [r7, #12]
 8000c80:	2385      	movs	r3, #133	; 0x85
 8000c82:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit_DMA(&hi2c2, HST221_WRITE_ADDRESS, control_data1, sizeof(control_data1));
 8000c84:	f107 020c 	add.w	r2, r7, #12
 8000c88:	2302      	movs	r3, #2
 8000c8a:	21be      	movs	r1, #190	; 0xbe
 8000c8c:	4893      	ldr	r0, [pc, #588]	; (8000edc <do_temp_dma+0x274>)
 8000c8e:	f002 fbed 	bl	800346c <HAL_I2C_Master_Transmit_DMA>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	snprintf(buf, sizeof(buf), "(Control register 1) HAL_I2C_Master_Transmit_DMA: status: %u\r\n", status);
 8000c98:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000c9c:	f107 0010 	add.w	r0, r7, #16
 8000ca0:	4a8f      	ldr	r2, [pc, #572]	; (8000ee0 <do_temp_dma+0x278>)
 8000ca2:	2164      	movs	r1, #100	; 0x64
 8000ca4:	f007 fa0a 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fa8f 	bl	80001d0 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	f107 0110 	add.w	r1, r7, #16
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	4889      	ldr	r0, [pc, #548]	; (8000ee4 <do_temp_dma+0x27c>)
 8000cc0:	f006 f949 	bl	8006f56 <HAL_UART_Transmit>
	while(0 == irq_complete)
 8000cc4:	e003      	b.n	8000cce <do_temp_dma+0x66>
	{
		HAL_Delay(1000);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cca:	f001 f9ef 	bl	80020ac <HAL_Delay>
	while(0 == irq_complete)
 8000cce:	4b82      	ldr	r3, [pc, #520]	; (8000ed8 <do_temp_dma+0x270>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f7      	beq.n	8000cc6 <do_temp_dma+0x5e>
	}

	irq_complete = 0;
 8000cd6:	4b80      	ldr	r3, [pc, #512]	; (8000ed8 <do_temp_dma+0x270>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
	// Start a conversion but interrupt driven
	int control_reg2 = 0x21;
 8000cdc:	2321      	movs	r3, #33	; 0x21
 8000cde:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t control_data2[] = {control_reg2, 0x01}; // One-shot enable
 8000ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	723b      	strb	r3, [r7, #8]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	727b      	strb	r3, [r7, #9]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c2, HST221_WRITE_ADDRESS, control_data2, sizeof(control_data2));
 8000cea:	f107 0208 	add.w	r2, r7, #8
 8000cee:	2302      	movs	r3, #2
 8000cf0:	21be      	movs	r1, #190	; 0xbe
 8000cf2:	487a      	ldr	r0, [pc, #488]	; (8000edc <do_temp_dma+0x274>)
 8000cf4:	f002 fbba 	bl	800346c <HAL_I2C_Master_Transmit_DMA>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	snprintf(buf, sizeof(buf), "(One-shot Enable) HAL_I2C_Master_Transmit_DMA: status: %u\r\n", status);
 8000cfe:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000d02:	f107 0010 	add.w	r0, r7, #16
 8000d06:	4a78      	ldr	r2, [pc, #480]	; (8000ee8 <do_temp_dma+0x280>)
 8000d08:	2164      	movs	r1, #100	; 0x64
 8000d0a:	f007 f9d7 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fa5c 	bl	80001d0 <strlen>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	f107 0110 	add.w	r1, r7, #16
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	486f      	ldr	r0, [pc, #444]	; (8000ee4 <do_temp_dma+0x27c>)
 8000d26:	f006 f916 	bl	8006f56 <HAL_UART_Transmit>
	while(0 == irq_complete)
 8000d2a:	e003      	b.n	8000d34 <do_temp_dma+0xcc>
	{
		HAL_Delay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f001 f9bc 	bl	80020ac <HAL_Delay>
	while(0 == irq_complete)
 8000d34:	4b68      	ldr	r3, [pc, #416]	; (8000ed8 <do_temp_dma+0x270>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f7      	beq.n	8000d2c <do_temp_dma+0xc4>
	}
	irq_complete = 0;
 8000d3c:	4b66      	ldr	r3, [pc, #408]	; (8000ed8 <do_temp_dma+0x270>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
	// Wait for conversion complete
	uint8_t status_reg = 0x27;
 8000d42:	2327      	movs	r3, #39	; 0x27
 8000d44:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(count < 10)
 8000d4a:	e064      	b.n	8000e16 <do_temp_dma+0x1ae>
	{
		// Send read status register sub command
		status = HAL_I2C_Master_Transmit_DMA(&hi2c2, HST221_WRITE_ADDRESS, &status_reg, sizeof(status_reg));
 8000d4c:	1dfa      	adds	r2, r7, #7
 8000d4e:	2301      	movs	r3, #1
 8000d50:	21be      	movs	r1, #190	; 0xbe
 8000d52:	4862      	ldr	r0, [pc, #392]	; (8000edc <do_temp_dma+0x274>)
 8000d54:	f002 fb8a 	bl	800346c <HAL_I2C_Master_Transmit_DMA>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		snprintf(buf, sizeof(buf), "[%d] (status_reg) HAL_I2C_Master_Transmit_DMA: status: %u\r\n", count, status);
 8000d5e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000d62:	f107 0010 	add.w	r0, r7, #16
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d6a:	4a60      	ldr	r2, [pc, #384]	; (8000eec <do_temp_dma+0x284>)
 8000d6c:	2164      	movs	r1, #100	; 0x64
 8000d6e:	f007 f9a5 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fa2a 	bl	80001d0 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	f107 0110 	add.w	r1, r7, #16
 8000d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d88:	4856      	ldr	r0, [pc, #344]	; (8000ee4 <do_temp_dma+0x27c>)
 8000d8a:	f006 f8e4 	bl	8006f56 <HAL_UART_Transmit>
		while(0 == irq_complete)
 8000d8e:	e003      	b.n	8000d98 <do_temp_dma+0x130>
		{
			HAL_Delay(1000);
 8000d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d94:	f001 f98a 	bl	80020ac <HAL_Delay>
		while(0 == irq_complete)
 8000d98:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <do_temp_dma+0x270>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0f7      	beq.n	8000d90 <do_temp_dma+0x128>
		}

		irq_complete = 0;
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <do_temp_dma+0x270>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
		status_flag = 1;
 8000da6:	4b52      	ldr	r3, [pc, #328]	; (8000ef0 <do_temp_dma+0x288>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
		// Read conversion status
		status = HAL_I2C_Master_Receive_DMA(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&status_data, sizeof(status_data));
 8000dac:	2301      	movs	r3, #1
 8000dae:	4a51      	ldr	r2, [pc, #324]	; (8000ef4 <do_temp_dma+0x28c>)
 8000db0:	21bf      	movs	r1, #191	; 0xbf
 8000db2:	484a      	ldr	r0, [pc, #296]	; (8000edc <do_temp_dma+0x274>)
 8000db4:	f002 fc4a 	bl	800364c <HAL_I2C_Master_Receive_DMA>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		while(0 == irq_complete)
 8000dbe:	e003      	b.n	8000dc8 <do_temp_dma+0x160>
		{
			HAL_Delay(1000);
 8000dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc4:	f001 f972 	bl	80020ac <HAL_Delay>
		while(0 == irq_complete)
 8000dc8:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <do_temp_dma+0x270>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f7      	beq.n	8000dc0 <do_temp_dma+0x158>
		}

		// Check for temperature conversion complete
		if(status_data & 0x1)
 8000dd0:	4b48      	ldr	r3, [pc, #288]	; (8000ef4 <do_temp_dma+0x28c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d015      	beq.n	8000e08 <do_temp_dma+0x1a0>
		{
			snprintf(buf, sizeof(buf), "New data available!\r\n");
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4a45      	ldr	r2, [pc, #276]	; (8000ef8 <do_temp_dma+0x290>)
 8000de2:	2164      	movs	r1, #100	; 0x64
 8000de4:	4618      	mov	r0, r3
 8000de6:	f007 f969 	bl	80080bc <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff f9ee 	bl	80001d0 <strlen>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f107 0110 	add.w	r1, r7, #16
 8000dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e00:	4838      	ldr	r0, [pc, #224]	; (8000ee4 <do_temp_dma+0x27c>)
 8000e02:	f006 f8a8 	bl	8006f56 <HAL_UART_Transmit>
			break;
 8000e06:	e009      	b.n	8000e1c <do_temp_dma+0x1b4>
		}
		HAL_Delay(1000);
 8000e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0c:	f001 f94e 	bl	80020ac <HAL_Delay>
		count++;
 8000e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e12:	3301      	adds	r3, #1
 8000e14:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(count < 10)
 8000e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e18:	2b09      	cmp	r3, #9
 8000e1a:	dd97      	ble.n	8000d4c <do_temp_dma+0xe4>
	}
	irq_complete = 0;
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <do_temp_dma+0x270>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
	// Read using auto increment
	uint8_t temperature_lsb = 0x2a | 0x80;
 8000e22:	23aa      	movs	r3, #170	; 0xaa
 8000e24:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c2, HST221_WRITE_ADDRESS, &temperature_lsb, sizeof(temperature_lsb));
 8000e26:	1dba      	adds	r2, r7, #6
 8000e28:	2301      	movs	r3, #1
 8000e2a:	21be      	movs	r1, #190	; 0xbe
 8000e2c:	482b      	ldr	r0, [pc, #172]	; (8000edc <do_temp_dma+0x274>)
 8000e2e:	f002 fb1d 	bl	800346c <HAL_I2C_Master_Transmit_DMA>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	snprintf(buf, sizeof(buf), "(Auto increment) HAL_I2C_Master_Transmit_DMA: status: %u\r\n", status);
 8000e38:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000e3c:	f107 0010 	add.w	r0, r7, #16
 8000e40:	4a2e      	ldr	r2, [pc, #184]	; (8000efc <do_temp_dma+0x294>)
 8000e42:	2164      	movs	r1, #100	; 0x64
 8000e44:	f007 f93a 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff f9bf 	bl	80001d0 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f107 0110 	add.w	r1, r7, #16
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <do_temp_dma+0x27c>)
 8000e60:	f006 f879 	bl	8006f56 <HAL_UART_Transmit>
	while(0 == irq_complete)
 8000e64:	e003      	b.n	8000e6e <do_temp_dma+0x206>
	{
		HAL_Delay(1000);
 8000e66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e6a:	f001 f91f 	bl	80020ac <HAL_Delay>
	while(0 == irq_complete)
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <do_temp_dma+0x270>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f7      	beq.n	8000e66 <do_temp_dma+0x1fe>
	}
	irq_complete = 0;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <do_temp_dma+0x270>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	// Receive using interrupt
	status = HAL_I2C_Master_Receive_DMA(&hi2c2, HST221_READ_ADDRESS, (uint8_t*)&data, sizeof(data));
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <do_temp_dma+0x298>)
 8000e80:	21bf      	movs	r1, #191	; 0xbf
 8000e82:	4816      	ldr	r0, [pc, #88]	; (8000edc <do_temp_dma+0x274>)
 8000e84:	f002 fbe2 	bl	800364c <HAL_I2C_Master_Receive_DMA>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	snprintf(buf, sizeof(buf), "(Auto increment) HAL_I2C_Master_Receive_DMA: status: %u\r\n", status);
 8000e8e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000e92:	f107 0010 	add.w	r0, r7, #16
 8000e96:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <do_temp_dma+0x29c>)
 8000e98:	2164      	movs	r1, #100	; 0x64
 8000e9a:	f007 f90f 	bl	80080bc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff f994 	bl	80001d0 <strlen>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	f107 0110 	add.w	r1, r7, #16
 8000eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <do_temp_dma+0x27c>)
 8000eb6:	f006 f84e 	bl	8006f56 <HAL_UART_Transmit>
	while(0 == irq_complete)
 8000eba:	e003      	b.n	8000ec4 <do_temp_dma+0x25c>
	{
		HAL_Delay(1000);
 8000ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec0:	f001 f8f4 	bl	80020ac <HAL_Delay>
	while(0 == irq_complete)
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <do_temp_dma+0x270>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f7      	beq.n	8000ebc <do_temp_dma+0x254>
	}
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3780      	adds	r7, #128	; 0x80
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000868 	.word	0x20000868
 8000edc:	200000c8 	.word	0x200000c8
 8000ee0:	08008d60 	.word	0x08008d60
 8000ee4:	20000254 	.word	0x20000254
 8000ee8:	08008da0 	.word	0x08008da0
 8000eec:	08008ddc 	.word	0x08008ddc
 8000ef0:	20000869 	.word	0x20000869
 8000ef4:	2000086c 	.word	0x2000086c
 8000ef8:	08008ac0 	.word	0x08008ac0
 8000efc:	08008e18 	.word	0x08008e18
 8000f00:	2000086a 	.word	0x2000086a
 8000f04:	08008e54 	.word	0x08008e54

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0e:	f001 f858 	bl	8001fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f12:	f000 f857 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f16:	f000 fa45 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1a:	f000 fa1d 	bl	8001358 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f1e:	f000 f8b3 	bl	8001088 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f22:	f000 f8e9 	bl	80010f8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f26:	f000 f925 	bl	8001174 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f2a:	f000 f949 	bl	80011c0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f2e:	f000 f985 	bl	800123c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f32:	f000 f9b3 	bl	800129c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f36:	f000 f9e1 	bl	80012fc <MX_USB_OTG_FS_PCD_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Issue command prompt
	char *prompt = "Options: 1=WHO_AM_I, 2=Temp(Polling), 3=Temp(Interrupt), 4=Temp(DMA)\n\rcmd> ";
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <main+0xb0>)
 8000f3c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt, strlen(prompt), 1000);
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f7ff f946 	bl	80001d0 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4c:	68f9      	ldr	r1, [r7, #12]
 8000f4e:	481b      	ldr	r0, [pc, #108]	; (8000fbc <main+0xb4>)
 8000f50:	f006 f801 	bl	8006f56 <HAL_UART_Transmit>

	// Wait for a single number entry
	char ch;
	HAL_UART_Receive(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f54:	1df9      	adds	r1, r7, #7
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4817      	ldr	r0, [pc, #92]	; (8000fbc <main+0xb4>)
 8000f5e:	f006 f88e 	bl	800707e <HAL_UART_Receive>

	char *msg = "\r\n";
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <main+0xb8>)
 8000f64:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8000f66:	68b8      	ldr	r0, [r7, #8]
 8000f68:	f7ff f932 	bl	80001d0 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	4811      	ldr	r0, [pc, #68]	; (8000fbc <main+0xb4>)
 8000f78:	f005 ffed 	bl	8006f56 <HAL_UART_Transmit>

	switch(ch)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	3b31      	subs	r3, #49	; 0x31
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d8da      	bhi.n	8000f3a <main+0x32>
 8000f84:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <main+0x84>)
 8000f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8a:	bf00      	nop
 8000f8c:	08000f9d 	.word	0x08000f9d
 8000f90:	08000fa3 	.word	0x08000fa3
 8000f94:	08000fa9 	.word	0x08000fa9
 8000f98:	08000faf 	.word	0x08000faf
	{
	case '1': /*msg= "\r\nTODO: WHO_AM_I\r\n";*/ do_who_am_i(); break;
 8000f9c:	f7ff faf2 	bl	8000584 <do_who_am_i>
 8000fa0:	e008      	b.n	8000fb4 <main+0xac>
	case '2': /*msg= "\r\nTODO: Temp(Polling)\r\n";*/ do_temp_polled(); break;
 8000fa2:	f7ff fb4b 	bl	800063c <do_temp_polled>
 8000fa6:	e005      	b.n	8000fb4 <main+0xac>
	case '3': /*msg= "\r\nTODO: Temp(Interrupt)\r\n";*/ do_temp_interrupt(); break;
 8000fa8:	f7ff fd0e 	bl	80009c8 <do_temp_interrupt>
 8000fac:	e002      	b.n	8000fb4 <main+0xac>
	case '4': /*msg= "\r\nTODO: Temp(DMA)\r\n";*/ do_temp_dma(); break;
 8000fae:	f7ff fe5b 	bl	8000c68 <do_temp_dma>
 8000fb2:	bf00      	nop
  {
 8000fb4:	e7c1      	b.n	8000f3a <main+0x32>
 8000fb6:	bf00      	nop
 8000fb8:	08008e90 	.word	0x08008e90
 8000fbc:	20000254 	.word	0x20000254
 8000fc0:	08008edc 	.word	0x08008edc

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2244      	movs	r2, #68	; 0x44
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f007 f86a 	bl	80080ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f004 fad5 	bl	8005598 <HAL_PWREx_ControlVoltageScaling>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff4:	f000 fbea 	bl	80017cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ff8:	f004 fab0 	bl	800555c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <SystemClock_Config+0xc0>)
 8000ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001002:	4a20      	ldr	r2, [pc, #128]	; (8001084 <SystemClock_Config+0xc0>)
 8001004:	f023 0318 	bic.w	r3, r3, #24
 8001008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800100c:	2314      	movs	r3, #20
 800100e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800101c:	2360      	movs	r3, #96	; 0x60
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001020:	2302      	movs	r3, #2
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001024:	2301      	movs	r3, #1
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800102c:	2328      	movs	r3, #40	; 0x28
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001030:	2307      	movs	r3, #7
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fbcb 	bl	80057dc <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800104c:	f000 fbbe 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2303      	movs	r3, #3
 8001056:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	2104      	movs	r1, #4
 8001068:	4618      	mov	r0, r3
 800106a:	f004 ff93 	bl	8005f94 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001074:	f000 fbaa 	bl	80017cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001078:	f005 fc9a 	bl	80069b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800107c:	bf00      	nop
 800107e:	3758      	adds	r7, #88	; 0x58
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000

08001088 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 800108e:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <MX_DFSDM1_Init+0x6c>)
 8001090:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 8001094:	2201      	movs	r2, #1
 8001096:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010a0:	2202      	movs	r2, #2
 80010a2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010d8:	2200      	movs	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_DFSDM1_Init+0x68>)
 80010de:	f001 f91b 	bl	8002318 <HAL_DFSDM_ChannelInit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80010e8:	f000 fb70 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000090 	.word	0x20000090
 80010f4:	40016020 	.word	0x40016020

080010f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_I2C2_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <MX_I2C2_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_I2C2_Init+0x74>)
 8001104:	f640 6214 	movw	r2, #3604	; 0xe14
 8001108:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_I2C2_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_I2C2_Init+0x74>)
 8001112:	2201      	movs	r2, #1
 8001114:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_I2C2_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_I2C2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2C2_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_I2C2_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_I2C2_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_I2C2_Init+0x74>)
 8001136:	f001 fe40 	bl	8002dba <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 fb44 	bl	80017cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <MX_I2C2_Init+0x74>)
 8001148:	f004 f828 	bl	800519c <HAL_I2CEx_ConfigAnalogFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001152:	f000 fb3b 	bl	80017cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_I2C2_Init+0x74>)
 800115a:	f004 f86a 	bl	8005232 <HAL_I2CEx_ConfigDigitalFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001164:	f000 fb32 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000c8 	.word	0x200000c8
 8001170:	40005800 	.word	0x40005800

08001174 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_QUADSPI_Init+0x44>)
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <MX_QUADSPI_Init+0x48>)
 800117c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_QUADSPI_Init+0x44>)
 8001180:	2202      	movs	r2, #2
 8001182:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_QUADSPI_Init+0x44>)
 8001186:	2204      	movs	r2, #4
 8001188:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_QUADSPI_Init+0x44>)
 800118c:	2210      	movs	r2, #16
 800118e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_QUADSPI_Init+0x44>)
 8001192:	2217      	movs	r2, #23
 8001194:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_QUADSPI_Init+0x44>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_QUADSPI_Init+0x44>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_QUADSPI_Init+0x44>)
 80011a4:	f004 fa5e 	bl	8005664 <HAL_QSPI_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80011ae:	f000 fb0d 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001ac 	.word	0x200001ac
 80011bc:	a0001000 	.word	0xa0001000

080011c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_SPI3_Init+0x74>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <MX_SPI3_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_SPI3_Init+0x74>)
 80011cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_SPI3_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_SPI3_Init+0x74>)
 80011da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_SPI3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_SPI3_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_SPI3_Init+0x74>)
 80011ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_SPI3_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_SPI3_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_SPI3_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_SPI3_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_SPI3_Init+0x74>)
 800120e:	2207      	movs	r2, #7
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_SPI3_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_SPI3_Init+0x74>)
 800121a:	2208      	movs	r2, #8
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_SPI3_Init+0x74>)
 8001220:	f005 fda8 	bl	8006d74 <HAL_SPI_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800122a:	f000 facf 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001f0 	.word	0x200001f0
 8001238:	40003c00 	.word	0x40003c00

0800123c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_USART1_UART_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	; (8001298 <MX_USART1_UART_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART1_UART_Init+0x58>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART1_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_USART1_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART1_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART1_UART_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART1_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART1_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART1_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART1_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART1_UART_Init+0x58>)
 8001280:	f005 fe1b 	bl	8006eba <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800128a:	f000 fa9f 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000254 	.word	0x20000254
 8001298:	40013800 	.word	0x40013800

0800129c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <MX_USART3_UART_Init+0x5c>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012e0:	f005 fdeb 	bl	8006eba <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012ea:	f000 fa6f 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002d8 	.word	0x200002d8
 80012f8:	40004800 	.word	0x40004800

080012fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001306:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130a:	2206      	movs	r2, #6
 800130c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001310:	2202      	movs	r2, #2
 8001312:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001316:	2202      	movs	r2, #2
 8001318:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001340:	f003 ffc3 	bl	80052ca <HAL_PCD_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800134a:	f000 fa3f 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000035c 	.word	0x2000035c

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_DMA_Init+0x48>)
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <MX_DMA_Init+0x48>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6493      	str	r3, [r2, #72]	; 0x48
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_DMA_Init+0x48>)
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	200e      	movs	r0, #14
 800137c:	f000 ff95 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001380:	200e      	movs	r0, #14
 8001382:	f000 ffae 	bl	80022e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	200f      	movs	r0, #15
 800138c:	f000 ff8d 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001390:	200f      	movs	r0, #15
 8001392:	f000 ffa6 	bl	80022e2 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	4bbd      	ldr	r3, [pc, #756]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4abc      	ldr	r2, [pc, #752]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013c0:	f043 0310 	orr.w	r3, r3, #16
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4bba      	ldr	r3, [pc, #744]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4bb7      	ldr	r3, [pc, #732]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4ab6      	ldr	r2, [pc, #728]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4bb4      	ldr	r3, [pc, #720]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4bb1      	ldr	r3, [pc, #708]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4ab0      	ldr	r2, [pc, #704]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4bae      	ldr	r3, [pc, #696]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4bab      	ldr	r3, [pc, #684]	; (80016b0 <MX_GPIO_Init+0x30c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4aaa      	ldr	r2, [pc, #680]	; (80016b0 <MX_GPIO_Init+0x30c>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4ba8      	ldr	r3, [pc, #672]	; (80016b0 <MX_GPIO_Init+0x30c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	4ba5      	ldr	r3, [pc, #660]	; (80016b0 <MX_GPIO_Init+0x30c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4aa4      	ldr	r2, [pc, #656]	; (80016b0 <MX_GPIO_Init+0x30c>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4ba2      	ldr	r3, [pc, #648]	; (80016b0 <MX_GPIO_Init+0x30c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001438:	489e      	ldr	r0, [pc, #632]	; (80016b4 <MX_GPIO_Init+0x310>)
 800143a:	f001 fc69 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f248 1104 	movw	r1, #33028	; 0x8104
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f001 fc62 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800144c:	2200      	movs	r2, #0
 800144e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001452:	4899      	ldr	r0, [pc, #612]	; (80016b8 <MX_GPIO_Init+0x314>)
 8001454:	f001 fc5c 	bl	8002d10 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f241 0181 	movw	r1, #4225	; 0x1081
 800145e:	4897      	ldr	r0, [pc, #604]	; (80016bc <MX_GPIO_Init+0x318>)
 8001460:	f001 fc56 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146a:	4894      	ldr	r0, [pc, #592]	; (80016bc <MX_GPIO_Init+0x318>)
 800146c:	f001 fc50 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001476:	4892      	ldr	r0, [pc, #584]	; (80016c0 <MX_GPIO_Init+0x31c>)
 8001478:	f001 fc4a 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2120      	movs	r1, #32
 8001480:	488d      	ldr	r0, [pc, #564]	; (80016b8 <MX_GPIO_Init+0x314>)
 8001482:	f001 fc45 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2101      	movs	r1, #1
 800148a:	488a      	ldr	r0, [pc, #552]	; (80016b4 <MX_GPIO_Init+0x310>)
 800148c:	f001 fc40 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001490:	f240 1315 	movw	r3, #277	; 0x115
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4882      	ldr	r0, [pc, #520]	; (80016b4 <MX_GPIO_Init+0x310>)
 80014aa:	f001 fa87 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80014ae:	236a      	movs	r3, #106	; 0x6a
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	487c      	ldr	r0, [pc, #496]	; (80016b4 <MX_GPIO_Init+0x310>)
 80014c4:	f001 fa7a 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4878      	ldr	r0, [pc, #480]	; (80016c0 <MX_GPIO_Init+0x31c>)
 80014e0:	f001 fa6c 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80014e4:	233f      	movs	r3, #63	; 0x3f
 80014e6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014e8:	230b      	movs	r3, #11
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4872      	ldr	r0, [pc, #456]	; (80016c0 <MX_GPIO_Init+0x31c>)
 80014f8:	f001 fa60 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80014fc:	2303      	movs	r3, #3
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800150c:	2308      	movs	r3, #8
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f001 fa4f 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800151e:	f248 1304 	movw	r3, #33028	; 0x8104
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153a:	f001 fa3f 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800153e:	2308      	movs	r3, #8
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800154e:	2301      	movs	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f001 fa2e 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001560:	2310      	movs	r3, #16
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001564:	230b      	movs	r3, #11
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f001 fa21 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800157a:	23e0      	movs	r3, #224	; 0xe0
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158a:	2305      	movs	r3, #5
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f001 fa10 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4841      	ldr	r0, [pc, #260]	; (80016b8 <MX_GPIO_Init+0x314>)
 80015b2:	f001 fa03 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80015b6:	2302      	movs	r3, #2
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ba:	230b      	movs	r3, #11
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	483b      	ldr	r0, [pc, #236]	; (80016b8 <MX_GPIO_Init+0x314>)
 80015ca:	f001 f9f7 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015ce:	f24f 0334 	movw	r3, #61492	; 0xf034
 80015d2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4834      	ldr	r0, [pc, #208]	; (80016b8 <MX_GPIO_Init+0x314>)
 80015e8:	f001 f9e8 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80015ec:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80015f0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	482e      	ldr	r0, [pc, #184]	; (80016bc <MX_GPIO_Init+0x318>)
 8001604:	f001 f9da 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001608:	f243 0381 	movw	r3, #12417	; 0x3081
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4826      	ldr	r0, [pc, #152]	; (80016bc <MX_GPIO_Init+0x318>)
 8001622:	f001 f9cb 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001626:	f44f 7310 	mov.w	r3, #576	; 0x240
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4820      	ldr	r0, [pc, #128]	; (80016c0 <MX_GPIO_Init+0x31c>)
 8001640:	f001 f9bc 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001644:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4819      	ldr	r0, [pc, #100]	; (80016c0 <MX_GPIO_Init+0x31c>)
 800165c:	f001 f9ae 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001660:	2302      	movs	r3, #2
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001670:	2305      	movs	r3, #5
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4810      	ldr	r0, [pc, #64]	; (80016bc <MX_GPIO_Init+0x318>)
 800167c:	f001 f99e 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001680:	2378      	movs	r3, #120	; 0x78
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001690:	2307      	movs	r3, #7
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <MX_GPIO_Init+0x318>)
 800169c:	f001 f98e 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80016a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e00a      	b.n	80016c4 <MX_GPIO_Init+0x320>
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48001000 	.word	0x48001000
 80016b8:	48000400 	.word	0x48000400
 80016bc:	48000c00 	.word	0x48000c00
 80016c0:	48000800 	.word	0x48000800
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ca:	2304      	movs	r3, #4
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <MX_GPIO_Init+0x360>)
 80016d6:	f001 f971 	bl	80029bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2017      	movs	r0, #23
 80016e0:	f000 fde3 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016e4:	2017      	movs	r0, #23
 80016e6:	f000 fdfc 	bl	80022e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2028      	movs	r0, #40	; 0x28
 80016f0:	f000 fddb 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016f4:	2028      	movs	r0, #40	; 0x28
 80016f6:	f000 fdf4 	bl	80022e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	48000400 	.word	0x48000400

08001708 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001710:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8001716:	f001 fb13 	bl	8002d40 <HAL_GPIO_TogglePin>

	irq_complete = 1;
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <HAL_I2C_MasterTxCpltCallback+0x24>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	48000400 	.word	0x48000400
 800172c:	20000868 	.word	0x20000868

08001730 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b09c      	sub	sp, #112	; 0x70
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	char buf[100];
	if(status_flag == 1)
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_I2C_MasterRxCpltCallback+0x80>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d119      	bne.n	8001774 <HAL_I2C_MasterRxCpltCallback+0x44>
	{
		status_flag = 0;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_I2C_MasterRxCpltCallback+0x80>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
		snprintf(buf, sizeof(buf), "(Status register receive) HAL_I2C_Master_Receive_DMA: data: 0x%02x\r\n", status_data);
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_I2C_MasterRxCpltCallback+0x84>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f107 000c 	add.w	r0, r7, #12
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <HAL_I2C_MasterRxCpltCallback+0x88>)
 8001750:	2164      	movs	r1, #100	; 0x64
 8001752:	f006 fcb3 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fd38 	bl	80001d0 <strlen>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	f107 010c 	add.w	r1, r7, #12
 8001768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <HAL_I2C_MasterRxCpltCallback+0x8c>)
 800176e:	f005 fbf2 	bl	8006f56 <HAL_UART_Transmit>
 8001772:	e015      	b.n	80017a0 <HAL_I2C_MasterRxCpltCallback+0x70>
	}
	else
	{
		snprintf(buf, sizeof(buf), "(Auto increment) HAL_I2C_Master_Receive_DMA: data: 0x%04x\r\n", data);
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_I2C_MasterRxCpltCallback+0x90>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	f107 000c 	add.w	r0, r7, #12
 800177c:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_I2C_MasterRxCpltCallback+0x94>)
 800177e:	2164      	movs	r1, #100	; 0x64
 8001780:	f006 fc9c 	bl	80080bc <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 1000);
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fd21 	bl	80001d0 <strlen>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	f107 010c 	add.w	r1, r7, #12
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <HAL_I2C_MasterRxCpltCallback+0x8c>)
 800179c:	f005 fbdb 	bl	8006f56 <HAL_UART_Transmit>
	}
	irq_complete = 1;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_I2C_MasterRxCpltCallback+0x98>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3770      	adds	r7, #112	; 0x70
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000869 	.word	0x20000869
 80017b4:	2000086c 	.word	0x2000086c
 80017b8:	08008ee0 	.word	0x08008ee0
 80017bc:	20000254 	.word	0x20000254
 80017c0:	2000086a 	.word	0x2000086a
 80017c4:	08008f28 	.word	0x08008f28
 80017c8:	20000868 	.word	0x20000868

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x8>
	...

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_MspInit+0x44>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_MspInit+0x44>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_MspInit+0x44>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_MspInit+0x44>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0ac      	sub	sp, #176	; 0xb0
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2288      	movs	r2, #136	; 0x88
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f006 fc33 	bl	80080ac <memset>
  if(DFSDM1_Init == 0)
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d142      	bne.n	80018d4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800184e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001852:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fdbc 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800186a:	f7ff ffaf 	bl	80017cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800189e:	f44f 7320 	mov.w	r3, #640	; 0x280
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018b8:	2306      	movs	r3, #6
 80018ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80018c6:	f001 f879 	bl	80029bc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a02      	ldr	r2, [pc, #8]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018d2:	6013      	str	r3, [r2, #0]
  }

}
 80018d4:	bf00      	nop
 80018d6:	37b0      	adds	r7, #176	; 0xb0
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000870 	.word	0x20000870
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48001000 	.word	0x48001000

080018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0ac      	sub	sp, #176	; 0xb0
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2288      	movs	r2, #136	; 0x88
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f006 fbcf 	bl	80080ac <memset>
  if(hi2c->Instance==I2C2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a4f      	ldr	r2, [pc, #316]	; (8001a50 <HAL_I2C_MspInit+0x168>)
 8001914:	4293      	cmp	r3, r2
 8001916:	f040 8096 	bne.w	8001a46 <HAL_I2C_MspInit+0x15e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800191e:	2300      	movs	r3, #0
 8001920:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fd58 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001932:	f7ff ff4b 	bl	80017cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_I2C_MspInit+0x16c>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a46      	ldr	r2, [pc, #280]	; (8001a54 <HAL_I2C_MspInit+0x16c>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <HAL_I2C_MspInit+0x16c>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800194e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	2312      	movs	r3, #18
 8001958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195c:	2301      	movs	r3, #1
 800195e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001968:	2304      	movs	r3, #4
 800196a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001972:	4619      	mov	r1, r3
 8001974:	4838      	ldr	r0, [pc, #224]	; (8001a58 <HAL_I2C_MspInit+0x170>)
 8001976:	f001 f821 	bl	80029bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800197a:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_I2C_MspInit+0x16c>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	4a35      	ldr	r2, [pc, #212]	; (8001a54 <HAL_I2C_MspInit+0x16c>)
 8001980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001984:	6593      	str	r3, [r2, #88]	; 0x58
 8001986:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <HAL_I2C_MspInit+0x16c>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8001992:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 8001994:	4a32      	ldr	r2, [pc, #200]	; (8001a60 <HAL_I2C_MspInit+0x178>)
 8001996:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 8001998:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 800199a:	2203      	movs	r2, #3
 800199c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80019c8:	4824      	ldr	r0, [pc, #144]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019ca:	f000 fdb1 	bl	8002530 <HAL_DMA_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 80019d4:	f7ff fefa 	bl	80017cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80019de:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_I2C_MspInit+0x174>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 80019e6:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <HAL_I2C_MspInit+0x180>)
 80019e8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 80019ec:	2203      	movs	r2, #3
 80019ee:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 80019f2:	2210      	movs	r2, #16
 80019f4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001a1a:	4812      	ldr	r0, [pc, #72]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 8001a1c:	f000 fd88 	bl	8002530 <HAL_DMA_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 8001a26:	f7ff fed1 	bl	80017cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 8001a2e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a30:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <HAL_I2C_MspInit+0x17c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2021      	movs	r0, #33	; 0x21
 8001a3c:	f000 fc35 	bl	80022aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a40:	2021      	movs	r0, #33	; 0x21
 8001a42:	f000 fc4e 	bl	80022e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	37b0      	adds	r7, #176	; 0xb0
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40005800 	.word	0x40005800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	2000011c 	.word	0x2000011c
 8001a60:	40020058 	.word	0x40020058
 8001a64:	20000164 	.word	0x20000164
 8001a68:	40020044 	.word	0x40020044

08001a6c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_QSPI_MspInit+0x7c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d128      	bne.n	8001ae0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_QSPI_MspInit+0x80>)
 8001a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a92:	4a16      	ldr	r2, [pc, #88]	; (8001aec <HAL_QSPI_MspInit+0x80>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6513      	str	r3, [r2, #80]	; 0x50
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_QSPI_MspInit+0x80>)
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_QSPI_MspInit+0x80>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_QSPI_MspInit+0x80>)
 8001aac:	f043 0310 	orr.w	r3, r3, #16
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_QSPI_MspInit+0x80>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001abe:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001ac2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_QSPI_MspInit+0x84>)
 8001adc:	f000 ff6e 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	a0001000 	.word	0xa0001000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	48001000 	.word	0x48001000

08001af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_SPI_MspInit+0x7c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d128      	bne.n	8001b68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_SPI_MspInit+0x80>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_SPI_MspInit+0x80>)
 8001b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b20:	6593      	str	r3, [r2, #88]	; 0x58
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_SPI_MspInit+0x80>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_SPI_MspInit+0x80>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_SPI_MspInit+0x80>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_SPI_MspInit+0x80>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001b46:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b58:	2306      	movs	r3, #6
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_SPI_MspInit+0x84>)
 8001b64:	f000 ff2a 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40003c00 	.word	0x40003c00
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000800 	.word	0x48000800

08001b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0ae      	sub	sp, #184	; 0xb8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	2288      	movs	r2, #136	; 0x88
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 fa85 	bl	80080ac <memset>
  if(huart->Instance==USART1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a42      	ldr	r2, [pc, #264]	; (8001cb0 <HAL_UART_MspInit+0x134>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d13b      	bne.n	8001c24 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 fc0f 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc4:	f7ff fe02 	bl	80017cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bcc:	4a39      	ldr	r2, [pc, #228]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd4:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	4a33      	ldr	r2, [pc, #204]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001bf8:	23c0      	movs	r3, #192	; 0xc0
 8001bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c10:	2307      	movs	r3, #7
 8001c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4826      	ldr	r0, [pc, #152]	; (8001cb8 <HAL_UART_MspInit+0x13c>)
 8001c1e:	f000 fecd 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c22:	e040      	b.n	8001ca6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <HAL_UART_MspInit+0x140>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d13b      	bne.n	8001ca6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fbce 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001c46:	f7ff fdc1 	bl	80017cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_UART_MspInit+0x138>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001c7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c94:	2307      	movs	r3, #7
 8001c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <HAL_UART_MspInit+0x144>)
 8001ca2:	f000 fe8b 	bl	80029bc <HAL_GPIO_Init>
}
 8001ca6:	bf00      	nop
 8001ca8:	37b8      	adds	r7, #184	; 0xb8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	40004800 	.word	0x40004800
 8001cc0:	48000c00 	.word	0x48000c00

08001cc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0ac      	sub	sp, #176	; 0xb0
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2288      	movs	r2, #136	; 0x88
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 f9e1 	bl	80080ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf2:	d17c      	bne.n	8001dee <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001cfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001d0a:	2318      	movs	r3, #24
 8001d0c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001d1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fb59 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001d30:	f7ff fd4c 	bl	80017cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	4a2f      	ldr	r2, [pc, #188]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d64:	4619      	mov	r1, r3
 8001d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6a:	f000 fe27 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001d6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d98:	f000 fe10 	bl	80029bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d114      	bne.n	8001dea <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	6593      	str	r3, [r2, #88]	; 0x58
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001dd8:	f003 fc34 	bl	8005644 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <HAL_PCD_MspInit+0x134>)
 8001de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001de8:	e001      	b.n	8001dee <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001dea:	f003 fc2b 	bl	8005644 <HAL_PWREx_EnableVddUSB>
}
 8001dee:	bf00      	nop
 8001df0:	37b0      	adds	r7, #176	; 0xb0
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 f910 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA1_Channel4_IRQHandler+0x10>)
 8001e56:	f000 fcc4 	bl	80027e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000164 	.word	0x20000164

08001e64 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <DMA1_Channel5_IRQHandler+0x10>)
 8001e6a:	f000 fcba 	bl	80027e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000011c 	.word	0x2000011c

08001e78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001e7c:	2020      	movs	r0, #32
 8001e7e:	f000 ff79 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001e82:	2040      	movs	r0, #64	; 0x40
 8001e84:	f000 ff76 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001e88:	2080      	movs	r0, #128	; 0x80
 8001e8a:	f000 ff73 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001e8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e92:	f000 ff6f 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <I2C2_EV_IRQHandler+0x10>)
 8001ea2:	f001 fcc3 	bl	800382c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200000c8 	.word	0x200000c8

08001eb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001eb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001eb8:	f000 ff5c 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001ebc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ec0:	f000 ff58 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001ec4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ec8:	f000 ff54 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001ecc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ed0:	f000 ff50 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ed4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ed8:	f000 ff4c 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <_sbrk+0x5c>)
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <_sbrk+0x60>)
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <_sbrk+0x64>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <_sbrk+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d207      	bcs.n	8001f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f10:	f006 f8a2 	bl	8008058 <__errno>
 8001f14:	4603      	mov	r3, r0
 8001f16:	220c      	movs	r2, #12
 8001f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e009      	b.n	8001f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <_sbrk+0x64>)
 8001f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20018000 	.word	0x20018000
 8001f40:	00000400 	.word	0x00000400
 8001f44:	20000874 	.word	0x20000874
 8001f48:	200008b0 	.word	0x200008b0

08001f4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <SystemInit+0x20>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <SystemInit+0x20>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f74:	f7ff ffea 	bl	8001f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <LoopForever+0xe>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	; (8001fbc <LoopForever+0x16>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f006 f861 	bl	8008064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fa2:	f7fe ffb1 	bl	8000f08 <main>

08001fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa6:	e7fe      	b.n	8001fa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001fb4:	08008ff0 	.word	0x08008ff0
  ldr r2, =_sbss
 8001fb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fbc:	200008b0 	.word	0x200008b0

08001fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC1_2_IRQHandler>

08001fc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f961 	bl	8002294 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f80e 	bl	8001ff4 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	e001      	b.n	8001fe8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fe4:	f7ff fbf8 	bl	80017d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_InitTick+0x6c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_InitTick+0x70>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_InitTick+0x6c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f96d 	bl	80022fe <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d809      	bhi.n	8002044 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 f937 	bl	80022aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_InitTick+0x74>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e007      	b.n	8002054 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e004      	b.n	8002054 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e001      	b.n	8002054 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000000c 	.word	0x2000000c
 8002064:	20000004 	.word	0x20000004
 8002068:	20000008 	.word	0x20000008

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2000000c 	.word	0x2000000c
 8002090:	20000878 	.word	0x20000878

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000878 	.word	0x20000878

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffde 	bl	8002094 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000000c 	.word	0x2000000c

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002260:	d301      	bcc.n	8002266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002262:	2301      	movs	r3, #1
 8002264:	e00f      	b.n	8002286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <SysTick_Config+0x40>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226e:	210f      	movs	r1, #15
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f7ff ff8e 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <SysTick_Config+0x40>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <SysTick_Config+0x40>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010

08002294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff29 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022bc:	f7ff ff3e 	bl	800213c <__NVIC_GetPriorityGrouping>
 80022c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff ff8e 	bl	80021e8 <NVIC_EncodePriority>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff5d 	bl	8002194 <__NVIC_SetPriority>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff31 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ffa2 	bl	8002250 <SysTick_Config>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0ac      	b.n	8002484 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f8b2 	bl	8002498 <DFSDM_GetChannelFromInstance>
 8002334:	4603      	mov	r3, r0
 8002336:	4a55      	ldr	r2, [pc, #340]	; (800248c <HAL_DFSDM_ChannelInit+0x174>)
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e09f      	b.n	8002484 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fa6b 	bl	8001820 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800234a:	4b51      	ldr	r3, [pc, #324]	; (8002490 <HAL_DFSDM_ChannelInit+0x178>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	4a4f      	ldr	r2, [pc, #316]	; (8002490 <HAL_DFSDM_ChannelInit+0x178>)
 8002352:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_DFSDM_ChannelInit+0x178>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d125      	bne.n	80023a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800235c:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a4c      	ldr	r2, [pc, #304]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 8002362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002366:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4948      	ldr	r1, [pc, #288]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a46      	ldr	r2, [pc, #280]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 800237c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002380:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	791b      	ldrb	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800238a:	4b42      	ldr	r3, [pc, #264]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	3b01      	subs	r3, #1
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	493f      	ldr	r1, [pc, #252]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800239c:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3c      	ldr	r2, [pc, #240]	; (8002494 <HAL_DFSDM_ChannelInit+0x17c>)
 80023a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023a6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80023b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80023cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 020f 	bic.w	r2, r2, #15
 80023e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800240c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6899      	ldr	r1, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	3b01      	subs	r3, #1
 800241e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f002 0207 	and.w	r2, r2, #7
 8002438:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002464:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f810 	bl	8002498 <DFSDM_GetChannelFromInstance>
 8002478:	4602      	mov	r2, r0
 800247a:	4904      	ldr	r1, [pc, #16]	; (800248c <HAL_DFSDM_ChannelInit+0x174>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000880 	.word	0x20000880
 8002490:	2000087c 	.word	0x2000087c
 8002494:	40016000 	.word	0x40016000

08002498 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <DFSDM_GetChannelFromInstance+0x7c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d102      	bne.n	80024ae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e02b      	b.n	8002506 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a19      	ldr	r2, [pc, #100]	; (8002518 <DFSDM_GetChannelFromInstance+0x80>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d102      	bne.n	80024bc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e024      	b.n	8002506 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a17      	ldr	r2, [pc, #92]	; (800251c <DFSDM_GetChannelFromInstance+0x84>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80024c4:	2302      	movs	r3, #2
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e01d      	b.n	8002506 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a14      	ldr	r2, [pc, #80]	; (8002520 <DFSDM_GetChannelFromInstance+0x88>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d102      	bne.n	80024d8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80024d2:	2304      	movs	r3, #4
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e016      	b.n	8002506 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a12      	ldr	r2, [pc, #72]	; (8002524 <DFSDM_GetChannelFromInstance+0x8c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d102      	bne.n	80024e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80024e0:	2305      	movs	r3, #5
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e00f      	b.n	8002506 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <DFSDM_GetChannelFromInstance+0x90>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d102      	bne.n	80024f4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80024ee:	2306      	movs	r3, #6
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e008      	b.n	8002506 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a0d      	ldr	r2, [pc, #52]	; (800252c <DFSDM_GetChannelFromInstance+0x94>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d102      	bne.n	8002502 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80024fc:	2307      	movs	r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e001      	b.n	8002506 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002502:	2303      	movs	r3, #3
 8002504:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40016000 	.word	0x40016000
 8002518:	40016020 	.word	0x40016020
 800251c:	40016040 	.word	0x40016040
 8002520:	40016080 	.word	0x40016080
 8002524:	400160a0 	.word	0x400160a0
 8002528:	400160c0 	.word	0x400160c0
 800252c:	400160e0 	.word	0x400160e0

08002530 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e098      	b.n	8002674 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_DMA_Init+0x150>)
 800254a:	429a      	cmp	r2, r3
 800254c:	d80f      	bhi.n	800256e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_DMA_Init+0x154>)
 8002556:	4413      	add	r3, r2
 8002558:	4a4b      	ldr	r2, [pc, #300]	; (8002688 <HAL_DMA_Init+0x158>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	009a      	lsls	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a48      	ldr	r2, [pc, #288]	; (800268c <HAL_DMA_Init+0x15c>)
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
 800256c:	e00e      	b.n	800258c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_DMA_Init+0x160>)
 8002576:	4413      	add	r3, r2
 8002578:	4a43      	ldr	r2, [pc, #268]	; (8002688 <HAL_DMA_Init+0x158>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	009a      	lsls	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a42      	ldr	r2, [pc, #264]	; (8002694 <HAL_DMA_Init+0x164>)
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e6:	d039      	beq.n	800265c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_DMA_Init+0x15c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d11a      	bne.n	8002628 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_DMA_Init+0x168>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 031c 	and.w	r3, r3, #28
 80025fe:	210f      	movs	r1, #15
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	4924      	ldr	r1, [pc, #144]	; (8002698 <HAL_DMA_Init+0x168>)
 8002608:	4013      	ands	r3, r2
 800260a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_DMA_Init+0x168>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f003 031c 	and.w	r3, r3, #28
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	491d      	ldr	r1, [pc, #116]	; (8002698 <HAL_DMA_Init+0x168>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
 8002626:	e019      	b.n	800265c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <HAL_DMA_Init+0x16c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f003 031c 	and.w	r3, r3, #28
 8002634:	210f      	movs	r1, #15
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	4917      	ldr	r1, [pc, #92]	; (800269c <HAL_DMA_Init+0x16c>)
 800263e:	4013      	ands	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_DMA_Init+0x16c>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f003 031c 	and.w	r3, r3, #28
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	4911      	ldr	r1, [pc, #68]	; (800269c <HAL_DMA_Init+0x16c>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40020407 	.word	0x40020407
 8002684:	bffdfff8 	.word	0xbffdfff8
 8002688:	cccccccd 	.word	0xcccccccd
 800268c:	40020000 	.word	0x40020000
 8002690:	bffdfbf8 	.word	0xbffdfbf8
 8002694:	40020400 	.word	0x40020400
 8002698:	400200a8 	.word	0x400200a8
 800269c:	400204a8 	.word	0x400204a8

080026a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Start_IT+0x20>
 80026bc:	2302      	movs	r3, #2
 80026be:	e04b      	b.n	8002758 <HAL_DMA_Start_IT+0xb8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d13a      	bne.n	800274a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f92f 	bl	800295c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 020e 	orr.w	r2, r2, #14
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e00f      	b.n	8002738 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 020a 	orr.w	r2, r2, #10
 8002736:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e005      	b.n	8002756 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d005      	beq.n	8002784 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2204      	movs	r2, #4
 800277c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e029      	b.n	80027d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 020e 	bic.w	r2, r2, #14
 8002792:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	f003 021c 	and.w	r2, r3, #28
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f202 	lsl.w	r2, r1, r2
 80027b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
    }
  }
  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f003 031c 	and.w	r3, r3, #28
 8002802:	2204      	movs	r2, #4
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d026      	beq.n	800285c <HAL_DMA_IRQHandler+0x7a>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d021      	beq.n	800285c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0204 	bic.w	r2, r2, #4
 8002834:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f003 021c 	and.w	r2, r3, #28
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2104      	movs	r1, #4
 8002844:	fa01 f202 	lsl.w	r2, r1, r2
 8002848:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	2b00      	cmp	r3, #0
 8002850:	d071      	beq.n	8002936 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800285a:	e06c      	b.n	8002936 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f003 031c 	and.w	r3, r3, #28
 8002864:	2202      	movs	r2, #2
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02e      	beq.n	80028ce <HAL_DMA_IRQHandler+0xec>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d029      	beq.n	80028ce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 020a 	bic.w	r2, r2, #10
 8002896:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	f003 021c 	and.w	r2, r3, #28
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	2102      	movs	r1, #2
 80028ae:	fa01 f202 	lsl.w	r2, r1, r2
 80028b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d038      	beq.n	8002936 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028cc:	e033      	b.n	8002936 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f003 031c 	and.w	r3, r3, #28
 80028d6:	2208      	movs	r2, #8
 80028d8:	409a      	lsls	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x156>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d025      	beq.n	8002938 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 020e 	bic.w	r2, r2, #14
 80028fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	f003 021c 	and.w	r2, r3, #28
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002936:	bf00      	nop
 8002938:	bf00      	nop
}
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800294e:	b2db      	uxtb	r3, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f003 021c 	and.w	r2, r3, #28
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b10      	cmp	r3, #16
 800298c:	d108      	bne.n	80029a0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800299e:	e007      	b.n	80029b0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	60da      	str	r2, [r3, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ca:	e17f      	b.n	8002ccc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8171 	beq.w	8002cc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d005      	beq.n	80029fc <HAL_GPIO_Init+0x40>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d130      	bne.n	8002a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a32:	2201      	movs	r2, #1
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 0201 	and.w	r2, r3, #1
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d118      	bne.n	8002a9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	08db      	lsrs	r3, r3, #3
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d017      	beq.n	8002ad8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d123      	bne.n	8002b2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	6939      	ldr	r1, [r7, #16]
 8002b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80ac 	beq.w	8002cc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <HAL_GPIO_Init+0x330>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	4a5e      	ldr	r2, [pc, #376]	; (8002cec <HAL_GPIO_Init+0x330>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6613      	str	r3, [r2, #96]	; 0x60
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <HAL_GPIO_Init+0x330>)
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b86:	4a5a      	ldr	r2, [pc, #360]	; (8002cf0 <HAL_GPIO_Init+0x334>)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bb0:	d025      	beq.n	8002bfe <HAL_GPIO_Init+0x242>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4f      	ldr	r2, [pc, #316]	; (8002cf4 <HAL_GPIO_Init+0x338>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <HAL_GPIO_Init+0x23e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4e      	ldr	r2, [pc, #312]	; (8002cf8 <HAL_GPIO_Init+0x33c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x23a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	; (8002cfc <HAL_GPIO_Init+0x340>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x236>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <HAL_GPIO_Init+0x344>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x232>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_GPIO_Init+0x348>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x22e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	; (8002d08 <HAL_GPIO_Init+0x34c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x22a>
 8002be2:	2306      	movs	r3, #6
 8002be4:	e00c      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e00a      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c10:	4937      	ldr	r1, [pc, #220]	; (8002cf0 <HAL_GPIO_Init+0x334>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c42:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cc0:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f47f ae78 	bne.w	80029cc <HAL_GPIO_Init+0x10>
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	48000800 	.word	0x48000800
 8002cfc:	48000c00 	.word	0x48000c00
 8002d00:	48001000 	.word	0x48001000
 8002d04:	48001400 	.word	0x48001400
 8002d08:	48001800 	.word	0x48001800
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	041a      	lsls	r2, r3, #16
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43d9      	mvns	r1, r3
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	400b      	ands	r3, r1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f806 	bl	8002da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e081      	b.n	8002ed0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fe fd81 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2224      	movs	r2, #36	; 0x24
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d107      	bne.n	8002e34 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e006      	b.n	8002e42 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d104      	bne.n	8002e54 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e66:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69d9      	ldr	r1, [r3, #28]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	817b      	strh	r3, [r7, #10]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	f040 80da 	bne.w	80030ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x30>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0d3      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x1d8>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f10:	f7ff f8c0 	bl	8002094 <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2319      	movs	r3, #25
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f001 fe1e 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0be      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2221      	movs	r2, #33	; 0x21
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	893a      	ldrh	r2, [r7, #8]
 8002f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2bff      	cmp	r3, #255	; 0xff
 8002f62:	d90e      	bls.n	8002f82 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	22ff      	movs	r2, #255	; 0xff
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f002 f814 	bl	8004fa8 <I2C_TransferConfig>
 8002f80:	e06c      	b.n	800305c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	8979      	ldrh	r1, [r7, #10]
 8002f94:	4b48      	ldr	r3, [pc, #288]	; (80030b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f002 f803 	bl	8004fa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fa2:	e05b      	b.n	800305c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	6a39      	ldr	r1, [r7, #32]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f001 fe1b 	bl	8004be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e07b      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d034      	beq.n	800305c <HAL_I2C_Master_Transmit+0x184>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d130      	bne.n	800305c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2200      	movs	r2, #0
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f001 fdad 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e04d      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2bff      	cmp	r3, #255	; 0xff
 800301c:	d90e      	bls.n	800303c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	b2da      	uxtb	r2, r3
 800302a:	8979      	ldrh	r1, [r7, #10]
 800302c:	2300      	movs	r3, #0
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f001 ffb7 	bl	8004fa8 <I2C_TransferConfig>
 800303a:	e00f      	b.n	800305c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	b2da      	uxtb	r2, r3
 800304c:	8979      	ldrh	r1, [r7, #10]
 800304e:	2300      	movs	r3, #0
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f001 ffa6 	bl	8004fa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d19e      	bne.n	8002fa4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	6a39      	ldr	r1, [r7, #32]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f001 fdfa 	bl	8004c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e01a      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_I2C_Master_Transmit+0x1e4>)
 800308e:	400b      	ands	r3, r1
 8003090:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	80002000 	.word	0x80002000
 80030bc:	fe00e800 	.word	0xfe00e800

080030c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	461a      	mov	r2, r3
 80030cc:	460b      	mov	r3, r1
 80030ce:	817b      	strh	r3, [r7, #10]
 80030d0:	4613      	mov	r3, r2
 80030d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b20      	cmp	r3, #32
 80030de:	f040 80db 	bne.w	8003298 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2C_Master_Receive+0x30>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e0d4      	b.n	800329a <HAL_I2C_Master_Receive+0x1da>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030f8:	f7fe ffcc 	bl	8002094 <HAL_GetTick>
 80030fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2319      	movs	r3, #25
 8003104:	2201      	movs	r2, #1
 8003106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f001 fd2a 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0bf      	b.n	800329a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2222      	movs	r2, #34	; 0x22
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2210      	movs	r2, #16
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	893a      	ldrh	r2, [r7, #8]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	2bff      	cmp	r3, #255	; 0xff
 800314a:	d90e      	bls.n	800316a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	b2da      	uxtb	r2, r3
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	4b52      	ldr	r3, [pc, #328]	; (80032a4 <HAL_I2C_Master_Receive+0x1e4>)
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f001 ff20 	bl	8004fa8 <I2C_TransferConfig>
 8003168:	e06d      	b.n	8003246 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	b2da      	uxtb	r2, r3
 800317a:	8979      	ldrh	r1, [r7, #10]
 800317c:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <HAL_I2C_Master_Receive+0x1e4>)
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f001 ff0f 	bl	8004fa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800318a:	e05c      	b.n	8003246 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	6a39      	ldr	r1, [r7, #32]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f001 fda3 	bl	8004cdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e07c      	b.n	800329a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d034      	beq.n	8003246 <HAL_I2C_Master_Receive+0x186>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d130      	bne.n	8003246 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f001 fcb8 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e04d      	b.n	800329a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	2bff      	cmp	r3, #255	; 0xff
 8003206:	d90e      	bls.n	8003226 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	22ff      	movs	r2, #255	; 0xff
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	b2da      	uxtb	r2, r3
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	2300      	movs	r3, #0
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f001 fec2 	bl	8004fa8 <I2C_TransferConfig>
 8003224:	e00f      	b.n	8003246 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f001 feb1 	bl	8004fa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d19d      	bne.n	800318c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	6a39      	ldr	r1, [r7, #32]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f001 fd05 	bl	8004c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e01a      	b.n	800329a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2220      	movs	r2, #32
 800326a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <HAL_I2C_Master_Receive+0x1e8>)
 8003278:	400b      	ands	r3, r1
 800327a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	80002400 	.word	0x80002400
 80032a8:	fe00e800 	.word	0xfe00e800

080032ac <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	461a      	mov	r2, r3
 80032b8:	460b      	mov	r3, r1
 80032ba:	817b      	strh	r3, [r7, #10]
 80032bc:	4613      	mov	r3, r2
 80032be:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d153      	bne.n	8003374 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032da:	d101      	bne.n	80032e0 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
 80032de:	e04a      	b.n	8003376 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_I2C_Master_Transmit_IT+0x42>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e043      	b.n	8003376 <HAL_I2C_Master_Transmit_IT+0xca>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2221      	movs	r2, #33	; 0x21
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2210      	movs	r2, #16
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	893a      	ldrh	r2, [r7, #8]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a19      	ldr	r2, [pc, #100]	; (8003380 <HAL_I2C_Master_Transmit_IT+0xd4>)
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a18      	ldr	r2, [pc, #96]	; (8003384 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8003322:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2bff      	cmp	r3, #255	; 0xff
 800332c:	d906      	bls.n	800333c <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e007      	b.n	800334c <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	b2da      	uxtb	r2, r3
 8003352:	8979      	ldrh	r1, [r7, #10]
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f001 fe24 	bl	8004fa8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003368:	2101      	movs	r1, #1
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f001 fe4e 	bl	800500c <I2C_Enable_IRQ>

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	ffff0000 	.word	0xffff0000
 8003384:	08003909 	.word	0x08003909
 8003388:	80002000 	.word	0x80002000

0800338c <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	461a      	mov	r2, r3
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
 800339c:	4613      	mov	r3, r2
 800339e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d153      	bne.n	8003454 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ba:	d101      	bne.n	80033c0 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
 80033be:	e04a      	b.n	8003456 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_I2C_Master_Receive_IT+0x42>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e043      	b.n	8003456 <HAL_I2C_Master_Receive_IT+0xca>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2222      	movs	r2, #34	; 0x22
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2210      	movs	r2, #16
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	893a      	ldrh	r2, [r7, #8]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_I2C_Master_Receive_IT+0xd4>)
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a18      	ldr	r2, [pc, #96]	; (8003464 <HAL_I2C_Master_Receive_IT+0xd8>)
 8003402:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2bff      	cmp	r3, #255	; 0xff
 800340c:	d906      	bls.n	800341c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	22ff      	movs	r2, #255	; 0xff
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e007      	b.n	800342c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800342a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	b2da      	uxtb	r2, r3
 8003432:	8979      	ldrh	r1, [r7, #10]
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_I2C_Master_Receive_IT+0xdc>)
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f001 fdb4 	bl	8004fa8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003448:	2102      	movs	r1, #2
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f001 fdde 	bl	800500c <I2C_Enable_IRQ>

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	ffff0000 	.word	0xffff0000
 8003464:	08003909 	.word	0x08003909
 8003468:	80002400 	.word	0x80002400

0800346c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	461a      	mov	r2, r3
 8003478:	460b      	mov	r3, r1
 800347a:	817b      	strh	r3, [r7, #10]
 800347c:	4613      	mov	r3, r2
 800347e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	f040 80cd 	bne.w	8003628 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	e0c3      	b.n	800362a <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_I2C_Master_Transmit_DMA+0x44>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0bc      	b.n	800362a <HAL_I2C_Master_Transmit_DMA+0x1be>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2221      	movs	r2, #33	; 0x21
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2210      	movs	r2, #16
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	893a      	ldrh	r2, [r7, #8]
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a55      	ldr	r2, [pc, #340]	; (8003634 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a55      	ldr	r2, [pc, #340]	; (8003638 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2bff      	cmp	r3, #255	; 0xff
 80034ee:	d906      	bls.n	80034fe <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	22ff      	movs	r2, #255	; 0xff
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80034f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e007      	b.n	800350e <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003508:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800350c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d070      	beq.n	80035f8 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	4a46      	ldr	r2, [pc, #280]	; (800363c <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	4a45      	ldr	r2, [pc, #276]	; (8003640 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 800352c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	2200      	movs	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3328      	adds	r3, #40	; 0x28
 800354a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003550:	f7ff f8a6 	bl	80026a0 <HAL_DMA_Start_IT>
 8003554:	4603      	mov	r3, r0
 8003556:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d138      	bne.n	80035d0 <HAL_I2C_Master_Transmit_DMA+0x164>
 800355e:	e013      	b.n	8003588 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e050      	b.n	800362a <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8979      	ldrh	r1, [r7, #10]
 8003590:	4b2c      	ldr	r3, [pc, #176]	; (8003644 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f001 fd06 	bl	8004fa8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80035b6:	2110      	movs	r1, #16
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f001 fd27 	bl	800500c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e029      	b.n	8003624 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f043 0210 	orr.w	r2, r3, #16
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e018      	b.n	800362a <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	b2da      	uxtb	r2, r3
 8003604:	8979      	ldrh	r1, [r7, #10]
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f001 fcca 	bl	8004fa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800361c:	2101      	movs	r1, #1
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f001 fcf4 	bl	800500c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e000      	b.n	800362a <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003628:	2302      	movs	r3, #2
  }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	ffff0000 	.word	0xffff0000
 8003638:	08003d5f 	.word	0x08003d5f
 800363c:	080049cf 	.word	0x080049cf
 8003640:	08004afb 	.word	0x08004afb
 8003644:	80002000 	.word	0x80002000
 8003648:	08003909 	.word	0x08003909

0800364c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	460b      	mov	r3, r1
 800365a:	817b      	strh	r3, [r7, #10]
 800365c:	4613      	mov	r3, r2
 800365e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b20      	cmp	r3, #32
 800366a:	f040 80cd 	bne.w	8003808 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	e0c3      	b.n	800380a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_I2C_Master_Receive_DMA+0x44>
 800368c:	2302      	movs	r3, #2
 800368e:	e0bc      	b.n	800380a <HAL_I2C_Master_Receive_DMA+0x1be>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2222      	movs	r2, #34	; 0x22
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2210      	movs	r2, #16
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	893a      	ldrh	r2, [r7, #8]
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a55      	ldr	r2, [pc, #340]	; (8003814 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a55      	ldr	r2, [pc, #340]	; (8003818 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2bff      	cmp	r3, #255	; 0xff
 80036ce:	d906      	bls.n	80036de <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80036d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e007      	b.n	80036ee <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80036e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d070      	beq.n	80037d8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d020      	beq.n	8003740 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	4a46      	ldr	r2, [pc, #280]	; (800381c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	4a45      	ldr	r2, [pc, #276]	; (8003820 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800370c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2200      	movs	r2, #0
 800371c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3324      	adds	r3, #36	; 0x24
 8003728:	4619      	mov	r1, r3
 800372a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003730:	f7fe ffb6 	bl	80026a0 <HAL_DMA_Start_IT>
 8003734:	4603      	mov	r3, r0
 8003736:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d138      	bne.n	80037b0 <HAL_I2C_Master_Receive_DMA+0x164>
 800373e:	e013      	b.n	8003768 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e050      	b.n	800380a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	b2da      	uxtb	r2, r3
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	4b2c      	ldr	r3, [pc, #176]	; (8003824 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f001 fc16 	bl	8004fa8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003796:	2110      	movs	r1, #16
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f001 fc37 	bl	800500c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e029      	b.n	8003804 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	f043 0210 	orr.w	r2, r3, #16
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e018      	b.n	800380a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	8979      	ldrh	r1, [r7, #10]
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f001 fbda 	bl	8004fa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037fc:	2101      	movs	r1, #1
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f001 fc04 	bl	800500c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	ffff0000 	.word	0xffff0000
 8003818:	08003d5f 	.word	0x08003d5f
 800381c:	08004a65 	.word	0x08004a65
 8003820:	08004afb 	.word	0x08004afb
 8003824:	80002400 	.word	0x80002400
 8003828:	08003909 	.word	0x08003909

0800382c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	68f9      	ldr	r1, [r7, #12]
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
  }
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
 8003894:	4613      	mov	r3, r2
 8003896:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <I2C_Master_ISR_IT+0x1e>
 8003922:	2302      	movs	r3, #2
 8003924:	e114      	b.n	8003b50 <I2C_Master_ISR_IT+0x248>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d013      	beq.n	8003962 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2210      	movs	r2, #16
 800394c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f043 0204 	orr.w	r2, r3, #4
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f001 f813 	bl	8004986 <I2C_Flush_TXDR>
 8003960:	e0e1      	b.n	8003b26 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d023      	beq.n	80039b6 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01d      	beq.n	80039b6 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 0304 	bic.w	r3, r3, #4
 8003980:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039b4:	e0b7      	b.n	8003b26 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01e      	beq.n	8003a00 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	781a      	ldrb	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039fe:	e092      	b.n	8003b26 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	09db      	lsrs	r3, r3, #7
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d05d      	beq.n	8003ac8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d057      	beq.n	8003ac8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d040      	beq.n	8003aa4 <I2C_Master_ISR_IT+0x19c>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d13c      	bne.n	8003aa4 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a36:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2bff      	cmp	r3, #255	; 0xff
 8003a40:	d90e      	bls.n	8003a60 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	8a79      	ldrh	r1, [r7, #18]
 8003a50:	2300      	movs	r3, #0
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f001 faa5 	bl	8004fa8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5e:	e032      	b.n	8003ac6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a72:	d00b      	beq.n	8003a8c <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	8a79      	ldrh	r1, [r7, #18]
 8003a80:	2000      	movs	r0, #0
 8003a82:	9000      	str	r0, [sp, #0]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f001 fa8f 	bl	8004fa8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a8a:	e01c      	b.n	8003ac6 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	8a79      	ldrh	r1, [r7, #18]
 8003a94:	2300      	movs	r3, #0
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f001 fa83 	bl	8004fa8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa2:	e010      	b.n	8003ac6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ab2:	d003      	beq.n	8003abc <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fba9 	bl	800420c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aba:	e034      	b.n	8003b26 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003abc:	2140      	movs	r1, #64	; 0x40
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fe6a 	bl	8004798 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ac4:	e02f      	b.n	8003b26 <I2C_Master_ISR_IT+0x21e>
 8003ac6:	e02e      	b.n	8003b26 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d028      	beq.n	8003b26 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d022      	beq.n	8003b26 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d119      	bne.n	8003b1e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003af8:	d015      	beq.n	8003b26 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b02:	d108      	bne.n	8003b16 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	e007      	b.n	8003b26 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fb78 	bl	800420c <I2C_ITMasterSeqCplt>
 8003b1c:	e003      	b.n	8003b26 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b1e:	2140      	movs	r1, #64	; 0x40
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fe39 	bl	8004798 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003b3e:	6979      	ldr	r1, [r7, #20]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fbff 	bl	8004344 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <I2C_Slave_ISR_IT+0x24>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0ec      	b.n	8003d56 <I2C_Slave_ISR_IT+0x1fe>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003b9c:	6939      	ldr	r1, [r7, #16]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fc9a 	bl	80044d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d04d      	beq.n	8003c4c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d047      	beq.n	8003c4c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d128      	bne.n	8003c18 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b28      	cmp	r3, #40	; 0x28
 8003bd0:	d108      	bne.n	8003be4 <I2C_Slave_ISR_IT+0x8c>
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd8:	d104      	bne.n	8003be4 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fd85 	bl	80046ec <I2C_ITListenCplt>
 8003be2:	e032      	b.n	8003c4a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b29      	cmp	r3, #41	; 0x29
 8003bee:	d10e      	bne.n	8003c0e <I2C_Slave_ISR_IT+0xb6>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bf6:	d00a      	beq.n	8003c0e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fec0 	bl	8004986 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fb3d 	bl	8004286 <I2C_ITSlaveSeqCplt>
 8003c0c:	e01d      	b.n	8003c4a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2210      	movs	r2, #16
 8003c14:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c16:	e096      	b.n	8003d46 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	f043 0204 	orr.w	r2, r3, #4
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <I2C_Slave_ISR_IT+0xe4>
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c38:	f040 8085 	bne.w	8003d46 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	4619      	mov	r1, r3
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fda8 	bl	8004798 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c48:	e07d      	b.n	8003d46 <I2C_Slave_ISR_IT+0x1ee>
 8003c4a:	e07c      	b.n	8003d46 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	089b      	lsrs	r3, r3, #2
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d030      	beq.n	8003cba <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02a      	beq.n	8003cba <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d018      	beq.n	8003ca0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d14f      	bne.n	8003d4a <I2C_Slave_ISR_IT+0x1f2>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cb0:	d04b      	beq.n	8003d4a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fae7 	bl	8004286 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003cb8:	e047      	b.n	8003d4a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	08db      	lsrs	r3, r3, #3
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003cd2:	6939      	ldr	r1, [r7, #16]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fa15 	bl	8004104 <I2C_ITAddrCplt>
 8003cda:	e037      	b.n	8003d4c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d031      	beq.n	8003d4c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d02b      	beq.n	8003d4c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d018      	beq.n	8003d30 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003d2e:	e00d      	b.n	8003d4c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d36:	d002      	beq.n	8003d3e <I2C_Slave_ISR_IT+0x1e6>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 faa1 	bl	8004286 <I2C_ITSlaveSeqCplt>
 8003d44:	e002      	b.n	8003d4c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003d4a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b088      	sub	sp, #32
 8003d62:	af02      	add	r7, sp, #8
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <I2C_Master_ISR_DMA+0x1a>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0e1      	b.n	8003f3c <I2C_Master_ISR_DMA+0x1de>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d011      	beq.n	8003dbc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f043 0204 	orr.w	r2, r3, #4
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003dac:	2120      	movs	r1, #32
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f001 f92c 	bl	800500c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fde6 	bl	8004986 <I2C_Flush_TXDR>
 8003dba:	e0ba      	b.n	8003f32 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	09db      	lsrs	r3, r3, #7
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d072      	beq.n	8003eae <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	099b      	lsrs	r3, r3, #6
 8003dcc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d06c      	beq.n	8003eae <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d04e      	beq.n	8003e8c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dfa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2bff      	cmp	r3, #255	; 0xff
 8003e04:	d906      	bls.n	8003e14 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	22ff      	movs	r2, #255	; 0xff
 8003e0a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e010      	b.n	8003e36 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e26:	d003      	beq.n	8003e30 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e002      	b.n	8003e36 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e34:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	8a79      	ldrh	r1, [r7, #18]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f001 f8af 	bl	8004fa8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b22      	cmp	r3, #34	; 0x22
 8003e66:	d108      	bne.n	8003e7a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e78:	e05b      	b.n	8003f32 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e88:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e8a:	e052      	b.n	8003f32 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e9a:	d003      	beq.n	8003ea4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9b5 	bl	800420c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003ea2:	e046      	b.n	8003f32 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ea4:	2140      	movs	r1, #64	; 0x40
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fc76 	bl	8004798 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003eac:	e041      	b.n	8003f32 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d029      	beq.n	8003f0e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d023      	beq.n	8003f0e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d119      	bne.n	8003f04 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ede:	d027      	beq.n	8003f30 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee8:	d108      	bne.n	8003efc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003efa:	e019      	b.n	8003f30 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f985 	bl	800420c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003f02:	e015      	b.n	8003f30 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f04:	2140      	movs	r1, #64	; 0x40
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fc46 	bl	8004798 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f0c:	e010      	b.n	8003f30 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fa0b 	bl	8004344 <I2C_ITMasterCplt>
 8003f2e:	e000      	b.n	8003f32 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003f30:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <I2C_Slave_ISR_DMA+0x24>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0c9      	b.n	80040fc <I2C_Slave_ISR_DMA+0x1b8>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 faa4 	bl	80044d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 809a 	beq.w	80040d2 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8093 	beq.w	80040d2 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	0b9b      	lsrs	r3, r3, #14
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	0bdb      	lsrs	r3, r3, #15
 8003fbc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d07f      	beq.n	80040c4 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0bdb      	lsrs	r3, r3, #15
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0b9b      	lsrs	r3, r3, #14
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004008:	2301      	movs	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d128      	bne.n	8004064 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b28      	cmp	r3, #40	; 0x28
 800401c:	d108      	bne.n	8004030 <I2C_Slave_ISR_DMA+0xec>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004024:	d104      	bne.n	8004030 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fb5f 	bl	80046ec <I2C_ITListenCplt>
 800402e:	e048      	b.n	80040c2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b29      	cmp	r3, #41	; 0x29
 800403a:	d10e      	bne.n	800405a <I2C_Slave_ISR_DMA+0x116>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004042:	d00a      	beq.n	800405a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2210      	movs	r2, #16
 800404a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fc9a 	bl	8004986 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f917 	bl	8004286 <I2C_ITSlaveSeqCplt>
 8004058:	e033      	b.n	80040c2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2210      	movs	r2, #16
 8004060:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004062:	e034      	b.n	80040ce <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2210      	movs	r2, #16
 800406a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004070:	f043 0204 	orr.w	r2, r3, #4
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <I2C_Slave_ISR_DMA+0x14a>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800408c:	d11f      	bne.n	80040ce <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b21      	cmp	r3, #33	; 0x21
 8004092:	d002      	beq.n	800409a <I2C_Slave_ISR_DMA+0x156>
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b29      	cmp	r3, #41	; 0x29
 8004098:	d103      	bne.n	80040a2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2221      	movs	r2, #33	; 0x21
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
 80040a0:	e008      	b.n	80040b4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b22      	cmp	r3, #34	; 0x22
 80040a6:	d002      	beq.n	80040ae <I2C_Slave_ISR_DMA+0x16a>
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b2a      	cmp	r3, #42	; 0x2a
 80040ac:	d102      	bne.n	80040b4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2222      	movs	r2, #34	; 0x22
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	4619      	mov	r1, r3
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fb6c 	bl	8004798 <I2C_ITError>
      if (treatdmanack == 1U)
 80040c0:	e005      	b.n	80040ce <I2C_Slave_ISR_DMA+0x18a>
 80040c2:	e004      	b.n	80040ce <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2210      	movs	r2, #16
 80040ca:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040cc:	e011      	b.n	80040f2 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80040ce:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040d0:	e00f      	b.n	80040f2 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	08db      	lsrs	r3, r3, #3
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	08db      	lsrs	r3, r3, #3
 80040e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f809 	bl	8004104 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800411a:	2b28      	cmp	r3, #40	; 0x28
 800411c:	d16a      	bne.n	80041f4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	b29b      	uxth	r3, r3
 8004138:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800413c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	b29b      	uxth	r3, r3
 8004146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004158:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d138      	bne.n	80041d4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	09db      	lsrs	r3, r3, #7
 8004166:	b29a      	uxth	r2, r3
 8004168:	89bb      	ldrh	r3, [r7, #12]
 800416a:	4053      	eors	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11c      	bne.n	80041b0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004188:	2b02      	cmp	r3, #2
 800418a:	d13b      	bne.n	8004204 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2208      	movs	r2, #8
 8004198:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041a2:	89ba      	ldrh	r2, [r7, #12]
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fb6d 	bl	8003888 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041ae:	e029      	b.n	8004204 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 ff91 	bl	80050e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041c6:	89ba      	ldrh	r2, [r7, #12]
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff fb5b 	bl	8003888 <HAL_I2C_AddrCallback>
}
 80041d2:	e017      	b.n	8004204 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 ff81 	bl	80050e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041e6:	89ba      	ldrh	r2, [r7, #12]
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fb4b 	bl	8003888 <HAL_I2C_AddrCallback>
}
 80041f2:	e007      	b.n	8004204 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2208      	movs	r2, #8
 80041fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b21      	cmp	r3, #33	; 0x21
 8004226:	d115      	bne.n	8004254 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2211      	movs	r2, #17
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800423c:	2101      	movs	r1, #1
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 ff4e 	bl	80050e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fd fa5b 	bl	8001708 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004252:	e014      	b.n	800427e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2212      	movs	r2, #18
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004268:	2102      	movs	r1, #2
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 ff38 	bl	80050e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7fd fa59 	bl	8001730 <HAL_I2C_MasterRxCpltCallback>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	0b9b      	lsrs	r3, r3, #14
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e00d      	b.n	80042d8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	0bdb      	lsrs	r3, r3, #15
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b29      	cmp	r3, #41	; 0x29
 80042e2:	d112      	bne.n	800430a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2228      	movs	r2, #40	; 0x28
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2221      	movs	r2, #33	; 0x21
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042f2:	2101      	movs	r1, #1
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fef3 	bl	80050e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff faac 	bl	8003860 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004308:	e017      	b.n	800433a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b2a      	cmp	r3, #42	; 0x2a
 8004314:	d111      	bne.n	800433a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2228      	movs	r2, #40	; 0x28
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2222      	movs	r2, #34	; 0x22
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004324:	2102      	movs	r1, #2
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 feda 	bl	80050e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fa9d 	bl	8003874 <HAL_I2C_SlaveRxCpltCallback>
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2220      	movs	r2, #32
 8004358:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b21      	cmp	r3, #33	; 0x21
 8004364:	d107      	bne.n	8004376 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004366:	2101      	movs	r1, #1
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 feb9 	bl	80050e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2211      	movs	r2, #17
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
 8004374:	e00c      	b.n	8004390 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b22      	cmp	r3, #34	; 0x22
 8004380:	d106      	bne.n	8004390 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004382:	2102      	movs	r1, #2
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 feab 	bl	80050e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2212      	movs	r2, #18
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b4d      	ldr	r3, [pc, #308]	; (80044d0 <I2C_ITMasterCplt+0x18c>)
 800439c:	400b      	ands	r3, r1
 800439e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4a      	ldr	r2, [pc, #296]	; (80044d4 <I2C_ITMasterCplt+0x190>)
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2210      	movs	r2, #16
 80043be:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f043 0204 	orr.w	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b60      	cmp	r3, #96	; 0x60
 80043d6:	d10b      	bne.n	80043f0 <I2C_ITMasterCplt+0xac>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80043ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fac8 	bl	8004986 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b60      	cmp	r3, #96	; 0x60
 8004406:	d002      	beq.n	800440e <I2C_ITMasterCplt+0xca>
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f9bf 	bl	8004798 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800441a:	e054      	b.n	80044c6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b21      	cmp	r3, #33	; 0x21
 8004426:	d124      	bne.n	8004472 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d10b      	bne.n	800445a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff fa30 	bl	80038b8 <HAL_I2C_MemTxCpltCallback>
}
 8004458:	e035      	b.n	80044c6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fd f94c 	bl	8001708 <HAL_I2C_MasterTxCpltCallback>
}
 8004470:	e029      	b.n	80044c6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b22      	cmp	r3, #34	; 0x22
 800447c:	d123      	bne.n	80044c6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d10b      	bne.n	80044b0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fa0f 	bl	80038cc <HAL_I2C_MemRxCpltCallback>
}
 80044ae:	e00a      	b.n	80044c6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd f935 	bl	8001730 <HAL_I2C_MasterRxCpltCallback>
}
 80044c6:	bf00      	nop
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	fe00e800 	.word	0xfe00e800
 80044d4:	ffff0000 	.word	0xffff0000

080044d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2220      	movs	r2, #32
 80044fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b21      	cmp	r3, #33	; 0x21
 8004502:	d002      	beq.n	800450a <I2C_ITSlaveCplt+0x32>
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b29      	cmp	r3, #41	; 0x29
 8004508:	d108      	bne.n	800451c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800450a:	f248 0101 	movw	r1, #32769	; 0x8001
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fde6 	bl	80050e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2221      	movs	r2, #33	; 0x21
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
 800451a:	e00d      	b.n	8004538 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b22      	cmp	r3, #34	; 0x22
 8004520:	d002      	beq.n	8004528 <I2C_ITSlaveCplt+0x50>
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b2a      	cmp	r3, #42	; 0x2a
 8004526:	d107      	bne.n	8004538 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004528:	f248 0102 	movw	r1, #32770	; 0x8002
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fdd7 	bl	80050e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2222      	movs	r2, #34	; 0x22
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004546:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b64      	ldr	r3, [pc, #400]	; (80046e4 <I2C_ITSlaveCplt+0x20c>)
 8004554:	400b      	ands	r3, r1
 8004556:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fa14 	bl	8004986 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	0b9b      	lsrs	r3, r3, #14
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004578:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004590:	e018      	b.n	80045c4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	0bdb      	lsrs	r3, r3, #15
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00c      	beq.n	8004612 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	f043 0204 	orr.w	r2, r3, #4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	2b00      	cmp	r3, #0
 800463c:	d010      	beq.n	8004660 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	4619      	mov	r1, r3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8a7 	bl	8004798 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b28      	cmp	r3, #40	; 0x28
 8004654:	d141      	bne.n	80046da <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f847 	bl	80046ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800465e:	e03c      	b.n	80046da <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004668:	d014      	beq.n	8004694 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fe0b 	bl	8004286 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <I2C_ITSlaveCplt+0x210>)
 8004674:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff f909 	bl	80038a4 <HAL_I2C_ListenCpltCallback>
}
 8004692:	e022      	b.n	80046da <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b22      	cmp	r3, #34	; 0x22
 800469e:	d10e      	bne.n	80046be <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff f8dc 	bl	8003874 <HAL_I2C_SlaveRxCpltCallback>
}
 80046bc:	e00d      	b.n	80046da <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff f8c3 	bl	8003860 <HAL_I2C_SlaveTxCpltCallback>
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	fe00e800 	.word	0xfe00e800
 80046e8:	ffff0000 	.word	0xffff0000

080046ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a26      	ldr	r2, [pc, #152]	; (8004794 <I2C_ITListenCplt+0xa8>)
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	089b      	lsrs	r3, r3, #2
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d022      	beq.n	800476a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d012      	beq.n	800476a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	f043 0204 	orr.w	r2, r3, #4
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800476a:	f248 0103 	movw	r1, #32771	; 0x8003
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fcb6 	bl	80050e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2210      	movs	r2, #16
 800477a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff f88d 	bl	80038a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	ffff0000 	.word	0xffff0000

08004798 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a5d      	ldr	r2, [pc, #372]	; (800492c <I2C_ITError+0x194>)
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b28      	cmp	r3, #40	; 0x28
 80047ce:	d005      	beq.n	80047dc <I2C_ITError+0x44>
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b29      	cmp	r3, #41	; 0x29
 80047d4:	d002      	beq.n	80047dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b2a      	cmp	r3, #42	; 0x2a
 80047da:	d10b      	bne.n	80047f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047dc:	2103      	movs	r1, #3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fc7e 	bl	80050e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2228      	movs	r2, #40	; 0x28
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a50      	ldr	r2, [pc, #320]	; (8004930 <I2C_ITError+0x198>)
 80047f0:	635a      	str	r2, [r3, #52]	; 0x34
 80047f2:	e011      	b.n	8004818 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fc71 	bl	80050e0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b60      	cmp	r3, #96	; 0x60
 8004808:	d003      	beq.n	8004812 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	2b00      	cmp	r3, #0
 8004824:	d039      	beq.n	800489a <I2C_ITError+0x102>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b11      	cmp	r3, #17
 800482a:	d002      	beq.n	8004832 <I2C_ITError+0x9a>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b21      	cmp	r3, #33	; 0x21
 8004830:	d133      	bne.n	800489a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004840:	d107      	bne.n	8004852 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004850:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe f872 	bl	8002940 <HAL_DMA_GetState>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d017      	beq.n	8004892 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	4a33      	ldr	r2, [pc, #204]	; (8004934 <I2C_ITError+0x19c>)
 8004868:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd ff72 	bl	8002760 <HAL_DMA_Abort_IT>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d04d      	beq.n	800491e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800488c:	4610      	mov	r0, r2
 800488e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004890:	e045      	b.n	800491e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f850 	bl	8004938 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004898:	e041      	b.n	800491e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d039      	beq.n	8004916 <I2C_ITError+0x17e>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b12      	cmp	r3, #18
 80048a6:	d002      	beq.n	80048ae <I2C_ITError+0x116>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b22      	cmp	r3, #34	; 0x22
 80048ac:	d133      	bne.n	8004916 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	d107      	bne.n	80048ce <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe f834 	bl	8002940 <HAL_DMA_GetState>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d017      	beq.n	800490e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	4a14      	ldr	r2, [pc, #80]	; (8004934 <I2C_ITError+0x19c>)
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd ff34 	bl	8002760 <HAL_DMA_Abort_IT>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d011      	beq.n	8004922 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004908:	4610      	mov	r0, r2
 800490a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800490c:	e009      	b.n	8004922 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f812 	bl	8004938 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004914:	e005      	b.n	8004922 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f80e 	bl	8004938 <I2C_TreatErrorCallback>
  }
}
 800491c:	e002      	b.n	8004924 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004922:	bf00      	nop
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	ffff0000 	.word	0xffff0000
 8004930:	08003b59 	.word	0x08003b59
 8004934:	08004b29 	.word	0x08004b29

08004938 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b60      	cmp	r3, #96	; 0x60
 800494a:	d10e      	bne.n	800496a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fe ffc6 	bl	80038f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004968:	e009      	b.n	800497e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fe ffb1 	bl	80038e0 <HAL_I2C_ErrorCallback>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d103      	bne.n	80049a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2200      	movs	r2, #0
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d007      	beq.n	80049c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	619a      	str	r2, [r3, #24]
  }
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049ea:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80049f6:	2120      	movs	r1, #32
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fb07 	bl	800500c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80049fe:	e02d      	b.n	8004a5c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004a08:	441a      	add	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2bff      	cmp	r3, #255	; 0xff
 8004a16:	d903      	bls.n	8004a20 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	22ff      	movs	r2, #255	; 0xff
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a1e:	e004      	b.n	8004a2a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	4619      	mov	r1, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3328      	adds	r3, #40	; 0x28
 8004a3a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004a40:	f7fd fe2e 	bl	80026a0 <HAL_DMA_Start_IT>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d004      	beq.n	8004a54 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004a4a:	2110      	movs	r1, #16
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff fea3 	bl	8004798 <I2C_ITError>
}
 8004a52:	e003      	b.n	8004a5c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004a54:	2140      	movs	r1, #64	; 0x40
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fad8 	bl	800500c <I2C_Enable_IRQ>
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a80:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a8c:	2120      	movs	r1, #32
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fabc 	bl	800500c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004a94:	e02d      	b.n	8004af2 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004a9e:	441a      	add	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2bff      	cmp	r3, #255	; 0xff
 8004aac:	d903      	bls.n	8004ab6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	22ff      	movs	r2, #255	; 0xff
 8004ab2:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ab4:	e004      	b.n	8004ac0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3324      	adds	r3, #36	; 0x24
 8004aca:	4619      	mov	r1, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004ad6:	f7fd fde3 	bl	80026a0 <HAL_DMA_Start_IT>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004ae0:	2110      	movs	r1, #16
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff fe58 	bl	8004798 <I2C_ITError>
}
 8004ae8:	e003      	b.n	8004af2 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004aea:	2140      	movs	r1, #64	; 0x40
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fa8d 	bl	800500c <I2C_Enable_IRQ>
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b16:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004b18:	2110      	movs	r1, #16
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fe3c 	bl	8004798 <I2C_ITError>
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	2200      	movs	r2, #0
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	2200      	movs	r2, #0
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7ff feee 	bl	8004938 <I2C_TreatErrorCallback>
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b74:	e022      	b.n	8004bbc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d01e      	beq.n	8004bbc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fd fa89 	bl	8002094 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d113      	bne.n	8004bbc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e00f      	b.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d0cd      	beq.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bf0:	e02c      	b.n	8004c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f8ea 	bl	8004dd0 <I2C_IsErrorOccurred>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e02a      	b.n	8004c5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d01e      	beq.n	8004c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fd fa41 	bl	8002094 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d113      	bne.n	8004c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e007      	b.n	8004c5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d1cb      	bne.n	8004bf2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c70:	e028      	b.n	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f8aa 	bl	8004dd0 <I2C_IsErrorOccurred>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e026      	b.n	8004cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c86:	f7fd fa05 	bl	8002094 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d113      	bne.n	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e007      	b.n	8004cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d1cf      	bne.n	8004c72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce8:	e064      	b.n	8004db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f86e 	bl	8004dd0 <I2C_IsErrorOccurred>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e062      	b.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d138      	bne.n	8004d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d105      	bne.n	8004d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e04e      	b.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d107      	bne.n	8004d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2210      	movs	r2, #16
 8004d3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2204      	movs	r2, #4
 8004d40:	645a      	str	r2, [r3, #68]	; 0x44
 8004d42:	e002      	b.n	8004d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004d5e:	400b      	ands	r3, r1
 8004d60:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e022      	b.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7e:	f7fd f989 	bl	8002094 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d302      	bcc.n	8004d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10f      	bne.n	8004db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d98:	f043 0220 	orr.w	r2, r3, #32
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e007      	b.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d193      	bne.n	8004cea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	fe00e800 	.word	0xfe00e800

08004dd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d075      	beq.n	8004ee8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2210      	movs	r2, #16
 8004e02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e04:	e056      	b.n	8004eb4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d052      	beq.n	8004eb4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fd f941 	bl	8002094 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_IsErrorOccurred+0x54>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d147      	bne.n	8004eb4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e46:	d12e      	bne.n	8004ea6 <I2C_IsErrorOccurred+0xd6>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e4e:	d02a      	beq.n	8004ea6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d027      	beq.n	8004ea6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e66:	f7fd f915 	bl	8002094 <HAL_GetTick>
 8004e6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6c:	e01b      	b.n	8004ea6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e6e:	f7fd f911 	bl	8002094 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b19      	cmp	r3, #25
 8004e7a:	d914      	bls.n	8004ea6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	f043 0220 	orr.w	r2, r3, #32
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d1dc      	bne.n	8004e6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d003      	beq.n	8004eca <I2C_IsErrorOccurred+0xfa>
 8004ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d09d      	beq.n	8004e06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	f043 0308 	orr.w	r3, r3, #8
 8004f22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01c      	beq.n	8004f98 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fd11 	bl	8004986 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <I2C_IsErrorOccurred+0x1d4>)
 8004f70:	400b      	ands	r3, r1
 8004f72:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3728      	adds	r7, #40	; 0x28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	fe00e800 	.word	0xfe00e800

08004fa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fba:	897b      	ldrh	r3, [r7, #10]
 8004fbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fc0:	7a7b      	ldrb	r3, [r7, #9]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	0d5b      	lsrs	r3, r3, #21
 8004fe2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <I2C_TransferConfig+0x60>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	43db      	mvns	r3, r3
 8004fec:	ea02 0103 	and.w	r1, r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	03ff63ff 	.word	0x03ff63ff

0800500c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005020:	4a2d      	ldr	r2, [pc, #180]	; (80050d8 <I2C_Enable_IRQ+0xcc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800502a:	4a2c      	ldr	r2, [pc, #176]	; (80050dc <I2C_Enable_IRQ+0xd0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d11d      	bne.n	800506c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005030:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005034:	2b00      	cmp	r3, #0
 8005036:	da03      	bge.n	8005040 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800503e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	2b10      	cmp	r3, #16
 8005044:	d103      	bne.n	800504e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800504c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800504e:	887b      	ldrh	r3, [r7, #2]
 8005050:	2b20      	cmp	r3, #32
 8005052:	d103      	bne.n	800505c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800505a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d12c      	bne.n	80050bc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005068:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800506a:	e027      	b.n	80050bc <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800506c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005070:	2b00      	cmp	r3, #0
 8005072:	da03      	bge.n	800507c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800507a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800508c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800508e:	887b      	ldrh	r3, [r7, #2]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800509e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80050a0:	887b      	ldrh	r3, [r7, #2]
 80050a2:	2b10      	cmp	r3, #16
 80050a4:	d103      	bne.n	80050ae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80050ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d103      	bne.n	80050bc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f043 0320 	orr.w	r3, r3, #32
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	08003d5f 	.word	0x08003d5f
 80050dc:	08003f45 	.word	0x08003f45

080050e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00f      	beq.n	800511a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005100:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800510e:	2b28      	cmp	r3, #40	; 0x28
 8005110:	d003      	beq.n	800511a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005118:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00f      	beq.n	8005144 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800512a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005138:	2b28      	cmp	r3, #40	; 0x28
 800513a:	d003      	beq.n	8005144 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005142:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005144:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005148:	2b00      	cmp	r3, #0
 800514a:	da03      	bge.n	8005154 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005152:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005154:	887b      	ldrh	r3, [r7, #2]
 8005156:	2b10      	cmp	r3, #16
 8005158:	d103      	bne.n	8005162 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005160:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	2b20      	cmp	r3, #32
 8005166:	d103      	bne.n	8005170 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f043 0320 	orr.w	r3, r3, #32
 800516e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005170:	887b      	ldrh	r3, [r7, #2]
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	d103      	bne.n	800517e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	43da      	mvns	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	400a      	ands	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d138      	bne.n	8005224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051bc:	2302      	movs	r3, #2
 80051be:	e032      	b.n	8005226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2224      	movs	r2, #36	; 0x24
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b20      	cmp	r3, #32
 8005246:	d139      	bne.n	80052bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005252:	2302      	movs	r3, #2
 8005254:	e033      	b.n	80052be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2224      	movs	r2, #36	; 0x24
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005284:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052cc:	b08f      	sub	sp, #60	; 0x3c
 80052ce:	af0a      	add	r7, sp, #40	; 0x28
 80052d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e116      	b.n	800550a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc fce4 	bl	8001cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2203      	movs	r2, #3
 8005300:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d102      	bne.n	8005316 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f002 fc13 	bl	8007b46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	687e      	ldr	r6, [r7, #4]
 8005328:	466d      	mov	r5, sp
 800532a:	f106 0410 	add.w	r4, r6, #16
 800532e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005336:	e894 0003 	ldmia.w	r4, {r0, r1}
 800533a:	e885 0003 	stmia.w	r5, {r0, r1}
 800533e:	1d33      	adds	r3, r6, #4
 8005340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005342:	6838      	ldr	r0, [r7, #0]
 8005344:	f002 fbd3 	bl	8007aee <USB_CoreInit>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e0d7      	b.n	800550a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f002 fc01 	bl	8007b68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
 800536a:	e04a      	b.n	8005402 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800536c:	7bfa      	ldrb	r2, [r7, #15]
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	333d      	adds	r3, #61	; 0x3d
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	333c      	adds	r3, #60	; 0x3c
 8005390:	7bfa      	ldrb	r2, [r7, #15]
 8005392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	b298      	uxth	r0, r3
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	3344      	adds	r3, #68	; 0x44
 80053a8:	4602      	mov	r2, r0
 80053aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053ac:	7bfa      	ldrb	r2, [r7, #15]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	3340      	adds	r3, #64	; 0x40
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053c0:	7bfa      	ldrb	r2, [r7, #15]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	3348      	adds	r3, #72	; 0x48
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053d4:	7bfa      	ldrb	r2, [r7, #15]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	334c      	adds	r3, #76	; 0x4c
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3354      	adds	r3, #84	; 0x54
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	3301      	adds	r3, #1
 8005400:	73fb      	strb	r3, [r7, #15]
 8005402:	7bfa      	ldrb	r2, [r7, #15]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d3af      	bcc.n	800536c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800540c:	2300      	movs	r3, #0
 800540e:	73fb      	strb	r3, [r7, #15]
 8005410:	e044      	b.n	800549c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005412:	7bfa      	ldrb	r2, [r7, #15]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005428:	7bfa      	ldrb	r2, [r7, #15]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800543a:	7bfa      	ldrb	r2, [r7, #15]
 800543c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800543e:	7bfa      	ldrb	r2, [r7, #15]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005454:	7bfa      	ldrb	r2, [r7, #15]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800546a:	7bfa      	ldrb	r2, [r7, #15]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005480:	7bfa      	ldrb	r2, [r7, #15]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	3301      	adds	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
 800549c:	7bfa      	ldrb	r2, [r7, #15]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d3b5      	bcc.n	8005412 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	687e      	ldr	r6, [r7, #4]
 80054ae:	466d      	mov	r5, sp
 80054b0:	f106 0410 	add.w	r4, r6, #16
 80054b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80054c4:	1d33      	adds	r3, r6, #4
 80054c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c8:	6838      	ldr	r0, [r7, #0]
 80054ca:	f002 fb99 	bl	8007c00 <USB_DevInit>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e014      	b.n	800550a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d102      	bne.n	80054fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f80a 	bl	8005512 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f002 fd45 	bl	8007f92 <USB_DevDisconnect>

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005512 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	f043 0303 	orr.w	r3, r3, #3
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a04      	ldr	r2, [pc, #16]	; (8005578 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556a:	6013      	str	r3, [r2, #0]
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40007000 	.word	0x40007000

0800557c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <HAL_PWREx_GetVoltageRange+0x18>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40007000 	.word	0x40007000

08005598 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a6:	d130      	bne.n	800560a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80055a8:	4b23      	ldr	r3, [pc, #140]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b4:	d038      	beq.n	8005628 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055b6:	4b20      	ldr	r3, [pc, #128]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055be:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055c6:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2232      	movs	r2, #50	; 0x32
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
 80055d0:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	0c9b      	lsrs	r3, r3, #18
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055dc:	e002      	b.n	80055e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f0:	d102      	bne.n	80055f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f2      	bne.n	80055de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055f8:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005604:	d110      	bne.n	8005628 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e00f      	b.n	800562a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800560a:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005616:	d007      	beq.n	8005628 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005618:	4b07      	ldr	r3, [pc, #28]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005620:	4a05      	ldr	r2, [pc, #20]	; (8005638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005626:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40007000 	.word	0x40007000
 800563c:	20000004 	.word	0x20000004
 8005640:	431bde83 	.word	0x431bde83

08005644 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_PWREx_EnableVddUSB+0x1c>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	4a04      	ldr	r2, [pc, #16]	; (8005660 <HAL_PWREx_EnableVddUSB+0x1c>)
 800564e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005652:	6053      	str	r3, [r2, #4]
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40007000 	.word	0x40007000

08005664 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af02      	add	r7, sp, #8
 800566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800566c:	f7fc fd12 	bl	8002094 <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e063      	b.n	8005744 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fc f9eb 	bl	8001a6c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005696:	f241 3188 	movw	r1, #5000	; 0x1388
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f858 	bl	8005750 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	021a      	lsls	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	2120      	movs	r1, #32
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f850 	bl	800576c <QSPI_WaitFlagStateUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80056d0:	7afb      	ldrb	r3, [r7, #11]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d131      	bne.n	800573a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056e0:	f023 0310 	bic.w	r3, r3, #16
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6852      	ldr	r2, [r2, #4]
 80056e8:	0611      	lsls	r1, r2, #24
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68d2      	ldr	r2, [r2, #12]
 80056ee:	4311      	orrs	r1, r2
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	430b      	orrs	r3, r1
 80056f6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <HAL_QSPI_Init+0xe8>)
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6912      	ldr	r2, [r2, #16]
 8005706:	0411      	lsls	r1, r2, #16
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6952      	ldr	r2, [r2, #20]
 800570c:	4311      	orrs	r1, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6992      	ldr	r2, [r2, #24]
 8005712:	4311      	orrs	r1, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	430b      	orrs	r3, r1
 800571a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005742:	7afb      	ldrb	r3, [r7, #11]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	ffe0f8fe 	.word	0xffe0f8fe

08005750 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800577c:	e01a      	b.n	80057b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d016      	beq.n	80057b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005786:	f7fc fc85 	bl	8002094 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	429a      	cmp	r2, r3
 8005794:	d302      	bcc.n	800579c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10b      	bne.n	80057b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2204      	movs	r2, #4
 80057a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a8:	f043 0201 	orr.w	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e00e      	b.n	80057d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4013      	ands	r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	bf14      	ite	ne
 80057c2:	2301      	movne	r3, #1
 80057c4:	2300      	moveq	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1d6      	bne.n	800577e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e3ca      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ee:	4b97      	ldr	r3, [pc, #604]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057f8:	4b94      	ldr	r3, [pc, #592]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80e4 	beq.w	80059d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_RCC_OscConfig+0x4a>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b0c      	cmp	r3, #12
 800581a:	f040 808b 	bne.w	8005934 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b01      	cmp	r3, #1
 8005822:	f040 8087 	bne.w	8005934 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005826:	4b89      	ldr	r3, [pc, #548]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_RCC_OscConfig+0x62>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e3a2      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	4b82      	ldr	r3, [pc, #520]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <HAL_RCC_OscConfig+0x7c>
 800584e:	4b7f      	ldr	r3, [pc, #508]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005856:	e005      	b.n	8005864 <HAL_RCC_OscConfig+0x88>
 8005858:	4b7c      	ldr	r3, [pc, #496]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 800585a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005864:	4293      	cmp	r3, r2
 8005866:	d223      	bcs.n	80058b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fd55 	bl	800631c <RCC_SetFlashLatencyFromMSIRange>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e383      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800587c:	4b73      	ldr	r3, [pc, #460]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a72      	ldr	r2, [pc, #456]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005882:	f043 0308 	orr.w	r3, r3, #8
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	4b70      	ldr	r3, [pc, #448]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	496d      	ldr	r1, [pc, #436]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005896:	4313      	orrs	r3, r2
 8005898:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800589a:	4b6c      	ldr	r3, [pc, #432]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	4968      	ldr	r1, [pc, #416]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	604b      	str	r3, [r1, #4]
 80058ae:	e025      	b.n	80058fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058b0:	4b66      	ldr	r3, [pc, #408]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a65      	ldr	r2, [pc, #404]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80058b6:	f043 0308 	orr.w	r3, r3, #8
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4b63      	ldr	r3, [pc, #396]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	4960      	ldr	r1, [pc, #384]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058ce:	4b5f      	ldr	r3, [pc, #380]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	495b      	ldr	r1, [pc, #364]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d109      	bne.n	80058fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fd15 	bl	800631c <RCC_SetFlashLatencyFromMSIRange>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e343      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058fc:	f000 fc4a 	bl	8006194 <HAL_RCC_GetSysClockFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b52      	ldr	r3, [pc, #328]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	4950      	ldr	r1, [pc, #320]	; (8005a50 <HAL_RCC_OscConfig+0x274>)
 800590e:	5ccb      	ldrb	r3, [r1, r3]
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
 8005918:	4a4e      	ldr	r2, [pc, #312]	; (8005a54 <HAL_RCC_OscConfig+0x278>)
 800591a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800591c:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <HAL_RCC_OscConfig+0x27c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f7fc fb67 	bl	8001ff4 <HAL_InitTick>
 8005926:	4603      	mov	r3, r0
 8005928:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d052      	beq.n	80059d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	e327      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d032      	beq.n	80059a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800593c:	4b43      	ldr	r3, [pc, #268]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a42      	ldr	r2, [pc, #264]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005948:	f7fc fba4 	bl	8002094 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005950:	f7fc fba0 	bl	8002094 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e310      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005962:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800596e:	4b37      	ldr	r3, [pc, #220]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a36      	ldr	r2, [pc, #216]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005974:	f043 0308 	orr.w	r3, r3, #8
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4b34      	ldr	r3, [pc, #208]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	4931      	ldr	r1, [pc, #196]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800598c:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	492c      	ldr	r1, [pc, #176]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]
 80059a0:	e01a      	b.n	80059d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059a2:	4b2a      	ldr	r3, [pc, #168]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059ae:	f7fc fb71 	bl	8002094 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059b6:	f7fc fb6d 	bl	8002094 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e2dd      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCC_OscConfig+0x1da>
 80059d4:	e000      	b.n	80059d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d074      	beq.n	8005ace <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d005      	beq.n	80059f6 <HAL_RCC_OscConfig+0x21a>
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d10e      	bne.n	8005a0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d10b      	bne.n	8005a0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f6:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d064      	beq.n	8005acc <HAL_RCC_OscConfig+0x2f0>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d160      	bne.n	8005acc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e2ba      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a16:	d106      	bne.n	8005a26 <HAL_RCC_OscConfig+0x24a>
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a0b      	ldr	r2, [pc, #44]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	e026      	b.n	8005a74 <HAL_RCC_OscConfig+0x298>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a2e:	d115      	bne.n	8005a5c <HAL_RCC_OscConfig+0x280>
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a02      	ldr	r2, [pc, #8]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	e014      	b.n	8005a74 <HAL_RCC_OscConfig+0x298>
 8005a4a:	bf00      	nop
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	08008f64 	.word	0x08008f64
 8005a54:	20000004 	.word	0x20000004
 8005a58:	20000008 	.word	0x20000008
 8005a5c:	4ba0      	ldr	r3, [pc, #640]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a9f      	ldr	r2, [pc, #636]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	4b9d      	ldr	r3, [pc, #628]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a9c      	ldr	r2, [pc, #624]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d013      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fc fb0a 	bl	8002094 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a84:	f7fc fb06 	bl	8002094 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	; 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e276      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a96:	4b92      	ldr	r3, [pc, #584]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x2a8>
 8005aa2:	e014      	b.n	8005ace <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fc faf6 	bl	8002094 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aac:	f7fc faf2 	bl	8002094 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b64      	cmp	r3, #100	; 0x64
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e262      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005abe:	4b88      	ldr	r3, [pc, #544]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x2d0>
 8005aca:	e000      	b.n	8005ace <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d060      	beq.n	8005b9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d005      	beq.n	8005aec <HAL_RCC_OscConfig+0x310>
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b0c      	cmp	r3, #12
 8005ae4:	d119      	bne.n	8005b1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d116      	bne.n	8005b1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aec:	4b7c      	ldr	r3, [pc, #496]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_RCC_OscConfig+0x328>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e23f      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b04:	4b76      	ldr	r3, [pc, #472]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	4973      	ldr	r1, [pc, #460]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b18:	e040      	b.n	8005b9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d023      	beq.n	8005b6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b22:	4b6f      	ldr	r3, [pc, #444]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a6e      	ldr	r2, [pc, #440]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2e:	f7fc fab1 	bl	8002094 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b36:	f7fc faad 	bl	8002094 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e21d      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b48:	4b65      	ldr	r3, [pc, #404]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0f0      	beq.n	8005b36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b54:	4b62      	ldr	r3, [pc, #392]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	495f      	ldr	r1, [pc, #380]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	604b      	str	r3, [r1, #4]
 8005b68:	e018      	b.n	8005b9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b6a:	4b5d      	ldr	r3, [pc, #372]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5c      	ldr	r2, [pc, #368]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b76:	f7fc fa8d 	bl	8002094 <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7e:	f7fc fa89 	bl	8002094 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e1f9      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b90:	4b53      	ldr	r3, [pc, #332]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f0      	bne.n	8005b7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d03c      	beq.n	8005c22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01c      	beq.n	8005bea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb0:	4b4b      	ldr	r3, [pc, #300]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb6:	4a4a      	ldr	r2, [pc, #296]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc0:	f7fc fa68 	bl	8002094 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bc8:	f7fc fa64 	bl	8002094 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e1d4      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bda:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0ef      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x3ec>
 8005be8:	e01b      	b.n	8005c22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bea:	4b3d      	ldr	r3, [pc, #244]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf0:	4a3b      	ldr	r2, [pc, #236]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfa:	f7fc fa4b 	bl	8002094 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c02:	f7fc fa47 	bl	8002094 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e1b7      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c14:	4b32      	ldr	r3, [pc, #200]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1ef      	bne.n	8005c02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80a6 	beq.w	8005d7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c30:	2300      	movs	r3, #0
 8005c32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c34:	4b2a      	ldr	r3, [pc, #168]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10d      	bne.n	8005c5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c40:	4b27      	ldr	r3, [pc, #156]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c44:	4a26      	ldr	r2, [pc, #152]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c54:	60bb      	str	r3, [r7, #8]
 8005c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c5c:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <HAL_RCC_OscConfig+0x508>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d118      	bne.n	8005c9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c68:	4b1e      	ldr	r3, [pc, #120]	; (8005ce4 <HAL_RCC_OscConfig+0x508>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <HAL_RCC_OscConfig+0x508>)
 8005c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c74:	f7fc fa0e 	bl	8002094 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7c:	f7fc fa0a 	bl	8002094 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e17a      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c8e:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <HAL_RCC_OscConfig+0x508>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d108      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x4d8>
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	4a0d      	ldr	r2, [pc, #52]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cb2:	e029      	b.n	8005d08 <HAL_RCC_OscConfig+0x52c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b05      	cmp	r3, #5
 8005cba:	d115      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x50c>
 8005cbc:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	4a07      	ldr	r2, [pc, #28]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005cc4:	f043 0304 	orr.w	r3, r3, #4
 8005cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ccc:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	4a03      	ldr	r2, [pc, #12]	; (8005ce0 <HAL_RCC_OscConfig+0x504>)
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cdc:	e014      	b.n	8005d08 <HAL_RCC_OscConfig+0x52c>
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40007000 	.word	0x40007000
 8005ce8:	4b9c      	ldr	r3, [pc, #624]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cee:	4a9b      	ldr	r2, [pc, #620]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cf8:	4b98      	ldr	r3, [pc, #608]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfe:	4a97      	ldr	r2, [pc, #604]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d016      	beq.n	8005d3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d10:	f7fc f9c0 	bl	8002094 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d16:	e00a      	b.n	8005d2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d18:	f7fc f9bc 	bl	8002094 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e12a      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d2e:	4b8b      	ldr	r3, [pc, #556]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ed      	beq.n	8005d18 <HAL_RCC_OscConfig+0x53c>
 8005d3c:	e015      	b.n	8005d6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3e:	f7fc f9a9 	bl	8002094 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d44:	e00a      	b.n	8005d5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d46:	f7fc f9a5 	bl	8002094 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e113      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d5c:	4b7f      	ldr	r3, [pc, #508]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ed      	bne.n	8005d46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d6a:	7ffb      	ldrb	r3, [r7, #31]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d70:	4b7a      	ldr	r3, [pc, #488]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	4a79      	ldr	r2, [pc, #484]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80fe 	beq.w	8005f82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	f040 80d0 	bne.w	8005f30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d90:	4b72      	ldr	r3, [pc, #456]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f003 0203 	and.w	r2, r3, #3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d130      	bne.n	8005e06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	3b01      	subs	r3, #1
 8005db0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d127      	bne.n	8005e06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d11f      	bne.n	8005e06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dd0:	2a07      	cmp	r2, #7
 8005dd2:	bf14      	ite	ne
 8005dd4:	2201      	movne	r2, #1
 8005dd6:	2200      	moveq	r2, #0
 8005dd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d113      	bne.n	8005e06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	3b01      	subs	r3, #1
 8005dec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d06e      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	2b0c      	cmp	r3, #12
 8005e0a:	d069      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e0c:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e18:	4b50      	ldr	r3, [pc, #320]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0ad      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e28:	4b4c      	ldr	r3, [pc, #304]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a4b      	ldr	r2, [pc, #300]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e34:	f7fc f92e 	bl	8002094 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fc f92a 	bl	8002094 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e09a      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e4e:	4b43      	ldr	r3, [pc, #268]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e5a:	4b40      	ldr	r3, [pc, #256]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	4b40      	ldr	r3, [pc, #256]	; (8005f60 <HAL_RCC_OscConfig+0x784>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e6a:	3a01      	subs	r2, #1
 8005e6c:	0112      	lsls	r2, r2, #4
 8005e6e:	4311      	orrs	r1, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e74:	0212      	lsls	r2, r2, #8
 8005e76:	4311      	orrs	r1, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e7c:	0852      	lsrs	r2, r2, #1
 8005e7e:	3a01      	subs	r2, #1
 8005e80:	0552      	lsls	r2, r2, #21
 8005e82:	4311      	orrs	r1, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e88:	0852      	lsrs	r2, r2, #1
 8005e8a:	3a01      	subs	r2, #1
 8005e8c:	0652      	lsls	r2, r2, #25
 8005e8e:	4311      	orrs	r1, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e94:	0912      	lsrs	r2, r2, #4
 8005e96:	0452      	lsls	r2, r2, #17
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	4930      	ldr	r1, [pc, #192]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ea0:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a2d      	ldr	r2, [pc, #180]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eac:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005eb8:	f7fc f8ec 	bl	8002094 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fc f8e8 	bl	8002094 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e058      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed2:	4b22      	ldr	r3, [pc, #136]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ede:	e050      	b.n	8005f82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e04f      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d148      	bne.n	8005f82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005efc:	4b17      	ldr	r3, [pc, #92]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f08:	f7fc f8c4 	bl	8002094 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fc f8c0 	bl	8002094 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e030      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f22:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCC_OscConfig+0x734>
 8005f2e:	e028      	b.n	8005f82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	2b0c      	cmp	r3, #12
 8005f34:	d023      	beq.n	8005f7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <HAL_RCC_OscConfig+0x780>)
 8005f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f42:	f7fc f8a7 	bl	8002094 <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f48:	e00c      	b.n	8005f64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f4a:	f7fc f8a3 	bl	8002094 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d905      	bls.n	8005f64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e013      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <HAL_RCC_OscConfig+0x7b0>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1ec      	bne.n	8005f4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <HAL_RCC_OscConfig+0x7b0>)
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	4905      	ldr	r1, [pc, #20]	; (8005f8c <HAL_RCC_OscConfig+0x7b0>)
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <HAL_RCC_OscConfig+0x7b4>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60cb      	str	r3, [r1, #12]
 8005f7c:	e001      	b.n	8005f82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3720      	adds	r7, #32
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	feeefffc 	.word	0xfeeefffc

08005f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0e7      	b.n	8006178 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b75      	ldr	r3, [pc, #468]	; (8006180 <HAL_RCC_ClockConfig+0x1ec>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d910      	bls.n	8005fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b72      	ldr	r3, [pc, #456]	; (8006180 <HAL_RCC_ClockConfig+0x1ec>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f023 0207 	bic.w	r2, r3, #7
 8005fbe:	4970      	ldr	r1, [pc, #448]	; (8006180 <HAL_RCC_ClockConfig+0x1ec>)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc6:	4b6e      	ldr	r3, [pc, #440]	; (8006180 <HAL_RCC_ClockConfig+0x1ec>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d001      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0cf      	b.n	8006178 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d010      	beq.n	8006006 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	4b66      	ldr	r3, [pc, #408]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d908      	bls.n	8006006 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff4:	4b63      	ldr	r3, [pc, #396]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	4960      	ldr	r1, [pc, #384]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d04c      	beq.n	80060ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b03      	cmp	r3, #3
 8006018:	d107      	bne.n	800602a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800601a:	4b5a      	ldr	r3, [pc, #360]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d121      	bne.n	800606a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e0a6      	b.n	8006178 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d107      	bne.n	8006042 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006032:	4b54      	ldr	r3, [pc, #336]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d115      	bne.n	800606a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e09a      	b.n	8006178 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800604a:	4b4e      	ldr	r3, [pc, #312]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e08e      	b.n	8006178 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800605a:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e086      	b.n	8006178 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800606a:	4b46      	ldr	r3, [pc, #280]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f023 0203 	bic.w	r2, r3, #3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	4943      	ldr	r1, [pc, #268]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006078:	4313      	orrs	r3, r2
 800607a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800607c:	f7fc f80a 	bl	8002094 <HAL_GetTick>
 8006080:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006082:	e00a      	b.n	800609a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006084:	f7fc f806 	bl	8002094 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e06e      	b.n	8006178 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609a:	4b3a      	ldr	r3, [pc, #232]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 020c 	and.w	r2, r3, #12
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d1eb      	bne.n	8006084 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d010      	beq.n	80060da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	4b31      	ldr	r3, [pc, #196]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d208      	bcs.n	80060da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c8:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	492b      	ldr	r1, [pc, #172]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060da:	4b29      	ldr	r3, [pc, #164]	; (8006180 <HAL_RCC_ClockConfig+0x1ec>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d210      	bcs.n	800610a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e8:	4b25      	ldr	r3, [pc, #148]	; (8006180 <HAL_RCC_ClockConfig+0x1ec>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f023 0207 	bic.w	r2, r3, #7
 80060f0:	4923      	ldr	r1, [pc, #140]	; (8006180 <HAL_RCC_ClockConfig+0x1ec>)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f8:	4b21      	ldr	r3, [pc, #132]	; (8006180 <HAL_RCC_ClockConfig+0x1ec>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d001      	beq.n	800610a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e036      	b.n	8006178 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006116:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	4918      	ldr	r1, [pc, #96]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006124:	4313      	orrs	r3, r2
 8006126:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4910      	ldr	r1, [pc, #64]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006144:	4313      	orrs	r3, r2
 8006146:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006148:	f000 f824 	bl	8006194 <HAL_RCC_GetSysClockFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	490b      	ldr	r1, [pc, #44]	; (8006188 <HAL_RCC_ClockConfig+0x1f4>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
 8006164:	4a09      	ldr	r2, [pc, #36]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 8006166:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006168:	4b09      	ldr	r3, [pc, #36]	; (8006190 <HAL_RCC_ClockConfig+0x1fc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fb ff41 	bl	8001ff4 <HAL_InitTick>
 8006172:	4603      	mov	r3, r0
 8006174:	72fb      	strb	r3, [r7, #11]

  return status;
 8006176:	7afb      	ldrb	r3, [r7, #11]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40022000 	.word	0x40022000
 8006184:	40021000 	.word	0x40021000
 8006188:	08008f64 	.word	0x08008f64
 800618c:	20000004 	.word	0x20000004
 8006190:	20000008 	.word	0x20000008

08006194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006194:	b480      	push	{r7}
 8006196:	b089      	sub	sp, #36	; 0x24
 8006198:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	2300      	movs	r3, #0
 80061a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061a2:	4b3e      	ldr	r3, [pc, #248]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
 80061aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061ac:	4b3b      	ldr	r3, [pc, #236]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x34>
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b0c      	cmp	r3, #12
 80061c0:	d121      	bne.n	8006206 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d11e      	bne.n	8006206 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061c8:	4b34      	ldr	r3, [pc, #208]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061d4:	4b31      	ldr	r3, [pc, #196]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 80061d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	e005      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061e4:	4b2d      	ldr	r3, [pc, #180]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	091b      	lsrs	r3, r3, #4
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061f0:	4a2b      	ldr	r2, [pc, #172]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10d      	bne.n	800621c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006204:	e00a      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d102      	bne.n	8006212 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800620c:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	e004      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d101      	bne.n	800621c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006218:	4b23      	ldr	r3, [pc, #140]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800621a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b0c      	cmp	r3, #12
 8006220:	d134      	bne.n	800628c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006222:	4b1e      	ldr	r3, [pc, #120]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d003      	beq.n	800623a <HAL_RCC_GetSysClockFreq+0xa6>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d003      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0xac>
 8006238:	e005      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800623a:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800623c:	617b      	str	r3, [r7, #20]
      break;
 800623e:	e005      	b.n	800624c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006240:	4b19      	ldr	r3, [pc, #100]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006242:	617b      	str	r3, [r7, #20]
      break;
 8006244:	e002      	b.n	800624c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	617b      	str	r3, [r7, #20]
      break;
 800624a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800624c:	4b13      	ldr	r3, [pc, #76]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	091b      	lsrs	r3, r3, #4
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	3301      	adds	r3, #1
 8006258:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	fb03 f202 	mul.w	r2, r3, r2
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <HAL_RCC_GetSysClockFreq+0x108>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	0e5b      	lsrs	r3, r3, #25
 8006278:	f003 0303 	and.w	r3, r3, #3
 800627c:	3301      	adds	r3, #1
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	fbb2 f3f3 	udiv	r3, r2, r3
 800628a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800628c:	69bb      	ldr	r3, [r7, #24]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3724      	adds	r7, #36	; 0x24
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40021000 	.word	0x40021000
 80062a0:	08008f7c 	.word	0x08008f7c
 80062a4:	00f42400 	.word	0x00f42400
 80062a8:	007a1200 	.word	0x007a1200

080062ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062b0:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062b2:	681b      	ldr	r3, [r3, #0]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000004 	.word	0x20000004

080062c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062c8:	f7ff fff0 	bl	80062ac <HAL_RCC_GetHCLKFreq>
 80062cc:	4602      	mov	r2, r0
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	4904      	ldr	r1, [pc, #16]	; (80062ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80062da:	5ccb      	ldrb	r3, [r1, r3]
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40021000 	.word	0x40021000
 80062ec:	08008f74 	.word	0x08008f74

080062f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062f4:	f7ff ffda 	bl	80062ac <HAL_RCC_GetHCLKFreq>
 80062f8:	4602      	mov	r2, r0
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	0adb      	lsrs	r3, r3, #11
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	4904      	ldr	r1, [pc, #16]	; (8006318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006306:	5ccb      	ldrb	r3, [r1, r3]
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006310:	4618      	mov	r0, r3
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40021000 	.word	0x40021000
 8006318:	08008f74 	.word	0x08008f74

0800631c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006328:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006334:	f7ff f922 	bl	800557c <HAL_PWREx_GetVoltageRange>
 8006338:	6178      	str	r0, [r7, #20]
 800633a:	e014      	b.n	8006366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800633c:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800633e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006340:	4a24      	ldr	r2, [pc, #144]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006346:	6593      	str	r3, [r2, #88]	; 0x58
 8006348:	4b22      	ldr	r3, [pc, #136]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800634a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006354:	f7ff f912 	bl	800557c <HAL_PWREx_GetVoltageRange>
 8006358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800635a:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635e:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006364:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636c:	d10b      	bne.n	8006386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b80      	cmp	r3, #128	; 0x80
 8006372:	d919      	bls.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2ba0      	cmp	r3, #160	; 0xa0
 8006378:	d902      	bls.n	8006380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800637a:	2302      	movs	r3, #2
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	e013      	b.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006380:	2301      	movs	r3, #1
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	e010      	b.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b80      	cmp	r3, #128	; 0x80
 800638a:	d902      	bls.n	8006392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800638c:	2303      	movs	r3, #3
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	e00a      	b.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d102      	bne.n	800639e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006398:	2302      	movs	r3, #2
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	e004      	b.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b70      	cmp	r3, #112	; 0x70
 80063a2:	d101      	bne.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063a4:	2301      	movs	r3, #1
 80063a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 0207 	bic.w	r2, r3, #7
 80063b0:	4909      	ldr	r1, [pc, #36]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063b8:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d001      	beq.n	80063ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40022000 	.word	0x40022000

080063dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063e4:	2300      	movs	r3, #0
 80063e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063e8:	2300      	movs	r3, #0
 80063ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d041      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006400:	d02a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006402:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006406:	d824      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800640c:	d008      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800640e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006412:	d81e      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641c:	d010      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800641e:	e018      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006420:	4b86      	ldr	r3, [pc, #536]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4a85      	ldr	r2, [pc, #532]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800642a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800642c:	e015      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f000 facb 	bl	80069d0 <RCCEx_PLLSAI1_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800643e:	e00c      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3320      	adds	r3, #32
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fbb6 	bl	8006bb8 <RCCEx_PLLSAI2_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006450:	e003      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	74fb      	strb	r3, [r7, #19]
      break;
 8006456:	e000      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006460:	4b76      	ldr	r3, [pc, #472]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800646e:	4973      	ldr	r1, [pc, #460]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006476:	e001      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d041      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800648c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006490:	d02a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006492:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006496:	d824      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800649c:	d008      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800649e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064a2:	d81e      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80064a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064ac:	d010      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064ae:	e018      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064b0:	4b62      	ldr	r3, [pc, #392]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	4a61      	ldr	r2, [pc, #388]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064bc:	e015      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3304      	adds	r3, #4
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fa83 	bl	80069d0 <RCCEx_PLLSAI1_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064ce:	e00c      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3320      	adds	r3, #32
 80064d4:	2100      	movs	r1, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fb6e 	bl	8006bb8 <RCCEx_PLLSAI2_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064e0:	e003      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	74fb      	strb	r3, [r7, #19]
      break;
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80064e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10b      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80064f0:	4b52      	ldr	r3, [pc, #328]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064fe:	494f      	ldr	r1, [pc, #316]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006506:	e001      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006508:	7cfb      	ldrb	r3, [r7, #19]
 800650a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80a0 	beq.w	800665a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800651a:	2300      	movs	r3, #0
 800651c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800651e:	4b47      	ldr	r3, [pc, #284]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00d      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006534:	4b41      	ldr	r3, [pc, #260]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006538:	4a40      	ldr	r2, [pc, #256]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800653a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800653e:	6593      	str	r3, [r2, #88]	; 0x58
 8006540:	4b3e      	ldr	r3, [pc, #248]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800654c:	2301      	movs	r3, #1
 800654e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006550:	4b3b      	ldr	r3, [pc, #236]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a3a      	ldr	r2, [pc, #232]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800655c:	f7fb fd9a 	bl	8002094 <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006562:	e009      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006564:	f7fb fd96 	bl	8002094 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d902      	bls.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	74fb      	strb	r3, [r7, #19]
        break;
 8006576:	e005      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006578:	4b31      	ldr	r3, [pc, #196]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0ef      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006584:	7cfb      	ldrb	r3, [r7, #19]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d15c      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800658a:	4b2c      	ldr	r3, [pc, #176]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006594:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01f      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d019      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065a8:	4b24      	ldr	r3, [pc, #144]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065b4:	4b21      	ldr	r3, [pc, #132]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ba:	4a20      	ldr	r2, [pc, #128]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065c4:	4b1d      	ldr	r3, [pc, #116]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ca:	4a1c      	ldr	r2, [pc, #112]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065d4:	4a19      	ldr	r2, [pc, #100]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e6:	f7fb fd55 	bl	8002094 <HAL_GetTick>
 80065ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ec:	e00b      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ee:	f7fb fd51 	bl	8002094 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d902      	bls.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	74fb      	strb	r3, [r7, #19]
            break;
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006606:	4b0d      	ldr	r3, [pc, #52]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0ec      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006614:	7cfb      	ldrb	r3, [r7, #19]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10c      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662a:	4904      	ldr	r1, [pc, #16]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006632:	e009      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006634:	7cfb      	ldrb	r3, [r7, #19]
 8006636:	74bb      	strb	r3, [r7, #18]
 8006638:	e006      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800663a:	bf00      	nop
 800663c:	40021000 	.word	0x40021000
 8006640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006644:	7cfb      	ldrb	r3, [r7, #19]
 8006646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006648:	7c7b      	ldrb	r3, [r7, #17]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d105      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664e:	4b9e      	ldr	r3, [pc, #632]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006652:	4a9d      	ldr	r2, [pc, #628]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006658:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006666:	4b98      	ldr	r3, [pc, #608]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666c:	f023 0203 	bic.w	r2, r3, #3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	4994      	ldr	r1, [pc, #592]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006688:	4b8f      	ldr	r3, [pc, #572]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668e:	f023 020c 	bic.w	r2, r3, #12
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	498c      	ldr	r1, [pc, #560]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066aa:	4b87      	ldr	r3, [pc, #540]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	4983      	ldr	r1, [pc, #524]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066cc:	4b7e      	ldr	r3, [pc, #504]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066da:	497b      	ldr	r1, [pc, #492]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0310 	and.w	r3, r3, #16
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066ee:	4b76      	ldr	r3, [pc, #472]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fc:	4972      	ldr	r1, [pc, #456]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006710:	4b6d      	ldr	r3, [pc, #436]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006716:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671e:	496a      	ldr	r1, [pc, #424]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006732:	4b65      	ldr	r3, [pc, #404]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006740:	4961      	ldr	r1, [pc, #388]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006754:	4b5c      	ldr	r3, [pc, #368]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	4959      	ldr	r1, [pc, #356]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006776:	4b54      	ldr	r3, [pc, #336]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006784:	4950      	ldr	r1, [pc, #320]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006798:	4b4b      	ldr	r3, [pc, #300]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	4948      	ldr	r1, [pc, #288]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067ba:	4b43      	ldr	r3, [pc, #268]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c8:	493f      	ldr	r1, [pc, #252]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d028      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067dc:	4b3a      	ldr	r3, [pc, #232]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ea:	4937      	ldr	r1, [pc, #220]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067fa:	d106      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067fc:	4b32      	ldr	r3, [pc, #200]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	4a31      	ldr	r2, [pc, #196]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006806:	60d3      	str	r3, [r2, #12]
 8006808:	e011      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006812:	d10c      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3304      	adds	r3, #4
 8006818:	2101      	movs	r1, #1
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f8d8 	bl	80069d0 <RCCEx_PLLSAI1_Config>
 8006820:	4603      	mov	r3, r0
 8006822:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006824:	7cfb      	ldrb	r3, [r7, #19]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800682a:	7cfb      	ldrb	r3, [r7, #19]
 800682c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d028      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800683a:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006840:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006848:	491f      	ldr	r1, [pc, #124]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800684a:	4313      	orrs	r3, r2
 800684c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006858:	d106      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800685a:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	4a1a      	ldr	r2, [pc, #104]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006864:	60d3      	str	r3, [r2, #12]
 8006866:	e011      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006870:	d10c      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
 8006876:	2101      	movs	r1, #1
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f8a9 	bl	80069d0 <RCCEx_PLLSAI1_Config>
 800687e:	4603      	mov	r3, r0
 8006880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006882:	7cfb      	ldrb	r3, [r7, #19]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006888:	7cfb      	ldrb	r3, [r7, #19]
 800688a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d02b      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a6:	4908      	ldr	r1, [pc, #32]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b6:	d109      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068b8:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	4a02      	ldr	r2, [pc, #8]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068c2:	60d3      	str	r3, [r2, #12]
 80068c4:	e014      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80068c6:	bf00      	nop
 80068c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068d4:	d10c      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3304      	adds	r3, #4
 80068da:	2101      	movs	r1, #1
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f877 	bl	80069d0 <RCCEx_PLLSAI1_Config>
 80068e2:	4603      	mov	r3, r0
 80068e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068e6:	7cfb      	ldrb	r3, [r7, #19]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80068ec:	7cfb      	ldrb	r3, [r7, #19]
 80068ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d02f      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068fc:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690a:	4928      	ldr	r1, [pc, #160]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800690c:	4313      	orrs	r3, r2
 800690e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800691a:	d10d      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	2102      	movs	r1, #2
 8006922:	4618      	mov	r0, r3
 8006924:	f000 f854 	bl	80069d0 <RCCEx_PLLSAI1_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800692c:	7cfb      	ldrb	r3, [r7, #19]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d014      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006932:	7cfb      	ldrb	r3, [r7, #19]
 8006934:	74bb      	strb	r3, [r7, #18]
 8006936:	e011      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006940:	d10c      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3320      	adds	r3, #32
 8006946:	2102      	movs	r1, #2
 8006948:	4618      	mov	r0, r3
 800694a:	f000 f935 	bl	8006bb8 <RCCEx_PLLSAI2_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006952:	7cfb      	ldrb	r3, [r7, #19]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006958:	7cfb      	ldrb	r3, [r7, #19]
 800695a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006968:	4b10      	ldr	r3, [pc, #64]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006976:	490d      	ldr	r1, [pc, #52]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800698a:	4b08      	ldr	r3, [pc, #32]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699a:	4904      	ldr	r1, [pc, #16]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80069a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40021000 	.word	0x40021000

080069b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a04      	ldr	r2, [pc, #16]	; (80069cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80069ba:	f043 0304 	orr.w	r3, r3, #4
 80069be:	6013      	str	r3, [r2, #0]
}
 80069c0:	bf00      	nop
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000

080069d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069de:	4b75      	ldr	r3, [pc, #468]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d018      	beq.n	8006a1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069ea:	4b72      	ldr	r3, [pc, #456]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0203 	and.w	r2, r3, #3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d10d      	bne.n	8006a16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
       ||
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a02:	4b6c      	ldr	r3, [pc, #432]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	091b      	lsrs	r3, r3, #4
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
       ||
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d047      	beq.n	8006aa6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	73fb      	strb	r3, [r7, #15]
 8006a1a:	e044      	b.n	8006aa6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d018      	beq.n	8006a56 <RCCEx_PLLSAI1_Config+0x86>
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d825      	bhi.n	8006a74 <RCCEx_PLLSAI1_Config+0xa4>
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d002      	beq.n	8006a32 <RCCEx_PLLSAI1_Config+0x62>
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d009      	beq.n	8006a44 <RCCEx_PLLSAI1_Config+0x74>
 8006a30:	e020      	b.n	8006a74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a32:	4b60      	ldr	r3, [pc, #384]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d11d      	bne.n	8006a7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a42:	e01a      	b.n	8006a7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a44:	4b5b      	ldr	r3, [pc, #364]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d116      	bne.n	8006a7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a54:	e013      	b.n	8006a7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a56:	4b57      	ldr	r3, [pc, #348]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10f      	bne.n	8006a82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a62:	4b54      	ldr	r3, [pc, #336]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a72:	e006      	b.n	8006a82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
      break;
 8006a78:	e004      	b.n	8006a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e002      	b.n	8006a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a82:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10d      	bne.n	8006aa6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a8a:	4b4a      	ldr	r3, [pc, #296]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6819      	ldr	r1, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	4944      	ldr	r1, [pc, #272]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d17d      	bne.n	8006ba8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006aac:	4b41      	ldr	r3, [pc, #260]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a40      	ldr	r2, [pc, #256]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ab2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab8:	f7fb faec 	bl	8002094 <HAL_GetTick>
 8006abc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006abe:	e009      	b.n	8006ad4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ac0:	f7fb fae8 	bl	8002094 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d902      	bls.n	8006ad4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ad2:	e005      	b.n	8006ae0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ad4:	4b37      	ldr	r3, [pc, #220]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1ef      	bne.n	8006ac0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d160      	bne.n	8006ba8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d111      	bne.n	8006b10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006aec:	4b31      	ldr	r3, [pc, #196]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6892      	ldr	r2, [r2, #8]
 8006afc:	0211      	lsls	r1, r2, #8
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	68d2      	ldr	r2, [r2, #12]
 8006b02:	0912      	lsrs	r2, r2, #4
 8006b04:	0452      	lsls	r2, r2, #17
 8006b06:	430a      	orrs	r2, r1
 8006b08:	492a      	ldr	r1, [pc, #168]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	610b      	str	r3, [r1, #16]
 8006b0e:	e027      	b.n	8006b60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d112      	bne.n	8006b3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b16:	4b27      	ldr	r3, [pc, #156]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6892      	ldr	r2, [r2, #8]
 8006b26:	0211      	lsls	r1, r2, #8
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6912      	ldr	r2, [r2, #16]
 8006b2c:	0852      	lsrs	r2, r2, #1
 8006b2e:	3a01      	subs	r2, #1
 8006b30:	0552      	lsls	r2, r2, #21
 8006b32:	430a      	orrs	r2, r1
 8006b34:	491f      	ldr	r1, [pc, #124]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	610b      	str	r3, [r1, #16]
 8006b3a:	e011      	b.n	8006b60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b3c:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6892      	ldr	r2, [r2, #8]
 8006b4c:	0211      	lsls	r1, r2, #8
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6952      	ldr	r2, [r2, #20]
 8006b52:	0852      	lsrs	r2, r2, #1
 8006b54:	3a01      	subs	r2, #1
 8006b56:	0652      	lsls	r2, r2, #25
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	4916      	ldr	r1, [pc, #88]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b60:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a13      	ldr	r2, [pc, #76]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6c:	f7fb fa92 	bl	8002094 <HAL_GetTick>
 8006b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b72:	e009      	b.n	8006b88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b74:	f7fb fa8e 	bl	8002094 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d902      	bls.n	8006b88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	73fb      	strb	r3, [r7, #15]
          break;
 8006b86:	e005      	b.n	8006b94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0ef      	beq.n	8006b74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	4904      	ldr	r1, [pc, #16]	; (8006bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40021000 	.word	0x40021000

08006bb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bc6:	4b6a      	ldr	r3, [pc, #424]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d018      	beq.n	8006c04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006bd2:	4b67      	ldr	r3, [pc, #412]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f003 0203 	and.w	r2, r3, #3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d10d      	bne.n	8006bfe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
       ||
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006bea:	4b61      	ldr	r3, [pc, #388]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	091b      	lsrs	r3, r3, #4
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
       ||
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d047      	beq.n	8006c8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
 8006c02:	e044      	b.n	8006c8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d018      	beq.n	8006c3e <RCCEx_PLLSAI2_Config+0x86>
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d825      	bhi.n	8006c5c <RCCEx_PLLSAI2_Config+0xa4>
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d002      	beq.n	8006c1a <RCCEx_PLLSAI2_Config+0x62>
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d009      	beq.n	8006c2c <RCCEx_PLLSAI2_Config+0x74>
 8006c18:	e020      	b.n	8006c5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c1a:	4b55      	ldr	r3, [pc, #340]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d11d      	bne.n	8006c62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c2a:	e01a      	b.n	8006c62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c2c:	4b50      	ldr	r3, [pc, #320]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d116      	bne.n	8006c66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c3c:	e013      	b.n	8006c66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c3e:	4b4c      	ldr	r3, [pc, #304]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10f      	bne.n	8006c6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c4a:	4b49      	ldr	r3, [pc, #292]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c5a:	e006      	b.n	8006c6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c60:	e004      	b.n	8006c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c62:	bf00      	nop
 8006c64:	e002      	b.n	8006c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c66:	bf00      	nop
 8006c68:	e000      	b.n	8006c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10d      	bne.n	8006c8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c72:	4b3f      	ldr	r3, [pc, #252]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6819      	ldr	r1, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	430b      	orrs	r3, r1
 8006c88:	4939      	ldr	r1, [pc, #228]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d167      	bne.n	8006d64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006c94:	4b36      	ldr	r3, [pc, #216]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a35      	ldr	r2, [pc, #212]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca0:	f7fb f9f8 	bl	8002094 <HAL_GetTick>
 8006ca4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ca6:	e009      	b.n	8006cbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ca8:	f7fb f9f4 	bl	8002094 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d902      	bls.n	8006cbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8006cba:	e005      	b.n	8006cc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cbc:	4b2c      	ldr	r3, [pc, #176]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1ef      	bne.n	8006ca8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d14a      	bne.n	8006d64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d111      	bne.n	8006cf8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cd4:	4b26      	ldr	r3, [pc, #152]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6892      	ldr	r2, [r2, #8]
 8006ce4:	0211      	lsls	r1, r2, #8
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	68d2      	ldr	r2, [r2, #12]
 8006cea:	0912      	lsrs	r2, r2, #4
 8006cec:	0452      	lsls	r2, r2, #17
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	491f      	ldr	r1, [pc, #124]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	614b      	str	r3, [r1, #20]
 8006cf6:	e011      	b.n	8006d1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6892      	ldr	r2, [r2, #8]
 8006d08:	0211      	lsls	r1, r2, #8
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6912      	ldr	r2, [r2, #16]
 8006d0e:	0852      	lsrs	r2, r2, #1
 8006d10:	3a01      	subs	r2, #1
 8006d12:	0652      	lsls	r2, r2, #25
 8006d14:	430a      	orrs	r2, r1
 8006d16:	4916      	ldr	r1, [pc, #88]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d1c:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d28:	f7fb f9b4 	bl	8002094 <HAL_GetTick>
 8006d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d2e:	e009      	b.n	8006d44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d30:	f7fb f9b0 	bl	8002094 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d902      	bls.n	8006d44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	73fb      	strb	r3, [r7, #15]
          break;
 8006d42:	e005      	b.n	8006d50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0ef      	beq.n	8006d30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d56:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d58:	695a      	ldr	r2, [r3, #20]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	4904      	ldr	r1, [pc, #16]	; (8006d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40021000 	.word	0x40021000

08006d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e095      	b.n	8006eb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d108      	bne.n	8006da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d96:	d009      	beq.n	8006dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	61da      	str	r2, [r3, #28]
 8006d9e:	e005      	b.n	8006dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fa fe94 	bl	8001af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dec:	d902      	bls.n	8006df4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	e002      	b.n	8006dfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006df8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e02:	d007      	beq.n	8006e14 <HAL_SPI_Init+0xa0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e0c:	d002      	beq.n	8006e14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e56:	ea42 0103 	orr.w	r1, r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	0c1b      	lsrs	r3, r3, #16
 8006e70:	f003 0204 	and.w	r2, r3, #4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006e90:	ea42 0103 	orr.w	r1, r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e040      	b.n	8006f4e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fa fe4d 	bl	8001b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2224      	movs	r2, #36	; 0x24
 8006ee6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0201 	bic.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f991 	bl	8007220 <UART_SetConfig>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e022      	b.n	8006f4e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc3d 	bl	8007790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fcc4 	bl	80078d4 <UART_CheckIdleState>
 8006f4c:	4603      	mov	r3, r0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b08a      	sub	sp, #40	; 0x28
 8006f5a:	af02      	add	r7, sp, #8
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	f040 8082 	bne.w	8007074 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_UART_Transmit+0x26>
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e07a      	b.n	8007076 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <HAL_UART_Transmit+0x38>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e073      	b.n	8007076 <HAL_UART_Transmit+0x120>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2221      	movs	r2, #33	; 0x21
 8006fa2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fa4:	f7fb f876 	bl	8002094 <HAL_GetTick>
 8006fa8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	88fa      	ldrh	r2, [r7, #6]
 8006fae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc2:	d108      	bne.n	8006fd6 <HAL_UART_Transmit+0x80>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	e003      	b.n	8006fde <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006fe6:	e02d      	b.n	8007044 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2180      	movs	r1, #128	; 0x80
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fcb7 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e039      	b.n	8007076 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	881a      	ldrh	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007014:	b292      	uxth	r2, r2
 8007016:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	3302      	adds	r3, #2
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	e008      	b.n	8007032 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	781a      	ldrb	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	b292      	uxth	r2, r2
 800702a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3301      	adds	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1cb      	bne.n	8006fe8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2200      	movs	r2, #0
 8007058:	2140      	movs	r1, #64	; 0x40
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fc83 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e005      	b.n	8007076 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e000      	b.n	8007076 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007074:	2302      	movs	r3, #2
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b08a      	sub	sp, #40	; 0x28
 8007082:	af02      	add	r7, sp, #8
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	603b      	str	r3, [r7, #0]
 800708a:	4613      	mov	r3, r2
 800708c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007092:	2b20      	cmp	r3, #32
 8007094:	f040 80bf 	bne.w	8007216 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <HAL_UART_Receive+0x26>
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0b7      	b.n	8007218 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_UART_Receive+0x38>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0b0      	b.n	8007218 <HAL_UART_Receive+0x19a>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2222      	movs	r2, #34	; 0x22
 80070ca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070d2:	f7fa ffdf 	bl	8002094 <HAL_GetTick>
 80070d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	88fa      	ldrh	r2, [r7, #6]
 80070dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f0:	d10e      	bne.n	8007110 <HAL_UART_Receive+0x92>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <HAL_UART_Receive+0x88>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007104:	e02d      	b.n	8007162 <HAL_UART_Receive+0xe4>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	22ff      	movs	r2, #255	; 0xff
 800710a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800710e:	e028      	b.n	8007162 <HAL_UART_Receive+0xe4>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10d      	bne.n	8007134 <HAL_UART_Receive+0xb6>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <HAL_UART_Receive+0xac>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	22ff      	movs	r2, #255	; 0xff
 8007124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007128:	e01b      	b.n	8007162 <HAL_UART_Receive+0xe4>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	227f      	movs	r2, #127	; 0x7f
 800712e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007132:	e016      	b.n	8007162 <HAL_UART_Receive+0xe4>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800713c:	d10d      	bne.n	800715a <HAL_UART_Receive+0xdc>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <HAL_UART_Receive+0xd2>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	227f      	movs	r2, #127	; 0x7f
 800714a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800714e:	e008      	b.n	8007162 <HAL_UART_Receive+0xe4>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	223f      	movs	r2, #63	; 0x3f
 8007154:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007158:	e003      	b.n	8007162 <HAL_UART_Receive+0xe4>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007168:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	d108      	bne.n	8007186 <HAL_UART_Receive+0x108>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800717c:	2300      	movs	r3, #0
 800717e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	e003      	b.n	800718e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007196:	e033      	b.n	8007200 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2200      	movs	r2, #0
 80071a0:	2120      	movs	r1, #32
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fbdf 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e032      	b.n	8007218 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10c      	bne.n	80071d2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071be:	b29a      	uxth	r2, r3
 80071c0:	8a7b      	ldrh	r3, [r7, #18]
 80071c2:	4013      	ands	r3, r2
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	3302      	adds	r3, #2
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	e00d      	b.n	80071ee <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071d8:	b29b      	uxth	r3, r3
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	8a7b      	ldrh	r3, [r7, #18]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	4013      	ands	r3, r2
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	3301      	adds	r3, #1
 80071ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1c5      	bne.n	8007198 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	e000      	b.n	8007218 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007216:	2302      	movs	r3, #2
  }
}
 8007218:	4618      	mov	r0, r3
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007224:	b08a      	sub	sp, #40	; 0x28
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	431a      	orrs	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	431a      	orrs	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	4313      	orrs	r3, r2
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4ba4      	ldr	r3, [pc, #656]	; (80074e0 <UART_SetConfig+0x2c0>)
 8007250:	4013      	ands	r3, r2
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007258:	430b      	orrs	r3, r1
 800725a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a99      	ldr	r2, [pc, #612]	; (80074e4 <UART_SetConfig+0x2c4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007288:	4313      	orrs	r3, r2
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800729c:	430a      	orrs	r2, r1
 800729e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a90      	ldr	r2, [pc, #576]	; (80074e8 <UART_SetConfig+0x2c8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d126      	bne.n	80072f8 <UART_SetConfig+0xd8>
 80072aa:	4b90      	ldr	r3, [pc, #576]	; (80074ec <UART_SetConfig+0x2cc>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d81b      	bhi.n	80072f0 <UART_SetConfig+0xd0>
 80072b8:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <UART_SetConfig+0xa0>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072d1 	.word	0x080072d1
 80072c4:	080072e1 	.word	0x080072e1
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	080072e9 	.word	0x080072e9
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d6:	e116      	b.n	8007506 <UART_SetConfig+0x2e6>
 80072d8:	2302      	movs	r3, #2
 80072da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072de:	e112      	b.n	8007506 <UART_SetConfig+0x2e6>
 80072e0:	2304      	movs	r3, #4
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e6:	e10e      	b.n	8007506 <UART_SetConfig+0x2e6>
 80072e8:	2308      	movs	r3, #8
 80072ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ee:	e10a      	b.n	8007506 <UART_SetConfig+0x2e6>
 80072f0:	2310      	movs	r3, #16
 80072f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f6:	e106      	b.n	8007506 <UART_SetConfig+0x2e6>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a7c      	ldr	r2, [pc, #496]	; (80074f0 <UART_SetConfig+0x2d0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d138      	bne.n	8007374 <UART_SetConfig+0x154>
 8007302:	4b7a      	ldr	r3, [pc, #488]	; (80074ec <UART_SetConfig+0x2cc>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	2b0c      	cmp	r3, #12
 800730e:	d82d      	bhi.n	800736c <UART_SetConfig+0x14c>
 8007310:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <UART_SetConfig+0xf8>)
 8007312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007316:	bf00      	nop
 8007318:	0800734d 	.word	0x0800734d
 800731c:	0800736d 	.word	0x0800736d
 8007320:	0800736d 	.word	0x0800736d
 8007324:	0800736d 	.word	0x0800736d
 8007328:	0800735d 	.word	0x0800735d
 800732c:	0800736d 	.word	0x0800736d
 8007330:	0800736d 	.word	0x0800736d
 8007334:	0800736d 	.word	0x0800736d
 8007338:	08007355 	.word	0x08007355
 800733c:	0800736d 	.word	0x0800736d
 8007340:	0800736d 	.word	0x0800736d
 8007344:	0800736d 	.word	0x0800736d
 8007348:	08007365 	.word	0x08007365
 800734c:	2300      	movs	r3, #0
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007352:	e0d8      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007354:	2302      	movs	r3, #2
 8007356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800735a:	e0d4      	b.n	8007506 <UART_SetConfig+0x2e6>
 800735c:	2304      	movs	r3, #4
 800735e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007362:	e0d0      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007364:	2308      	movs	r3, #8
 8007366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800736a:	e0cc      	b.n	8007506 <UART_SetConfig+0x2e6>
 800736c:	2310      	movs	r3, #16
 800736e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007372:	e0c8      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a5e      	ldr	r2, [pc, #376]	; (80074f4 <UART_SetConfig+0x2d4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d125      	bne.n	80073ca <UART_SetConfig+0x1aa>
 800737e:	4b5b      	ldr	r3, [pc, #364]	; (80074ec <UART_SetConfig+0x2cc>)
 8007380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007384:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007388:	2b30      	cmp	r3, #48	; 0x30
 800738a:	d016      	beq.n	80073ba <UART_SetConfig+0x19a>
 800738c:	2b30      	cmp	r3, #48	; 0x30
 800738e:	d818      	bhi.n	80073c2 <UART_SetConfig+0x1a2>
 8007390:	2b20      	cmp	r3, #32
 8007392:	d00a      	beq.n	80073aa <UART_SetConfig+0x18a>
 8007394:	2b20      	cmp	r3, #32
 8007396:	d814      	bhi.n	80073c2 <UART_SetConfig+0x1a2>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <UART_SetConfig+0x182>
 800739c:	2b10      	cmp	r3, #16
 800739e:	d008      	beq.n	80073b2 <UART_SetConfig+0x192>
 80073a0:	e00f      	b.n	80073c2 <UART_SetConfig+0x1a2>
 80073a2:	2300      	movs	r3, #0
 80073a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a8:	e0ad      	b.n	8007506 <UART_SetConfig+0x2e6>
 80073aa:	2302      	movs	r3, #2
 80073ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073b0:	e0a9      	b.n	8007506 <UART_SetConfig+0x2e6>
 80073b2:	2304      	movs	r3, #4
 80073b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073b8:	e0a5      	b.n	8007506 <UART_SetConfig+0x2e6>
 80073ba:	2308      	movs	r3, #8
 80073bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c0:	e0a1      	b.n	8007506 <UART_SetConfig+0x2e6>
 80073c2:	2310      	movs	r3, #16
 80073c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c8:	e09d      	b.n	8007506 <UART_SetConfig+0x2e6>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a4a      	ldr	r2, [pc, #296]	; (80074f8 <UART_SetConfig+0x2d8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d125      	bne.n	8007420 <UART_SetConfig+0x200>
 80073d4:	4b45      	ldr	r3, [pc, #276]	; (80074ec <UART_SetConfig+0x2cc>)
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073de:	2bc0      	cmp	r3, #192	; 0xc0
 80073e0:	d016      	beq.n	8007410 <UART_SetConfig+0x1f0>
 80073e2:	2bc0      	cmp	r3, #192	; 0xc0
 80073e4:	d818      	bhi.n	8007418 <UART_SetConfig+0x1f8>
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d00a      	beq.n	8007400 <UART_SetConfig+0x1e0>
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d814      	bhi.n	8007418 <UART_SetConfig+0x1f8>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <UART_SetConfig+0x1d8>
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d008      	beq.n	8007408 <UART_SetConfig+0x1e8>
 80073f6:	e00f      	b.n	8007418 <UART_SetConfig+0x1f8>
 80073f8:	2300      	movs	r3, #0
 80073fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073fe:	e082      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007400:	2302      	movs	r3, #2
 8007402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007406:	e07e      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740e:	e07a      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007416:	e076      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741e:	e072      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a35      	ldr	r2, [pc, #212]	; (80074fc <UART_SetConfig+0x2dc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d12a      	bne.n	8007480 <UART_SetConfig+0x260>
 800742a:	4b30      	ldr	r3, [pc, #192]	; (80074ec <UART_SetConfig+0x2cc>)
 800742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007438:	d01a      	beq.n	8007470 <UART_SetConfig+0x250>
 800743a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743e:	d81b      	bhi.n	8007478 <UART_SetConfig+0x258>
 8007440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007444:	d00c      	beq.n	8007460 <UART_SetConfig+0x240>
 8007446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744a:	d815      	bhi.n	8007478 <UART_SetConfig+0x258>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <UART_SetConfig+0x238>
 8007450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007454:	d008      	beq.n	8007468 <UART_SetConfig+0x248>
 8007456:	e00f      	b.n	8007478 <UART_SetConfig+0x258>
 8007458:	2300      	movs	r3, #0
 800745a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800745e:	e052      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007460:	2302      	movs	r3, #2
 8007462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007466:	e04e      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007468:	2304      	movs	r3, #4
 800746a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746e:	e04a      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007470:	2308      	movs	r3, #8
 8007472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007476:	e046      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007478:	2310      	movs	r3, #16
 800747a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800747e:	e042      	b.n	8007506 <UART_SetConfig+0x2e6>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a17      	ldr	r2, [pc, #92]	; (80074e4 <UART_SetConfig+0x2c4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d13a      	bne.n	8007500 <UART_SetConfig+0x2e0>
 800748a:	4b18      	ldr	r3, [pc, #96]	; (80074ec <UART_SetConfig+0x2cc>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007498:	d01a      	beq.n	80074d0 <UART_SetConfig+0x2b0>
 800749a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800749e:	d81b      	bhi.n	80074d8 <UART_SetConfig+0x2b8>
 80074a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a4:	d00c      	beq.n	80074c0 <UART_SetConfig+0x2a0>
 80074a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074aa:	d815      	bhi.n	80074d8 <UART_SetConfig+0x2b8>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <UART_SetConfig+0x298>
 80074b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b4:	d008      	beq.n	80074c8 <UART_SetConfig+0x2a8>
 80074b6:	e00f      	b.n	80074d8 <UART_SetConfig+0x2b8>
 80074b8:	2300      	movs	r3, #0
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074be:	e022      	b.n	8007506 <UART_SetConfig+0x2e6>
 80074c0:	2302      	movs	r3, #2
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c6:	e01e      	b.n	8007506 <UART_SetConfig+0x2e6>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ce:	e01a      	b.n	8007506 <UART_SetConfig+0x2e6>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d6:	e016      	b.n	8007506 <UART_SetConfig+0x2e6>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074de:	e012      	b.n	8007506 <UART_SetConfig+0x2e6>
 80074e0:	efff69f3 	.word	0xefff69f3
 80074e4:	40008000 	.word	0x40008000
 80074e8:	40013800 	.word	0x40013800
 80074ec:	40021000 	.word	0x40021000
 80074f0:	40004400 	.word	0x40004400
 80074f4:	40004800 	.word	0x40004800
 80074f8:	40004c00 	.word	0x40004c00
 80074fc:	40005000 	.word	0x40005000
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a9f      	ldr	r2, [pc, #636]	; (8007788 <UART_SetConfig+0x568>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d17a      	bne.n	8007606 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007514:	2b08      	cmp	r3, #8
 8007516:	d824      	bhi.n	8007562 <UART_SetConfig+0x342>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <UART_SetConfig+0x300>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007545 	.word	0x08007545
 8007524:	08007563 	.word	0x08007563
 8007528:	0800754d 	.word	0x0800754d
 800752c:	08007563 	.word	0x08007563
 8007530:	08007553 	.word	0x08007553
 8007534:	08007563 	.word	0x08007563
 8007538:	08007563 	.word	0x08007563
 800753c:	08007563 	.word	0x08007563
 8007540:	0800755b 	.word	0x0800755b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007544:	f7fe febe 	bl	80062c4 <HAL_RCC_GetPCLK1Freq>
 8007548:	61f8      	str	r0, [r7, #28]
        break;
 800754a:	e010      	b.n	800756e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800754c:	4b8f      	ldr	r3, [pc, #572]	; (800778c <UART_SetConfig+0x56c>)
 800754e:	61fb      	str	r3, [r7, #28]
        break;
 8007550:	e00d      	b.n	800756e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007552:	f7fe fe1f 	bl	8006194 <HAL_RCC_GetSysClockFreq>
 8007556:	61f8      	str	r0, [r7, #28]
        break;
 8007558:	e009      	b.n	800756e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800755a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755e:	61fb      	str	r3, [r7, #28]
        break;
 8007560:	e005      	b.n	800756e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800756c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80fb 	beq.w	800776c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4413      	add	r3, r2
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	429a      	cmp	r2, r3
 8007584:	d305      	bcc.n	8007592 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	429a      	cmp	r2, r3
 8007590:	d903      	bls.n	800759a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007598:	e0e8      	b.n	800776c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	2200      	movs	r2, #0
 800759e:	461c      	mov	r4, r3
 80075a0:	4615      	mov	r5, r2
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	022b      	lsls	r3, r5, #8
 80075ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80075b0:	0222      	lsls	r2, r4, #8
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	6849      	ldr	r1, [r1, #4]
 80075b6:	0849      	lsrs	r1, r1, #1
 80075b8:	2000      	movs	r0, #0
 80075ba:	4688      	mov	r8, r1
 80075bc:	4681      	mov	r9, r0
 80075be:	eb12 0a08 	adds.w	sl, r2, r8
 80075c2:	eb43 0b09 	adc.w	fp, r3, r9
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d4:	4650      	mov	r0, sl
 80075d6:	4659      	mov	r1, fp
 80075d8:	f7f8 fe52 	bl	8000280 <__aeabi_uldivmod>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4613      	mov	r3, r2
 80075e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ea:	d308      	bcc.n	80075fe <UART_SetConfig+0x3de>
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075f2:	d204      	bcs.n	80075fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	60da      	str	r2, [r3, #12]
 80075fc:	e0b6      	b.n	800776c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007604:	e0b2      	b.n	800776c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800760e:	d15e      	bne.n	80076ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007614:	2b08      	cmp	r3, #8
 8007616:	d828      	bhi.n	800766a <UART_SetConfig+0x44a>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <UART_SetConfig+0x400>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007645 	.word	0x08007645
 8007624:	0800764d 	.word	0x0800764d
 8007628:	08007655 	.word	0x08007655
 800762c:	0800766b 	.word	0x0800766b
 8007630:	0800765b 	.word	0x0800765b
 8007634:	0800766b 	.word	0x0800766b
 8007638:	0800766b 	.word	0x0800766b
 800763c:	0800766b 	.word	0x0800766b
 8007640:	08007663 	.word	0x08007663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007644:	f7fe fe3e 	bl	80062c4 <HAL_RCC_GetPCLK1Freq>
 8007648:	61f8      	str	r0, [r7, #28]
        break;
 800764a:	e014      	b.n	8007676 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800764c:	f7fe fe50 	bl	80062f0 <HAL_RCC_GetPCLK2Freq>
 8007650:	61f8      	str	r0, [r7, #28]
        break;
 8007652:	e010      	b.n	8007676 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007654:	4b4d      	ldr	r3, [pc, #308]	; (800778c <UART_SetConfig+0x56c>)
 8007656:	61fb      	str	r3, [r7, #28]
        break;
 8007658:	e00d      	b.n	8007676 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800765a:	f7fe fd9b 	bl	8006194 <HAL_RCC_GetSysClockFreq>
 800765e:	61f8      	str	r0, [r7, #28]
        break;
 8007660:	e009      	b.n	8007676 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007666:	61fb      	str	r3, [r7, #28]
        break;
 8007668:	e005      	b.n	8007676 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d077      	beq.n	800776c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	005a      	lsls	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	441a      	add	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b0f      	cmp	r3, #15
 8007696:	d916      	bls.n	80076c6 <UART_SetConfig+0x4a6>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800769e:	d212      	bcs.n	80076c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f023 030f 	bic.w	r3, r3, #15
 80076a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	8afb      	ldrh	r3, [r7, #22]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	8afa      	ldrh	r2, [r7, #22]
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	e052      	b.n	800776c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076cc:	e04e      	b.n	800776c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d827      	bhi.n	8007726 <UART_SetConfig+0x506>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0x4bc>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	08007701 	.word	0x08007701
 80076e0:	08007709 	.word	0x08007709
 80076e4:	08007711 	.word	0x08007711
 80076e8:	08007727 	.word	0x08007727
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007727 	.word	0x08007727
 80076f4:	08007727 	.word	0x08007727
 80076f8:	08007727 	.word	0x08007727
 80076fc:	0800771f 	.word	0x0800771f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007700:	f7fe fde0 	bl	80062c4 <HAL_RCC_GetPCLK1Freq>
 8007704:	61f8      	str	r0, [r7, #28]
        break;
 8007706:	e014      	b.n	8007732 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007708:	f7fe fdf2 	bl	80062f0 <HAL_RCC_GetPCLK2Freq>
 800770c:	61f8      	str	r0, [r7, #28]
        break;
 800770e:	e010      	b.n	8007732 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007710:	4b1e      	ldr	r3, [pc, #120]	; (800778c <UART_SetConfig+0x56c>)
 8007712:	61fb      	str	r3, [r7, #28]
        break;
 8007714:	e00d      	b.n	8007732 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007716:	f7fe fd3d 	bl	8006194 <HAL_RCC_GetSysClockFreq>
 800771a:	61f8      	str	r0, [r7, #28]
        break;
 800771c:	e009      	b.n	8007732 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800771e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007722:	61fb      	str	r3, [r7, #28]
        break;
 8007724:	e005      	b.n	8007732 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007730:	bf00      	nop
    }

    if (pclk != 0U)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d019      	beq.n	800776c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	085a      	lsrs	r2, r3, #1
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	fbb2 f3f3 	udiv	r3, r2, r3
 800774a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	2b0f      	cmp	r3, #15
 8007750:	d909      	bls.n	8007766 <UART_SetConfig+0x546>
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007758:	d205      	bcs.n	8007766 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60da      	str	r2, [r3, #12]
 8007764:	e002      	b.n	800776c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007778:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800777c:	4618      	mov	r0, r3
 800777e:	3728      	adds	r7, #40	; 0x28
 8007780:	46bd      	mov	sp, r7
 8007782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007786:	bf00      	nop
 8007788:	40008000 	.word	0x40008000
 800778c:	00f42400 	.word	0x00f42400

08007790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788e:	d10a      	bne.n	80078a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e4:	f7fa fbd6 	bl	8002094 <HAL_GetTick>
 80078e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10e      	bne.n	8007916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f82d 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e023      	b.n	800795e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b04      	cmp	r3, #4
 8007922:	d10e      	bne.n	8007942 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f817 	bl	8007966 <UART_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e00d      	b.n	800795e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b09c      	sub	sp, #112	; 0x70
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	4613      	mov	r3, r2
 8007974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007976:	e0a5      	b.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	f000 80a1 	beq.w	8007ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007982:	f7fa fb87 	bl	8002094 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800798e:	429a      	cmp	r2, r3
 8007990:	d302      	bcc.n	8007998 <UART_WaitOnFlagUntilTimeout+0x32>
 8007992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007994:	2b00      	cmp	r3, #0
 8007996:	d13e      	bne.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079ac:	667b      	str	r3, [r7, #100]	; 0x64
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e6      	bne.n	8007998 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	f023 0301 	bic.w	r3, r3, #1
 80079e0:	663b      	str	r3, [r7, #96]	; 0x60
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3308      	adds	r3, #8
 80079e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80079ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e5      	bne.n	80079ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e067      	b.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d04f      	beq.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a32:	d147      	bne.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a90:	623a      	str	r2, [r7, #32]
 8007a92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	69f9      	ldr	r1, [r7, #28]
 8007a96:	6a3a      	ldr	r2, [r7, #32]
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e010      	b.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69da      	ldr	r2, [r3, #28]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4013      	ands	r3, r2
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	bf0c      	ite	eq
 8007ad4:	2301      	moveq	r3, #1
 8007ad6:	2300      	movne	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	f43f af4a 	beq.w	8007978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3770      	adds	r7, #112	; 0x70
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007aee:	b084      	sub	sp, #16
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	f107 001c 	add.w	r0, r7, #28
 8007afc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa6f 	bl	8007ff0 <USB_CoreReset>
 8007b12:	4603      	mov	r3, r0
 8007b14:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
 8007b28:	e005      	b.n	8007b36 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b42:	b004      	add	sp, #16
 8007b44:	4770      	bx	lr

08007b46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f023 0201 	bic.w	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d115      	bne.n	8007bb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b96:	2001      	movs	r0, #1
 8007b98:	f7fa fa88 	bl	80020ac <HAL_Delay>
      ms++;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa16 	bl	8007fd4 <USB_GetMode>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d01e      	beq.n	8007bec <USB_SetCurrentMode+0x84>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b31      	cmp	r3, #49	; 0x31
 8007bb2:	d9f0      	bls.n	8007b96 <USB_SetCurrentMode+0x2e>
 8007bb4:	e01a      	b.n	8007bec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d115      	bne.n	8007be8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f7fa fa6f 	bl	80020ac <HAL_Delay>
      ms++;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f9fd 	bl	8007fd4 <USB_GetMode>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <USB_SetCurrentMode+0x84>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b31      	cmp	r3, #49	; 0x31
 8007be4:	d9f0      	bls.n	8007bc8 <USB_SetCurrentMode+0x60>
 8007be6:	e001      	b.n	8007bec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e005      	b.n	8007bf8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b32      	cmp	r3, #50	; 0x32
 8007bf0:	d101      	bne.n	8007bf6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e000      	b.n	8007bf8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c00:	b084      	sub	sp, #16
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b086      	sub	sp, #24
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	e009      	b.n	8007c34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	3340      	adds	r3, #64	; 0x40
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	3301      	adds	r3, #1
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2b0e      	cmp	r3, #14
 8007c38:	d9f2      	bls.n	8007c20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d11c      	bne.n	8007c7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4e:	f043 0302 	orr.w	r3, r3, #2
 8007c52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	e005      	b.n	8007c86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	2300      	movs	r3, #0
 8007c90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c98:	4619      	mov	r1, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	680b      	ldr	r3, [r1, #0]
 8007ca4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ca6:	2103      	movs	r1, #3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f959 	bl	8007f60 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cae:	2110      	movs	r1, #16
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f8f1 	bl	8007e98 <USB_FlushTxFifo>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f91d 	bl	8007f00 <USB_FlushRxFifo>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cee:	461a      	mov	r2, r3
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	e043      	b.n	8007d82 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d10:	d118      	bne.n	8007d44 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	461a      	mov	r2, r3
 8007d26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	e013      	b.n	8007d56 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	e008      	b.n	8007d56 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	461a      	mov	r2, r3
 8007d52:	2300      	movs	r3, #0
 8007d54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d62:	461a      	mov	r2, r3
 8007d64:	2300      	movs	r3, #0
 8007d66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d74:	461a      	mov	r2, r3
 8007d76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d3b7      	bcc.n	8007cfa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	613b      	str	r3, [r7, #16]
 8007d8e:	e043      	b.n	8007e18 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da6:	d118      	bne.n	8007dda <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	e013      	b.n	8007dec <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	e008      	b.n	8007dec <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de6:	461a      	mov	r2, r3
 8007de8:	2300      	movs	r3, #0
 8007dea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df8:	461a      	mov	r2, r3
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3301      	adds	r3, #1
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d3b7      	bcc.n	8007d90 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f043 0210 	orr.w	r2, r3, #16
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <USB_DevInit+0x294>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	f043 0208 	orr.w	r2, r3, #8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d107      	bne.n	8007e82 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e7a:	f043 0304 	orr.w	r3, r3, #4
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e8e:	b004      	add	sp, #16
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	803c3800 	.word	0x803c3800

08007e98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a13      	ldr	r2, [pc, #76]	; (8007efc <USB_FlushTxFifo+0x64>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d901      	bls.n	8007eb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e01b      	b.n	8007ef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	daf2      	bge.n	8007ea6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	019b      	lsls	r3, r3, #6
 8007ec8:	f043 0220 	orr.w	r2, r3, #32
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a08      	ldr	r2, [pc, #32]	; (8007efc <USB_FlushTxFifo+0x64>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d901      	bls.n	8007ee2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e006      	b.n	8007ef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d0f0      	beq.n	8007ed0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	00030d40 	.word	0x00030d40

08007f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4a11      	ldr	r2, [pc, #68]	; (8007f5c <USB_FlushRxFifo+0x5c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e018      	b.n	8007f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	daf2      	bge.n	8007f0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <USB_FlushRxFifo+0x5c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d901      	bls.n	8007f42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e006      	b.n	8007f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d0f0      	beq.n	8007f30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	00030d40 	.word	0x00030d40

08007f60 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	68f9      	ldr	r1, [r7, #12]
 8007f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f80:	4313      	orrs	r3, r2
 8007f82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fac:	f023 0303 	bic.w	r3, r3, #3
 8007fb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc0:	f043 0302 	orr.w	r3, r3, #2
 8007fc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4a13      	ldr	r2, [pc, #76]	; (8008054 <USB_CoreReset+0x64>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d901      	bls.n	800800e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e01b      	b.n	8008046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	daf2      	bge.n	8007ffc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f043 0201 	orr.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3301      	adds	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a09      	ldr	r2, [pc, #36]	; (8008054 <USB_CoreReset+0x64>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d901      	bls.n	8008038 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e006      	b.n	8008046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b01      	cmp	r3, #1
 8008042:	d0f0      	beq.n	8008026 <USB_CoreReset+0x36>

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	00030d40 	.word	0x00030d40

08008058 <__errno>:
 8008058:	4b01      	ldr	r3, [pc, #4]	; (8008060 <__errno+0x8>)
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	20000010 	.word	0x20000010

08008064 <__libc_init_array>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4d0d      	ldr	r5, [pc, #52]	; (800809c <__libc_init_array+0x38>)
 8008068:	4c0d      	ldr	r4, [pc, #52]	; (80080a0 <__libc_init_array+0x3c>)
 800806a:	1b64      	subs	r4, r4, r5
 800806c:	10a4      	asrs	r4, r4, #2
 800806e:	2600      	movs	r6, #0
 8008070:	42a6      	cmp	r6, r4
 8008072:	d109      	bne.n	8008088 <__libc_init_array+0x24>
 8008074:	4d0b      	ldr	r5, [pc, #44]	; (80080a4 <__libc_init_array+0x40>)
 8008076:	4c0c      	ldr	r4, [pc, #48]	; (80080a8 <__libc_init_array+0x44>)
 8008078:	f000 fca2 	bl	80089c0 <_init>
 800807c:	1b64      	subs	r4, r4, r5
 800807e:	10a4      	asrs	r4, r4, #2
 8008080:	2600      	movs	r6, #0
 8008082:	42a6      	cmp	r6, r4
 8008084:	d105      	bne.n	8008092 <__libc_init_array+0x2e>
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	f855 3b04 	ldr.w	r3, [r5], #4
 800808c:	4798      	blx	r3
 800808e:	3601      	adds	r6, #1
 8008090:	e7ee      	b.n	8008070 <__libc_init_array+0xc>
 8008092:	f855 3b04 	ldr.w	r3, [r5], #4
 8008096:	4798      	blx	r3
 8008098:	3601      	adds	r6, #1
 800809a:	e7f2      	b.n	8008082 <__libc_init_array+0x1e>
 800809c:	08008fe8 	.word	0x08008fe8
 80080a0:	08008fe8 	.word	0x08008fe8
 80080a4:	08008fe8 	.word	0x08008fe8
 80080a8:	08008fec 	.word	0x08008fec

080080ac <memset>:
 80080ac:	4402      	add	r2, r0
 80080ae:	4603      	mov	r3, r0
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d100      	bne.n	80080b6 <memset+0xa>
 80080b4:	4770      	bx	lr
 80080b6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ba:	e7f9      	b.n	80080b0 <memset+0x4>

080080bc <sniprintf>:
 80080bc:	b40c      	push	{r2, r3}
 80080be:	b530      	push	{r4, r5, lr}
 80080c0:	4b17      	ldr	r3, [pc, #92]	; (8008120 <sniprintf+0x64>)
 80080c2:	1e0c      	subs	r4, r1, #0
 80080c4:	681d      	ldr	r5, [r3, #0]
 80080c6:	b09d      	sub	sp, #116	; 0x74
 80080c8:	da08      	bge.n	80080dc <sniprintf+0x20>
 80080ca:	238b      	movs	r3, #139	; 0x8b
 80080cc:	602b      	str	r3, [r5, #0]
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295
 80080d2:	b01d      	add	sp, #116	; 0x74
 80080d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d8:	b002      	add	sp, #8
 80080da:	4770      	bx	lr
 80080dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80080e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080e4:	bf14      	ite	ne
 80080e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080ea:	4623      	moveq	r3, r4
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080f4:	9002      	str	r0, [sp, #8]
 80080f6:	9006      	str	r0, [sp, #24]
 80080f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080fe:	ab21      	add	r3, sp, #132	; 0x84
 8008100:	a902      	add	r1, sp, #8
 8008102:	4628      	mov	r0, r5
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	f000 f869 	bl	80081dc <_svfiprintf_r>
 800810a:	1c43      	adds	r3, r0, #1
 800810c:	bfbc      	itt	lt
 800810e:	238b      	movlt	r3, #139	; 0x8b
 8008110:	602b      	strlt	r3, [r5, #0]
 8008112:	2c00      	cmp	r4, #0
 8008114:	d0dd      	beq.n	80080d2 <sniprintf+0x16>
 8008116:	9b02      	ldr	r3, [sp, #8]
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e7d9      	b.n	80080d2 <sniprintf+0x16>
 800811e:	bf00      	nop
 8008120:	20000010 	.word	0x20000010

08008124 <__ssputs_r>:
 8008124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	688e      	ldr	r6, [r1, #8]
 800812a:	429e      	cmp	r6, r3
 800812c:	4682      	mov	sl, r0
 800812e:	460c      	mov	r4, r1
 8008130:	4690      	mov	r8, r2
 8008132:	461f      	mov	r7, r3
 8008134:	d838      	bhi.n	80081a8 <__ssputs_r+0x84>
 8008136:	898a      	ldrh	r2, [r1, #12]
 8008138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800813c:	d032      	beq.n	80081a4 <__ssputs_r+0x80>
 800813e:	6825      	ldr	r5, [r4, #0]
 8008140:	6909      	ldr	r1, [r1, #16]
 8008142:	eba5 0901 	sub.w	r9, r5, r1
 8008146:	6965      	ldr	r5, [r4, #20]
 8008148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800814c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008150:	3301      	adds	r3, #1
 8008152:	444b      	add	r3, r9
 8008154:	106d      	asrs	r5, r5, #1
 8008156:	429d      	cmp	r5, r3
 8008158:	bf38      	it	cc
 800815a:	461d      	movcc	r5, r3
 800815c:	0553      	lsls	r3, r2, #21
 800815e:	d531      	bpl.n	80081c4 <__ssputs_r+0xa0>
 8008160:	4629      	mov	r1, r5
 8008162:	f000 fb63 	bl	800882c <_malloc_r>
 8008166:	4606      	mov	r6, r0
 8008168:	b950      	cbnz	r0, 8008180 <__ssputs_r+0x5c>
 800816a:	230c      	movs	r3, #12
 800816c:	f8ca 3000 	str.w	r3, [sl]
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008180:	6921      	ldr	r1, [r4, #16]
 8008182:	464a      	mov	r2, r9
 8008184:	f000 fabe 	bl	8008704 <memcpy>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800818e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	6126      	str	r6, [r4, #16]
 8008196:	6165      	str	r5, [r4, #20]
 8008198:	444e      	add	r6, r9
 800819a:	eba5 0509 	sub.w	r5, r5, r9
 800819e:	6026      	str	r6, [r4, #0]
 80081a0:	60a5      	str	r5, [r4, #8]
 80081a2:	463e      	mov	r6, r7
 80081a4:	42be      	cmp	r6, r7
 80081a6:	d900      	bls.n	80081aa <__ssputs_r+0x86>
 80081a8:	463e      	mov	r6, r7
 80081aa:	6820      	ldr	r0, [r4, #0]
 80081ac:	4632      	mov	r2, r6
 80081ae:	4641      	mov	r1, r8
 80081b0:	f000 fab6 	bl	8008720 <memmove>
 80081b4:	68a3      	ldr	r3, [r4, #8]
 80081b6:	1b9b      	subs	r3, r3, r6
 80081b8:	60a3      	str	r3, [r4, #8]
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	4433      	add	r3, r6
 80081be:	6023      	str	r3, [r4, #0]
 80081c0:	2000      	movs	r0, #0
 80081c2:	e7db      	b.n	800817c <__ssputs_r+0x58>
 80081c4:	462a      	mov	r2, r5
 80081c6:	f000 fba5 	bl	8008914 <_realloc_r>
 80081ca:	4606      	mov	r6, r0
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d1e1      	bne.n	8008194 <__ssputs_r+0x70>
 80081d0:	6921      	ldr	r1, [r4, #16]
 80081d2:	4650      	mov	r0, sl
 80081d4:	f000 fabe 	bl	8008754 <_free_r>
 80081d8:	e7c7      	b.n	800816a <__ssputs_r+0x46>
	...

080081dc <_svfiprintf_r>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	4698      	mov	r8, r3
 80081e2:	898b      	ldrh	r3, [r1, #12]
 80081e4:	061b      	lsls	r3, r3, #24
 80081e6:	b09d      	sub	sp, #116	; 0x74
 80081e8:	4607      	mov	r7, r0
 80081ea:	460d      	mov	r5, r1
 80081ec:	4614      	mov	r4, r2
 80081ee:	d50e      	bpl.n	800820e <_svfiprintf_r+0x32>
 80081f0:	690b      	ldr	r3, [r1, #16]
 80081f2:	b963      	cbnz	r3, 800820e <_svfiprintf_r+0x32>
 80081f4:	2140      	movs	r1, #64	; 0x40
 80081f6:	f000 fb19 	bl	800882c <_malloc_r>
 80081fa:	6028      	str	r0, [r5, #0]
 80081fc:	6128      	str	r0, [r5, #16]
 80081fe:	b920      	cbnz	r0, 800820a <_svfiprintf_r+0x2e>
 8008200:	230c      	movs	r3, #12
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	e0d1      	b.n	80083ae <_svfiprintf_r+0x1d2>
 800820a:	2340      	movs	r3, #64	; 0x40
 800820c:	616b      	str	r3, [r5, #20]
 800820e:	2300      	movs	r3, #0
 8008210:	9309      	str	r3, [sp, #36]	; 0x24
 8008212:	2320      	movs	r3, #32
 8008214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008218:	f8cd 800c 	str.w	r8, [sp, #12]
 800821c:	2330      	movs	r3, #48	; 0x30
 800821e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083c8 <_svfiprintf_r+0x1ec>
 8008222:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008226:	f04f 0901 	mov.w	r9, #1
 800822a:	4623      	mov	r3, r4
 800822c:	469a      	mov	sl, r3
 800822e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008232:	b10a      	cbz	r2, 8008238 <_svfiprintf_r+0x5c>
 8008234:	2a25      	cmp	r2, #37	; 0x25
 8008236:	d1f9      	bne.n	800822c <_svfiprintf_r+0x50>
 8008238:	ebba 0b04 	subs.w	fp, sl, r4
 800823c:	d00b      	beq.n	8008256 <_svfiprintf_r+0x7a>
 800823e:	465b      	mov	r3, fp
 8008240:	4622      	mov	r2, r4
 8008242:	4629      	mov	r1, r5
 8008244:	4638      	mov	r0, r7
 8008246:	f7ff ff6d 	bl	8008124 <__ssputs_r>
 800824a:	3001      	adds	r0, #1
 800824c:	f000 80aa 	beq.w	80083a4 <_svfiprintf_r+0x1c8>
 8008250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008252:	445a      	add	r2, fp
 8008254:	9209      	str	r2, [sp, #36]	; 0x24
 8008256:	f89a 3000 	ldrb.w	r3, [sl]
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80a2 	beq.w	80083a4 <_svfiprintf_r+0x1c8>
 8008260:	2300      	movs	r3, #0
 8008262:	f04f 32ff 	mov.w	r2, #4294967295
 8008266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800826a:	f10a 0a01 	add.w	sl, sl, #1
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	9307      	str	r3, [sp, #28]
 8008272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008276:	931a      	str	r3, [sp, #104]	; 0x68
 8008278:	4654      	mov	r4, sl
 800827a:	2205      	movs	r2, #5
 800827c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008280:	4851      	ldr	r0, [pc, #324]	; (80083c8 <_svfiprintf_r+0x1ec>)
 8008282:	f7f7 ffad 	bl	80001e0 <memchr>
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	b9d8      	cbnz	r0, 80082c2 <_svfiprintf_r+0xe6>
 800828a:	06d0      	lsls	r0, r2, #27
 800828c:	bf44      	itt	mi
 800828e:	2320      	movmi	r3, #32
 8008290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008294:	0711      	lsls	r1, r2, #28
 8008296:	bf44      	itt	mi
 8008298:	232b      	movmi	r3, #43	; 0x2b
 800829a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800829e:	f89a 3000 	ldrb.w	r3, [sl]
 80082a2:	2b2a      	cmp	r3, #42	; 0x2a
 80082a4:	d015      	beq.n	80082d2 <_svfiprintf_r+0xf6>
 80082a6:	9a07      	ldr	r2, [sp, #28]
 80082a8:	4654      	mov	r4, sl
 80082aa:	2000      	movs	r0, #0
 80082ac:	f04f 0c0a 	mov.w	ip, #10
 80082b0:	4621      	mov	r1, r4
 80082b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082b6:	3b30      	subs	r3, #48	; 0x30
 80082b8:	2b09      	cmp	r3, #9
 80082ba:	d94e      	bls.n	800835a <_svfiprintf_r+0x17e>
 80082bc:	b1b0      	cbz	r0, 80082ec <_svfiprintf_r+0x110>
 80082be:	9207      	str	r2, [sp, #28]
 80082c0:	e014      	b.n	80082ec <_svfiprintf_r+0x110>
 80082c2:	eba0 0308 	sub.w	r3, r0, r8
 80082c6:	fa09 f303 	lsl.w	r3, r9, r3
 80082ca:	4313      	orrs	r3, r2
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	46a2      	mov	sl, r4
 80082d0:	e7d2      	b.n	8008278 <_svfiprintf_r+0x9c>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	1d19      	adds	r1, r3, #4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	9103      	str	r1, [sp, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bfbb      	ittet	lt
 80082de:	425b      	neglt	r3, r3
 80082e0:	f042 0202 	orrlt.w	r2, r2, #2
 80082e4:	9307      	strge	r3, [sp, #28]
 80082e6:	9307      	strlt	r3, [sp, #28]
 80082e8:	bfb8      	it	lt
 80082ea:	9204      	strlt	r2, [sp, #16]
 80082ec:	7823      	ldrb	r3, [r4, #0]
 80082ee:	2b2e      	cmp	r3, #46	; 0x2e
 80082f0:	d10c      	bne.n	800830c <_svfiprintf_r+0x130>
 80082f2:	7863      	ldrb	r3, [r4, #1]
 80082f4:	2b2a      	cmp	r3, #42	; 0x2a
 80082f6:	d135      	bne.n	8008364 <_svfiprintf_r+0x188>
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	1d1a      	adds	r2, r3, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	9203      	str	r2, [sp, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	bfb8      	it	lt
 8008304:	f04f 33ff 	movlt.w	r3, #4294967295
 8008308:	3402      	adds	r4, #2
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083d8 <_svfiprintf_r+0x1fc>
 8008310:	7821      	ldrb	r1, [r4, #0]
 8008312:	2203      	movs	r2, #3
 8008314:	4650      	mov	r0, sl
 8008316:	f7f7 ff63 	bl	80001e0 <memchr>
 800831a:	b140      	cbz	r0, 800832e <_svfiprintf_r+0x152>
 800831c:	2340      	movs	r3, #64	; 0x40
 800831e:	eba0 000a 	sub.w	r0, r0, sl
 8008322:	fa03 f000 	lsl.w	r0, r3, r0
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	4303      	orrs	r3, r0
 800832a:	3401      	adds	r4, #1
 800832c:	9304      	str	r3, [sp, #16]
 800832e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008332:	4826      	ldr	r0, [pc, #152]	; (80083cc <_svfiprintf_r+0x1f0>)
 8008334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008338:	2206      	movs	r2, #6
 800833a:	f7f7 ff51 	bl	80001e0 <memchr>
 800833e:	2800      	cmp	r0, #0
 8008340:	d038      	beq.n	80083b4 <_svfiprintf_r+0x1d8>
 8008342:	4b23      	ldr	r3, [pc, #140]	; (80083d0 <_svfiprintf_r+0x1f4>)
 8008344:	bb1b      	cbnz	r3, 800838e <_svfiprintf_r+0x1b2>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	3307      	adds	r3, #7
 800834a:	f023 0307 	bic.w	r3, r3, #7
 800834e:	3308      	adds	r3, #8
 8008350:	9303      	str	r3, [sp, #12]
 8008352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008354:	4433      	add	r3, r6
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	e767      	b.n	800822a <_svfiprintf_r+0x4e>
 800835a:	fb0c 3202 	mla	r2, ip, r2, r3
 800835e:	460c      	mov	r4, r1
 8008360:	2001      	movs	r0, #1
 8008362:	e7a5      	b.n	80082b0 <_svfiprintf_r+0xd4>
 8008364:	2300      	movs	r3, #0
 8008366:	3401      	adds	r4, #1
 8008368:	9305      	str	r3, [sp, #20]
 800836a:	4619      	mov	r1, r3
 800836c:	f04f 0c0a 	mov.w	ip, #10
 8008370:	4620      	mov	r0, r4
 8008372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008376:	3a30      	subs	r2, #48	; 0x30
 8008378:	2a09      	cmp	r2, #9
 800837a:	d903      	bls.n	8008384 <_svfiprintf_r+0x1a8>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0c5      	beq.n	800830c <_svfiprintf_r+0x130>
 8008380:	9105      	str	r1, [sp, #20]
 8008382:	e7c3      	b.n	800830c <_svfiprintf_r+0x130>
 8008384:	fb0c 2101 	mla	r1, ip, r1, r2
 8008388:	4604      	mov	r4, r0
 800838a:	2301      	movs	r3, #1
 800838c:	e7f0      	b.n	8008370 <_svfiprintf_r+0x194>
 800838e:	ab03      	add	r3, sp, #12
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	462a      	mov	r2, r5
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <_svfiprintf_r+0x1f8>)
 8008396:	a904      	add	r1, sp, #16
 8008398:	4638      	mov	r0, r7
 800839a:	f3af 8000 	nop.w
 800839e:	1c42      	adds	r2, r0, #1
 80083a0:	4606      	mov	r6, r0
 80083a2:	d1d6      	bne.n	8008352 <_svfiprintf_r+0x176>
 80083a4:	89ab      	ldrh	r3, [r5, #12]
 80083a6:	065b      	lsls	r3, r3, #25
 80083a8:	f53f af2c 	bmi.w	8008204 <_svfiprintf_r+0x28>
 80083ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ae:	b01d      	add	sp, #116	; 0x74
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	ab03      	add	r3, sp, #12
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	462a      	mov	r2, r5
 80083ba:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <_svfiprintf_r+0x1f8>)
 80083bc:	a904      	add	r1, sp, #16
 80083be:	4638      	mov	r0, r7
 80083c0:	f000 f87a 	bl	80084b8 <_printf_i>
 80083c4:	e7eb      	b.n	800839e <_svfiprintf_r+0x1c2>
 80083c6:	bf00      	nop
 80083c8:	08008fac 	.word	0x08008fac
 80083cc:	08008fb6 	.word	0x08008fb6
 80083d0:	00000000 	.word	0x00000000
 80083d4:	08008125 	.word	0x08008125
 80083d8:	08008fb2 	.word	0x08008fb2

080083dc <_printf_common>:
 80083dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e0:	4616      	mov	r6, r2
 80083e2:	4699      	mov	r9, r3
 80083e4:	688a      	ldr	r2, [r1, #8]
 80083e6:	690b      	ldr	r3, [r1, #16]
 80083e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083ec:	4293      	cmp	r3, r2
 80083ee:	bfb8      	it	lt
 80083f0:	4613      	movlt	r3, r2
 80083f2:	6033      	str	r3, [r6, #0]
 80083f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083f8:	4607      	mov	r7, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	b10a      	cbz	r2, 8008402 <_printf_common+0x26>
 80083fe:	3301      	adds	r3, #1
 8008400:	6033      	str	r3, [r6, #0]
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	0699      	lsls	r1, r3, #26
 8008406:	bf42      	ittt	mi
 8008408:	6833      	ldrmi	r3, [r6, #0]
 800840a:	3302      	addmi	r3, #2
 800840c:	6033      	strmi	r3, [r6, #0]
 800840e:	6825      	ldr	r5, [r4, #0]
 8008410:	f015 0506 	ands.w	r5, r5, #6
 8008414:	d106      	bne.n	8008424 <_printf_common+0x48>
 8008416:	f104 0a19 	add.w	sl, r4, #25
 800841a:	68e3      	ldr	r3, [r4, #12]
 800841c:	6832      	ldr	r2, [r6, #0]
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	42ab      	cmp	r3, r5
 8008422:	dc26      	bgt.n	8008472 <_printf_common+0x96>
 8008424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008428:	1e13      	subs	r3, r2, #0
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	bf18      	it	ne
 800842e:	2301      	movne	r3, #1
 8008430:	0692      	lsls	r2, r2, #26
 8008432:	d42b      	bmi.n	800848c <_printf_common+0xb0>
 8008434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008438:	4649      	mov	r1, r9
 800843a:	4638      	mov	r0, r7
 800843c:	47c0      	blx	r8
 800843e:	3001      	adds	r0, #1
 8008440:	d01e      	beq.n	8008480 <_printf_common+0xa4>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	68e5      	ldr	r5, [r4, #12]
 8008446:	6832      	ldr	r2, [r6, #0]
 8008448:	f003 0306 	and.w	r3, r3, #6
 800844c:	2b04      	cmp	r3, #4
 800844e:	bf08      	it	eq
 8008450:	1aad      	subeq	r5, r5, r2
 8008452:	68a3      	ldr	r3, [r4, #8]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	bf0c      	ite	eq
 8008458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800845c:	2500      	movne	r5, #0
 800845e:	4293      	cmp	r3, r2
 8008460:	bfc4      	itt	gt
 8008462:	1a9b      	subgt	r3, r3, r2
 8008464:	18ed      	addgt	r5, r5, r3
 8008466:	2600      	movs	r6, #0
 8008468:	341a      	adds	r4, #26
 800846a:	42b5      	cmp	r5, r6
 800846c:	d11a      	bne.n	80084a4 <_printf_common+0xc8>
 800846e:	2000      	movs	r0, #0
 8008470:	e008      	b.n	8008484 <_printf_common+0xa8>
 8008472:	2301      	movs	r3, #1
 8008474:	4652      	mov	r2, sl
 8008476:	4649      	mov	r1, r9
 8008478:	4638      	mov	r0, r7
 800847a:	47c0      	blx	r8
 800847c:	3001      	adds	r0, #1
 800847e:	d103      	bne.n	8008488 <_printf_common+0xac>
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008488:	3501      	adds	r5, #1
 800848a:	e7c6      	b.n	800841a <_printf_common+0x3e>
 800848c:	18e1      	adds	r1, r4, r3
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	2030      	movs	r0, #48	; 0x30
 8008492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008496:	4422      	add	r2, r4
 8008498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800849c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084a0:	3302      	adds	r3, #2
 80084a2:	e7c7      	b.n	8008434 <_printf_common+0x58>
 80084a4:	2301      	movs	r3, #1
 80084a6:	4622      	mov	r2, r4
 80084a8:	4649      	mov	r1, r9
 80084aa:	4638      	mov	r0, r7
 80084ac:	47c0      	blx	r8
 80084ae:	3001      	adds	r0, #1
 80084b0:	d0e6      	beq.n	8008480 <_printf_common+0xa4>
 80084b2:	3601      	adds	r6, #1
 80084b4:	e7d9      	b.n	800846a <_printf_common+0x8e>
	...

080084b8 <_printf_i>:
 80084b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	7e0f      	ldrb	r7, [r1, #24]
 80084be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084c0:	2f78      	cmp	r7, #120	; 0x78
 80084c2:	4691      	mov	r9, r2
 80084c4:	4680      	mov	r8, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	469a      	mov	sl, r3
 80084ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084ce:	d807      	bhi.n	80084e0 <_printf_i+0x28>
 80084d0:	2f62      	cmp	r7, #98	; 0x62
 80084d2:	d80a      	bhi.n	80084ea <_printf_i+0x32>
 80084d4:	2f00      	cmp	r7, #0
 80084d6:	f000 80d8 	beq.w	800868a <_printf_i+0x1d2>
 80084da:	2f58      	cmp	r7, #88	; 0x58
 80084dc:	f000 80a3 	beq.w	8008626 <_printf_i+0x16e>
 80084e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084e8:	e03a      	b.n	8008560 <_printf_i+0xa8>
 80084ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ee:	2b15      	cmp	r3, #21
 80084f0:	d8f6      	bhi.n	80084e0 <_printf_i+0x28>
 80084f2:	a101      	add	r1, pc, #4	; (adr r1, 80084f8 <_printf_i+0x40>)
 80084f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084f8:	08008551 	.word	0x08008551
 80084fc:	08008565 	.word	0x08008565
 8008500:	080084e1 	.word	0x080084e1
 8008504:	080084e1 	.word	0x080084e1
 8008508:	080084e1 	.word	0x080084e1
 800850c:	080084e1 	.word	0x080084e1
 8008510:	08008565 	.word	0x08008565
 8008514:	080084e1 	.word	0x080084e1
 8008518:	080084e1 	.word	0x080084e1
 800851c:	080084e1 	.word	0x080084e1
 8008520:	080084e1 	.word	0x080084e1
 8008524:	08008671 	.word	0x08008671
 8008528:	08008595 	.word	0x08008595
 800852c:	08008653 	.word	0x08008653
 8008530:	080084e1 	.word	0x080084e1
 8008534:	080084e1 	.word	0x080084e1
 8008538:	08008693 	.word	0x08008693
 800853c:	080084e1 	.word	0x080084e1
 8008540:	08008595 	.word	0x08008595
 8008544:	080084e1 	.word	0x080084e1
 8008548:	080084e1 	.word	0x080084e1
 800854c:	0800865b 	.word	0x0800865b
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	1d1a      	adds	r2, r3, #4
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	602a      	str	r2, [r5, #0]
 8008558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800855c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008560:	2301      	movs	r3, #1
 8008562:	e0a3      	b.n	80086ac <_printf_i+0x1f4>
 8008564:	6820      	ldr	r0, [r4, #0]
 8008566:	6829      	ldr	r1, [r5, #0]
 8008568:	0606      	lsls	r6, r0, #24
 800856a:	f101 0304 	add.w	r3, r1, #4
 800856e:	d50a      	bpl.n	8008586 <_printf_i+0xce>
 8008570:	680e      	ldr	r6, [r1, #0]
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	2e00      	cmp	r6, #0
 8008576:	da03      	bge.n	8008580 <_printf_i+0xc8>
 8008578:	232d      	movs	r3, #45	; 0x2d
 800857a:	4276      	negs	r6, r6
 800857c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008580:	485e      	ldr	r0, [pc, #376]	; (80086fc <_printf_i+0x244>)
 8008582:	230a      	movs	r3, #10
 8008584:	e019      	b.n	80085ba <_printf_i+0x102>
 8008586:	680e      	ldr	r6, [r1, #0]
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800858e:	bf18      	it	ne
 8008590:	b236      	sxthne	r6, r6
 8008592:	e7ef      	b.n	8008574 <_printf_i+0xbc>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	6820      	ldr	r0, [r4, #0]
 8008598:	1d19      	adds	r1, r3, #4
 800859a:	6029      	str	r1, [r5, #0]
 800859c:	0601      	lsls	r1, r0, #24
 800859e:	d501      	bpl.n	80085a4 <_printf_i+0xec>
 80085a0:	681e      	ldr	r6, [r3, #0]
 80085a2:	e002      	b.n	80085aa <_printf_i+0xf2>
 80085a4:	0646      	lsls	r6, r0, #25
 80085a6:	d5fb      	bpl.n	80085a0 <_printf_i+0xe8>
 80085a8:	881e      	ldrh	r6, [r3, #0]
 80085aa:	4854      	ldr	r0, [pc, #336]	; (80086fc <_printf_i+0x244>)
 80085ac:	2f6f      	cmp	r7, #111	; 0x6f
 80085ae:	bf0c      	ite	eq
 80085b0:	2308      	moveq	r3, #8
 80085b2:	230a      	movne	r3, #10
 80085b4:	2100      	movs	r1, #0
 80085b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ba:	6865      	ldr	r5, [r4, #4]
 80085bc:	60a5      	str	r5, [r4, #8]
 80085be:	2d00      	cmp	r5, #0
 80085c0:	bfa2      	ittt	ge
 80085c2:	6821      	ldrge	r1, [r4, #0]
 80085c4:	f021 0104 	bicge.w	r1, r1, #4
 80085c8:	6021      	strge	r1, [r4, #0]
 80085ca:	b90e      	cbnz	r6, 80085d0 <_printf_i+0x118>
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	d04d      	beq.n	800866c <_printf_i+0x1b4>
 80085d0:	4615      	mov	r5, r2
 80085d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80085d6:	fb03 6711 	mls	r7, r3, r1, r6
 80085da:	5dc7      	ldrb	r7, [r0, r7]
 80085dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085e0:	4637      	mov	r7, r6
 80085e2:	42bb      	cmp	r3, r7
 80085e4:	460e      	mov	r6, r1
 80085e6:	d9f4      	bls.n	80085d2 <_printf_i+0x11a>
 80085e8:	2b08      	cmp	r3, #8
 80085ea:	d10b      	bne.n	8008604 <_printf_i+0x14c>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	07de      	lsls	r6, r3, #31
 80085f0:	d508      	bpl.n	8008604 <_printf_i+0x14c>
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	6861      	ldr	r1, [r4, #4]
 80085f6:	4299      	cmp	r1, r3
 80085f8:	bfde      	ittt	le
 80085fa:	2330      	movle	r3, #48	; 0x30
 80085fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008600:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008604:	1b52      	subs	r2, r2, r5
 8008606:	6122      	str	r2, [r4, #16]
 8008608:	f8cd a000 	str.w	sl, [sp]
 800860c:	464b      	mov	r3, r9
 800860e:	aa03      	add	r2, sp, #12
 8008610:	4621      	mov	r1, r4
 8008612:	4640      	mov	r0, r8
 8008614:	f7ff fee2 	bl	80083dc <_printf_common>
 8008618:	3001      	adds	r0, #1
 800861a:	d14c      	bne.n	80086b6 <_printf_i+0x1fe>
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	b004      	add	sp, #16
 8008622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008626:	4835      	ldr	r0, [pc, #212]	; (80086fc <_printf_i+0x244>)
 8008628:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800862c:	6829      	ldr	r1, [r5, #0]
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	f851 6b04 	ldr.w	r6, [r1], #4
 8008634:	6029      	str	r1, [r5, #0]
 8008636:	061d      	lsls	r5, r3, #24
 8008638:	d514      	bpl.n	8008664 <_printf_i+0x1ac>
 800863a:	07df      	lsls	r7, r3, #31
 800863c:	bf44      	itt	mi
 800863e:	f043 0320 	orrmi.w	r3, r3, #32
 8008642:	6023      	strmi	r3, [r4, #0]
 8008644:	b91e      	cbnz	r6, 800864e <_printf_i+0x196>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	f023 0320 	bic.w	r3, r3, #32
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	2310      	movs	r3, #16
 8008650:	e7b0      	b.n	80085b4 <_printf_i+0xfc>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	f043 0320 	orr.w	r3, r3, #32
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	2378      	movs	r3, #120	; 0x78
 800865c:	4828      	ldr	r0, [pc, #160]	; (8008700 <_printf_i+0x248>)
 800865e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008662:	e7e3      	b.n	800862c <_printf_i+0x174>
 8008664:	0659      	lsls	r1, r3, #25
 8008666:	bf48      	it	mi
 8008668:	b2b6      	uxthmi	r6, r6
 800866a:	e7e6      	b.n	800863a <_printf_i+0x182>
 800866c:	4615      	mov	r5, r2
 800866e:	e7bb      	b.n	80085e8 <_printf_i+0x130>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	6826      	ldr	r6, [r4, #0]
 8008674:	6961      	ldr	r1, [r4, #20]
 8008676:	1d18      	adds	r0, r3, #4
 8008678:	6028      	str	r0, [r5, #0]
 800867a:	0635      	lsls	r5, r6, #24
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	d501      	bpl.n	8008684 <_printf_i+0x1cc>
 8008680:	6019      	str	r1, [r3, #0]
 8008682:	e002      	b.n	800868a <_printf_i+0x1d2>
 8008684:	0670      	lsls	r0, r6, #25
 8008686:	d5fb      	bpl.n	8008680 <_printf_i+0x1c8>
 8008688:	8019      	strh	r1, [r3, #0]
 800868a:	2300      	movs	r3, #0
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	4615      	mov	r5, r2
 8008690:	e7ba      	b.n	8008608 <_printf_i+0x150>
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	1d1a      	adds	r2, r3, #4
 8008696:	602a      	str	r2, [r5, #0]
 8008698:	681d      	ldr	r5, [r3, #0]
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	2100      	movs	r1, #0
 800869e:	4628      	mov	r0, r5
 80086a0:	f7f7 fd9e 	bl	80001e0 <memchr>
 80086a4:	b108      	cbz	r0, 80086aa <_printf_i+0x1f2>
 80086a6:	1b40      	subs	r0, r0, r5
 80086a8:	6060      	str	r0, [r4, #4]
 80086aa:	6863      	ldr	r3, [r4, #4]
 80086ac:	6123      	str	r3, [r4, #16]
 80086ae:	2300      	movs	r3, #0
 80086b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b4:	e7a8      	b.n	8008608 <_printf_i+0x150>
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	462a      	mov	r2, r5
 80086ba:	4649      	mov	r1, r9
 80086bc:	4640      	mov	r0, r8
 80086be:	47d0      	blx	sl
 80086c0:	3001      	adds	r0, #1
 80086c2:	d0ab      	beq.n	800861c <_printf_i+0x164>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	079b      	lsls	r3, r3, #30
 80086c8:	d413      	bmi.n	80086f2 <_printf_i+0x23a>
 80086ca:	68e0      	ldr	r0, [r4, #12]
 80086cc:	9b03      	ldr	r3, [sp, #12]
 80086ce:	4298      	cmp	r0, r3
 80086d0:	bfb8      	it	lt
 80086d2:	4618      	movlt	r0, r3
 80086d4:	e7a4      	b.n	8008620 <_printf_i+0x168>
 80086d6:	2301      	movs	r3, #1
 80086d8:	4632      	mov	r2, r6
 80086da:	4649      	mov	r1, r9
 80086dc:	4640      	mov	r0, r8
 80086de:	47d0      	blx	sl
 80086e0:	3001      	adds	r0, #1
 80086e2:	d09b      	beq.n	800861c <_printf_i+0x164>
 80086e4:	3501      	adds	r5, #1
 80086e6:	68e3      	ldr	r3, [r4, #12]
 80086e8:	9903      	ldr	r1, [sp, #12]
 80086ea:	1a5b      	subs	r3, r3, r1
 80086ec:	42ab      	cmp	r3, r5
 80086ee:	dcf2      	bgt.n	80086d6 <_printf_i+0x21e>
 80086f0:	e7eb      	b.n	80086ca <_printf_i+0x212>
 80086f2:	2500      	movs	r5, #0
 80086f4:	f104 0619 	add.w	r6, r4, #25
 80086f8:	e7f5      	b.n	80086e6 <_printf_i+0x22e>
 80086fa:	bf00      	nop
 80086fc:	08008fbd 	.word	0x08008fbd
 8008700:	08008fce 	.word	0x08008fce

08008704 <memcpy>:
 8008704:	440a      	add	r2, r1
 8008706:	4291      	cmp	r1, r2
 8008708:	f100 33ff 	add.w	r3, r0, #4294967295
 800870c:	d100      	bne.n	8008710 <memcpy+0xc>
 800870e:	4770      	bx	lr
 8008710:	b510      	push	{r4, lr}
 8008712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800871a:	4291      	cmp	r1, r2
 800871c:	d1f9      	bne.n	8008712 <memcpy+0xe>
 800871e:	bd10      	pop	{r4, pc}

08008720 <memmove>:
 8008720:	4288      	cmp	r0, r1
 8008722:	b510      	push	{r4, lr}
 8008724:	eb01 0402 	add.w	r4, r1, r2
 8008728:	d902      	bls.n	8008730 <memmove+0x10>
 800872a:	4284      	cmp	r4, r0
 800872c:	4623      	mov	r3, r4
 800872e:	d807      	bhi.n	8008740 <memmove+0x20>
 8008730:	1e43      	subs	r3, r0, #1
 8008732:	42a1      	cmp	r1, r4
 8008734:	d008      	beq.n	8008748 <memmove+0x28>
 8008736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800873a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800873e:	e7f8      	b.n	8008732 <memmove+0x12>
 8008740:	4402      	add	r2, r0
 8008742:	4601      	mov	r1, r0
 8008744:	428a      	cmp	r2, r1
 8008746:	d100      	bne.n	800874a <memmove+0x2a>
 8008748:	bd10      	pop	{r4, pc}
 800874a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800874e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008752:	e7f7      	b.n	8008744 <memmove+0x24>

08008754 <_free_r>:
 8008754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008756:	2900      	cmp	r1, #0
 8008758:	d044      	beq.n	80087e4 <_free_r+0x90>
 800875a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800875e:	9001      	str	r0, [sp, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f1a1 0404 	sub.w	r4, r1, #4
 8008766:	bfb8      	it	lt
 8008768:	18e4      	addlt	r4, r4, r3
 800876a:	f000 f913 	bl	8008994 <__malloc_lock>
 800876e:	4a1e      	ldr	r2, [pc, #120]	; (80087e8 <_free_r+0x94>)
 8008770:	9801      	ldr	r0, [sp, #4]
 8008772:	6813      	ldr	r3, [r2, #0]
 8008774:	b933      	cbnz	r3, 8008784 <_free_r+0x30>
 8008776:	6063      	str	r3, [r4, #4]
 8008778:	6014      	str	r4, [r2, #0]
 800877a:	b003      	add	sp, #12
 800877c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008780:	f000 b90e 	b.w	80089a0 <__malloc_unlock>
 8008784:	42a3      	cmp	r3, r4
 8008786:	d908      	bls.n	800879a <_free_r+0x46>
 8008788:	6825      	ldr	r5, [r4, #0]
 800878a:	1961      	adds	r1, r4, r5
 800878c:	428b      	cmp	r3, r1
 800878e:	bf01      	itttt	eq
 8008790:	6819      	ldreq	r1, [r3, #0]
 8008792:	685b      	ldreq	r3, [r3, #4]
 8008794:	1949      	addeq	r1, r1, r5
 8008796:	6021      	streq	r1, [r4, #0]
 8008798:	e7ed      	b.n	8008776 <_free_r+0x22>
 800879a:	461a      	mov	r2, r3
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	b10b      	cbz	r3, 80087a4 <_free_r+0x50>
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	d9fa      	bls.n	800879a <_free_r+0x46>
 80087a4:	6811      	ldr	r1, [r2, #0]
 80087a6:	1855      	adds	r5, r2, r1
 80087a8:	42a5      	cmp	r5, r4
 80087aa:	d10b      	bne.n	80087c4 <_free_r+0x70>
 80087ac:	6824      	ldr	r4, [r4, #0]
 80087ae:	4421      	add	r1, r4
 80087b0:	1854      	adds	r4, r2, r1
 80087b2:	42a3      	cmp	r3, r4
 80087b4:	6011      	str	r1, [r2, #0]
 80087b6:	d1e0      	bne.n	800877a <_free_r+0x26>
 80087b8:	681c      	ldr	r4, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	6053      	str	r3, [r2, #4]
 80087be:	4421      	add	r1, r4
 80087c0:	6011      	str	r1, [r2, #0]
 80087c2:	e7da      	b.n	800877a <_free_r+0x26>
 80087c4:	d902      	bls.n	80087cc <_free_r+0x78>
 80087c6:	230c      	movs	r3, #12
 80087c8:	6003      	str	r3, [r0, #0]
 80087ca:	e7d6      	b.n	800877a <_free_r+0x26>
 80087cc:	6825      	ldr	r5, [r4, #0]
 80087ce:	1961      	adds	r1, r4, r5
 80087d0:	428b      	cmp	r3, r1
 80087d2:	bf04      	itt	eq
 80087d4:	6819      	ldreq	r1, [r3, #0]
 80087d6:	685b      	ldreq	r3, [r3, #4]
 80087d8:	6063      	str	r3, [r4, #4]
 80087da:	bf04      	itt	eq
 80087dc:	1949      	addeq	r1, r1, r5
 80087de:	6021      	streq	r1, [r4, #0]
 80087e0:	6054      	str	r4, [r2, #4]
 80087e2:	e7ca      	b.n	800877a <_free_r+0x26>
 80087e4:	b003      	add	sp, #12
 80087e6:	bd30      	pop	{r4, r5, pc}
 80087e8:	200008a0 	.word	0x200008a0

080087ec <sbrk_aligned>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	4e0e      	ldr	r6, [pc, #56]	; (8008828 <sbrk_aligned+0x3c>)
 80087f0:	460c      	mov	r4, r1
 80087f2:	6831      	ldr	r1, [r6, #0]
 80087f4:	4605      	mov	r5, r0
 80087f6:	b911      	cbnz	r1, 80087fe <sbrk_aligned+0x12>
 80087f8:	f000 f8bc 	bl	8008974 <_sbrk_r>
 80087fc:	6030      	str	r0, [r6, #0]
 80087fe:	4621      	mov	r1, r4
 8008800:	4628      	mov	r0, r5
 8008802:	f000 f8b7 	bl	8008974 <_sbrk_r>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d00a      	beq.n	8008820 <sbrk_aligned+0x34>
 800880a:	1cc4      	adds	r4, r0, #3
 800880c:	f024 0403 	bic.w	r4, r4, #3
 8008810:	42a0      	cmp	r0, r4
 8008812:	d007      	beq.n	8008824 <sbrk_aligned+0x38>
 8008814:	1a21      	subs	r1, r4, r0
 8008816:	4628      	mov	r0, r5
 8008818:	f000 f8ac 	bl	8008974 <_sbrk_r>
 800881c:	3001      	adds	r0, #1
 800881e:	d101      	bne.n	8008824 <sbrk_aligned+0x38>
 8008820:	f04f 34ff 	mov.w	r4, #4294967295
 8008824:	4620      	mov	r0, r4
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	200008a4 	.word	0x200008a4

0800882c <_malloc_r>:
 800882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	1ccd      	adds	r5, r1, #3
 8008832:	f025 0503 	bic.w	r5, r5, #3
 8008836:	3508      	adds	r5, #8
 8008838:	2d0c      	cmp	r5, #12
 800883a:	bf38      	it	cc
 800883c:	250c      	movcc	r5, #12
 800883e:	2d00      	cmp	r5, #0
 8008840:	4607      	mov	r7, r0
 8008842:	db01      	blt.n	8008848 <_malloc_r+0x1c>
 8008844:	42a9      	cmp	r1, r5
 8008846:	d905      	bls.n	8008854 <_malloc_r+0x28>
 8008848:	230c      	movs	r3, #12
 800884a:	603b      	str	r3, [r7, #0]
 800884c:	2600      	movs	r6, #0
 800884e:	4630      	mov	r0, r6
 8008850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008854:	4e2e      	ldr	r6, [pc, #184]	; (8008910 <_malloc_r+0xe4>)
 8008856:	f000 f89d 	bl	8008994 <__malloc_lock>
 800885a:	6833      	ldr	r3, [r6, #0]
 800885c:	461c      	mov	r4, r3
 800885e:	bb34      	cbnz	r4, 80088ae <_malloc_r+0x82>
 8008860:	4629      	mov	r1, r5
 8008862:	4638      	mov	r0, r7
 8008864:	f7ff ffc2 	bl	80087ec <sbrk_aligned>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	4604      	mov	r4, r0
 800886c:	d14d      	bne.n	800890a <_malloc_r+0xde>
 800886e:	6834      	ldr	r4, [r6, #0]
 8008870:	4626      	mov	r6, r4
 8008872:	2e00      	cmp	r6, #0
 8008874:	d140      	bne.n	80088f8 <_malloc_r+0xcc>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	4631      	mov	r1, r6
 800887a:	4638      	mov	r0, r7
 800887c:	eb04 0803 	add.w	r8, r4, r3
 8008880:	f000 f878 	bl	8008974 <_sbrk_r>
 8008884:	4580      	cmp	r8, r0
 8008886:	d13a      	bne.n	80088fe <_malloc_r+0xd2>
 8008888:	6821      	ldr	r1, [r4, #0]
 800888a:	3503      	adds	r5, #3
 800888c:	1a6d      	subs	r5, r5, r1
 800888e:	f025 0503 	bic.w	r5, r5, #3
 8008892:	3508      	adds	r5, #8
 8008894:	2d0c      	cmp	r5, #12
 8008896:	bf38      	it	cc
 8008898:	250c      	movcc	r5, #12
 800889a:	4629      	mov	r1, r5
 800889c:	4638      	mov	r0, r7
 800889e:	f7ff ffa5 	bl	80087ec <sbrk_aligned>
 80088a2:	3001      	adds	r0, #1
 80088a4:	d02b      	beq.n	80088fe <_malloc_r+0xd2>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	442b      	add	r3, r5
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	e00e      	b.n	80088cc <_malloc_r+0xa0>
 80088ae:	6822      	ldr	r2, [r4, #0]
 80088b0:	1b52      	subs	r2, r2, r5
 80088b2:	d41e      	bmi.n	80088f2 <_malloc_r+0xc6>
 80088b4:	2a0b      	cmp	r2, #11
 80088b6:	d916      	bls.n	80088e6 <_malloc_r+0xba>
 80088b8:	1961      	adds	r1, r4, r5
 80088ba:	42a3      	cmp	r3, r4
 80088bc:	6025      	str	r5, [r4, #0]
 80088be:	bf18      	it	ne
 80088c0:	6059      	strne	r1, [r3, #4]
 80088c2:	6863      	ldr	r3, [r4, #4]
 80088c4:	bf08      	it	eq
 80088c6:	6031      	streq	r1, [r6, #0]
 80088c8:	5162      	str	r2, [r4, r5]
 80088ca:	604b      	str	r3, [r1, #4]
 80088cc:	4638      	mov	r0, r7
 80088ce:	f104 060b 	add.w	r6, r4, #11
 80088d2:	f000 f865 	bl	80089a0 <__malloc_unlock>
 80088d6:	f026 0607 	bic.w	r6, r6, #7
 80088da:	1d23      	adds	r3, r4, #4
 80088dc:	1af2      	subs	r2, r6, r3
 80088de:	d0b6      	beq.n	800884e <_malloc_r+0x22>
 80088e0:	1b9b      	subs	r3, r3, r6
 80088e2:	50a3      	str	r3, [r4, r2]
 80088e4:	e7b3      	b.n	800884e <_malloc_r+0x22>
 80088e6:	6862      	ldr	r2, [r4, #4]
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	bf0c      	ite	eq
 80088ec:	6032      	streq	r2, [r6, #0]
 80088ee:	605a      	strne	r2, [r3, #4]
 80088f0:	e7ec      	b.n	80088cc <_malloc_r+0xa0>
 80088f2:	4623      	mov	r3, r4
 80088f4:	6864      	ldr	r4, [r4, #4]
 80088f6:	e7b2      	b.n	800885e <_malloc_r+0x32>
 80088f8:	4634      	mov	r4, r6
 80088fa:	6876      	ldr	r6, [r6, #4]
 80088fc:	e7b9      	b.n	8008872 <_malloc_r+0x46>
 80088fe:	230c      	movs	r3, #12
 8008900:	603b      	str	r3, [r7, #0]
 8008902:	4638      	mov	r0, r7
 8008904:	f000 f84c 	bl	80089a0 <__malloc_unlock>
 8008908:	e7a1      	b.n	800884e <_malloc_r+0x22>
 800890a:	6025      	str	r5, [r4, #0]
 800890c:	e7de      	b.n	80088cc <_malloc_r+0xa0>
 800890e:	bf00      	nop
 8008910:	200008a0 	.word	0x200008a0

08008914 <_realloc_r>:
 8008914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008918:	4680      	mov	r8, r0
 800891a:	4614      	mov	r4, r2
 800891c:	460e      	mov	r6, r1
 800891e:	b921      	cbnz	r1, 800892a <_realloc_r+0x16>
 8008920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008924:	4611      	mov	r1, r2
 8008926:	f7ff bf81 	b.w	800882c <_malloc_r>
 800892a:	b92a      	cbnz	r2, 8008938 <_realloc_r+0x24>
 800892c:	f7ff ff12 	bl	8008754 <_free_r>
 8008930:	4625      	mov	r5, r4
 8008932:	4628      	mov	r0, r5
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	f000 f838 	bl	80089ac <_malloc_usable_size_r>
 800893c:	4284      	cmp	r4, r0
 800893e:	4607      	mov	r7, r0
 8008940:	d802      	bhi.n	8008948 <_realloc_r+0x34>
 8008942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008946:	d812      	bhi.n	800896e <_realloc_r+0x5a>
 8008948:	4621      	mov	r1, r4
 800894a:	4640      	mov	r0, r8
 800894c:	f7ff ff6e 	bl	800882c <_malloc_r>
 8008950:	4605      	mov	r5, r0
 8008952:	2800      	cmp	r0, #0
 8008954:	d0ed      	beq.n	8008932 <_realloc_r+0x1e>
 8008956:	42bc      	cmp	r4, r7
 8008958:	4622      	mov	r2, r4
 800895a:	4631      	mov	r1, r6
 800895c:	bf28      	it	cs
 800895e:	463a      	movcs	r2, r7
 8008960:	f7ff fed0 	bl	8008704 <memcpy>
 8008964:	4631      	mov	r1, r6
 8008966:	4640      	mov	r0, r8
 8008968:	f7ff fef4 	bl	8008754 <_free_r>
 800896c:	e7e1      	b.n	8008932 <_realloc_r+0x1e>
 800896e:	4635      	mov	r5, r6
 8008970:	e7df      	b.n	8008932 <_realloc_r+0x1e>
	...

08008974 <_sbrk_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d06      	ldr	r5, [pc, #24]	; (8008990 <_sbrk_r+0x1c>)
 8008978:	2300      	movs	r3, #0
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	602b      	str	r3, [r5, #0]
 8008980:	f7f9 faae 	bl	8001ee0 <_sbrk>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	d102      	bne.n	800898e <_sbrk_r+0x1a>
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	b103      	cbz	r3, 800898e <_sbrk_r+0x1a>
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	200008a8 	.word	0x200008a8

08008994 <__malloc_lock>:
 8008994:	4801      	ldr	r0, [pc, #4]	; (800899c <__malloc_lock+0x8>)
 8008996:	f000 b811 	b.w	80089bc <__retarget_lock_acquire_recursive>
 800899a:	bf00      	nop
 800899c:	200008ac 	.word	0x200008ac

080089a0 <__malloc_unlock>:
 80089a0:	4801      	ldr	r0, [pc, #4]	; (80089a8 <__malloc_unlock+0x8>)
 80089a2:	f000 b80c 	b.w	80089be <__retarget_lock_release_recursive>
 80089a6:	bf00      	nop
 80089a8:	200008ac 	.word	0x200008ac

080089ac <_malloc_usable_size_r>:
 80089ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b0:	1f18      	subs	r0, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfbc      	itt	lt
 80089b6:	580b      	ldrlt	r3, [r1, r0]
 80089b8:	18c0      	addlt	r0, r0, r3
 80089ba:	4770      	bx	lr

080089bc <__retarget_lock_acquire_recursive>:
 80089bc:	4770      	bx	lr

080089be <__retarget_lock_release_recursive>:
 80089be:	4770      	bx	lr

080089c0 <_init>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr

080089cc <_fini>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr
