
Embedded-C-Assignment-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006884  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006a14  08006a14  00016a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a9c  08006a9c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aa4  08006aa4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aa4  08006aa4  00016aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000080  08006b2c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  08006b2c  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5ce  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b6  00000000  00000000  0003a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0003d930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  0003f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bcf  00000000  00000000  000405e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4a1  00000000  00000000  000691b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5518  00000000  00000000  00083658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178b70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006688  00000000  00000000  00178bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069fc 	.word	0x080069fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080069fc 	.word	0x080069fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_frsub>:
 8000280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__addsf3>
 8000286:	bf00      	nop

08000288 <__aeabi_fsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800028c <__addsf3>:
 800028c:	0042      	lsls	r2, r0, #1
 800028e:	bf1f      	itttt	ne
 8000290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000294:	ea92 0f03 	teqne	r2, r3
 8000298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800029c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002a0:	d06a      	beq.n	8000378 <__addsf3+0xec>
 80002a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002aa:	bfc1      	itttt	gt
 80002ac:	18d2      	addgt	r2, r2, r3
 80002ae:	4041      	eorgt	r1, r0
 80002b0:	4048      	eorgt	r0, r1
 80002b2:	4041      	eorgt	r1, r0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	2b19      	cmp	r3, #25
 80002ba:	bf88      	it	hi
 80002bc:	4770      	bxhi	lr
 80002be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002ca:	bf18      	it	ne
 80002cc:	4240      	negne	r0, r0
 80002ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4249      	negne	r1, r1
 80002de:	ea92 0f03 	teq	r2, r3
 80002e2:	d03f      	beq.n	8000364 <__addsf3+0xd8>
 80002e4:	f1a2 0201 	sub.w	r2, r2, #1
 80002e8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ec:	eb10 000c 	adds.w	r0, r0, ip
 80002f0:	f1c3 0320 	rsb	r3, r3, #32
 80002f4:	fa01 f103 	lsl.w	r1, r1, r3
 80002f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__addsf3+0x78>
 80002fe:	4249      	negs	r1, r1
 8000300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000308:	d313      	bcc.n	8000332 <__addsf3+0xa6>
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d306      	bcc.n	800031e <__addsf3+0x92>
 8000310:	0840      	lsrs	r0, r0, #1
 8000312:	ea4f 0131 	mov.w	r1, r1, rrx
 8000316:	f102 0201 	add.w	r2, r2, #1
 800031a:	2afe      	cmp	r2, #254	; 0xfe
 800031c:	d251      	bcs.n	80003c2 <__addsf3+0x136>
 800031e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000326:	bf08      	it	eq
 8000328:	f020 0001 	biceq.w	r0, r0, #1
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	4770      	bx	lr
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	eb40 0000 	adc.w	r0, r0, r0
 8000338:	3a01      	subs	r2, #1
 800033a:	bf28      	it	cs
 800033c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000340:	d2ed      	bcs.n	800031e <__addsf3+0x92>
 8000342:	fab0 fc80 	clz	ip, r0
 8000346:	f1ac 0c08 	sub.w	ip, ip, #8
 800034a:	ebb2 020c 	subs.w	r2, r2, ip
 800034e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000352:	bfaa      	itet	ge
 8000354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000358:	4252      	neglt	r2, r2
 800035a:	4318      	orrge	r0, r3
 800035c:	bfbc      	itt	lt
 800035e:	40d0      	lsrlt	r0, r2
 8000360:	4318      	orrlt	r0, r3
 8000362:	4770      	bx	lr
 8000364:	f092 0f00 	teq	r2, #0
 8000368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800036c:	bf06      	itte	eq
 800036e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000372:	3201      	addeq	r2, #1
 8000374:	3b01      	subne	r3, #1
 8000376:	e7b5      	b.n	80002e4 <__addsf3+0x58>
 8000378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800037c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000380:	bf18      	it	ne
 8000382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000386:	d021      	beq.n	80003cc <__addsf3+0x140>
 8000388:	ea92 0f03 	teq	r2, r3
 800038c:	d004      	beq.n	8000398 <__addsf3+0x10c>
 800038e:	f092 0f00 	teq	r2, #0
 8000392:	bf08      	it	eq
 8000394:	4608      	moveq	r0, r1
 8000396:	4770      	bx	lr
 8000398:	ea90 0f01 	teq	r0, r1
 800039c:	bf1c      	itt	ne
 800039e:	2000      	movne	r0, #0
 80003a0:	4770      	bxne	lr
 80003a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003a6:	d104      	bne.n	80003b2 <__addsf3+0x126>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	bf28      	it	cs
 80003ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003b6:	bf3c      	itt	cc
 80003b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bxcc	lr
 80003be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ca:	4770      	bx	lr
 80003cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003d0:	bf16      	itet	ne
 80003d2:	4608      	movne	r0, r1
 80003d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003d8:	4601      	movne	r1, r0
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	bf06      	itte	eq
 80003de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003e2:	ea90 0f01 	teqeq	r0, r1
 80003e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003ea:	4770      	bx	lr

080003ec <__aeabi_ui2f>:
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e004      	b.n	80003fc <__aeabi_i2f+0x8>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2f>:
 80003f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003f8:	bf48      	it	mi
 80003fa:	4240      	negmi	r0, r0
 80003fc:	ea5f 0c00 	movs.w	ip, r0
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000408:	4601      	mov	r1, r0
 800040a:	f04f 0000 	mov.w	r0, #0
 800040e:	e01c      	b.n	800044a <__aeabi_l2f+0x2a>

08000410 <__aeabi_ul2f>:
 8000410:	ea50 0201 	orrs.w	r2, r0, r1
 8000414:	bf08      	it	eq
 8000416:	4770      	bxeq	lr
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	e00a      	b.n	8000434 <__aeabi_l2f+0x14>
 800041e:	bf00      	nop

08000420 <__aeabi_l2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__aeabi_l2f+0x14>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	ea5f 0c01 	movs.w	ip, r1
 8000438:	bf02      	ittt	eq
 800043a:	4684      	moveq	ip, r0
 800043c:	4601      	moveq	r1, r0
 800043e:	2000      	moveq	r0, #0
 8000440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000444:	bf08      	it	eq
 8000446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800044a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800044e:	fabc f28c 	clz	r2, ip
 8000452:	3a08      	subs	r2, #8
 8000454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000458:	db10      	blt.n	800047c <__aeabi_l2f+0x5c>
 800045a:	fa01 fc02 	lsl.w	ip, r1, r2
 800045e:	4463      	add	r3, ip
 8000460:	fa00 fc02 	lsl.w	ip, r0, r2
 8000464:	f1c2 0220 	rsb	r2, r2, #32
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	eb43 0002 	adc.w	r0, r3, r2
 8000474:	bf08      	it	eq
 8000476:	f020 0001 	biceq.w	r0, r0, #1
 800047a:	4770      	bx	lr
 800047c:	f102 0220 	add.w	r2, r2, #32
 8000480:	fa01 fc02 	lsl.w	ip, r1, r2
 8000484:	f1c2 0220 	rsb	r2, r2, #32
 8000488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800048c:	fa21 f202 	lsr.w	r2, r1, r2
 8000490:	eb43 0002 	adc.w	r0, r3, r2
 8000494:	bf08      	it	eq
 8000496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800049a:	4770      	bx	lr

0800049c <__aeabi_fmul>:
 800049c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004a4:	bf1e      	ittt	ne
 80004a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004aa:	ea92 0f0c 	teqne	r2, ip
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d06f      	beq.n	8000594 <__aeabi_fmul+0xf8>
 80004b4:	441a      	add	r2, r3
 80004b6:	ea80 0c01 	eor.w	ip, r0, r1
 80004ba:	0240      	lsls	r0, r0, #9
 80004bc:	bf18      	it	ne
 80004be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004c2:	d01e      	beq.n	8000502 <__aeabi_fmul+0x66>
 80004c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004d0:	fba0 3101 	umull	r3, r1, r0, r1
 80004d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004dc:	bf3e      	ittt	cc
 80004de:	0049      	lslcc	r1, r1, #1
 80004e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004e4:	005b      	lslcc	r3, r3, #1
 80004e6:	ea40 0001 	orr.w	r0, r0, r1
 80004ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ee:	2afd      	cmp	r2, #253	; 0xfd
 80004f0:	d81d      	bhi.n	800052e <__aeabi_fmul+0x92>
 80004f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004fa:	bf08      	it	eq
 80004fc:	f020 0001 	biceq.w	r0, r0, #1
 8000500:	4770      	bx	lr
 8000502:	f090 0f00 	teq	r0, #0
 8000506:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800050a:	bf08      	it	eq
 800050c:	0249      	lsleq	r1, r1, #9
 800050e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000512:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000516:	3a7f      	subs	r2, #127	; 0x7f
 8000518:	bfc2      	ittt	gt
 800051a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800051e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000522:	4770      	bxgt	lr
 8000524:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	3a01      	subs	r2, #1
 800052e:	dc5d      	bgt.n	80005ec <__aeabi_fmul+0x150>
 8000530:	f112 0f19 	cmn.w	r2, #25
 8000534:	bfdc      	itt	le
 8000536:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800053a:	4770      	bxle	lr
 800053c:	f1c2 0200 	rsb	r2, r2, #0
 8000540:	0041      	lsls	r1, r0, #1
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	f1c2 0220 	rsb	r2, r2, #32
 800054a:	fa00 fc02 	lsl.w	ip, r0, r2
 800054e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000552:	f140 0000 	adc.w	r0, r0, #0
 8000556:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800055a:	bf08      	it	eq
 800055c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000560:	4770      	bx	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800056a:	bf02      	ittt	eq
 800056c:	0040      	lsleq	r0, r0, #1
 800056e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000572:	3a01      	subeq	r2, #1
 8000574:	d0f9      	beq.n	800056a <__aeabi_fmul+0xce>
 8000576:	ea40 000c 	orr.w	r0, r0, ip
 800057a:	f093 0f00 	teq	r3, #0
 800057e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000582:	bf02      	ittt	eq
 8000584:	0049      	lsleq	r1, r1, #1
 8000586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800058a:	3b01      	subeq	r3, #1
 800058c:	d0f9      	beq.n	8000582 <__aeabi_fmul+0xe6>
 800058e:	ea41 010c 	orr.w	r1, r1, ip
 8000592:	e78f      	b.n	80004b4 <__aeabi_fmul+0x18>
 8000594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000598:	ea92 0f0c 	teq	r2, ip
 800059c:	bf18      	it	ne
 800059e:	ea93 0f0c 	teqne	r3, ip
 80005a2:	d00a      	beq.n	80005ba <__aeabi_fmul+0x11e>
 80005a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005a8:	bf18      	it	ne
 80005aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	d1d8      	bne.n	8000562 <__aeabi_fmul+0xc6>
 80005b0:	ea80 0001 	eor.w	r0, r0, r1
 80005b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005b8:	4770      	bx	lr
 80005ba:	f090 0f00 	teq	r0, #0
 80005be:	bf17      	itett	ne
 80005c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005c4:	4608      	moveq	r0, r1
 80005c6:	f091 0f00 	teqne	r1, #0
 80005ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005ce:	d014      	beq.n	80005fa <__aeabi_fmul+0x15e>
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d101      	bne.n	80005da <__aeabi_fmul+0x13e>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d10f      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005da:	ea93 0f0c 	teq	r3, ip
 80005de:	d103      	bne.n	80005e8 <__aeabi_fmul+0x14c>
 80005e0:	024b      	lsls	r3, r1, #9
 80005e2:	bf18      	it	ne
 80005e4:	4608      	movne	r0, r1
 80005e6:	d108      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005e8:	ea80 0001 	eor.w	r0, r0, r1
 80005ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f8:	4770      	bx	lr
 80005fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000602:	4770      	bx	lr

08000604 <__aeabi_fdiv>:
 8000604:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000608:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800060c:	bf1e      	ittt	ne
 800060e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000612:	ea92 0f0c 	teqne	r2, ip
 8000616:	ea93 0f0c 	teqne	r3, ip
 800061a:	d069      	beq.n	80006f0 <__aeabi_fdiv+0xec>
 800061c:	eba2 0203 	sub.w	r2, r2, r3
 8000620:	ea80 0c01 	eor.w	ip, r0, r1
 8000624:	0249      	lsls	r1, r1, #9
 8000626:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800062a:	d037      	beq.n	800069c <__aeabi_fdiv+0x98>
 800062c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000630:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000634:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800063c:	428b      	cmp	r3, r1
 800063e:	bf38      	it	cc
 8000640:	005b      	lslcc	r3, r3, #1
 8000642:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000646:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800064a:	428b      	cmp	r3, r1
 800064c:	bf24      	itt	cs
 800064e:	1a5b      	subcs	r3, r3, r1
 8000650:	ea40 000c 	orrcs.w	r0, r0, ip
 8000654:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000658:	bf24      	itt	cs
 800065a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800065e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000662:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000666:	bf24      	itt	cs
 8000668:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800066c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000670:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000674:	bf24      	itt	cs
 8000676:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800067a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	bf18      	it	ne
 8000682:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000686:	d1e0      	bne.n	800064a <__aeabi_fdiv+0x46>
 8000688:	2afd      	cmp	r2, #253	; 0xfd
 800068a:	f63f af50 	bhi.w	800052e <__aeabi_fmul+0x92>
 800068e:	428b      	cmp	r3, r1
 8000690:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000694:	bf08      	it	eq
 8000696:	f020 0001 	biceq.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006a4:	327f      	adds	r2, #127	; 0x7f
 80006a6:	bfc2      	ittt	gt
 80006a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006b0:	4770      	bxgt	lr
 80006b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	3a01      	subs	r2, #1
 80006bc:	e737      	b.n	800052e <__aeabi_fmul+0x92>
 80006be:	f092 0f00 	teq	r2, #0
 80006c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006c6:	bf02      	ittt	eq
 80006c8:	0040      	lsleq	r0, r0, #1
 80006ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ce:	3a01      	subeq	r2, #1
 80006d0:	d0f9      	beq.n	80006c6 <__aeabi_fdiv+0xc2>
 80006d2:	ea40 000c 	orr.w	r0, r0, ip
 80006d6:	f093 0f00 	teq	r3, #0
 80006da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006de:	bf02      	ittt	eq
 80006e0:	0049      	lsleq	r1, r1, #1
 80006e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006e6:	3b01      	subeq	r3, #1
 80006e8:	d0f9      	beq.n	80006de <__aeabi_fdiv+0xda>
 80006ea:	ea41 010c 	orr.w	r1, r1, ip
 80006ee:	e795      	b.n	800061c <__aeabi_fdiv+0x18>
 80006f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006f4:	ea92 0f0c 	teq	r2, ip
 80006f8:	d108      	bne.n	800070c <__aeabi_fdiv+0x108>
 80006fa:	0242      	lsls	r2, r0, #9
 80006fc:	f47f af7d 	bne.w	80005fa <__aeabi_fmul+0x15e>
 8000700:	ea93 0f0c 	teq	r3, ip
 8000704:	f47f af70 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000708:	4608      	mov	r0, r1
 800070a:	e776      	b.n	80005fa <__aeabi_fmul+0x15e>
 800070c:	ea93 0f0c 	teq	r3, ip
 8000710:	d104      	bne.n	800071c <__aeabi_fdiv+0x118>
 8000712:	024b      	lsls	r3, r1, #9
 8000714:	f43f af4c 	beq.w	80005b0 <__aeabi_fmul+0x114>
 8000718:	4608      	mov	r0, r1
 800071a:	e76e      	b.n	80005fa <__aeabi_fmul+0x15e>
 800071c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000720:	bf18      	it	ne
 8000722:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000726:	d1ca      	bne.n	80006be <__aeabi_fdiv+0xba>
 8000728:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800072c:	f47f af5c 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000730:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000734:	f47f af3c 	bne.w	80005b0 <__aeabi_fmul+0x114>
 8000738:	e75f      	b.n	80005fa <__aeabi_fmul+0x15e>
 800073a:	bf00      	nop

0800073c <__aeabi_f2iz>:
 800073c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000744:	d30f      	bcc.n	8000766 <__aeabi_f2iz+0x2a>
 8000746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074e:	d90d      	bls.n	800076c <__aeabi_f2iz+0x30>
 8000750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000758:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	bf18      	it	ne
 8000762:	4240      	negne	r0, r0
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr
 800076c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000770:	d101      	bne.n	8000776 <__aeabi_f2iz+0x3a>
 8000772:	0242      	lsls	r2, r0, #9
 8000774:	d105      	bne.n	8000782 <__aeabi_f2iz+0x46>
 8000776:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800077a:	bf08      	it	eq
 800077c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000780:	4770      	bx	lr
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	4770      	bx	lr

08000788 <__aeabi_uldivmod>:
 8000788:	b953      	cbnz	r3, 80007a0 <__aeabi_uldivmod+0x18>
 800078a:	b94a      	cbnz	r2, 80007a0 <__aeabi_uldivmod+0x18>
 800078c:	2900      	cmp	r1, #0
 800078e:	bf08      	it	eq
 8000790:	2800      	cmpeq	r0, #0
 8000792:	bf1c      	itt	ne
 8000794:	f04f 31ff 	movne.w	r1, #4294967295
 8000798:	f04f 30ff 	movne.w	r0, #4294967295
 800079c:	f000 b974 	b.w	8000a88 <__aeabi_idiv0>
 80007a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007a8:	f000 f806 	bl	80007b8 <__udivmoddi4>
 80007ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b4:	b004      	add	sp, #16
 80007b6:	4770      	bx	lr

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9e08      	ldr	r6, [sp, #32]
 80007be:	460d      	mov	r5, r1
 80007c0:	4604      	mov	r4, r0
 80007c2:	4688      	mov	r8, r1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d14d      	bne.n	8000864 <__udivmoddi4+0xac>
 80007c8:	428a      	cmp	r2, r1
 80007ca:	4694      	mov	ip, r2
 80007cc:	d968      	bls.n	80008a0 <__udivmoddi4+0xe8>
 80007ce:	fab2 f282 	clz	r2, r2
 80007d2:	b152      	cbz	r2, 80007ea <__udivmoddi4+0x32>
 80007d4:	fa01 f302 	lsl.w	r3, r1, r2
 80007d8:	f1c2 0120 	rsb	r1, r2, #32
 80007dc:	fa20 f101 	lsr.w	r1, r0, r1
 80007e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e4:	ea41 0803 	orr.w	r8, r1, r3
 80007e8:	4094      	lsls	r4, r2
 80007ea:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80007ee:	0c21      	lsrs	r1, r4, #16
 80007f0:	fbb8 fef5 	udiv	lr, r8, r5
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	fb05 831e 	mls	r3, r5, lr, r8
 80007fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000800:	fb0e f107 	mul.w	r1, lr, r7
 8000804:	4299      	cmp	r1, r3
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x68>
 8000808:	eb1c 0303 	adds.w	r3, ip, r3
 800080c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000810:	f080 811e 	bcs.w	8000a50 <__udivmoddi4+0x298>
 8000814:	4299      	cmp	r1, r3
 8000816:	f240 811b 	bls.w	8000a50 <__udivmoddi4+0x298>
 800081a:	f1ae 0e02 	sub.w	lr, lr, #2
 800081e:	4463      	add	r3, ip
 8000820:	1a5b      	subs	r3, r3, r1
 8000822:	b2a4      	uxth	r4, r4
 8000824:	fbb3 f0f5 	udiv	r0, r3, r5
 8000828:	fb05 3310 	mls	r3, r5, r0, r3
 800082c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000830:	fb00 f707 	mul.w	r7, r0, r7
 8000834:	42a7      	cmp	r7, r4
 8000836:	d90a      	bls.n	800084e <__udivmoddi4+0x96>
 8000838:	eb1c 0404 	adds.w	r4, ip, r4
 800083c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000840:	f080 8108 	bcs.w	8000a54 <__udivmoddi4+0x29c>
 8000844:	42a7      	cmp	r7, r4
 8000846:	f240 8105 	bls.w	8000a54 <__udivmoddi4+0x29c>
 800084a:	4464      	add	r4, ip
 800084c:	3802      	subs	r0, #2
 800084e:	1be4      	subs	r4, r4, r7
 8000850:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000854:	2100      	movs	r1, #0
 8000856:	b11e      	cbz	r6, 8000860 <__udivmoddi4+0xa8>
 8000858:	40d4      	lsrs	r4, r2
 800085a:	2300      	movs	r3, #0
 800085c:	e9c6 4300 	strd	r4, r3, [r6]
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	428b      	cmp	r3, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0xc2>
 8000868:	2e00      	cmp	r6, #0
 800086a:	f000 80ee 	beq.w	8000a4a <__udivmoddi4+0x292>
 800086e:	2100      	movs	r1, #0
 8000870:	e9c6 0500 	strd	r0, r5, [r6]
 8000874:	4608      	mov	r0, r1
 8000876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087a:	fab3 f183 	clz	r1, r3
 800087e:	2900      	cmp	r1, #0
 8000880:	d14a      	bne.n	8000918 <__udivmoddi4+0x160>
 8000882:	42ab      	cmp	r3, r5
 8000884:	d302      	bcc.n	800088c <__udivmoddi4+0xd4>
 8000886:	4282      	cmp	r2, r0
 8000888:	f200 80f9 	bhi.w	8000a7e <__udivmoddi4+0x2c6>
 800088c:	1a84      	subs	r4, r0, r2
 800088e:	eb65 0303 	sbc.w	r3, r5, r3
 8000892:	2001      	movs	r0, #1
 8000894:	4698      	mov	r8, r3
 8000896:	2e00      	cmp	r6, #0
 8000898:	d0e2      	beq.n	8000860 <__udivmoddi4+0xa8>
 800089a:	e9c6 4800 	strd	r4, r8, [r6]
 800089e:	e7df      	b.n	8000860 <__udivmoddi4+0xa8>
 80008a0:	b902      	cbnz	r2, 80008a4 <__udivmoddi4+0xec>
 80008a2:	deff      	udf	#255	; 0xff
 80008a4:	fab2 f282 	clz	r2, r2
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	f040 8091 	bne.w	80009d0 <__udivmoddi4+0x218>
 80008ae:	eba1 050c 	sub.w	r5, r1, ip
 80008b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b6:	fa1f fe8c 	uxth.w	lr, ip
 80008ba:	2101      	movs	r1, #1
 80008bc:	fbb5 f3f7 	udiv	r3, r5, r7
 80008c0:	fb07 5013 	mls	r0, r7, r3, r5
 80008c4:	0c25      	lsrs	r5, r4, #16
 80008c6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008ca:	fb0e f003 	mul.w	r0, lr, r3
 80008ce:	42a8      	cmp	r0, r5
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x12c>
 80008d2:	eb1c 0505 	adds.w	r5, ip, r5
 80008d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x12a>
 80008dc:	42a8      	cmp	r0, r5
 80008de:	f200 80cb 	bhi.w	8000a78 <__udivmoddi4+0x2c0>
 80008e2:	4643      	mov	r3, r8
 80008e4:	1a2d      	subs	r5, r5, r0
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb5 f0f7 	udiv	r0, r5, r7
 80008ec:	fb07 5510 	mls	r5, r7, r0, r5
 80008f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008f4:	fb0e fe00 	mul.w	lr, lr, r0
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x156>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f100 35ff 	add.w	r5, r0, #4294967295
 8000904:	d202      	bcs.n	800090c <__udivmoddi4+0x154>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f200 80bb 	bhi.w	8000a82 <__udivmoddi4+0x2ca>
 800090c:	4628      	mov	r0, r5
 800090e:	eba4 040e 	sub.w	r4, r4, lr
 8000912:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000916:	e79e      	b.n	8000856 <__udivmoddi4+0x9e>
 8000918:	f1c1 0720 	rsb	r7, r1, #32
 800091c:	408b      	lsls	r3, r1
 800091e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000922:	ea4c 0c03 	orr.w	ip, ip, r3
 8000926:	fa20 f407 	lsr.w	r4, r0, r7
 800092a:	fa05 f301 	lsl.w	r3, r5, r1
 800092e:	431c      	orrs	r4, r3
 8000930:	40fd      	lsrs	r5, r7
 8000932:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000936:	fa00 f301 	lsl.w	r3, r0, r1
 800093a:	fbb5 f8f9 	udiv	r8, r5, r9
 800093e:	0c20      	lsrs	r0, r4, #16
 8000940:	fa1f fe8c 	uxth.w	lr, ip
 8000944:	fb09 5518 	mls	r5, r9, r8, r5
 8000948:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800094c:	fb08 f00e 	mul.w	r0, r8, lr
 8000950:	42a8      	cmp	r0, r5
 8000952:	fa02 f201 	lsl.w	r2, r2, r1
 8000956:	d90b      	bls.n	8000970 <__udivmoddi4+0x1b8>
 8000958:	eb1c 0505 	adds.w	r5, ip, r5
 800095c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000960:	f080 8088 	bcs.w	8000a74 <__udivmoddi4+0x2bc>
 8000964:	42a8      	cmp	r0, r5
 8000966:	f240 8085 	bls.w	8000a74 <__udivmoddi4+0x2bc>
 800096a:	f1a8 0802 	sub.w	r8, r8, #2
 800096e:	4465      	add	r5, ip
 8000970:	1a2d      	subs	r5, r5, r0
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb5 f0f9 	udiv	r0, r5, r9
 8000978:	fb09 5510 	mls	r5, r9, r0, r5
 800097c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000980:	fb00 fe0e 	mul.w	lr, r0, lr
 8000984:	45ae      	cmp	lr, r5
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x1e2>
 8000988:	eb1c 0505 	adds.w	r5, ip, r5
 800098c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000990:	d26c      	bcs.n	8000a6c <__udivmoddi4+0x2b4>
 8000992:	45ae      	cmp	lr, r5
 8000994:	d96a      	bls.n	8000a6c <__udivmoddi4+0x2b4>
 8000996:	3802      	subs	r0, #2
 8000998:	4465      	add	r5, ip
 800099a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800099e:	fba0 9402 	umull	r9, r4, r0, r2
 80009a2:	eba5 050e 	sub.w	r5, r5, lr
 80009a6:	42a5      	cmp	r5, r4
 80009a8:	46c8      	mov	r8, r9
 80009aa:	46a6      	mov	lr, r4
 80009ac:	d356      	bcc.n	8000a5c <__udivmoddi4+0x2a4>
 80009ae:	d053      	beq.n	8000a58 <__udivmoddi4+0x2a0>
 80009b0:	b15e      	cbz	r6, 80009ca <__udivmoddi4+0x212>
 80009b2:	ebb3 0208 	subs.w	r2, r3, r8
 80009b6:	eb65 050e 	sbc.w	r5, r5, lr
 80009ba:	fa05 f707 	lsl.w	r7, r5, r7
 80009be:	fa22 f301 	lsr.w	r3, r2, r1
 80009c2:	40cd      	lsrs	r5, r1
 80009c4:	431f      	orrs	r7, r3
 80009c6:	e9c6 7500 	strd	r7, r5, [r6]
 80009ca:	2100      	movs	r1, #0
 80009cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d0:	f1c2 0320 	rsb	r3, r2, #32
 80009d4:	fa20 f103 	lsr.w	r1, r0, r3
 80009d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009dc:	fa25 f303 	lsr.w	r3, r5, r3
 80009e0:	4095      	lsls	r5, r2
 80009e2:	430d      	orrs	r5, r1
 80009e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e8:	fa1f fe8c 	uxth.w	lr, ip
 80009ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80009f0:	fb07 3011 	mls	r0, r7, r1, r3
 80009f4:	0c2b      	lsrs	r3, r5, #16
 80009f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80009fa:	fb01 f00e 	mul.w	r0, r1, lr
 80009fe:	4298      	cmp	r0, r3
 8000a00:	fa04 f402 	lsl.w	r4, r4, r2
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x260>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a0e:	d22f      	bcs.n	8000a70 <__udivmoddi4+0x2b8>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	d92d      	bls.n	8000a70 <__udivmoddi4+0x2b8>
 8000a14:	3902      	subs	r1, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1a1b      	subs	r3, r3, r0
 8000a1a:	b2ad      	uxth	r5, r5
 8000a1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a20:	fb07 3310 	mls	r3, r7, r0, r3
 8000a24:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000a28:	fb00 f30e 	mul.w	r3, r0, lr
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x28a>
 8000a30:	eb1c 0505 	adds.w	r5, ip, r5
 8000a34:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a38:	d216      	bcs.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3a:	42ab      	cmp	r3, r5
 8000a3c:	d914      	bls.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3e:	3802      	subs	r0, #2
 8000a40:	4465      	add	r5, ip
 8000a42:	1aed      	subs	r5, r5, r3
 8000a44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a48:	e738      	b.n	80008bc <__udivmoddi4+0x104>
 8000a4a:	4631      	mov	r1, r6
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	e707      	b.n	8000860 <__udivmoddi4+0xa8>
 8000a50:	4686      	mov	lr, r0
 8000a52:	e6e5      	b.n	8000820 <__udivmoddi4+0x68>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fa      	b.n	800084e <__udivmoddi4+0x96>
 8000a58:	454b      	cmp	r3, r9
 8000a5a:	d2a9      	bcs.n	80009b0 <__udivmoddi4+0x1f8>
 8000a5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7a3      	b.n	80009b0 <__udivmoddi4+0x1f8>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	e7ea      	b.n	8000a42 <__udivmoddi4+0x28a>
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	e794      	b.n	800099a <__udivmoddi4+0x1e2>
 8000a70:	4641      	mov	r1, r8
 8000a72:	e7d1      	b.n	8000a18 <__udivmoddi4+0x260>
 8000a74:	46d0      	mov	r8, sl
 8000a76:	e77b      	b.n	8000970 <__udivmoddi4+0x1b8>
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	4465      	add	r5, ip
 8000a7c:	e732      	b.n	80008e4 <__udivmoddi4+0x12c>
 8000a7e:	4608      	mov	r0, r1
 8000a80:	e709      	b.n	8000896 <__udivmoddi4+0xde>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	e742      	b.n	800090e <__udivmoddi4+0x156>

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09e      	sub	sp, #120	; 0x78
 8000a90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f001 f978 	bl	8001d86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a96:	f000 f839 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9a:	f000 fa03 	bl	8000ea4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000a9e:	f000 f897 	bl	8000bd0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000aa2:	f000 f8cd 	bl	8000c40 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000aa6:	f000 f90b 	bl	8000cc0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000aaa:	f000 f92f 	bl	8000d0c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000aae:	f000 f96b 	bl	8000d88 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ab2:	f000 f999 	bl	8000de8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ab6:	f000 f9c7 	bl	8000e48 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_TSENSOR_Init();
 8000aba:	f001 f881 	bl	8001bc0 <BSP_TSENSOR_Init>

  int count = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	count++;
 8000ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
	float temp = BSP_TSENSOR_ReadTemp();
 8000ac8:	f001 f896 	bl	8001bf8 <BSP_TSENSOR_ReadTemp>
 8000acc:	66b8      	str	r0, [r7, #104]	; 0x68
	int value = temp;
 8000ace:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000ad0:	f7ff fe34 	bl	800073c <__aeabi_f2iz>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	667b      	str	r3, [r7, #100]	; 0x64
	char buf[100];
	snprintf(buf, sizeof(buf), "%d. %dC\n\r", count, value);
 8000ad8:	4638      	mov	r0, r7
 8000ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <main+0x78>)
 8000ae2:	2164      	movs	r1, #100	; 0x64
 8000ae4:	f005 fb18 	bl	8006118 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 1000);
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb70 	bl	80001d0 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4639      	mov	r1, r7
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <main+0x7c>)
 8000afc:	f004 fb21 	bl	8005142 <HAL_UART_Transmit>
  {
 8000b00:	e7df      	b.n	8000ac2 <main+0x36>
 8000b02:	bf00      	nop
 8000b04:	08006a14 	.word	0x08006a14
 8000b08:	200001d0 	.word	0x200001d0

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	; 0x58
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2244      	movs	r2, #68	; 0x44
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 faf4 	bl	8006108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b32:	f002 fe33 	bl	800379c <HAL_PWREx_ControlVoltageScaling>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b3c:	f000 fb64 	bl	8001208 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b40:	f002 fe12 	bl	8003768 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <SystemClock_Config+0xc0>)
 8000b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <SystemClock_Config+0xc0>)
 8000b4c:	f023 0318 	bic.w	r3, r3, #24
 8000b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b54:	2314      	movs	r3, #20
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b64:	2360      	movs	r3, #96	; 0x60
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b74:	2328      	movs	r3, #40	; 0x28
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 ff23 	bl	80039d4 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b94:	f000 fb38 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 faeb 	bl	800418c <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bbc:	f000 fb24 	bl	8001208 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bc0:	f003 ffee 	bl	8004ba0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bc4:	bf00      	nop
 8000bc6:	3758      	adds	r7, #88	; 0x58
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <MX_DFSDM1_Init+0x6c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c26:	f001 fa51 	bl	80020cc <HAL_DFSDM_ChannelInit>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c30:	f000 faea 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000009c 	.word	0x2000009c
 8000c3c:	40016020 	.word	0x40016020

08000c40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <MX_I2C2_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <MX_I2C2_Init+0x7c>)
 8000c4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c7a:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c7c:	f001 fe08 	bl	8002890 <HAL_I2C_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c86:	f000 fabf 	bl	8001208 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c8e:	f002 fb8f 	bl	80033b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c98:	f000 fab6 	bl	8001208 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000ca0:	f002 fbd0 	bl	8003444 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f000 faad 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000d4 	.word	0x200000d4
 8000cb8:	40005800 	.word	0x40005800
 8000cbc:	10909cec 	.word	0x10909cec

08000cc0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_QUADSPI_Init+0x44>)
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <MX_QUADSPI_Init+0x48>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_QUADSPI_Init+0x44>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_QUADSPI_Init+0x44>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_QUADSPI_Init+0x44>)
 8000cd8:	2210      	movs	r2, #16
 8000cda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_QUADSPI_Init+0x44>)
 8000cde:	2217      	movs	r2, #23
 8000ce0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_QUADSPI_Init+0x44>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_QUADSPI_Init+0x44>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_QUADSPI_Init+0x44>)
 8000cf0:	f002 fdb6 	bl	8003860 <HAL_QSPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cfa:	f000 fa85 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000128 	.word	0x20000128
 8000d08:	a0001000 	.word	0xa0001000

08000d0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <MX_SPI3_Init+0x78>)
 8000d14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d2a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d66:	2208      	movs	r2, #8
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_SPI3_Init+0x74>)
 8000d6c:	f004 f8f8 	bl	8004f60 <HAL_SPI_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f000 fa47 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000016c 	.word	0x2000016c
 8000d84:	40003c00 	.word	0x40003c00

08000d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <MX_USART1_UART_Init+0x5c>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dcc:	f004 f96b 	bl	80050a6 <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dd6:	f000 fa17 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001d0 	.word	0x200001d0
 8000de4:	40013800 	.word	0x40013800

08000de8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <MX_USART3_UART_Init+0x5c>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e2c:	f004 f93b 	bl	80050a6 <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 f9e7 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000254 	.word	0x20000254
 8000e44:	40004800 	.word	0x40004800

08000e48 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e56:	2206      	movs	r2, #6
 8000e58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8c:	f002 fb25 	bl	80034da <HAL_PCD_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e96:	f000 f9b7 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200002d8 	.word	0x200002d8

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eba:	4bbd      	ldr	r3, [pc, #756]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4abc      	ldr	r2, [pc, #752]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4bba      	ldr	r3, [pc, #744]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	4bb7      	ldr	r3, [pc, #732]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4ab6      	ldr	r2, [pc, #728]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4bb4      	ldr	r3, [pc, #720]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4bb1      	ldr	r3, [pc, #708]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4ab0      	ldr	r2, [pc, #704]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4bae      	ldr	r3, [pc, #696]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4bab      	ldr	r3, [pc, #684]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4aaa      	ldr	r2, [pc, #680]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4ba8      	ldr	r3, [pc, #672]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	4ba5      	ldr	r3, [pc, #660]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4aa4      	ldr	r2, [pc, #656]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4ba2      	ldr	r3, [pc, #648]	; (80011b0 <MX_GPIO_Init+0x30c>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f38:	489e      	ldr	r0, [pc, #632]	; (80011b4 <MX_GPIO_Init+0x310>)
 8000f3a:	f001 fc6f 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f001 fc68 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f52:	4899      	ldr	r0, [pc, #612]	; (80011b8 <MX_GPIO_Init+0x314>)
 8000f54:	f001 fc62 	bl	800281c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f5e:	4897      	ldr	r0, [pc, #604]	; (80011bc <MX_GPIO_Init+0x318>)
 8000f60:	f001 fc5c 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6a:	4894      	ldr	r0, [pc, #592]	; (80011bc <MX_GPIO_Init+0x318>)
 8000f6c:	f001 fc56 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f76:	4892      	ldr	r0, [pc, #584]	; (80011c0 <MX_GPIO_Init+0x31c>)
 8000f78:	f001 fc50 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2120      	movs	r1, #32
 8000f80:	488d      	ldr	r0, [pc, #564]	; (80011b8 <MX_GPIO_Init+0x314>)
 8000f82:	f001 fc4b 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2101      	movs	r1, #1
 8000f8a:	488a      	ldr	r0, [pc, #552]	; (80011b4 <MX_GPIO_Init+0x310>)
 8000f8c:	f001 fc46 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f90:	f240 1315 	movw	r3, #277	; 0x115
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4882      	ldr	r0, [pc, #520]	; (80011b4 <MX_GPIO_Init+0x310>)
 8000faa:	f001 f99b 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000fae:	236a      	movs	r3, #106	; 0x6a
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	487c      	ldr	r0, [pc, #496]	; (80011b4 <MX_GPIO_Init+0x310>)
 8000fc4:	f001 f98e 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4878      	ldr	r0, [pc, #480]	; (80011c0 <MX_GPIO_Init+0x31c>)
 8000fe0:	f001 f980 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fe4:	233f      	movs	r3, #63	; 0x3f
 8000fe6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fe8:	230b      	movs	r3, #11
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4872      	ldr	r0, [pc, #456]	; (80011c0 <MX_GPIO_Init+0x31c>)
 8000ff8:	f001 f974 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800100c:	2308      	movs	r3, #8
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f001 f963 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800101e:	f248 1304 	movw	r3, #33028	; 0x8104
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f001 f953 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800103e:	2308      	movs	r3, #8
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800104e:	2301      	movs	r3, #1
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f001 f942 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001060:	2310      	movs	r3, #16
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001064:	230b      	movs	r3, #11
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f001 f935 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800107a:	23e0      	movs	r3, #224	; 0xe0
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800108a:	2305      	movs	r3, #5
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f001 f924 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4841      	ldr	r0, [pc, #260]	; (80011b8 <MX_GPIO_Init+0x314>)
 80010b2:	f001 f917 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ba:	230b      	movs	r3, #11
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	483b      	ldr	r0, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x314>)
 80010ca:	f001 f90b 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010ce:	f24f 0334 	movw	r3, #61492	; 0xf034
 80010d2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4834      	ldr	r0, [pc, #208]	; (80011b8 <MX_GPIO_Init+0x314>)
 80010e8:	f001 f8fc 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80010ec:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80010f0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	482e      	ldr	r0, [pc, #184]	; (80011bc <MX_GPIO_Init+0x318>)
 8001104:	f001 f8ee 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001108:	f243 0381 	movw	r3, #12417	; 0x3081
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4826      	ldr	r0, [pc, #152]	; (80011bc <MX_GPIO_Init+0x318>)
 8001122:	f001 f8df 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001126:	f44f 7310 	mov.w	r3, #576	; 0x240
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4820      	ldr	r0, [pc, #128]	; (80011c0 <MX_GPIO_Init+0x31c>)
 8001140:	f001 f8d0 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001144:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <MX_GPIO_Init+0x31c>)
 800115c:	f001 f8c2 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001170:	2305      	movs	r3, #5
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4810      	ldr	r0, [pc, #64]	; (80011bc <MX_GPIO_Init+0x318>)
 800117c:	f001 f8b2 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001180:	2378      	movs	r3, #120	; 0x78
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001190:	2307      	movs	r3, #7
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <MX_GPIO_Init+0x318>)
 800119c:	f001 f8a2 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80011a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a6:	2312      	movs	r3, #18
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e00a      	b.n	80011c4 <MX_GPIO_Init+0x320>
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48001000 	.word	0x48001000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	48000800 	.word	0x48000800
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ca:	2304      	movs	r3, #4
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <MX_GPIO_Init+0x360>)
 80011d6:	f001 f885 	bl	80022e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2017      	movs	r0, #23
 80011e0:	f000 ff3d 	bl	800205e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e4:	2017      	movs	r0, #23
 80011e6:	f000 ff56 	bl	8002096 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2028      	movs	r0, #40	; 0x28
 80011f0:	f000 ff35 	bl	800205e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011f4:	2028      	movs	r0, #40	; 0x28
 80011f6:	f000 ff4e 	bl	8002096 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	48000400 	.word	0x48000400

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	e7fe      	b.n	8001210 <Error_Handler+0x8>
	...

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_MspInit+0x40>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121e:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <HAL_MspInit+0x40>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6613      	str	r3, [r2, #96]	; 0x60
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_MspInit+0x40>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_MspInit+0x40>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_MspInit+0x40>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6593      	str	r3, [r2, #88]	; 0x58
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_MspInit+0x40>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0ac      	sub	sp, #176	; 0xb0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2288      	movs	r2, #136	; 0x88
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f004 ff45 	bl	8006108 <memset>
  if(DFSDM1_Init == 0)
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d142      	bne.n	800130c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4618      	mov	r0, r3
 8001298:	f003 f998 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80012a2:	f7ff ffb1 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012b0:	6613      	str	r3, [r2, #96]	; 0x60
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80012d6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012f0:	2306      	movs	r3, #6
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <HAL_DFSDM_ChannelMspInit+0xc4>)
 80012fe:	f000 fff1 	bl	80022e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a02      	ldr	r2, [pc, #8]	; (8001314 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800130a:	6013      	str	r3, [r2, #0]
  }

}
 800130c:	bf00      	nop
 800130e:	37b0      	adds	r7, #176	; 0xb0
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200007e4 	.word	0x200007e4
 8001318:	40021000 	.word	0x40021000
 800131c:	48001000 	.word	0x48001000

08001320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0ac      	sub	sp, #176	; 0xb0
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2288      	movs	r2, #136	; 0x88
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f004 fee1 	bl	8006108 <memset>
  if(hi2c->Instance==I2C2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_I2C_MspInit+0xb0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d13b      	bne.n	80013c8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4618      	mov	r0, r3
 800135e:	f003 f935 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001368:	f7ff ff4e 	bl	8001208 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001384:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138c:	2312      	movs	r3, #18
 800138e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800139e:	2304      	movs	r3, #4
 80013a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a8:	4619      	mov	r1, r3
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <HAL_I2C_MspInit+0xb8>)
 80013ac:	f000 ff9a 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 80013b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ba:	6593      	str	r3, [r2, #88]	; 0x58
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	37b0      	adds	r7, #176	; 0xb0
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40005800 	.word	0x40005800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000400 	.word	0x48000400

080013dc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_I2C_MspDeInit+0x3c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10f      	bne.n	800140e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_I2C_MspDeInit+0x40>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_I2C_MspDeInit+0x40>)
 80013f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013f8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80013fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fe:	4808      	ldr	r0, [pc, #32]	; (8001420 <HAL_I2C_MspDeInit+0x44>)
 8001400:	f001 f918 	bl	8002634 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_I2C_MspDeInit+0x44>)
 800140a:	f001 f913 	bl	8002634 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40005800 	.word	0x40005800
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400

08001424 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_QSPI_MspInit+0x7c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d128      	bne.n	8001498 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 8001448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	6513      	str	r3, [r2, #80]	; 0x50
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 8001454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001476:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800147a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001488:	230a      	movs	r3, #10
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_QSPI_MspInit+0x84>)
 8001494:	f000 ff26 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	a0001000 	.word	0xa0001000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48001000 	.word	0x48001000

080014ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_SPI_MspInit+0x7c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d128      	bne.n	8001520 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	4a16      	ldr	r2, [pc, #88]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d8:	6593      	str	r3, [r2, #88]	; 0x58
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001510:	2306      	movs	r3, #6
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_SPI_MspInit+0x84>)
 800151c:	f000 fee2 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40003c00 	.word	0x40003c00
 800152c:	40021000 	.word	0x40021000
 8001530:	48000800 	.word	0x48000800

08001534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0ae      	sub	sp, #184	; 0xb8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2288      	movs	r2, #136	; 0x88
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f004 fdd7 	bl	8006108 <memset>
  if(huart->Instance==USART1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a42      	ldr	r2, [pc, #264]	; (8001668 <HAL_UART_MspInit+0x134>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d13b      	bne.n	80015dc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001568:	2300      	movs	r3, #0
 800156a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4618      	mov	r0, r3
 8001572:	f003 f82b 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800157c:	f7ff fe44 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_UART_MspInit+0x138>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001584:	4a39      	ldr	r2, [pc, #228]	; (800166c <HAL_UART_MspInit+0x138>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6613      	str	r3, [r2, #96]	; 0x60
 800158c:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_UART_MspInit+0x138>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_UART_MspInit+0x138>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	4a33      	ldr	r2, [pc, #204]	; (800166c <HAL_UART_MspInit+0x138>)
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_UART_MspInit+0x138>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80015b0:	23c0      	movs	r3, #192	; 0xc0
 80015b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c8:	2307      	movs	r3, #7
 80015ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4826      	ldr	r0, [pc, #152]	; (8001670 <HAL_UART_MspInit+0x13c>)
 80015d6:	f000 fe85 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015da:	e040      	b.n	800165e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_UART_MspInit+0x140>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d13b      	bne.n	800165e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015e6:	2304      	movs	r3, #4
 80015e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 ffea 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80015fe:	f7ff fe03 	bl	8001208 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_UART_MspInit+0x138>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_UART_MspInit+0x138>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_UART_MspInit+0x138>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_UART_MspInit+0x138>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <HAL_UART_MspInit+0x138>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_MspInit+0x138>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001632:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800164c:	2307      	movs	r3, #7
 800164e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <HAL_UART_MspInit+0x144>)
 800165a:	f000 fe43 	bl	80022e4 <HAL_GPIO_Init>
}
 800165e:	bf00      	nop
 8001660:	37b8      	adds	r7, #184	; 0xb8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40013800 	.word	0x40013800
 800166c:	40021000 	.word	0x40021000
 8001670:	48000400 	.word	0x48000400
 8001674:	40004800 	.word	0x40004800
 8001678:	48000c00 	.word	0x48000c00

0800167c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0ac      	sub	sp, #176	; 0xb0
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2288      	movs	r2, #136	; 0x88
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fd33 	bl	8006108 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016aa:	d17c      	bne.n	80017a6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016c2:	2318      	movs	r3, #24
 80016c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016c6:	2307      	movs	r3, #7
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 ff75 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80016e8:	f7ff fd8e 	bl	8001208 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a2f      	ldr	r2, [pc, #188]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f000 fddf 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001726:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800172a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001740:	230a      	movs	r3, #10
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f000 fdc8 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800175a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800175e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d114      	bne.n	80017a2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	; 0x58
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001790:	f002 f858 	bl	8003844 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017a0:	e001      	b.n	80017a6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80017a2:	f002 f84f 	bl	8003844 <HAL_PWREx_EnableVddUSB>
}
 80017a6:	bf00      	nop
 80017a8:	37b0      	adds	r7, #176	; 0xb0
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fa:	f000 fb19 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}

08001802 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001806:	2020      	movs	r0, #32
 8001808:	f001 f820 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800180c:	2040      	movs	r0, #64	; 0x40
 800180e:	f001 f81d 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001812:	2080      	movs	r0, #128	; 0x80
 8001814:	f001 f81a 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001818:	f44f 7080 	mov.w	r0, #256	; 0x100
 800181c:	f001 f816 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001828:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800182c:	f001 f80e 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001830:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001834:	f001 f80a 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001838:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800183c:	f001 f806 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001840:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001844:	f001 f802 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001848:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800184c:	f000 fffe 	bl	800284c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f004 fc08 	bl	8006098 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20018000 	.word	0x20018000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	200007e8 	.word	0x200007e8
 80018bc:	20000880 	.word	0x20000880

080018c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
#endif
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d0:	f7ff fff6 	bl	80018c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopForever+0xe>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopForever+0x16>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f004 fbd3 	bl	80060a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fe:	f7ff f8c5 	bl	8000a8c <main>

08001902 <LoopForever>:

LoopForever:
    b LoopForever
 8001902:	e7fe      	b.n	8001902 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001904:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001910:	08006aac 	.word	0x08006aac
  ldr r2, =_sbss
 8001914:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001918:	2000087c 	.word	0x2000087c

0800191c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <I2Cx_MspInit+0xa8>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <I2Cx_MspInit+0xa8>)
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <I2Cx_MspInit+0xa8>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001940:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001944:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001946:	2312      	movs	r3, #18
 8001948:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800194a:	2301      	movs	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001952:	2304      	movs	r3, #4
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	481b      	ldr	r0, [pc, #108]	; (80019cc <I2Cx_MspInit+0xac>)
 800195e:	f000 fcc1 	bl	80022e4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4818      	ldr	r0, [pc, #96]	; (80019cc <I2Cx_MspInit+0xac>)
 800196a:	f000 fcbb 	bl	80022e4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <I2Cx_MspInit+0xa8>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <I2Cx_MspInit+0xa8>)
 8001974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001978:	6593      	str	r3, [r2, #88]	; 0x58
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <I2Cx_MspInit+0xa8>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <I2Cx_MspInit+0xa8>)
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <I2Cx_MspInit+0xa8>)
 800198c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001990:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <I2Cx_MspInit+0xa8>)
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <I2Cx_MspInit+0xa8>)
 8001998:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800199c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	210f      	movs	r1, #15
 80019a2:	2021      	movs	r0, #33	; 0x21
 80019a4:	f000 fb5b 	bl	800205e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80019a8:	2021      	movs	r0, #33	; 0x21
 80019aa:	f000 fb74 	bl	8002096 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	210f      	movs	r1, #15
 80019b2:	2022      	movs	r0, #34	; 0x22
 80019b4:	f000 fb53 	bl	800205e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80019b8:	2022      	movs	r0, #34	; 0x22
 80019ba:	f000 fb6c 	bl	8002096 <HAL_NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <I2Cx_Init+0x54>)
 80019dc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <I2Cx_Init+0x58>)
 80019e2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff89 	bl	8001920 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 ff3e 	bl	8002890 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001a14:	2100      	movs	r1, #0
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f001 fcca 	bl	80033b0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40005800 	.word	0x40005800
 8001a28:	00702681 	.word	0x00702681

08001a2c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af04      	add	r7, sp, #16
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	72fb      	strb	r3, [r7, #11]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	813b      	strh	r3, [r7, #8]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	88f8      	ldrh	r0, [r7, #6]
 8001a50:	893a      	ldrh	r2, [r7, #8]
 8001a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	4603      	mov	r3, r0
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f001 f8e6 	bl	8002c34 <HAL_I2C_Mem_Read>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	4619      	mov	r1, r3
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f832 	bl	8001ae0 <I2Cx_Error>
  }
  return status;
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b08a      	sub	sp, #40	; 0x28
 8001a8a:	af04      	add	r7, sp, #16
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	4608      	mov	r0, r1
 8001a90:	4611      	mov	r1, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4603      	mov	r3, r0
 8001a96:	72fb      	strb	r3, [r7, #11]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	813b      	strh	r3, [r7, #8]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	88f8      	ldrh	r0, [r7, #6]
 8001aaa:	893a      	ldrh	r2, [r7, #8]
 8001aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4603      	mov	r3, r0
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 ffa5 	bl	8002a0c <HAL_I2C_Mem_Write>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d004      	beq.n	8001ad6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f805 	bl	8001ae0 <I2Cx_Error>
  }
  return status;
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 ff5e 	bl	80029ae <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff6c 	bl	80019d0 <I2Cx_Init>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <SENSOR_IO_Init+0x10>)
 8001b06:	f7ff ff63 	bl	80019d0 <I2Cx_Init>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200007ec 	.word	0x200007ec

08001b14 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	71bb      	strb	r3, [r7, #6]
 8001b22:	4613      	mov	r3, r2
 8001b24:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	79f9      	ldrb	r1, [r7, #7]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	1d7b      	adds	r3, r7, #5
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	4803      	ldr	r0, [pc, #12]	; (8001b44 <SENSOR_IO_Write+0x30>)
 8001b38:	f7ff ffa5 	bl	8001a86 <I2Cx_WriteMultiple>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200007ec 	.word	0x200007ec

08001b48 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460a      	mov	r2, r1
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	79f9      	ldrb	r1, [r7, #7]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	f107 030f 	add.w	r3, r7, #15
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <SENSOR_IO_Read+0x38>)
 8001b70:	f7ff ff5c 	bl	8001a2c <I2Cx_ReadMultiple>

  return read_value;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200007ec 	.word	0x200007ec

08001b84 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	603a      	str	r2, [r7, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	460b      	mov	r3, r1
 8001b94:	71bb      	strb	r3, [r7, #6]
 8001b96:	4613      	mov	r3, r2
 8001b98:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	79f9      	ldrb	r1, [r7, #7]
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	4804      	ldr	r0, [pc, #16]	; (8001bbc <SENSOR_IO_ReadMultiple+0x38>)
 8001bac:	f7ff ff3e 	bl	8001a2c <I2Cx_ReadMultiple>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b29b      	uxth	r3, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200007ec 	.word	0x200007ec

08001bc0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <BSP_TSENSOR_Init+0x30>)
 8001bcc:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <BSP_TSENSOR_Init+0x34>)
 8001bce:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001bd0:	f7ff ff96 	bl	8001b00 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <BSP_TSENSOR_Init+0x30>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	20be      	movs	r0, #190	; 0xbe
 8001bde:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000840 	.word	0x20000840
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <BSP_TSENSOR_ReadTemp+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	20be      	movs	r0, #190	; 0xbe
 8001c04:	4798      	blx	r3
 8001c06:	4603      	mov	r3, r0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000840 	.word	0x20000840

08001c10 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2120      	movs	r1, #32
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff90 	bl	8001b48 <SENSOR_IO_Read>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	f023 0304 	bic.w	r3, r3, #4
 8001c32:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	f023 0303 	bic.w	r3, r3, #3
 8001c42:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c52:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff59 	bl	8001b14 <SENSOR_IO_Write>
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001c6a:	b590      	push	{r4, r7, lr}
 8001c6c:	b089      	sub	sp, #36	; 0x24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	b2d8      	uxtb	r0, r3
 8001c78:	f107 0208 	add.w	r2, r7, #8
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	21b2      	movs	r1, #178	; 0xb2
 8001c80:	f7ff ff80 	bl	8001b84 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2135      	movs	r1, #53	; 0x35
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff5c 	bl	8001b48 <SENSOR_IO_Read>
 8001c90:	4603      	mov	r3, r0
 8001c92:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001c94:	7ffb      	ldrb	r3, [r7, #31]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	7a3b      	ldrb	r3, [r7, #8]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001ca8:	7ffb      	ldrb	r3, [r7, #31]
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	7a7b      	ldrb	r3, [r7, #9]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001cbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cc0:	10db      	asrs	r3, r3, #3
 8001cc2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001cc4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001cc8:	10db      	asrs	r3, r3, #3
 8001cca:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	b2d8      	uxtb	r0, r3
 8001cd0:	f107 0208 	add.w	r2, r7, #8
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	21bc      	movs	r1, #188	; 0xbc
 8001cd8:	f7ff ff54 	bl	8001b84 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001cdc:	7a7b      	ldrb	r3, [r7, #9]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	7a3b      	ldrb	r3, [r7, #8]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	7abb      	ldrb	r3, [r7, #10]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	b2d8      	uxtb	r0, r3
 8001cfc:	f107 0208 	add.w	r2, r7, #8
 8001d00:	2302      	movs	r3, #2
 8001d02:	21aa      	movs	r1, #170	; 0xaa
 8001d04:	f7ff ff3e 	bl	8001b84 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001d08:	7a7b      	ldrb	r3, [r7, #9]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	7a3b      	ldrb	r3, [r7, #8]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001d16:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001d1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fb67 	bl	80003f4 <__aeabi_i2f>
 8001d26:	4604      	mov	r4, r0
 8001d28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d2c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fb5e 	bl	80003f4 <__aeabi_i2f>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f7fe fbad 	bl	800049c <__aeabi_fmul>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461c      	mov	r4, r3
 8001d46:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fb4f 	bl	80003f4 <__aeabi_i2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7fe fc52 	bl	8000604 <__aeabi_fdiv>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461c      	mov	r4, r3
 8001d64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fb43 	bl	80003f4 <__aeabi_i2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4619      	mov	r1, r3
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7fe fa8a 	bl	800028c <__addsf3>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60fb      	str	r3, [r7, #12]

  return tmp_f;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}

08001d86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f959 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f80e 	bl	8001db8 <HAL_InitTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	e001      	b.n	8001dac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001da8:	f7ff fa34 	bl	8001214 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dac:	79fb      	ldrb	r3, [r7, #7]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_InitTick+0x6c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d023      	beq.n	8001e14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_InitTick+0x70>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_InitTick+0x6c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f965 	bl	80020b2 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d809      	bhi.n	8001e08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f92f 	bl	800205e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_InitTick+0x74>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e007      	b.n	8001e18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e004      	b.n	8001e18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e001      	b.n	8001e18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000018 	.word	0x20000018
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000014 	.word	0x20000014

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_IncTick+0x1c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_IncTick+0x20>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_IncTick+0x20>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000018 	.word	0x20000018
 8001e50:	20000844 	.word	0x20000844

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <HAL_GetTick+0x10>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20000844 	.word	0x20000844

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffe0 	bl	8001e54 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000018 	.word	0x20000018

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4906      	ldr	r1, [pc, #24]	; (8001f48 <__NVIC_EnableIRQ+0x34>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff90 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff2d 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff42 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff90 	bl	8001fa0 <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5f 	bl	8001f4c <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff35 	bl	8001f14 <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa2 	bl	8002004 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0ac      	b.n	8002238 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f8b2 	bl	800224c <DFSDM_GetChannelFromInstance>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4a55      	ldr	r2, [pc, #340]	; (8002240 <HAL_DFSDM_ChannelInit+0x174>)
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e09f      	b.n	8002238 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff f8ad 	bl	8001258 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80020fe:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_DFSDM_ChannelInit+0x178>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a4f      	ldr	r2, [pc, #316]	; (8002244 <HAL_DFSDM_ChannelInit+0x178>)
 8002106:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002108:	4b4e      	ldr	r3, [pc, #312]	; (8002244 <HAL_DFSDM_ChannelInit+0x178>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d125      	bne.n	800215c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002110:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 8002116:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800211a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800211c:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4948      	ldr	r1, [pc, #288]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a46      	ldr	r2, [pc, #280]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 8002130:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002134:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	791b      	ldrb	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d108      	bne.n	8002150 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	3b01      	subs	r3, #1
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	493f      	ldr	r1, [pc, #252]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002150:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3c      	ldr	r2, [pc, #240]	; (8002248 <HAL_DFSDM_ChannelInit+0x17c>)
 8002156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800215a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800216a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800217a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002180:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 020f 	bic.w	r2, r2, #15
 8002198:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80021c0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6899      	ldr	r1, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f002 0207 	and.w	r2, r2, #7
 80021ec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002218:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f810 	bl	800224c <DFSDM_GetChannelFromInstance>
 800222c:	4602      	mov	r2, r0
 800222e:	4904      	ldr	r1, [pc, #16]	; (8002240 <HAL_DFSDM_ChannelInit+0x174>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000084c 	.word	0x2000084c
 8002244:	20000848 	.word	0x20000848
 8002248:	40016000 	.word	0x40016000

0800224c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d102      	bne.n	8002262 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e02b      	b.n	80022ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <DFSDM_GetChannelFromInstance+0x80>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d102      	bne.n	8002270 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800226a:	2301      	movs	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e024      	b.n	80022ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <DFSDM_GetChannelFromInstance+0x84>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d102      	bne.n	800227e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002278:	2302      	movs	r3, #2
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e01d      	b.n	80022ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <DFSDM_GetChannelFromInstance+0x88>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d102      	bne.n	800228c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002286:	2304      	movs	r3, #4
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e016      	b.n	80022ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d102      	bne.n	800229a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002294:	2305      	movs	r3, #5
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e00f      	b.n	80022ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <DFSDM_GetChannelFromInstance+0x90>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d102      	bne.n	80022a8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80022a2:	2306      	movs	r3, #6
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e008      	b.n	80022ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <DFSDM_GetChannelFromInstance+0x94>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d102      	bne.n	80022b6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80022b0:	2307      	movs	r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e001      	b.n	80022ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80022b6:	2303      	movs	r3, #3
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40016000 	.word	0x40016000
 80022cc:	40016020 	.word	0x40016020
 80022d0:	40016040 	.word	0x40016040
 80022d4:	40016080 	.word	0x40016080
 80022d8:	400160a0 	.word	0x400160a0
 80022dc:	400160c0 	.word	0x400160c0
 80022e0:	400160e0 	.word	0x400160e0

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e17f      	b.n	80025f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8171 	beq.w	80025ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d005      	beq.n	8002324 <HAL_GPIO_Init+0x40>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d130      	bne.n	8002386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 0201 	and.w	r2, r3, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b03      	cmp	r3, #3
 8002390:	d118      	bne.n	80023c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002398:	2201      	movs	r2, #1
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	f003 0201 	and.w	r2, r3, #1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d017      	beq.n	8002400 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	6939      	ldr	r1, [r7, #16]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80ac 	beq.w	80025ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <HAL_GPIO_Init+0x32c>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	4a5d      	ldr	r2, [pc, #372]	; (8002610 <HAL_GPIO_Init+0x32c>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6613      	str	r3, [r2, #96]	; 0x60
 80024a2:	4b5b      	ldr	r3, [pc, #364]	; (8002610 <HAL_GPIO_Init+0x32c>)
 80024a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024ae:	4a59      	ldr	r2, [pc, #356]	; (8002614 <HAL_GPIO_Init+0x330>)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	220f      	movs	r2, #15
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x242>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x334>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x23e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_GPIO_Init+0x338>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x23a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x33c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x236>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_GPIO_Init+0x340>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x232>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x344>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x22e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a49      	ldr	r2, [pc, #292]	; (800262c <HAL_GPIO_Init+0x348>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x22a>
 800250a:	2306      	movs	r3, #6
 800250c:	e00c      	b.n	8002528 <HAL_GPIO_Init+0x244>
 800250e:	2307      	movs	r3, #7
 8002510:	e00a      	b.n	8002528 <HAL_GPIO_Init+0x244>
 8002512:	2305      	movs	r3, #5
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x244>
 8002516:	2304      	movs	r3, #4
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x244>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x244>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x244>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x244>
 8002526:	2300      	movs	r3, #0
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002538:	4936      	ldr	r1, [pc, #216]	; (8002614 <HAL_GPIO_Init+0x330>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002546:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <HAL_GPIO_Init+0x34c>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256a:	4a31      	ldr	r2, [pc, #196]	; (8002630 <HAL_GPIO_Init+0x34c>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_GPIO_Init+0x34c>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43db      	mvns	r3, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002594:	4a26      	ldr	r2, [pc, #152]	; (8002630 <HAL_GPIO_Init+0x34c>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800259a:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_GPIO_Init+0x34c>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_GPIO_Init+0x34c>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_GPIO_Init+0x34c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025e8:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_GPIO_Init+0x34c>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f47f ae78 	bne.w	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	40021000 	.word	0x40021000
 8002614:	40010000 	.word	0x40010000
 8002618:	48000400 	.word	0x48000400
 800261c:	48000800 	.word	0x48000800
 8002620:	48000c00 	.word	0x48000c00
 8002624:	48001000 	.word	0x48001000
 8002628:	48001400 	.word	0x48001400
 800262c:	48001800 	.word	0x48001800
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002642:	e0cd      	b.n	80027e0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002644:	2201      	movs	r2, #1
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80c0 	beq.w	80027da <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800265a:	4a68      	ldr	r2, [pc, #416]	; (80027fc <HAL_GPIO_DeInit+0x1c8>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4013      	ands	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002682:	d025      	beq.n	80026d0 <HAL_GPIO_DeInit+0x9c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a5e      	ldr	r2, [pc, #376]	; (8002800 <HAL_GPIO_DeInit+0x1cc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d01f      	beq.n	80026cc <HAL_GPIO_DeInit+0x98>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a5d      	ldr	r2, [pc, #372]	; (8002804 <HAL_GPIO_DeInit+0x1d0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d019      	beq.n	80026c8 <HAL_GPIO_DeInit+0x94>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <HAL_GPIO_DeInit+0x1d4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_GPIO_DeInit+0x90>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <HAL_GPIO_DeInit+0x1d8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00d      	beq.n	80026c0 <HAL_GPIO_DeInit+0x8c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_GPIO_DeInit+0x1dc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <HAL_GPIO_DeInit+0x88>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a59      	ldr	r2, [pc, #356]	; (8002814 <HAL_GPIO_DeInit+0x1e0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_GPIO_DeInit+0x84>
 80026b4:	2306      	movs	r3, #6
 80026b6:	e00c      	b.n	80026d2 <HAL_GPIO_DeInit+0x9e>
 80026b8:	2307      	movs	r3, #7
 80026ba:	e00a      	b.n	80026d2 <HAL_GPIO_DeInit+0x9e>
 80026bc:	2305      	movs	r3, #5
 80026be:	e008      	b.n	80026d2 <HAL_GPIO_DeInit+0x9e>
 80026c0:	2304      	movs	r3, #4
 80026c2:	e006      	b.n	80026d2 <HAL_GPIO_DeInit+0x9e>
 80026c4:	2303      	movs	r3, #3
 80026c6:	e004      	b.n	80026d2 <HAL_GPIO_DeInit+0x9e>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e002      	b.n	80026d2 <HAL_GPIO_DeInit+0x9e>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_GPIO_DeInit+0x9e>
 80026d0:	2300      	movs	r3, #0
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	f002 0203 	and.w	r2, r2, #3
 80026d8:	0092      	lsls	r2, r2, #2
 80026da:	4093      	lsls	r3, r2
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d132      	bne.n	8002748 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80026e2:	4b4d      	ldr	r3, [pc, #308]	; (8002818 <HAL_GPIO_DeInit+0x1e4>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	494b      	ldr	r1, [pc, #300]	; (8002818 <HAL_GPIO_DeInit+0x1e4>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80026f0:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_GPIO_DeInit+0x1e4>)
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4947      	ldr	r1, [pc, #284]	; (8002818 <HAL_GPIO_DeInit+0x1e4>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_GPIO_DeInit+0x1e4>)
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	4944      	ldr	r1, [pc, #272]	; (8002818 <HAL_GPIO_DeInit+0x1e4>)
 8002708:	4013      	ands	r3, r2
 800270a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800270c:	4b42      	ldr	r3, [pc, #264]	; (8002818 <HAL_GPIO_DeInit+0x1e4>)
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	4940      	ldr	r1, [pc, #256]	; (8002818 <HAL_GPIO_DeInit+0x1e4>)
 8002716:	4013      	ands	r3, r2
 8002718:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800272a:	4a34      	ldr	r2, [pc, #208]	; (80027fc <HAL_GPIO_DeInit+0x1c8>)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43da      	mvns	r2, r3
 800273a:	4830      	ldr	r0, [pc, #192]	; (80027fc <HAL_GPIO_DeInit+0x1c8>)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	400a      	ands	r2, r1
 8002742:	3302      	adds	r3, #2
 8002744:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2103      	movs	r1, #3
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	08d2      	lsrs	r2, r2, #3
 800277c:	4019      	ands	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2103      	movs	r1, #3
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	2101      	movs	r1, #1
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	2103      	movs	r1, #3
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	401a      	ands	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ca:	2101      	movs	r1, #1
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f47f af2b 	bne.w	8002644 <HAL_GPIO_DeInit+0x10>
  }
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	48000400 	.word	0x48000400
 8002804:	48000800 	.word	0x48000800
 8002808:	48000c00 	.word	0x48000c00
 800280c:	48001000 	.word	0x48001000
 8002810:	48001400 	.word	0x48001400
 8002814:	48001800 	.word	0x48001800
 8002818:	40010400 	.word	0x40010400

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002838:	e002      	b.n	8002840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
	...

0800284c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f806 	bl	800287c <HAL_GPIO_EXTI_Callback>
  }
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40010400 	.word	0x40010400

0800287c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e081      	b.n	80029a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe fd32 	bl	8001320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2224      	movs	r2, #36	; 0x24
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e006      	b.n	8002918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d104      	bne.n	800292a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800293c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800294c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69d9      	ldr	r1, [r3, #28]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1a      	ldr	r2, [r3, #32]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e021      	b.n	8002a04 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe fcff 	bl	80013dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	f040 80f9 	bne.w	8002c26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x34>
 8002a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0ed      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Mem_Write+0x4e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e0e6      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a62:	f7ff f9f7 	bl	8001e54 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2319      	movs	r3, #25
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fac2 	bl	8002ffe <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0d1      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2221      	movs	r2, #33	; 0x21
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aac:	88f8      	ldrh	r0, [r7, #6]
 8002aae:	893a      	ldrh	r2, [r7, #8]
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4603      	mov	r3, r0
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f9d3 	bl	8002e68 <I2C_RequestMemoryWrite>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0a9      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d90e      	bls.n	8002afc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	2300      	movs	r3, #0
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fc2b 	bl	8003350 <I2C_TransferConfig>
 8002afa:	e00f      	b.n	8002b1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fc1a 	bl	8003350 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 faac 	bl	800307e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e07b      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d034      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d130      	bne.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fa3e 	bl	8002ffe <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04d      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2bff      	cmp	r3, #255	; 0xff
 8002b94:	d90e      	bls.n	8002bb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22ff      	movs	r2, #255	; 0xff
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fbcf 	bl	8003350 <I2C_TransferConfig>
 8002bb2:	e00f      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	8979      	ldrh	r1, [r7, #10]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fbbe 	bl	8003350 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d19e      	bne.n	8002b1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa8b 	bl	80030fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e01a      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_I2C_Mem_Write+0x224>)
 8002c06:	400b      	ands	r3, r1
 8002c08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	fe00e800 	.word	0xfe00e800

08002c34 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f040 80fd 	bne.w	8002e56 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_I2C_Mem_Read+0x34>
 8002c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0f1      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Mem_Read+0x4e>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e0ea      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c8a:	f7ff f8e3 	bl	8001e54 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2319      	movs	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f9ae 	bl	8002ffe <I2C_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0d5      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2222      	movs	r2, #34	; 0x22
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2240      	movs	r2, #64	; 0x40
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd4:	88f8      	ldrh	r0, [r7, #6]
 8002cd6:	893a      	ldrh	r2, [r7, #8]
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f913 	bl	8002f10 <I2C_RequestMemoryRead>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0ad      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d90e      	bls.n	8002d24 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <HAL_I2C_Mem_Read+0x22c>)
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fb17 	bl	8003350 <I2C_TransferConfig>
 8002d22:	e00f      	b.n	8002d44 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_I2C_Mem_Read+0x22c>)
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fb06 	bl	8003350 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f955 	bl	8002ffe <I2C_WaitOnFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e07c      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d034      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x1d0>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d130      	bne.n	8002e04 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f926 	bl	8002ffe <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e04d      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d90e      	bls.n	8002de4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8979      	ldrh	r1, [r7, #10]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fab7 	bl	8003350 <I2C_TransferConfig>
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 faa6 	bl	8003350 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d19a      	bne.n	8002d44 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f973 	bl	80030fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e01a      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_I2C_Mem_Read+0x230>)
 8002e36:	400b      	ands	r3, r1
 8002e38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	80002400 	.word	0x80002400
 8002e64:	fe00e800 	.word	0xfe00e800

08002e68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	8979      	ldrh	r1, [r7, #10]
 8002e88:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <I2C_RequestMemoryWrite+0xa4>)
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fa5d 	bl	8003350 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	69b9      	ldr	r1, [r7, #24]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f8ef 	bl	800307e <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e02c      	b.n	8002f04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
 8002eba:	e015      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ebc:	893b      	ldrh	r3, [r7, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f8d5 	bl	800307e <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e012      	b.n	8002f04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f883 	bl	8002ffe <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	80002000 	.word	0x80002000

08002f10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	817b      	strh	r3, [r7, #10]
 8002f22:	460b      	mov	r3, r1
 8002f24:	813b      	strh	r3, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <I2C_RequestMemoryRead+0xa4>)
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fa0a 	bl	8003350 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f89c 	bl	800307e <I2C_WaitOnTXISFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e02c      	b.n	8002faa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f56:	893b      	ldrh	r3, [r7, #8]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f60:	e015      	b.n	8002f8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	69b9      	ldr	r1, [r7, #24]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f882 	bl	800307e <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e012      	b.n	8002faa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f84:	893b      	ldrh	r3, [r7, #8]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2140      	movs	r1, #64	; 0x40
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f830 	bl	8002ffe <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	80002000 	.word	0x80002000

08002fb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d103      	bne.n	8002fd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d007      	beq.n	8002ff4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	619a      	str	r2, [r3, #24]
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800300e:	e022      	b.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d01e      	beq.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003018:	f7fe ff1c 	bl	8001e54 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d302      	bcc.n	800302e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d113      	bne.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	429a      	cmp	r2, r3
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	429a      	cmp	r2, r3
 8003072:	d0cd      	beq.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800308a:	e02c      	b.n	80030e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f871 	bl	8003178 <I2C_IsErrorOccurred>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e02a      	b.n	80030f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d01e      	beq.n	80030e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	f7fe fed4 	bl	8001e54 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d113      	bne.n	80030e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e007      	b.n	80030f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d1cb      	bne.n	800308c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310a:	e028      	b.n	800315e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f831 	bl	8003178 <I2C_IsErrorOccurred>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e026      	b.n	800316e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003120:	f7fe fe98 	bl	8001e54 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	d302      	bcc.n	8003136 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d113      	bne.n	800315e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e007      	b.n	800316e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b20      	cmp	r3, #32
 800316a:	d1cf      	bne.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d075      	beq.n	8003290 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2210      	movs	r2, #16
 80031aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031ac:	e056      	b.n	800325c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d052      	beq.n	800325c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7fe fe4d 	bl	8001e54 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <I2C_IsErrorOccurred+0x54>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d147      	bne.n	800325c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ee:	d12e      	bne.n	800324e <I2C_IsErrorOccurred+0xd6>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f6:	d02a      	beq.n	800324e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d027      	beq.n	800324e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800320e:	f7fe fe21 	bl	8001e54 <HAL_GetTick>
 8003212:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003214:	e01b      	b.n	800324e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003216:	f7fe fe1d 	bl	8001e54 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b19      	cmp	r3, #25
 8003222:	d914      	bls.n	800324e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b20      	cmp	r3, #32
 800325a:	d1dc      	bne.n	8003216 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b20      	cmp	r3, #32
 8003268:	d003      	beq.n	8003272 <I2C_IsErrorOccurred+0xfa>
 800326a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800326e:	2b00      	cmp	r3, #0
 8003270:	d09d      	beq.n	80031ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003276:	2b00      	cmp	r3, #0
 8003278:	d103      	bne.n	8003282 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2220      	movs	r2, #32
 8003280:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	f043 0308 	orr.w	r3, r3, #8
 80032ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01c      	beq.n	8003340 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7ff fe56 	bl	8002fb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <I2C_IsErrorOccurred+0x1d4>)
 8003318:	400b      	ands	r3, r1
 800331a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003344:	4618      	mov	r0, r3
 8003346:	3728      	adds	r7, #40	; 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	fe00e800 	.word	0xfe00e800

08003350 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	4613      	mov	r3, r2
 8003360:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003368:	7a7b      	ldrb	r3, [r7, #9]
 800336a:	041b      	lsls	r3, r3, #16
 800336c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003370:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	4313      	orrs	r3, r2
 800337a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800337e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	0d5b      	lsrs	r3, r3, #21
 800338a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <I2C_TransferConfig+0x5c>)
 8003390:	430b      	orrs	r3, r1
 8003392:	43db      	mvns	r3, r3
 8003394:	ea02 0103 	and.w	r1, r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	03ff63ff 	.word	0x03ff63ff

080033b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d138      	bne.n	8003438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e032      	b.n	800343a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	; 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6819      	ldr	r1, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	d139      	bne.n	80034ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003464:	2302      	movs	r3, #2
 8003466:	e033      	b.n	80034d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003496:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034dc:	b08f      	sub	sp, #60	; 0x3c
 80034de:	af0a      	add	r7, sp, #40	; 0x28
 80034e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e116      	b.n	800371a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fe f8b8 	bl	800167c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2203      	movs	r2, #3
 8003510:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f002 fb30 	bl	8005b90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	687e      	ldr	r6, [r7, #4]
 8003538:	466d      	mov	r5, sp
 800353a:	f106 0410 	add.w	r4, r6, #16
 800353e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800354a:	e885 0003 	stmia.w	r5, {r0, r1}
 800354e:	1d33      	adds	r3, r6, #4
 8003550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003552:	6838      	ldr	r0, [r7, #0]
 8003554:	f002 faf0 	bl	8005b38 <USB_CoreInit>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0d7      	b.n	800371a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f002 fb1d 	bl	8005bb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e04a      	b.n	8003612 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	333d      	adds	r3, #61	; 0x3d
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	333c      	adds	r3, #60	; 0x3c
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	b298      	uxth	r0, r3
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3344      	adds	r3, #68	; 0x44
 80035b8:	4602      	mov	r2, r0
 80035ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3340      	adds	r3, #64	; 0x40
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3348      	adds	r3, #72	; 0x48
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334c      	adds	r3, #76	; 0x4c
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3354      	adds	r3, #84	; 0x54
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3af      	bcc.n	800357c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e044      	b.n	80036ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3301      	adds	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3b5      	bcc.n	8003622 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	687e      	ldr	r6, [r7, #4]
 80036be:	466d      	mov	r5, sp
 80036c0:	f106 0410 	add.w	r4, r6, #16
 80036c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036d4:	1d33      	adds	r3, r6, #4
 80036d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d8:	6838      	ldr	r0, [r7, #0]
 80036da:	f002 fab5 	bl	8005c48 <USB_DevInit>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e014      	b.n	800371a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2b01      	cmp	r3, #1
 8003706:	d102      	bne.n	800370e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f80a 	bl	8003722 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f002 fc60 	bl	8005fd8 <USB_DevDisconnect>

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003722 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	f043 0303 	orr.w	r3, r3, #3
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <HAL_PWR_EnableBkUpAccess+0x18>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a03      	ldr	r2, [pc, #12]	; (8003780 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40007000 	.word	0x40007000

08003784 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_PWREx_GetVoltageRange+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr
 8003798:	40007000 	.word	0x40007000

0800379c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037aa:	d130      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ac:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d038      	beq.n	800382c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80037c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037ca:	4b1c      	ldr	r3, [pc, #112]	; (800383c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2232      	movs	r2, #50	; 0x32
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0c9b      	lsrs	r3, r3, #18
 80037dc:	3301      	adds	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e0:	e002      	b.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f4:	d102      	bne.n	80037fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f2      	bne.n	80037e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003808:	d110      	bne.n	800382c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e00f      	b.n	800382e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381a:	d007      	beq.n	800382c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8003826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800382a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	40007000 	.word	0x40007000
 800383c:	20000000 	.word	0x20000000
 8003840:	431bde83 	.word	0x431bde83

08003844 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <HAL_PWREx_EnableVddUSB+0x18>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a03      	ldr	r2, [pc, #12]	; (800385c <HAL_PWREx_EnableVddUSB+0x18>)
 800384e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003852:	6053      	str	r3, [r2, #4]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	40007000 	.word	0x40007000

08003860 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7fe faf4 	bl	8001e54 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e063      	b.n	8003940 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fd fdc9 	bl	8001424 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003892:	f241 3188 	movw	r1, #5000	; 0x1388
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f858 	bl	800394c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	021a      	lsls	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	2120      	movs	r1, #32
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f84f 	bl	8003966 <QSPI_WaitFlagStateUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d131      	bne.n	8003936 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038dc:	f023 0310 	bic.w	r3, r3, #16
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6852      	ldr	r2, [r2, #4]
 80038e4:	0611      	lsls	r1, r2, #24
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_QSPI_Init+0xe8>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6912      	ldr	r2, [r2, #16]
 8003902:	0411      	lsls	r1, r2, #16
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6952      	ldr	r2, [r2, #20]
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6992      	ldr	r2, [r2, #24]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800393e:	7afb      	ldrb	r3, [r7, #11]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	ffe0f8fe 	.word	0xffe0f8fe

0800394c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	4613      	mov	r3, r2
 8003974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003976:	e01a      	b.n	80039ae <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d016      	beq.n	80039ae <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003980:	f7fe fa68 	bl	8001e54 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2204      	movs	r2, #4
 800399a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e00e      	b.n	80039cc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d1d6      	bne.n	8003978 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e3ca      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f0:	4b94      	ldr	r3, [pc, #592]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80e4 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_RCC_OscConfig+0x4a>
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	f040 808b 	bne.w	8003b2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f040 8087 	bne.w	8003b2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a1e:	4b89      	ldr	r3, [pc, #548]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_RCC_OscConfig+0x62>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e3a2      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1a      	ldr	r2, [r3, #32]
 8003a3a:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_RCC_OscConfig+0x7c>
 8003a46:	4b7f      	ldr	r3, [pc, #508]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a4e:	e005      	b.n	8003a5c <HAL_RCC_OscConfig+0x88>
 8003a50:	4b7c      	ldr	r3, [pc, #496]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d223      	bcs.n	8003aa8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fd51 	bl	800450c <RCC_SetFlashLatencyFromMSIRange>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e383      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a74:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a72      	ldr	r2, [pc, #456]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f043 0308 	orr.w	r3, r3, #8
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	496d      	ldr	r1, [pc, #436]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a92:	4b6c      	ldr	r3, [pc, #432]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	4968      	ldr	r1, [pc, #416]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
 8003aa6:	e025      	b.n	8003af4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa8:	4b66      	ldr	r3, [pc, #408]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a65      	ldr	r2, [pc, #404]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003aae:	f043 0308 	orr.w	r3, r3, #8
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4960      	ldr	r1, [pc, #384]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ac6:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	495b      	ldr	r1, [pc, #364]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fd11 	bl	800450c <RCC_SetFlashLatencyFromMSIRange>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e343      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003af4:	f000 fc4a 	bl	800438c <HAL_RCC_GetSysClockFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b52      	ldr	r3, [pc, #328]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	4950      	ldr	r1, [pc, #320]	; (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b10:	4a4e      	ldr	r2, [pc, #312]	; (8003c4c <HAL_RCC_OscConfig+0x278>)
 8003b12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b14:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe f94d 	bl	8001db8 <HAL_InitTick>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d052      	beq.n	8003bce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	e327      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d032      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b34:	4b43      	ldr	r3, [pc, #268]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a42      	ldr	r2, [pc, #264]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b40:	f7fe f988 	bl	8001e54 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b48:	f7fe f984 	bl	8001e54 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e310      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b5a:	4b3a      	ldr	r3, [pc, #232]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a36      	ldr	r2, [pc, #216]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	f043 0308 	orr.w	r3, r3, #8
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4931      	ldr	r1, [pc, #196]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	492c      	ldr	r1, [pc, #176]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
 8003b98:	e01a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a29      	ldr	r2, [pc, #164]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ba6:	f7fe f955 	bl	8001e54 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bae:	f7fe f951 	bl	8001e54 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e2dd      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bc0:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0x1da>
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d074      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d005      	beq.n	8003bee <HAL_RCC_OscConfig+0x21a>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d10e      	bne.n	8003c06 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d10b      	bne.n	8003c06 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d064      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x2f0>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d160      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e2ba      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0e:	d106      	bne.n	8003c1e <HAL_RCC_OscConfig+0x24a>
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	e026      	b.n	8003c6c <HAL_RCC_OscConfig+0x298>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c26:	d115      	bne.n	8003c54 <HAL_RCC_OscConfig+0x280>
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a02      	ldr	r2, [pc, #8]	; (8003c44 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e014      	b.n	8003c6c <HAL_RCC_OscConfig+0x298>
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	08006a20 	.word	0x08006a20
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	20000014 	.word	0x20000014
 8003c54:	4ba0      	ldr	r3, [pc, #640]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a9f      	ldr	r2, [pc, #636]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b9d      	ldr	r3, [pc, #628]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a9c      	ldr	r2, [pc, #624]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe f8ee 	bl	8001e54 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fe f8ea 	bl	8001e54 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e276      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c8e:	4b92      	ldr	r3, [pc, #584]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x2a8>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fe f8da 	bl	8001e54 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fe f8d6 	bl	8001e54 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e262      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cb6:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x2d0>
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d060      	beq.n	8003d94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x310>
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b0c      	cmp	r3, #12
 8003cdc:	d119      	bne.n	8003d12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d116      	bne.n	8003d12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce4:	4b7c      	ldr	r3, [pc, #496]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_OscConfig+0x328>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e23f      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfc:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	4973      	ldr	r1, [pc, #460]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d10:	e040      	b.n	8003d94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d023      	beq.n	8003d62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1a:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6e      	ldr	r2, [pc, #440]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe f895 	bl	8001e54 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fe f891 	bl	8001e54 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e21d      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d40:	4b65      	ldr	r3, [pc, #404]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b62      	ldr	r3, [pc, #392]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	495f      	ldr	r1, [pc, #380]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
 8003d60:	e018      	b.n	8003d94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b5d      	ldr	r3, [pc, #372]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a5c      	ldr	r2, [pc, #368]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fe f871 	bl	8001e54 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fe f86d 	bl	8001e54 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1f9      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d88:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d03c      	beq.n	8003e1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da8:	4b4b      	ldr	r3, [pc, #300]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dae:	4a4a      	ldr	r2, [pc, #296]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fe f84c 	bl	8001e54 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fe f848 	bl	8001e54 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1d4      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ef      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x3ec>
 8003de0:	e01b      	b.n	8003e1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de8:	4a3b      	ldr	r2, [pc, #236]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df2:	f7fe f82f 	bl	8001e54 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fe f82b 	bl	8001e54 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e1b7      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0c:	4b32      	ldr	r3, [pc, #200]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ef      	bne.n	8003dfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80a6 	beq.w	8003f74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	6593      	str	r3, [r2, #88]	; 0x58
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e50:	2301      	movs	r3, #1
 8003e52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <HAL_RCC_OscConfig+0x508>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d118      	bne.n	8003e92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e60:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <HAL_RCC_OscConfig+0x508>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_RCC_OscConfig+0x508>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fff2 	bl	8001e54 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fd ffee 	bl	8001e54 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e17a      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_RCC_OscConfig+0x508>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_RCC_OscConfig+0x4d8>
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eaa:	e029      	b.n	8003f00 <HAL_RCC_OscConfig+0x52c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d115      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x50c>
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	4a03      	ldr	r2, [pc, #12]	; (8003ed8 <HAL_RCC_OscConfig+0x504>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed4:	e014      	b.n	8003f00 <HAL_RCC_OscConfig+0x52c>
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	4b9c      	ldr	r3, [pc, #624]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	4a9b      	ldr	r2, [pc, #620]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ef0:	4b98      	ldr	r3, [pc, #608]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	4a97      	ldr	r2, [pc, #604]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d016      	beq.n	8003f36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd ffa4 	bl	8001e54 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd ffa0 	bl	8001e54 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e12a      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f26:	4b8b      	ldr	r3, [pc, #556]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ed      	beq.n	8003f10 <HAL_RCC_OscConfig+0x53c>
 8003f34:	e015      	b.n	8003f62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f36:	f7fd ff8d 	bl	8001e54 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fd ff89 	bl	8001e54 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e113      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f54:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ed      	bne.n	8003f3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f62:	7ffb      	ldrb	r3, [r7, #31]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f68:	4b7a      	ldr	r3, [pc, #488]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	4a79      	ldr	r2, [pc, #484]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80fe 	beq.w	800417a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	f040 80d0 	bne.w	8004128 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f88:	4b72      	ldr	r3, [pc, #456]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0203 	and.w	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d130      	bne.n	8003ffe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d127      	bne.n	8003ffe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11f      	bne.n	8003ffe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fc8:	2a07      	cmp	r2, #7
 8003fca:	bf14      	ite	ne
 8003fcc:	2201      	movne	r2, #1
 8003fce:	2200      	moveq	r2, #0
 8003fd0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d113      	bne.n	8003ffe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	085b      	lsrs	r3, r3, #1
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d109      	bne.n	8003ffe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d06e      	beq.n	80040dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d069      	beq.n	80040d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004004:	4b53      	ldr	r3, [pc, #332]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0ad      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004020:	4b4c      	ldr	r3, [pc, #304]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a4b      	ldr	r2, [pc, #300]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800402c:	f7fd ff12 	bl	8001e54 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd ff0e 	bl	8001e54 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e09a      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004046:	4b43      	ldr	r3, [pc, #268]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004052:	4b40      	ldr	r3, [pc, #256]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	4b40      	ldr	r3, [pc, #256]	; (8004158 <HAL_RCC_OscConfig+0x784>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004062:	3a01      	subs	r2, #1
 8004064:	0112      	lsls	r2, r2, #4
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800406c:	0212      	lsls	r2, r2, #8
 800406e:	4311      	orrs	r1, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004074:	0852      	lsrs	r2, r2, #1
 8004076:	3a01      	subs	r2, #1
 8004078:	0552      	lsls	r2, r2, #21
 800407a:	4311      	orrs	r1, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004080:	0852      	lsrs	r2, r2, #1
 8004082:	3a01      	subs	r2, #1
 8004084:	0652      	lsls	r2, r2, #25
 8004086:	4311      	orrs	r1, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800408c:	0912      	lsrs	r2, r2, #4
 800408e:	0452      	lsls	r2, r2, #17
 8004090:	430a      	orrs	r2, r1
 8004092:	4930      	ldr	r1, [pc, #192]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004094:	4313      	orrs	r3, r2
 8004096:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a2a      	ldr	r2, [pc, #168]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 80040aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040b0:	f7fd fed0 	bl	8001e54 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fd fecc 	bl	8001e54 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e058      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	4b22      	ldr	r3, [pc, #136]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040d6:	e050      	b.n	800417a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e04f      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d148      	bne.n	800417a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040e8:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 80040ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f4:	4b17      	ldr	r3, [pc, #92]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a16      	ldr	r2, [pc, #88]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 80040fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004100:	f7fd fea8 	bl	8001e54 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fd fea4 	bl	8001e54 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e030      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x734>
 8004126:	e028      	b.n	800417a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b0c      	cmp	r3, #12
 800412c:	d023      	beq.n	8004176 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <HAL_RCC_OscConfig+0x780>)
 8004134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fd fe8b 	bl	8001e54 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004140:	e00c      	b.n	800415c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004142:	f7fd fe87 	bl	8001e54 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d905      	bls.n	800415c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e013      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
 8004154:	40021000 	.word	0x40021000
 8004158:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCC_OscConfig+0x7b0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ec      	bne.n	8004142 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_OscConfig+0x7b0>)
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	4905      	ldr	r1, [pc, #20]	; (8004184 <HAL_RCC_OscConfig+0x7b0>)
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x7b4>)
 8004170:	4013      	ands	r3, r2
 8004172:	60cb      	str	r3, [r1, #12]
 8004174:	e001      	b.n	800417a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	feeefffc 	.word	0xfeeefffc

0800418c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0e7      	b.n	8004370 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b75      	ldr	r3, [pc, #468]	; (8004378 <HAL_RCC_ClockConfig+0x1ec>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d910      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b72      	ldr	r3, [pc, #456]	; (8004378 <HAL_RCC_ClockConfig+0x1ec>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 0207 	bic.w	r2, r3, #7
 80041b6:	4970      	ldr	r1, [pc, #448]	; (8004378 <HAL_RCC_ClockConfig+0x1ec>)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b6e      	ldr	r3, [pc, #440]	; (8004378 <HAL_RCC_ClockConfig+0x1ec>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0cf      	b.n	8004370 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	4b66      	ldr	r3, [pc, #408]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d908      	bls.n	80041fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4960      	ldr	r1, [pc, #384]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d04c      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b03      	cmp	r3, #3
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004212:	4b5a      	ldr	r3, [pc, #360]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d121      	bne.n	8004262 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0a6      	b.n	8004370 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422a:	4b54      	ldr	r3, [pc, #336]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d115      	bne.n	8004262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e09a      	b.n	8004370 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004242:	4b4e      	ldr	r3, [pc, #312]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e08e      	b.n	8004370 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e086      	b.n	8004370 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004262:	4b46      	ldr	r3, [pc, #280]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0203 	bic.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4943      	ldr	r1, [pc, #268]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004274:	f7fd fdee 	bl	8001e54 <HAL_GetTick>
 8004278:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	e00a      	b.n	8004292 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800427c:	f7fd fdea 	bl	8001e54 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	; 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e06e      	b.n	8004370 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004292:	4b3a      	ldr	r3, [pc, #232]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 020c 	and.w	r2, r3, #12
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d1eb      	bne.n	800427c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d010      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042bc:	429a      	cmp	r2, r3
 80042be:	d208      	bcs.n	80042d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c0:	4b2e      	ldr	r3, [pc, #184]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	492b      	ldr	r1, [pc, #172]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCC_ClockConfig+0x1ec>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d210      	bcs.n	8004302 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_ClockConfig+0x1ec>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f023 0207 	bic.w	r2, r3, #7
 80042e8:	4923      	ldr	r1, [pc, #140]	; (8004378 <HAL_RCC_ClockConfig+0x1ec>)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f0:	4b21      	ldr	r3, [pc, #132]	; (8004378 <HAL_RCC_ClockConfig+0x1ec>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d001      	beq.n	8004302 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e036      	b.n	8004370 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4918      	ldr	r1, [pc, #96]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 800431c:	4313      	orrs	r3, r2
 800431e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d009      	beq.n	8004340 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4910      	ldr	r1, [pc, #64]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004340:	f000 f824 	bl	800438c <HAL_RCC_GetSysClockFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <HAL_RCC_ClockConfig+0x1f0>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	490b      	ldr	r1, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x1f4>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_RCC_ClockConfig+0x1f8>)
 800435e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1fc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7fd fd27 	bl	8001db8 <HAL_InitTick>
 800436a:	4603      	mov	r3, r0
 800436c:	72fb      	strb	r3, [r7, #11]

  return status;
 800436e:	7afb      	ldrb	r3, [r7, #11]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40022000 	.word	0x40022000
 800437c:	40021000 	.word	0x40021000
 8004380:	08006a20 	.word	0x08006a20
 8004384:	20000000 	.word	0x20000000
 8004388:	20000014 	.word	0x20000014

0800438c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439a:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043a4:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x34>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d121      	bne.n	80043fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d11e      	bne.n	80043fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043cc:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	e005      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043dc:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10d      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d102      	bne.n	800440a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004404:	4b24      	ldr	r3, [pc, #144]	; (8004498 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e004      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d101      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004410:	4b22      	ldr	r3, [pc, #136]	; (800449c <HAL_RCC_GetSysClockFreq+0x110>)
 8004412:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b0c      	cmp	r3, #12
 8004418:	d134      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800441a:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d003      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0xa6>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d003      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0xac>
 8004430:	e005      	b.n	800443e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004432:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004434:	617b      	str	r3, [r7, #20]
      break;
 8004436:	e005      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004438:	4b18      	ldr	r3, [pc, #96]	; (800449c <HAL_RCC_GetSysClockFreq+0x110>)
 800443a:	617b      	str	r3, [r7, #20]
      break;
 800443c:	e002      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	617b      	str	r3, [r7, #20]
      break;
 8004442:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004444:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	3301      	adds	r3, #1
 8004450:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	fb03 f202 	mul.w	r2, r3, r2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_RCC_GetSysClockFreq+0x104>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	0e5b      	lsrs	r3, r3, #25
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	3301      	adds	r3, #1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004484:	69bb      	ldr	r3, [r7, #24]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3724      	adds	r7, #36	; 0x24
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	40021000 	.word	0x40021000
 8004494:	08006a38 	.word	0x08006a38
 8004498:	00f42400 	.word	0x00f42400
 800449c:	007a1200 	.word	0x007a1200

080044a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a4:	4b02      	ldr	r3, [pc, #8]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	20000000 	.word	0x20000000

080044b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044b8:	f7ff fff2 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4904      	ldr	r1, [pc, #16]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	08006a30 	.word	0x08006a30

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044e4:	f7ff ffdc 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0adb      	lsrs	r3, r3, #11
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4904      	ldr	r1, [pc, #16]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	08006a30 	.word	0x08006a30

0800450c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004518:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004524:	f7ff f92e 	bl	8003784 <HAL_PWREx_GetVoltageRange>
 8004528:	6178      	str	r0, [r7, #20]
 800452a:	e014      	b.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800452c:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004544:	f7ff f91e 	bl	8003784 <HAL_PWREx_GetVoltageRange>
 8004548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800454a:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004554:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455c:	d10b      	bne.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d919      	bls.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2ba0      	cmp	r3, #160	; 0xa0
 8004568:	d902      	bls.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800456a:	2302      	movs	r3, #2
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e013      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004570:	2301      	movs	r3, #1
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e010      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d902      	bls.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800457c:	2303      	movs	r3, #3
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e00a      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b80      	cmp	r3, #128	; 0x80
 8004586:	d102      	bne.n	800458e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004588:	2302      	movs	r3, #2
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	e004      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b70      	cmp	r3, #112	; 0x70
 8004592:	d101      	bne.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004594:	2301      	movs	r3, #1
 8004596:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 0207 	bic.w	r2, r3, #7
 80045a0:	4909      	ldr	r1, [pc, #36]	; (80045c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40022000 	.word	0x40022000

080045cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045d4:	2300      	movs	r3, #0
 80045d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045d8:	2300      	movs	r3, #0
 80045da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d041      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045f0:	d02a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045f6:	d824      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045fc:	d008      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004602:	d81e      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460c:	d010      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800460e:	e018      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004610:	4b86      	ldr	r3, [pc, #536]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a85      	ldr	r2, [pc, #532]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800461c:	e015      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fac9 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800462e:	e00c      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3320      	adds	r3, #32
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fbb4 	bl	8004da4 <RCCEx_PLLSAI2_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004640:	e003      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	74fb      	strb	r3, [r7, #19]
      break;
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800464a:	7cfb      	ldrb	r3, [r7, #19]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004650:	4b76      	ldr	r3, [pc, #472]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800465e:	4973      	ldr	r1, [pc, #460]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004666:	e001      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d041      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800467c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004680:	d02a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004682:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004686:	d824      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800468e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004692:	d81e      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800469c:	d010      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800469e:	e018      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046a0:	4b62      	ldr	r3, [pc, #392]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a61      	ldr	r2, [pc, #388]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ac:	e015      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fa81 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046be:	e00c      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3320      	adds	r3, #32
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fb6c 	bl	8004da4 <RCCEx_PLLSAI2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046d0:	e003      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	74fb      	strb	r3, [r7, #19]
      break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046e0:	4b52      	ldr	r3, [pc, #328]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ee:	494f      	ldr	r1, [pc, #316]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046f6:	e001      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80a0 	beq.w	800484a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800470e:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4a40      	ldr	r2, [pc, #256]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	6593      	str	r3, [r2, #88]	; 0x58
 8004730:	4b3e      	ldr	r3, [pc, #248]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473c:	2301      	movs	r3, #1
 800473e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004740:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3a      	ldr	r2, [pc, #232]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800474c:	f7fd fb82 	bl	8001e54 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004752:	e009      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fd fb7e 	bl	8001e54 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d902      	bls.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	74fb      	strb	r3, [r7, #19]
        break;
 8004766:	e005      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004768:	4b31      	ldr	r3, [pc, #196]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ef      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d15c      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800477a:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004784:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01f      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	429a      	cmp	r2, r3
 8004796:	d019      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004798:	4b24      	ldr	r3, [pc, #144]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047a4:	4b21      	ldr	r3, [pc, #132]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	4a20      	ldr	r2, [pc, #128]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047c4:	4a19      	ldr	r2, [pc, #100]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fd fb3d 	bl	8001e54 <HAL_GetTick>
 80047da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047dc:	e00b      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fd fb39 	bl	8001e54 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d902      	bls.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	74fb      	strb	r3, [r7, #19]
            break;
 80047f4:	e006      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ec      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481a:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004822:	e009      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	74bb      	strb	r3, [r7, #18]
 8004828:	e006      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000
 8004830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004838:	7c7b      	ldrb	r3, [r7, #17]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d105      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483e:	4b9e      	ldr	r3, [pc, #632]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	4a9d      	ldr	r2, [pc, #628]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004848:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004856:	4b98      	ldr	r3, [pc, #608]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f023 0203 	bic.w	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	4994      	ldr	r1, [pc, #592]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004878:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	f023 020c 	bic.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004886:	498c      	ldr	r1, [pc, #560]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800489a:	4b87      	ldr	r3, [pc, #540]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	4983      	ldr	r1, [pc, #524]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048bc:	4b7e      	ldr	r3, [pc, #504]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	497b      	ldr	r1, [pc, #492]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048de:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ec:	4972      	ldr	r1, [pc, #456]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004900:	4b6d      	ldr	r3, [pc, #436]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490e:	496a      	ldr	r1, [pc, #424]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004922:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	4961      	ldr	r1, [pc, #388]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004944:	4b5c      	ldr	r3, [pc, #368]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004952:	4959      	ldr	r1, [pc, #356]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004966:	4b54      	ldr	r3, [pc, #336]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004974:	4950      	ldr	r1, [pc, #320]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004988:	4b4b      	ldr	r3, [pc, #300]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	4948      	ldr	r1, [pc, #288]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049aa:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	493f      	ldr	r1, [pc, #252]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d028      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049cc:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049da:	4937      	ldr	r1, [pc, #220]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ea:	d106      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ec:	4b32      	ldr	r3, [pc, #200]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a31      	ldr	r2, [pc, #196]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f6:	60d3      	str	r3, [r2, #12]
 80049f8:	e011      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a02:	d10c      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f8d6 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d028      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a2a:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	491f      	ldr	r1, [pc, #124]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a54:	60d3      	str	r3, [r2, #12]
 8004a56:	e011      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f8a7 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02b      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a96:	4908      	ldr	r1, [pc, #32]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa6:	d109      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a02      	ldr	r2, [pc, #8]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
 8004ab4:	e014      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2101      	movs	r1, #1
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f875 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d02f      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aec:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afa:	4928      	ldr	r1, [pc, #160]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0a:	d10d      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	2102      	movs	r1, #2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 f852 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1c:	7cfb      	ldrb	r3, [r7, #19]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d014      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b22:	7cfb      	ldrb	r3, [r7, #19]
 8004b24:	74bb      	strb	r3, [r7, #18]
 8004b26:	e011      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3320      	adds	r3, #32
 8004b36:	2102      	movs	r1, #2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f933 	bl	8004da4 <RCCEx_PLLSAI2_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b58:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b66:	490d      	ldr	r1, [pc, #52]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b8a:	4904      	ldr	r1, [pc, #16]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b92:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000

08004ba0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a03      	ldr	r2, [pc, #12]	; (8004bb8 <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 8004baa:	f043 0304 	orr.w	r3, r3, #4
 8004bae:	6013      	str	r3, [r2, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	40021000 	.word	0x40021000

08004bbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bca:	4b75      	ldr	r3, [pc, #468]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bd6:	4b72      	ldr	r3, [pc, #456]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0203 	and.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d10d      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bee:	4b6c      	ldr	r3, [pc, #432]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d047      	beq.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	e044      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d018      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0x86>
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d825      	bhi.n	8004c60 <RCCEx_PLLSAI1_Config+0xa4>
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d002      	beq.n	8004c1e <RCCEx_PLLSAI1_Config+0x62>
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d009      	beq.n	8004c30 <RCCEx_PLLSAI1_Config+0x74>
 8004c1c:	e020      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c1e:	4b60      	ldr	r3, [pc, #384]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d11d      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2e:	e01a      	b.n	8004c66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c30:	4b5b      	ldr	r3, [pc, #364]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d116      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c40:	e013      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c42:	4b57      	ldr	r3, [pc, #348]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10f      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c4e:	4b54      	ldr	r3, [pc, #336]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c5e:	e006      	b.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      break;
 8004c64:	e004      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c66:	bf00      	nop
 8004c68:	e002      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10d      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c76:	4b4a      	ldr	r3, [pc, #296]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	4944      	ldr	r1, [pc, #272]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d17d      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c98:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a40      	ldr	r2, [pc, #256]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fd f8d6 	bl	8001e54 <HAL_GetTick>
 8004ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004caa:	e009      	b.n	8004cc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cac:	f7fd f8d2 	bl	8001e54 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d902      	bls.n	8004cc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cbe:	e005      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cc0:	4b37      	ldr	r3, [pc, #220]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ef      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d160      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d111      	bne.n	8004cfc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cd8:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6892      	ldr	r2, [r2, #8]
 8004ce8:	0211      	lsls	r1, r2, #8
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68d2      	ldr	r2, [r2, #12]
 8004cee:	0912      	lsrs	r2, r2, #4
 8004cf0:	0452      	lsls	r2, r2, #17
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	492a      	ldr	r1, [pc, #168]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	610b      	str	r3, [r1, #16]
 8004cfa:	e027      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d112      	bne.n	8004d28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d02:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6892      	ldr	r2, [r2, #8]
 8004d12:	0211      	lsls	r1, r2, #8
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6912      	ldr	r2, [r2, #16]
 8004d18:	0852      	lsrs	r2, r2, #1
 8004d1a:	3a01      	subs	r2, #1
 8004d1c:	0552      	lsls	r2, r2, #21
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	491f      	ldr	r1, [pc, #124]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	610b      	str	r3, [r1, #16]
 8004d26:	e011      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6892      	ldr	r2, [r2, #8]
 8004d38:	0211      	lsls	r1, r2, #8
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6952      	ldr	r2, [r2, #20]
 8004d3e:	0852      	lsrs	r2, r2, #1
 8004d40:	3a01      	subs	r2, #1
 8004d42:	0652      	lsls	r2, r2, #25
 8004d44:	430a      	orrs	r2, r1
 8004d46:	4916      	ldr	r1, [pc, #88]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d4c:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fd f87c 	bl	8001e54 <HAL_GetTick>
 8004d5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d5e:	e009      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d60:	f7fd f878 	bl	8001e54 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d902      	bls.n	8004d74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	73fb      	strb	r3, [r7, #15]
          break;
 8004d72:	e005      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ef      	beq.n	8004d60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	4904      	ldr	r1, [pc, #16]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000

08004da4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004db2:	4b6a      	ldr	r3, [pc, #424]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d018      	beq.n	8004df0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dbe:	4b67      	ldr	r3, [pc, #412]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0203 	and.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d10d      	bne.n	8004dea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dd6:	4b61      	ldr	r3, [pc, #388]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
       ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d047      	beq.n	8004e7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
 8004dee:	e044      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d018      	beq.n	8004e2a <RCCEx_PLLSAI2_Config+0x86>
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d825      	bhi.n	8004e48 <RCCEx_PLLSAI2_Config+0xa4>
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d002      	beq.n	8004e06 <RCCEx_PLLSAI2_Config+0x62>
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d009      	beq.n	8004e18 <RCCEx_PLLSAI2_Config+0x74>
 8004e04:	e020      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e06:	4b55      	ldr	r3, [pc, #340]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d11d      	bne.n	8004e4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e16:	e01a      	b.n	8004e4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e18:	4b50      	ldr	r3, [pc, #320]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d116      	bne.n	8004e52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e28:	e013      	b.n	8004e52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e2a:	4b4c      	ldr	r3, [pc, #304]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10f      	bne.n	8004e56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e36:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e46:	e006      	b.n	8004e56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4c:	e004      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10d      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6819      	ldr	r1, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	430b      	orrs	r3, r1
 8004e74:	4939      	ldr	r1, [pc, #228]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d167      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e80:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a35      	ldr	r2, [pc, #212]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fc ffe2 	bl	8001e54 <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e92:	e009      	b.n	8004ea8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e94:	f7fc ffde 	bl	8001e54 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d902      	bls.n	8004ea8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ea6:	e005      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ea8:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ef      	bne.n	8004e94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d14a      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d111      	bne.n	8004ee4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ec0:	4b26      	ldr	r3, [pc, #152]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6892      	ldr	r2, [r2, #8]
 8004ed0:	0211      	lsls	r1, r2, #8
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68d2      	ldr	r2, [r2, #12]
 8004ed6:	0912      	lsrs	r2, r2, #4
 8004ed8:	0452      	lsls	r2, r2, #17
 8004eda:	430a      	orrs	r2, r1
 8004edc:	491f      	ldr	r1, [pc, #124]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	614b      	str	r3, [r1, #20]
 8004ee2:	e011      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6892      	ldr	r2, [r2, #8]
 8004ef4:	0211      	lsls	r1, r2, #8
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6912      	ldr	r2, [r2, #16]
 8004efa:	0852      	lsrs	r2, r2, #1
 8004efc:	3a01      	subs	r2, #1
 8004efe:	0652      	lsls	r2, r2, #25
 8004f00:	430a      	orrs	r2, r1
 8004f02:	4916      	ldr	r1, [pc, #88]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fc ff9e 	bl	8001e54 <HAL_GetTick>
 8004f18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f1a:	e009      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f1c:	f7fc ff9a 	bl	8001e54 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d902      	bls.n	8004f30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f2e:	e005      	b.n	8004f3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ef      	beq.n	8004f1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	4904      	ldr	r1, [pc, #16]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000

08004f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e095      	b.n	800509e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d108      	bne.n	8004f8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f82:	d009      	beq.n	8004f98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	61da      	str	r2, [r3, #28]
 8004f8a:	e005      	b.n	8004f98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc fa7a 	bl	80014ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fd8:	d902      	bls.n	8004fe0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e002      	b.n	8004fe6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004fee:	d007      	beq.n	8005000 <HAL_SPI_Init+0xa0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ff8:	d002      	beq.n	8005000 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	ea42 0103 	orr.w	r1, r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	f003 0204 	and.w	r2, r3, #4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800507c:	ea42 0103 	orr.w	r1, r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e040      	b.n	800513a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fc fa33 	bl	8001534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2224      	movs	r2, #36	; 0x24
 80050d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f8c1 	bl	800526c <UART_SetConfig>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e022      	b.n	800513a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fb6d 	bl	80057dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005110:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005120:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fbf3 	bl	800591e <UART_CheckIdleState>
 8005138:	4603      	mov	r3, r0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b08a      	sub	sp, #40	; 0x28
 8005146:	af02      	add	r7, sp, #8
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005156:	2b20      	cmp	r3, #32
 8005158:	f040 8082 	bne.w	8005260 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_UART_Transmit+0x26>
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e07a      	b.n	8005262 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_UART_Transmit+0x38>
 8005176:	2302      	movs	r3, #2
 8005178:	e073      	b.n	8005262 <HAL_UART_Transmit+0x120>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2221      	movs	r2, #33	; 0x21
 800518e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005190:	f7fc fe60 	bl	8001e54 <HAL_GetTick>
 8005194:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	88fa      	ldrh	r2, [r7, #6]
 800519a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	88fa      	ldrh	r2, [r7, #6]
 80051a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	d108      	bne.n	80051c2 <HAL_UART_Transmit+0x80>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e003      	b.n	80051ca <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051d2:	e02d      	b.n	8005230 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2200      	movs	r2, #0
 80051dc:	2180      	movs	r1, #128	; 0x80
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fbe6 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e039      	b.n	8005262 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005200:	b292      	uxth	r2, r2
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	3302      	adds	r3, #2
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e008      	b.n	800521e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	781a      	ldrb	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	b292      	uxth	r2, r2
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	3301      	adds	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1cb      	bne.n	80051d4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2200      	movs	r2, #0
 8005244:	2140      	movs	r1, #64	; 0x40
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fbb2 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e005      	b.n	8005262 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e000      	b.n	8005262 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
  }
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800526c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005270:	b08a      	sub	sp, #40	; 0x28
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	431a      	orrs	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	4313      	orrs	r3, r2
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4ba4      	ldr	r3, [pc, #656]	; (800552c <UART_SetConfig+0x2c0>)
 800529c:	4013      	ands	r3, r2
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a99      	ldr	r2, [pc, #612]	; (8005530 <UART_SetConfig+0x2c4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	4313      	orrs	r3, r2
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e8:	430a      	orrs	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a90      	ldr	r2, [pc, #576]	; (8005534 <UART_SetConfig+0x2c8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d126      	bne.n	8005344 <UART_SetConfig+0xd8>
 80052f6:	4b90      	ldr	r3, [pc, #576]	; (8005538 <UART_SetConfig+0x2cc>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	2b03      	cmp	r3, #3
 8005302:	d81b      	bhi.n	800533c <UART_SetConfig+0xd0>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0xa0>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	0800531d 	.word	0x0800531d
 8005310:	0800532d 	.word	0x0800532d
 8005314:	08005325 	.word	0x08005325
 8005318:	08005335 	.word	0x08005335
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	e116      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005324:	2302      	movs	r3, #2
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e112      	b.n	8005552 <UART_SetConfig+0x2e6>
 800532c:	2304      	movs	r3, #4
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005332:	e10e      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005334:	2308      	movs	r3, #8
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533a:	e10a      	b.n	8005552 <UART_SetConfig+0x2e6>
 800533c:	2310      	movs	r3, #16
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005342:	e106      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a7c      	ldr	r2, [pc, #496]	; (800553c <UART_SetConfig+0x2d0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d138      	bne.n	80053c0 <UART_SetConfig+0x154>
 800534e:	4b7a      	ldr	r3, [pc, #488]	; (8005538 <UART_SetConfig+0x2cc>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b0c      	cmp	r3, #12
 800535a:	d82d      	bhi.n	80053b8 <UART_SetConfig+0x14c>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0xf8>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005399 	.word	0x08005399
 8005368:	080053b9 	.word	0x080053b9
 800536c:	080053b9 	.word	0x080053b9
 8005370:	080053b9 	.word	0x080053b9
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053b9 	.word	0x080053b9
 800537c:	080053b9 	.word	0x080053b9
 8005380:	080053b9 	.word	0x080053b9
 8005384:	080053a1 	.word	0x080053a1
 8005388:	080053b9 	.word	0x080053b9
 800538c:	080053b9 	.word	0x080053b9
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053b1 	.word	0x080053b1
 8005398:	2300      	movs	r3, #0
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539e:	e0d8      	b.n	8005552 <UART_SetConfig+0x2e6>
 80053a0:	2302      	movs	r3, #2
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a6:	e0d4      	b.n	8005552 <UART_SetConfig+0x2e6>
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ae:	e0d0      	b.n	8005552 <UART_SetConfig+0x2e6>
 80053b0:	2308      	movs	r3, #8
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e0cc      	b.n	8005552 <UART_SetConfig+0x2e6>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e0c8      	b.n	8005552 <UART_SetConfig+0x2e6>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a5e      	ldr	r2, [pc, #376]	; (8005540 <UART_SetConfig+0x2d4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d125      	bne.n	8005416 <UART_SetConfig+0x1aa>
 80053ca:	4b5b      	ldr	r3, [pc, #364]	; (8005538 <UART_SetConfig+0x2cc>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d016      	beq.n	8005406 <UART_SetConfig+0x19a>
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d818      	bhi.n	800540e <UART_SetConfig+0x1a2>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d00a      	beq.n	80053f6 <UART_SetConfig+0x18a>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d814      	bhi.n	800540e <UART_SetConfig+0x1a2>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <UART_SetConfig+0x182>
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d008      	beq.n	80053fe <UART_SetConfig+0x192>
 80053ec:	e00f      	b.n	800540e <UART_SetConfig+0x1a2>
 80053ee:	2300      	movs	r3, #0
 80053f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f4:	e0ad      	b.n	8005552 <UART_SetConfig+0x2e6>
 80053f6:	2302      	movs	r3, #2
 80053f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fc:	e0a9      	b.n	8005552 <UART_SetConfig+0x2e6>
 80053fe:	2304      	movs	r3, #4
 8005400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005404:	e0a5      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005406:	2308      	movs	r3, #8
 8005408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540c:	e0a1      	b.n	8005552 <UART_SetConfig+0x2e6>
 800540e:	2310      	movs	r3, #16
 8005410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005414:	e09d      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a4a      	ldr	r2, [pc, #296]	; (8005544 <UART_SetConfig+0x2d8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d125      	bne.n	800546c <UART_SetConfig+0x200>
 8005420:	4b45      	ldr	r3, [pc, #276]	; (8005538 <UART_SetConfig+0x2cc>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800542a:	2bc0      	cmp	r3, #192	; 0xc0
 800542c:	d016      	beq.n	800545c <UART_SetConfig+0x1f0>
 800542e:	2bc0      	cmp	r3, #192	; 0xc0
 8005430:	d818      	bhi.n	8005464 <UART_SetConfig+0x1f8>
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d00a      	beq.n	800544c <UART_SetConfig+0x1e0>
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d814      	bhi.n	8005464 <UART_SetConfig+0x1f8>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <UART_SetConfig+0x1d8>
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d008      	beq.n	8005454 <UART_SetConfig+0x1e8>
 8005442:	e00f      	b.n	8005464 <UART_SetConfig+0x1f8>
 8005444:	2300      	movs	r3, #0
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544a:	e082      	b.n	8005552 <UART_SetConfig+0x2e6>
 800544c:	2302      	movs	r3, #2
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e07e      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005454:	2304      	movs	r3, #4
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e07a      	b.n	8005552 <UART_SetConfig+0x2e6>
 800545c:	2308      	movs	r3, #8
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e076      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005464:	2310      	movs	r3, #16
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e072      	b.n	8005552 <UART_SetConfig+0x2e6>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a35      	ldr	r2, [pc, #212]	; (8005548 <UART_SetConfig+0x2dc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d12a      	bne.n	80054cc <UART_SetConfig+0x260>
 8005476:	4b30      	ldr	r3, [pc, #192]	; (8005538 <UART_SetConfig+0x2cc>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005484:	d01a      	beq.n	80054bc <UART_SetConfig+0x250>
 8005486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800548a:	d81b      	bhi.n	80054c4 <UART_SetConfig+0x258>
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d00c      	beq.n	80054ac <UART_SetConfig+0x240>
 8005492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005496:	d815      	bhi.n	80054c4 <UART_SetConfig+0x258>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <UART_SetConfig+0x238>
 800549c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a0:	d008      	beq.n	80054b4 <UART_SetConfig+0x248>
 80054a2:	e00f      	b.n	80054c4 <UART_SetConfig+0x258>
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e052      	b.n	8005552 <UART_SetConfig+0x2e6>
 80054ac:	2302      	movs	r3, #2
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e04e      	b.n	8005552 <UART_SetConfig+0x2e6>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ba:	e04a      	b.n	8005552 <UART_SetConfig+0x2e6>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e046      	b.n	8005552 <UART_SetConfig+0x2e6>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e042      	b.n	8005552 <UART_SetConfig+0x2e6>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a17      	ldr	r2, [pc, #92]	; (8005530 <UART_SetConfig+0x2c4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d13a      	bne.n	800554c <UART_SetConfig+0x2e0>
 80054d6:	4b18      	ldr	r3, [pc, #96]	; (8005538 <UART_SetConfig+0x2cc>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054e4:	d01a      	beq.n	800551c <UART_SetConfig+0x2b0>
 80054e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ea:	d81b      	bhi.n	8005524 <UART_SetConfig+0x2b8>
 80054ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f0:	d00c      	beq.n	800550c <UART_SetConfig+0x2a0>
 80054f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f6:	d815      	bhi.n	8005524 <UART_SetConfig+0x2b8>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <UART_SetConfig+0x298>
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d008      	beq.n	8005514 <UART_SetConfig+0x2a8>
 8005502:	e00f      	b.n	8005524 <UART_SetConfig+0x2b8>
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550a:	e022      	b.n	8005552 <UART_SetConfig+0x2e6>
 800550c:	2302      	movs	r3, #2
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005512:	e01e      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005514:	2304      	movs	r3, #4
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551a:	e01a      	b.n	8005552 <UART_SetConfig+0x2e6>
 800551c:	2308      	movs	r3, #8
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005522:	e016      	b.n	8005552 <UART_SetConfig+0x2e6>
 8005524:	2310      	movs	r3, #16
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552a:	e012      	b.n	8005552 <UART_SetConfig+0x2e6>
 800552c:	efff69f3 	.word	0xefff69f3
 8005530:	40008000 	.word	0x40008000
 8005534:	40013800 	.word	0x40013800
 8005538:	40021000 	.word	0x40021000
 800553c:	40004400 	.word	0x40004400
 8005540:	40004800 	.word	0x40004800
 8005544:	40004c00 	.word	0x40004c00
 8005548:	40005000 	.word	0x40005000
 800554c:	2310      	movs	r3, #16
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a9f      	ldr	r2, [pc, #636]	; (80057d4 <UART_SetConfig+0x568>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d17a      	bne.n	8005652 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800555c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005560:	2b08      	cmp	r3, #8
 8005562:	d824      	bhi.n	80055ae <UART_SetConfig+0x342>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <UART_SetConfig+0x300>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	08005591 	.word	0x08005591
 8005570:	080055af 	.word	0x080055af
 8005574:	08005599 	.word	0x08005599
 8005578:	080055af 	.word	0x080055af
 800557c:	0800559f 	.word	0x0800559f
 8005580:	080055af 	.word	0x080055af
 8005584:	080055af 	.word	0x080055af
 8005588:	080055af 	.word	0x080055af
 800558c:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005590:	f7fe ff90 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8005594:	61f8      	str	r0, [r7, #28]
        break;
 8005596:	e010      	b.n	80055ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b8f      	ldr	r3, [pc, #572]	; (80057d8 <UART_SetConfig+0x56c>)
 800559a:	61fb      	str	r3, [r7, #28]
        break;
 800559c:	e00d      	b.n	80055ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe fef5 	bl	800438c <HAL_RCC_GetSysClockFreq>
 80055a2:	61f8      	str	r0, [r7, #28]
        break;
 80055a4:	e009      	b.n	80055ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055aa:	61fb      	str	r3, [r7, #28]
        break;
 80055ac:	e005      	b.n	80055ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80fb 	beq.w	80057b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	4413      	add	r3, r2
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d305      	bcc.n	80055de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d903      	bls.n	80055e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055e4:	e0e8      	b.n	80057b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	2200      	movs	r2, #0
 80055ea:	461c      	mov	r4, r3
 80055ec:	4615      	mov	r5, r2
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	022b      	lsls	r3, r5, #8
 80055f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055fc:	0222      	lsls	r2, r4, #8
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	6849      	ldr	r1, [r1, #4]
 8005602:	0849      	lsrs	r1, r1, #1
 8005604:	2000      	movs	r0, #0
 8005606:	4688      	mov	r8, r1
 8005608:	4681      	mov	r9, r0
 800560a:	eb12 0a08 	adds.w	sl, r2, r8
 800560e:	eb43 0b09 	adc.w	fp, r3, r9
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005620:	4650      	mov	r0, sl
 8005622:	4659      	mov	r1, fp
 8005624:	f7fb f8b0 	bl	8000788 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4613      	mov	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005636:	d308      	bcc.n	800564a <UART_SetConfig+0x3de>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563e:	d204      	bcs.n	800564a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	60da      	str	r2, [r3, #12]
 8005648:	e0b6      	b.n	80057b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005650:	e0b2      	b.n	80057b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565a:	d15e      	bne.n	800571a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800565c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005660:	2b08      	cmp	r3, #8
 8005662:	d828      	bhi.n	80056b6 <UART_SetConfig+0x44a>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <UART_SetConfig+0x400>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	08005691 	.word	0x08005691
 8005670:	08005699 	.word	0x08005699
 8005674:	080056a1 	.word	0x080056a1
 8005678:	080056b7 	.word	0x080056b7
 800567c:	080056a7 	.word	0x080056a7
 8005680:	080056b7 	.word	0x080056b7
 8005684:	080056b7 	.word	0x080056b7
 8005688:	080056b7 	.word	0x080056b7
 800568c:	080056af 	.word	0x080056af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005690:	f7fe ff10 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8005694:	61f8      	str	r0, [r7, #28]
        break;
 8005696:	e014      	b.n	80056c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005698:	f7fe ff22 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 800569c:	61f8      	str	r0, [r7, #28]
        break;
 800569e:	e010      	b.n	80056c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a0:	4b4d      	ldr	r3, [pc, #308]	; (80057d8 <UART_SetConfig+0x56c>)
 80056a2:	61fb      	str	r3, [r7, #28]
        break;
 80056a4:	e00d      	b.n	80056c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a6:	f7fe fe71 	bl	800438c <HAL_RCC_GetSysClockFreq>
 80056aa:	61f8      	str	r0, [r7, #28]
        break;
 80056ac:	e009      	b.n	80056c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b2:	61fb      	str	r3, [r7, #28]
        break;
 80056b4:	e005      	b.n	80056c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d077      	beq.n	80057b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005a      	lsls	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	441a      	add	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b0f      	cmp	r3, #15
 80056e2:	d916      	bls.n	8005712 <UART_SetConfig+0x4a6>
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ea:	d212      	bcs.n	8005712 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f023 030f 	bic.w	r3, r3, #15
 80056f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	b29a      	uxth	r2, r3
 8005702:	8afb      	ldrh	r3, [r7, #22]
 8005704:	4313      	orrs	r3, r2
 8005706:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	8afa      	ldrh	r2, [r7, #22]
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	e052      	b.n	80057b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005718:	e04e      	b.n	80057b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800571a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800571e:	2b08      	cmp	r3, #8
 8005720:	d827      	bhi.n	8005772 <UART_SetConfig+0x506>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0x4bc>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005755 	.word	0x08005755
 8005730:	0800575d 	.word	0x0800575d
 8005734:	08005773 	.word	0x08005773
 8005738:	08005763 	.word	0x08005763
 800573c:	08005773 	.word	0x08005773
 8005740:	08005773 	.word	0x08005773
 8005744:	08005773 	.word	0x08005773
 8005748:	0800576b 	.word	0x0800576b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574c:	f7fe feb2 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8005750:	61f8      	str	r0, [r7, #28]
        break;
 8005752:	e014      	b.n	800577e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7fe fec4 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8005758:	61f8      	str	r0, [r7, #28]
        break;
 800575a:	e010      	b.n	800577e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800575c:	4b1e      	ldr	r3, [pc, #120]	; (80057d8 <UART_SetConfig+0x56c>)
 800575e:	61fb      	str	r3, [r7, #28]
        break;
 8005760:	e00d      	b.n	800577e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fe fe13 	bl	800438c <HAL_RCC_GetSysClockFreq>
 8005766:	61f8      	str	r0, [r7, #28]
        break;
 8005768:	e009      	b.n	800577e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576e:	61fb      	str	r3, [r7, #28]
        break;
 8005770:	e005      	b.n	800577e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800577c:	bf00      	nop
    }

    if (pclk != 0U)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d019      	beq.n	80057b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	085a      	lsrs	r2, r3, #1
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	441a      	add	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b0f      	cmp	r3, #15
 800579c:	d909      	bls.n	80057b2 <UART_SetConfig+0x546>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a4:	d205      	bcs.n	80057b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60da      	str	r2, [r3, #12]
 80057b0:	e002      	b.n	80057b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3728      	adds	r7, #40	; 0x28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d2:	bf00      	nop
 80057d4:	40008000 	.word	0x40008000
 80057d8:	00f42400 	.word	0x00f42400

080057dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01a      	beq.n	80058f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058da:	d10a      	bne.n	80058f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b086      	sub	sp, #24
 8005922:	af02      	add	r7, sp, #8
 8005924:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800592e:	f7fc fa91 	bl	8001e54 <HAL_GetTick>
 8005932:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b08      	cmp	r3, #8
 8005940:	d10e      	bne.n	8005960 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005942:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f82d 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e023      	b.n	80059a8 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b04      	cmp	r3, #4
 800596c:	d10e      	bne.n	800598c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f817 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e00d      	b.n	80059a8 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b09c      	sub	sp, #112	; 0x70
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c0:	e0a5      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	f000 80a1 	beq.w	8005b0e <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059cc:	f7fc fa42 	bl	8001e54 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059d8:	429a      	cmp	r2, r3
 80059da:	d302      	bcc.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x32>
 80059dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d13e      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059f6:	667b      	str	r3, [r7, #100]	; 0x64
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a02:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e6      	bne.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a34:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e5      	bne.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e067      	b.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d04f      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7c:	d147      	bne.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a86:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ada:	623a      	str	r2, [r7, #32]
 8005adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	69f9      	ldr	r1, [r7, #28]
 8005ae0:	6a3a      	ldr	r2, [r7, #32]
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e5      	bne.n	8005aba <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e010      	b.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4013      	ands	r3, r2
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	f43f af4a 	beq.w	80059c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3770      	adds	r7, #112	; 0x70
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b38:	b084      	sub	sp, #16
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	f107 001c 	add.w	r0, r7, #28
 8005b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa6c 	bl	8006034 <USB_CoreReset>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
 8005b72:	e005      	b.n	8005b80 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b8c:	b004      	add	sp, #16
 8005b8e:	4770      	bx	lr

08005b90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 0201 	bic.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d115      	bne.n	8005bfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bde:	2001      	movs	r0, #1
 8005be0:	f7fc f942 	bl	8001e68 <HAL_Delay>
      ms++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa14 	bl	8006018 <USB_GetMode>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d01e      	beq.n	8005c34 <USB_SetCurrentMode+0x84>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b31      	cmp	r3, #49	; 0x31
 8005bfa:	d9f0      	bls.n	8005bde <USB_SetCurrentMode+0x2e>
 8005bfc:	e01a      	b.n	8005c34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d115      	bne.n	8005c30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c10:	2001      	movs	r0, #1
 8005c12:	f7fc f929 	bl	8001e68 <HAL_Delay>
      ms++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f9fb 	bl	8006018 <USB_GetMode>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <USB_SetCurrentMode+0x84>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b31      	cmp	r3, #49	; 0x31
 8005c2c:	d9f0      	bls.n	8005c10 <USB_SetCurrentMode+0x60>
 8005c2e:	e001      	b.n	8005c34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e005      	b.n	8005c40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b32      	cmp	r3, #50	; 0x32
 8005c38:	d101      	bne.n	8005c3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c48:	b084      	sub	sp, #16
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	e009      	b.n	8005c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	3340      	adds	r3, #64	; 0x40
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	d9f2      	bls.n	8005c68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11c      	bne.n	8005cc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c96:	f043 0302 	orr.w	r3, r3, #2
 8005c9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e005      	b.n	8005cce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce8:	461a      	mov	r2, r3
 8005cea:	680b      	ldr	r3, [r1, #0]
 8005cec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cee:	2103      	movs	r1, #3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f959 	bl	8005fa8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cf6:	2110      	movs	r1, #16
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f8f1 	bl	8005ee0 <USB_FlushTxFifo>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f91d 	bl	8005f48 <USB_FlushRxFifo>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	461a      	mov	r2, r3
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	e043      	b.n	8005dca <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d58:	d118      	bne.n	8005d8c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	e013      	b.n	8005d9e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	461a      	mov	r2, r3
 8005d84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e008      	b.n	8005d9e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	461a      	mov	r2, r3
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3b7      	bcc.n	8005d42 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e043      	b.n	8005e60 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dee:	d118      	bne.n	8005e22 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	461a      	mov	r2, r3
 8005e04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e013      	b.n	8005e34 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	e008      	b.n	8005e34 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	461a      	mov	r2, r3
 8005e42:	2300      	movs	r3, #0
 8005e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	461a      	mov	r2, r3
 8005e54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d3b7      	bcc.n	8005dd8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f043 0210 	orr.w	r2, r3, #16
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <USB_DevInit+0x294>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f043 0208 	orr.w	r2, r3, #8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d107      	bne.n	8005eca <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec2:	f043 0304 	orr.w	r3, r3, #4
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ed6:	b004      	add	sp, #16
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	803c3800 	.word	0x803c3800

08005ee0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <USB_FlushTxFifo+0x64>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e01b      	b.n	8005f38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	daf2      	bge.n	8005eee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	019b      	lsls	r3, r3, #6
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <USB_FlushTxFifo+0x64>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e006      	b.n	8005f38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d0f0      	beq.n	8005f18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	00030d40 	.word	0x00030d40

08005f48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a11      	ldr	r2, [pc, #68]	; (8005fa4 <USB_FlushRxFifo+0x5c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d901      	bls.n	8005f66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e018      	b.n	8005f98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	daf2      	bge.n	8005f54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2210      	movs	r2, #16
 8005f76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <USB_FlushRxFifo+0x5c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e006      	b.n	8005f98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b10      	cmp	r3, #16
 8005f94:	d0f0      	beq.n	8005f78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	00030d40 	.word	0x00030d40

08005fa8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006006:	f043 0302 	orr.w	r3, r3, #2
 800600a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f003 0301 	and.w	r3, r3, #1
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr
	...

08006034 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3301      	adds	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a12      	ldr	r2, [pc, #72]	; (8006094 <USB_CoreReset+0x60>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e01b      	b.n	800608a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	daf2      	bge.n	8006040 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f043 0201 	orr.w	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3301      	adds	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a08      	ldr	r2, [pc, #32]	; (8006094 <USB_CoreReset+0x60>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d901      	bls.n	800607c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e006      	b.n	800608a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b01      	cmp	r3, #1
 8006086:	d0f0      	beq.n	800606a <USB_CoreReset+0x36>

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr
 8006094:	00030d40 	.word	0x00030d40

08006098 <__errno>:
 8006098:	4b01      	ldr	r3, [pc, #4]	; (80060a0 <__errno+0x8>)
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	2000001c 	.word	0x2000001c

080060a4 <__libc_init_array>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	4d0d      	ldr	r5, [pc, #52]	; (80060dc <__libc_init_array+0x38>)
 80060a8:	4c0d      	ldr	r4, [pc, #52]	; (80060e0 <__libc_init_array+0x3c>)
 80060aa:	1b64      	subs	r4, r4, r5
 80060ac:	10a4      	asrs	r4, r4, #2
 80060ae:	2600      	movs	r6, #0
 80060b0:	42a6      	cmp	r6, r4
 80060b2:	d109      	bne.n	80060c8 <__libc_init_array+0x24>
 80060b4:	4d0b      	ldr	r5, [pc, #44]	; (80060e4 <__libc_init_array+0x40>)
 80060b6:	4c0c      	ldr	r4, [pc, #48]	; (80060e8 <__libc_init_array+0x44>)
 80060b8:	f000 fca0 	bl	80069fc <_init>
 80060bc:	1b64      	subs	r4, r4, r5
 80060be:	10a4      	asrs	r4, r4, #2
 80060c0:	2600      	movs	r6, #0
 80060c2:	42a6      	cmp	r6, r4
 80060c4:	d105      	bne.n	80060d2 <__libc_init_array+0x2e>
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060cc:	4798      	blx	r3
 80060ce:	3601      	adds	r6, #1
 80060d0:	e7ee      	b.n	80060b0 <__libc_init_array+0xc>
 80060d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d6:	4798      	blx	r3
 80060d8:	3601      	adds	r6, #1
 80060da:	e7f2      	b.n	80060c2 <__libc_init_array+0x1e>
 80060dc:	08006aa4 	.word	0x08006aa4
 80060e0:	08006aa4 	.word	0x08006aa4
 80060e4:	08006aa4 	.word	0x08006aa4
 80060e8:	08006aa8 	.word	0x08006aa8

080060ec <memcpy>:
 80060ec:	440a      	add	r2, r1
 80060ee:	4291      	cmp	r1, r2
 80060f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060f4:	d100      	bne.n	80060f8 <memcpy+0xc>
 80060f6:	4770      	bx	lr
 80060f8:	b510      	push	{r4, lr}
 80060fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006102:	4291      	cmp	r1, r2
 8006104:	d1f9      	bne.n	80060fa <memcpy+0xe>
 8006106:	bd10      	pop	{r4, pc}

08006108 <memset>:
 8006108:	4402      	add	r2, r0
 800610a:	4603      	mov	r3, r0
 800610c:	4293      	cmp	r3, r2
 800610e:	d100      	bne.n	8006112 <memset+0xa>
 8006110:	4770      	bx	lr
 8006112:	f803 1b01 	strb.w	r1, [r3], #1
 8006116:	e7f9      	b.n	800610c <memset+0x4>

08006118 <sniprintf>:
 8006118:	b40c      	push	{r2, r3}
 800611a:	b530      	push	{r4, r5, lr}
 800611c:	4b17      	ldr	r3, [pc, #92]	; (800617c <sniprintf+0x64>)
 800611e:	1e0c      	subs	r4, r1, #0
 8006120:	681d      	ldr	r5, [r3, #0]
 8006122:	b09d      	sub	sp, #116	; 0x74
 8006124:	da08      	bge.n	8006138 <sniprintf+0x20>
 8006126:	238b      	movs	r3, #139	; 0x8b
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	f04f 30ff 	mov.w	r0, #4294967295
 800612e:	b01d      	add	sp, #116	; 0x74
 8006130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006134:	b002      	add	sp, #8
 8006136:	4770      	bx	lr
 8006138:	f44f 7302 	mov.w	r3, #520	; 0x208
 800613c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006140:	bf14      	ite	ne
 8006142:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006146:	4623      	moveq	r3, r4
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	9307      	str	r3, [sp, #28]
 800614c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006150:	9002      	str	r0, [sp, #8]
 8006152:	9006      	str	r0, [sp, #24]
 8006154:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006158:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800615a:	ab21      	add	r3, sp, #132	; 0x84
 800615c:	a902      	add	r1, sp, #8
 800615e:	4628      	mov	r0, r5
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	f000 f869 	bl	8006238 <_svfiprintf_r>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	bfbc      	itt	lt
 800616a:	238b      	movlt	r3, #139	; 0x8b
 800616c:	602b      	strlt	r3, [r5, #0]
 800616e:	2c00      	cmp	r4, #0
 8006170:	d0dd      	beq.n	800612e <sniprintf+0x16>
 8006172:	9b02      	ldr	r3, [sp, #8]
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	e7d9      	b.n	800612e <sniprintf+0x16>
 800617a:	bf00      	nop
 800617c:	2000001c 	.word	0x2000001c

08006180 <__ssputs_r>:
 8006180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	688e      	ldr	r6, [r1, #8]
 8006186:	429e      	cmp	r6, r3
 8006188:	4682      	mov	sl, r0
 800618a:	460c      	mov	r4, r1
 800618c:	4690      	mov	r8, r2
 800618e:	461f      	mov	r7, r3
 8006190:	d838      	bhi.n	8006204 <__ssputs_r+0x84>
 8006192:	898a      	ldrh	r2, [r1, #12]
 8006194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006198:	d032      	beq.n	8006200 <__ssputs_r+0x80>
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	6909      	ldr	r1, [r1, #16]
 800619e:	eba5 0901 	sub.w	r9, r5, r1
 80061a2:	6965      	ldr	r5, [r4, #20]
 80061a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061ac:	3301      	adds	r3, #1
 80061ae:	444b      	add	r3, r9
 80061b0:	106d      	asrs	r5, r5, #1
 80061b2:	429d      	cmp	r5, r3
 80061b4:	bf38      	it	cc
 80061b6:	461d      	movcc	r5, r3
 80061b8:	0553      	lsls	r3, r2, #21
 80061ba:	d531      	bpl.n	8006220 <__ssputs_r+0xa0>
 80061bc:	4629      	mov	r1, r5
 80061be:	f000 fb53 	bl	8006868 <_malloc_r>
 80061c2:	4606      	mov	r6, r0
 80061c4:	b950      	cbnz	r0, 80061dc <__ssputs_r+0x5c>
 80061c6:	230c      	movs	r3, #12
 80061c8:	f8ca 3000 	str.w	r3, [sl]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061dc:	6921      	ldr	r1, [r4, #16]
 80061de:	464a      	mov	r2, r9
 80061e0:	f7ff ff84 	bl	80060ec <memcpy>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	6126      	str	r6, [r4, #16]
 80061f2:	6165      	str	r5, [r4, #20]
 80061f4:	444e      	add	r6, r9
 80061f6:	eba5 0509 	sub.w	r5, r5, r9
 80061fa:	6026      	str	r6, [r4, #0]
 80061fc:	60a5      	str	r5, [r4, #8]
 80061fe:	463e      	mov	r6, r7
 8006200:	42be      	cmp	r6, r7
 8006202:	d900      	bls.n	8006206 <__ssputs_r+0x86>
 8006204:	463e      	mov	r6, r7
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	4632      	mov	r2, r6
 800620a:	4641      	mov	r1, r8
 800620c:	f000 faa8 	bl	8006760 <memmove>
 8006210:	68a3      	ldr	r3, [r4, #8]
 8006212:	1b9b      	subs	r3, r3, r6
 8006214:	60a3      	str	r3, [r4, #8]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	4433      	add	r3, r6
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	2000      	movs	r0, #0
 800621e:	e7db      	b.n	80061d8 <__ssputs_r+0x58>
 8006220:	462a      	mov	r2, r5
 8006222:	f000 fb95 	bl	8006950 <_realloc_r>
 8006226:	4606      	mov	r6, r0
 8006228:	2800      	cmp	r0, #0
 800622a:	d1e1      	bne.n	80061f0 <__ssputs_r+0x70>
 800622c:	6921      	ldr	r1, [r4, #16]
 800622e:	4650      	mov	r0, sl
 8006230:	f000 fab0 	bl	8006794 <_free_r>
 8006234:	e7c7      	b.n	80061c6 <__ssputs_r+0x46>
	...

08006238 <_svfiprintf_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4698      	mov	r8, r3
 800623e:	898b      	ldrh	r3, [r1, #12]
 8006240:	061b      	lsls	r3, r3, #24
 8006242:	b09d      	sub	sp, #116	; 0x74
 8006244:	4607      	mov	r7, r0
 8006246:	460d      	mov	r5, r1
 8006248:	4614      	mov	r4, r2
 800624a:	d50e      	bpl.n	800626a <_svfiprintf_r+0x32>
 800624c:	690b      	ldr	r3, [r1, #16]
 800624e:	b963      	cbnz	r3, 800626a <_svfiprintf_r+0x32>
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	f000 fb09 	bl	8006868 <_malloc_r>
 8006256:	6028      	str	r0, [r5, #0]
 8006258:	6128      	str	r0, [r5, #16]
 800625a:	b920      	cbnz	r0, 8006266 <_svfiprintf_r+0x2e>
 800625c:	230c      	movs	r3, #12
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	e0d1      	b.n	800640a <_svfiprintf_r+0x1d2>
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	616b      	str	r3, [r5, #20]
 800626a:	2300      	movs	r3, #0
 800626c:	9309      	str	r3, [sp, #36]	; 0x24
 800626e:	2320      	movs	r3, #32
 8006270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006274:	f8cd 800c 	str.w	r8, [sp, #12]
 8006278:	2330      	movs	r3, #48	; 0x30
 800627a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006424 <_svfiprintf_r+0x1ec>
 800627e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006282:	f04f 0901 	mov.w	r9, #1
 8006286:	4623      	mov	r3, r4
 8006288:	469a      	mov	sl, r3
 800628a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628e:	b10a      	cbz	r2, 8006294 <_svfiprintf_r+0x5c>
 8006290:	2a25      	cmp	r2, #37	; 0x25
 8006292:	d1f9      	bne.n	8006288 <_svfiprintf_r+0x50>
 8006294:	ebba 0b04 	subs.w	fp, sl, r4
 8006298:	d00b      	beq.n	80062b2 <_svfiprintf_r+0x7a>
 800629a:	465b      	mov	r3, fp
 800629c:	4622      	mov	r2, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ff6d 	bl	8006180 <__ssputs_r>
 80062a6:	3001      	adds	r0, #1
 80062a8:	f000 80aa 	beq.w	8006400 <_svfiprintf_r+0x1c8>
 80062ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ae:	445a      	add	r2, fp
 80062b0:	9209      	str	r2, [sp, #36]	; 0x24
 80062b2:	f89a 3000 	ldrb.w	r3, [sl]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80a2 	beq.w	8006400 <_svfiprintf_r+0x1c8>
 80062bc:	2300      	movs	r3, #0
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c6:	f10a 0a01 	add.w	sl, sl, #1
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	9307      	str	r3, [sp, #28]
 80062ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062d2:	931a      	str	r3, [sp, #104]	; 0x68
 80062d4:	4654      	mov	r4, sl
 80062d6:	2205      	movs	r2, #5
 80062d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062dc:	4851      	ldr	r0, [pc, #324]	; (8006424 <_svfiprintf_r+0x1ec>)
 80062de:	f7f9 ff7f 	bl	80001e0 <memchr>
 80062e2:	9a04      	ldr	r2, [sp, #16]
 80062e4:	b9d8      	cbnz	r0, 800631e <_svfiprintf_r+0xe6>
 80062e6:	06d0      	lsls	r0, r2, #27
 80062e8:	bf44      	itt	mi
 80062ea:	2320      	movmi	r3, #32
 80062ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f0:	0711      	lsls	r1, r2, #28
 80062f2:	bf44      	itt	mi
 80062f4:	232b      	movmi	r3, #43	; 0x2b
 80062f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062fa:	f89a 3000 	ldrb.w	r3, [sl]
 80062fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006300:	d015      	beq.n	800632e <_svfiprintf_r+0xf6>
 8006302:	9a07      	ldr	r2, [sp, #28]
 8006304:	4654      	mov	r4, sl
 8006306:	2000      	movs	r0, #0
 8006308:	f04f 0c0a 	mov.w	ip, #10
 800630c:	4621      	mov	r1, r4
 800630e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006312:	3b30      	subs	r3, #48	; 0x30
 8006314:	2b09      	cmp	r3, #9
 8006316:	d94e      	bls.n	80063b6 <_svfiprintf_r+0x17e>
 8006318:	b1b0      	cbz	r0, 8006348 <_svfiprintf_r+0x110>
 800631a:	9207      	str	r2, [sp, #28]
 800631c:	e014      	b.n	8006348 <_svfiprintf_r+0x110>
 800631e:	eba0 0308 	sub.w	r3, r0, r8
 8006322:	fa09 f303 	lsl.w	r3, r9, r3
 8006326:	4313      	orrs	r3, r2
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	46a2      	mov	sl, r4
 800632c:	e7d2      	b.n	80062d4 <_svfiprintf_r+0x9c>
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	1d19      	adds	r1, r3, #4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	9103      	str	r1, [sp, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	bfbb      	ittet	lt
 800633a:	425b      	neglt	r3, r3
 800633c:	f042 0202 	orrlt.w	r2, r2, #2
 8006340:	9307      	strge	r3, [sp, #28]
 8006342:	9307      	strlt	r3, [sp, #28]
 8006344:	bfb8      	it	lt
 8006346:	9204      	strlt	r2, [sp, #16]
 8006348:	7823      	ldrb	r3, [r4, #0]
 800634a:	2b2e      	cmp	r3, #46	; 0x2e
 800634c:	d10c      	bne.n	8006368 <_svfiprintf_r+0x130>
 800634e:	7863      	ldrb	r3, [r4, #1]
 8006350:	2b2a      	cmp	r3, #42	; 0x2a
 8006352:	d135      	bne.n	80063c0 <_svfiprintf_r+0x188>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	9203      	str	r2, [sp, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb8      	it	lt
 8006360:	f04f 33ff 	movlt.w	r3, #4294967295
 8006364:	3402      	adds	r4, #2
 8006366:	9305      	str	r3, [sp, #20]
 8006368:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006428 <_svfiprintf_r+0x1f0>
 800636c:	7821      	ldrb	r1, [r4, #0]
 800636e:	2203      	movs	r2, #3
 8006370:	4650      	mov	r0, sl
 8006372:	f7f9 ff35 	bl	80001e0 <memchr>
 8006376:	b140      	cbz	r0, 800638a <_svfiprintf_r+0x152>
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	eba0 000a 	sub.w	r0, r0, sl
 800637e:	fa03 f000 	lsl.w	r0, r3, r0
 8006382:	9b04      	ldr	r3, [sp, #16]
 8006384:	4303      	orrs	r3, r0
 8006386:	3401      	adds	r4, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638e:	4827      	ldr	r0, [pc, #156]	; (800642c <_svfiprintf_r+0x1f4>)
 8006390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006394:	2206      	movs	r2, #6
 8006396:	f7f9 ff23 	bl	80001e0 <memchr>
 800639a:	2800      	cmp	r0, #0
 800639c:	d038      	beq.n	8006410 <_svfiprintf_r+0x1d8>
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <_svfiprintf_r+0x1f8>)
 80063a0:	bb1b      	cbnz	r3, 80063ea <_svfiprintf_r+0x1b2>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	3307      	adds	r3, #7
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	3308      	adds	r3, #8
 80063ac:	9303      	str	r3, [sp, #12]
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	4433      	add	r3, r6
 80063b2:	9309      	str	r3, [sp, #36]	; 0x24
 80063b4:	e767      	b.n	8006286 <_svfiprintf_r+0x4e>
 80063b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ba:	460c      	mov	r4, r1
 80063bc:	2001      	movs	r0, #1
 80063be:	e7a5      	b.n	800630c <_svfiprintf_r+0xd4>
 80063c0:	2300      	movs	r3, #0
 80063c2:	3401      	adds	r4, #1
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	4619      	mov	r1, r3
 80063c8:	f04f 0c0a 	mov.w	ip, #10
 80063cc:	4620      	mov	r0, r4
 80063ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d2:	3a30      	subs	r2, #48	; 0x30
 80063d4:	2a09      	cmp	r2, #9
 80063d6:	d903      	bls.n	80063e0 <_svfiprintf_r+0x1a8>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0c5      	beq.n	8006368 <_svfiprintf_r+0x130>
 80063dc:	9105      	str	r1, [sp, #20]
 80063de:	e7c3      	b.n	8006368 <_svfiprintf_r+0x130>
 80063e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e4:	4604      	mov	r4, r0
 80063e6:	2301      	movs	r3, #1
 80063e8:	e7f0      	b.n	80063cc <_svfiprintf_r+0x194>
 80063ea:	ab03      	add	r3, sp, #12
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	462a      	mov	r2, r5
 80063f0:	4b10      	ldr	r3, [pc, #64]	; (8006434 <_svfiprintf_r+0x1fc>)
 80063f2:	a904      	add	r1, sp, #16
 80063f4:	4638      	mov	r0, r7
 80063f6:	f3af 8000 	nop.w
 80063fa:	1c42      	adds	r2, r0, #1
 80063fc:	4606      	mov	r6, r0
 80063fe:	d1d6      	bne.n	80063ae <_svfiprintf_r+0x176>
 8006400:	89ab      	ldrh	r3, [r5, #12]
 8006402:	065b      	lsls	r3, r3, #25
 8006404:	f53f af2c 	bmi.w	8006260 <_svfiprintf_r+0x28>
 8006408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800640a:	b01d      	add	sp, #116	; 0x74
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006410:	ab03      	add	r3, sp, #12
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	462a      	mov	r2, r5
 8006416:	4b07      	ldr	r3, [pc, #28]	; (8006434 <_svfiprintf_r+0x1fc>)
 8006418:	a904      	add	r1, sp, #16
 800641a:	4638      	mov	r0, r7
 800641c:	f000 f87a 	bl	8006514 <_printf_i>
 8006420:	e7eb      	b.n	80063fa <_svfiprintf_r+0x1c2>
 8006422:	bf00      	nop
 8006424:	08006a68 	.word	0x08006a68
 8006428:	08006a6e 	.word	0x08006a6e
 800642c:	08006a72 	.word	0x08006a72
 8006430:	00000000 	.word	0x00000000
 8006434:	08006181 	.word	0x08006181

08006438 <_printf_common>:
 8006438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	4616      	mov	r6, r2
 800643e:	4699      	mov	r9, r3
 8006440:	688a      	ldr	r2, [r1, #8]
 8006442:	690b      	ldr	r3, [r1, #16]
 8006444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006448:	4293      	cmp	r3, r2
 800644a:	bfb8      	it	lt
 800644c:	4613      	movlt	r3, r2
 800644e:	6033      	str	r3, [r6, #0]
 8006450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006454:	4607      	mov	r7, r0
 8006456:	460c      	mov	r4, r1
 8006458:	b10a      	cbz	r2, 800645e <_printf_common+0x26>
 800645a:	3301      	adds	r3, #1
 800645c:	6033      	str	r3, [r6, #0]
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	0699      	lsls	r1, r3, #26
 8006462:	bf42      	ittt	mi
 8006464:	6833      	ldrmi	r3, [r6, #0]
 8006466:	3302      	addmi	r3, #2
 8006468:	6033      	strmi	r3, [r6, #0]
 800646a:	6825      	ldr	r5, [r4, #0]
 800646c:	f015 0506 	ands.w	r5, r5, #6
 8006470:	d106      	bne.n	8006480 <_printf_common+0x48>
 8006472:	f104 0a19 	add.w	sl, r4, #25
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	6832      	ldr	r2, [r6, #0]
 800647a:	1a9b      	subs	r3, r3, r2
 800647c:	42ab      	cmp	r3, r5
 800647e:	dc26      	bgt.n	80064ce <_printf_common+0x96>
 8006480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006484:	1e13      	subs	r3, r2, #0
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	bf18      	it	ne
 800648a:	2301      	movne	r3, #1
 800648c:	0692      	lsls	r2, r2, #26
 800648e:	d42b      	bmi.n	80064e8 <_printf_common+0xb0>
 8006490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006494:	4649      	mov	r1, r9
 8006496:	4638      	mov	r0, r7
 8006498:	47c0      	blx	r8
 800649a:	3001      	adds	r0, #1
 800649c:	d01e      	beq.n	80064dc <_printf_common+0xa4>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	68e5      	ldr	r5, [r4, #12]
 80064a2:	6832      	ldr	r2, [r6, #0]
 80064a4:	f003 0306 	and.w	r3, r3, #6
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	bf08      	it	eq
 80064ac:	1aad      	subeq	r5, r5, r2
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	bf0c      	ite	eq
 80064b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b8:	2500      	movne	r5, #0
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bfc4      	itt	gt
 80064be:	1a9b      	subgt	r3, r3, r2
 80064c0:	18ed      	addgt	r5, r5, r3
 80064c2:	2600      	movs	r6, #0
 80064c4:	341a      	adds	r4, #26
 80064c6:	42b5      	cmp	r5, r6
 80064c8:	d11a      	bne.n	8006500 <_printf_common+0xc8>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e008      	b.n	80064e0 <_printf_common+0xa8>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4652      	mov	r2, sl
 80064d2:	4649      	mov	r1, r9
 80064d4:	4638      	mov	r0, r7
 80064d6:	47c0      	blx	r8
 80064d8:	3001      	adds	r0, #1
 80064da:	d103      	bne.n	80064e4 <_printf_common+0xac>
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e4:	3501      	adds	r5, #1
 80064e6:	e7c6      	b.n	8006476 <_printf_common+0x3e>
 80064e8:	18e1      	adds	r1, r4, r3
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	2030      	movs	r0, #48	; 0x30
 80064ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064f2:	4422      	add	r2, r4
 80064f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064fc:	3302      	adds	r3, #2
 80064fe:	e7c7      	b.n	8006490 <_printf_common+0x58>
 8006500:	2301      	movs	r3, #1
 8006502:	4622      	mov	r2, r4
 8006504:	4649      	mov	r1, r9
 8006506:	4638      	mov	r0, r7
 8006508:	47c0      	blx	r8
 800650a:	3001      	adds	r0, #1
 800650c:	d0e6      	beq.n	80064dc <_printf_common+0xa4>
 800650e:	3601      	adds	r6, #1
 8006510:	e7d9      	b.n	80064c6 <_printf_common+0x8e>
	...

08006514 <_printf_i>:
 8006514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	7e0f      	ldrb	r7, [r1, #24]
 800651a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800651c:	2f78      	cmp	r7, #120	; 0x78
 800651e:	4691      	mov	r9, r2
 8006520:	4680      	mov	r8, r0
 8006522:	460c      	mov	r4, r1
 8006524:	469a      	mov	sl, r3
 8006526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800652a:	d807      	bhi.n	800653c <_printf_i+0x28>
 800652c:	2f62      	cmp	r7, #98	; 0x62
 800652e:	d80a      	bhi.n	8006546 <_printf_i+0x32>
 8006530:	2f00      	cmp	r7, #0
 8006532:	f000 80d8 	beq.w	80066e6 <_printf_i+0x1d2>
 8006536:	2f58      	cmp	r7, #88	; 0x58
 8006538:	f000 80a3 	beq.w	8006682 <_printf_i+0x16e>
 800653c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006544:	e03a      	b.n	80065bc <_printf_i+0xa8>
 8006546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800654a:	2b15      	cmp	r3, #21
 800654c:	d8f6      	bhi.n	800653c <_printf_i+0x28>
 800654e:	a101      	add	r1, pc, #4	; (adr r1, 8006554 <_printf_i+0x40>)
 8006550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006554:	080065ad 	.word	0x080065ad
 8006558:	080065c1 	.word	0x080065c1
 800655c:	0800653d 	.word	0x0800653d
 8006560:	0800653d 	.word	0x0800653d
 8006564:	0800653d 	.word	0x0800653d
 8006568:	0800653d 	.word	0x0800653d
 800656c:	080065c1 	.word	0x080065c1
 8006570:	0800653d 	.word	0x0800653d
 8006574:	0800653d 	.word	0x0800653d
 8006578:	0800653d 	.word	0x0800653d
 800657c:	0800653d 	.word	0x0800653d
 8006580:	080066cd 	.word	0x080066cd
 8006584:	080065f1 	.word	0x080065f1
 8006588:	080066af 	.word	0x080066af
 800658c:	0800653d 	.word	0x0800653d
 8006590:	0800653d 	.word	0x0800653d
 8006594:	080066ef 	.word	0x080066ef
 8006598:	0800653d 	.word	0x0800653d
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	0800653d 	.word	0x0800653d
 80065a4:	0800653d 	.word	0x0800653d
 80065a8:	080066b7 	.word	0x080066b7
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	1d1a      	adds	r2, r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	602a      	str	r2, [r5, #0]
 80065b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065bc:	2301      	movs	r3, #1
 80065be:	e0a3      	b.n	8006708 <_printf_i+0x1f4>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	6829      	ldr	r1, [r5, #0]
 80065c4:	0606      	lsls	r6, r0, #24
 80065c6:	f101 0304 	add.w	r3, r1, #4
 80065ca:	d50a      	bpl.n	80065e2 <_printf_i+0xce>
 80065cc:	680e      	ldr	r6, [r1, #0]
 80065ce:	602b      	str	r3, [r5, #0]
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	da03      	bge.n	80065dc <_printf_i+0xc8>
 80065d4:	232d      	movs	r3, #45	; 0x2d
 80065d6:	4276      	negs	r6, r6
 80065d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065dc:	485e      	ldr	r0, [pc, #376]	; (8006758 <_printf_i+0x244>)
 80065de:	230a      	movs	r3, #10
 80065e0:	e019      	b.n	8006616 <_printf_i+0x102>
 80065e2:	680e      	ldr	r6, [r1, #0]
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065ea:	bf18      	it	ne
 80065ec:	b236      	sxthne	r6, r6
 80065ee:	e7ef      	b.n	80065d0 <_printf_i+0xbc>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	6820      	ldr	r0, [r4, #0]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	6029      	str	r1, [r5, #0]
 80065f8:	0601      	lsls	r1, r0, #24
 80065fa:	d501      	bpl.n	8006600 <_printf_i+0xec>
 80065fc:	681e      	ldr	r6, [r3, #0]
 80065fe:	e002      	b.n	8006606 <_printf_i+0xf2>
 8006600:	0646      	lsls	r6, r0, #25
 8006602:	d5fb      	bpl.n	80065fc <_printf_i+0xe8>
 8006604:	881e      	ldrh	r6, [r3, #0]
 8006606:	4854      	ldr	r0, [pc, #336]	; (8006758 <_printf_i+0x244>)
 8006608:	2f6f      	cmp	r7, #111	; 0x6f
 800660a:	bf0c      	ite	eq
 800660c:	2308      	moveq	r3, #8
 800660e:	230a      	movne	r3, #10
 8006610:	2100      	movs	r1, #0
 8006612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006616:	6865      	ldr	r5, [r4, #4]
 8006618:	60a5      	str	r5, [r4, #8]
 800661a:	2d00      	cmp	r5, #0
 800661c:	bfa2      	ittt	ge
 800661e:	6821      	ldrge	r1, [r4, #0]
 8006620:	f021 0104 	bicge.w	r1, r1, #4
 8006624:	6021      	strge	r1, [r4, #0]
 8006626:	b90e      	cbnz	r6, 800662c <_printf_i+0x118>
 8006628:	2d00      	cmp	r5, #0
 800662a:	d04d      	beq.n	80066c8 <_printf_i+0x1b4>
 800662c:	4615      	mov	r5, r2
 800662e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006632:	fb03 6711 	mls	r7, r3, r1, r6
 8006636:	5dc7      	ldrb	r7, [r0, r7]
 8006638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800663c:	4637      	mov	r7, r6
 800663e:	42bb      	cmp	r3, r7
 8006640:	460e      	mov	r6, r1
 8006642:	d9f4      	bls.n	800662e <_printf_i+0x11a>
 8006644:	2b08      	cmp	r3, #8
 8006646:	d10b      	bne.n	8006660 <_printf_i+0x14c>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	07de      	lsls	r6, r3, #31
 800664c:	d508      	bpl.n	8006660 <_printf_i+0x14c>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	6861      	ldr	r1, [r4, #4]
 8006652:	4299      	cmp	r1, r3
 8006654:	bfde      	ittt	le
 8006656:	2330      	movle	r3, #48	; 0x30
 8006658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800665c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006660:	1b52      	subs	r2, r2, r5
 8006662:	6122      	str	r2, [r4, #16]
 8006664:	f8cd a000 	str.w	sl, [sp]
 8006668:	464b      	mov	r3, r9
 800666a:	aa03      	add	r2, sp, #12
 800666c:	4621      	mov	r1, r4
 800666e:	4640      	mov	r0, r8
 8006670:	f7ff fee2 	bl	8006438 <_printf_common>
 8006674:	3001      	adds	r0, #1
 8006676:	d14c      	bne.n	8006712 <_printf_i+0x1fe>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	b004      	add	sp, #16
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	4835      	ldr	r0, [pc, #212]	; (8006758 <_printf_i+0x244>)
 8006684:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006688:	6829      	ldr	r1, [r5, #0]
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006690:	6029      	str	r1, [r5, #0]
 8006692:	061d      	lsls	r5, r3, #24
 8006694:	d514      	bpl.n	80066c0 <_printf_i+0x1ac>
 8006696:	07df      	lsls	r7, r3, #31
 8006698:	bf44      	itt	mi
 800669a:	f043 0320 	orrmi.w	r3, r3, #32
 800669e:	6023      	strmi	r3, [r4, #0]
 80066a0:	b91e      	cbnz	r6, 80066aa <_printf_i+0x196>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	f023 0320 	bic.w	r3, r3, #32
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	2310      	movs	r3, #16
 80066ac:	e7b0      	b.n	8006610 <_printf_i+0xfc>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f043 0320 	orr.w	r3, r3, #32
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	2378      	movs	r3, #120	; 0x78
 80066b8:	4828      	ldr	r0, [pc, #160]	; (800675c <_printf_i+0x248>)
 80066ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066be:	e7e3      	b.n	8006688 <_printf_i+0x174>
 80066c0:	0659      	lsls	r1, r3, #25
 80066c2:	bf48      	it	mi
 80066c4:	b2b6      	uxthmi	r6, r6
 80066c6:	e7e6      	b.n	8006696 <_printf_i+0x182>
 80066c8:	4615      	mov	r5, r2
 80066ca:	e7bb      	b.n	8006644 <_printf_i+0x130>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	6826      	ldr	r6, [r4, #0]
 80066d0:	6961      	ldr	r1, [r4, #20]
 80066d2:	1d18      	adds	r0, r3, #4
 80066d4:	6028      	str	r0, [r5, #0]
 80066d6:	0635      	lsls	r5, r6, #24
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	d501      	bpl.n	80066e0 <_printf_i+0x1cc>
 80066dc:	6019      	str	r1, [r3, #0]
 80066de:	e002      	b.n	80066e6 <_printf_i+0x1d2>
 80066e0:	0670      	lsls	r0, r6, #25
 80066e2:	d5fb      	bpl.n	80066dc <_printf_i+0x1c8>
 80066e4:	8019      	strh	r1, [r3, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	4615      	mov	r5, r2
 80066ec:	e7ba      	b.n	8006664 <_printf_i+0x150>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	602a      	str	r2, [r5, #0]
 80066f4:	681d      	ldr	r5, [r3, #0]
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	2100      	movs	r1, #0
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7f9 fd70 	bl	80001e0 <memchr>
 8006700:	b108      	cbz	r0, 8006706 <_printf_i+0x1f2>
 8006702:	1b40      	subs	r0, r0, r5
 8006704:	6060      	str	r0, [r4, #4]
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	2300      	movs	r3, #0
 800670c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006710:	e7a8      	b.n	8006664 <_printf_i+0x150>
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	462a      	mov	r2, r5
 8006716:	4649      	mov	r1, r9
 8006718:	4640      	mov	r0, r8
 800671a:	47d0      	blx	sl
 800671c:	3001      	adds	r0, #1
 800671e:	d0ab      	beq.n	8006678 <_printf_i+0x164>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	079b      	lsls	r3, r3, #30
 8006724:	d413      	bmi.n	800674e <_printf_i+0x23a>
 8006726:	68e0      	ldr	r0, [r4, #12]
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	4298      	cmp	r0, r3
 800672c:	bfb8      	it	lt
 800672e:	4618      	movlt	r0, r3
 8006730:	e7a4      	b.n	800667c <_printf_i+0x168>
 8006732:	2301      	movs	r3, #1
 8006734:	4632      	mov	r2, r6
 8006736:	4649      	mov	r1, r9
 8006738:	4640      	mov	r0, r8
 800673a:	47d0      	blx	sl
 800673c:	3001      	adds	r0, #1
 800673e:	d09b      	beq.n	8006678 <_printf_i+0x164>
 8006740:	3501      	adds	r5, #1
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	9903      	ldr	r1, [sp, #12]
 8006746:	1a5b      	subs	r3, r3, r1
 8006748:	42ab      	cmp	r3, r5
 800674a:	dcf2      	bgt.n	8006732 <_printf_i+0x21e>
 800674c:	e7eb      	b.n	8006726 <_printf_i+0x212>
 800674e:	2500      	movs	r5, #0
 8006750:	f104 0619 	add.w	r6, r4, #25
 8006754:	e7f5      	b.n	8006742 <_printf_i+0x22e>
 8006756:	bf00      	nop
 8006758:	08006a79 	.word	0x08006a79
 800675c:	08006a8a 	.word	0x08006a8a

08006760 <memmove>:
 8006760:	4288      	cmp	r0, r1
 8006762:	b510      	push	{r4, lr}
 8006764:	eb01 0402 	add.w	r4, r1, r2
 8006768:	d902      	bls.n	8006770 <memmove+0x10>
 800676a:	4284      	cmp	r4, r0
 800676c:	4623      	mov	r3, r4
 800676e:	d807      	bhi.n	8006780 <memmove+0x20>
 8006770:	1e43      	subs	r3, r0, #1
 8006772:	42a1      	cmp	r1, r4
 8006774:	d008      	beq.n	8006788 <memmove+0x28>
 8006776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800677a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800677e:	e7f8      	b.n	8006772 <memmove+0x12>
 8006780:	4402      	add	r2, r0
 8006782:	4601      	mov	r1, r0
 8006784:	428a      	cmp	r2, r1
 8006786:	d100      	bne.n	800678a <memmove+0x2a>
 8006788:	bd10      	pop	{r4, pc}
 800678a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800678e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006792:	e7f7      	b.n	8006784 <memmove+0x24>

08006794 <_free_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4605      	mov	r5, r0
 8006798:	2900      	cmp	r1, #0
 800679a:	d041      	beq.n	8006820 <_free_r+0x8c>
 800679c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a0:	1f0c      	subs	r4, r1, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bfb8      	it	lt
 80067a6:	18e4      	addlt	r4, r4, r3
 80067a8:	f000 f912 	bl	80069d0 <__malloc_lock>
 80067ac:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <_free_r+0x90>)
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	b933      	cbnz	r3, 80067c0 <_free_r+0x2c>
 80067b2:	6063      	str	r3, [r4, #4]
 80067b4:	6014      	str	r4, [r2, #0]
 80067b6:	4628      	mov	r0, r5
 80067b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067bc:	f000 b90e 	b.w	80069dc <__malloc_unlock>
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d908      	bls.n	80067d6 <_free_r+0x42>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	1821      	adds	r1, r4, r0
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf01      	itttt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	1809      	addeq	r1, r1, r0
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	e7ed      	b.n	80067b2 <_free_r+0x1e>
 80067d6:	461a      	mov	r2, r3
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	b10b      	cbz	r3, 80067e0 <_free_r+0x4c>
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d9fa      	bls.n	80067d6 <_free_r+0x42>
 80067e0:	6811      	ldr	r1, [r2, #0]
 80067e2:	1850      	adds	r0, r2, r1
 80067e4:	42a0      	cmp	r0, r4
 80067e6:	d10b      	bne.n	8006800 <_free_r+0x6c>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	4401      	add	r1, r0
 80067ec:	1850      	adds	r0, r2, r1
 80067ee:	4283      	cmp	r3, r0
 80067f0:	6011      	str	r1, [r2, #0]
 80067f2:	d1e0      	bne.n	80067b6 <_free_r+0x22>
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	6053      	str	r3, [r2, #4]
 80067fa:	4401      	add	r1, r0
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	e7da      	b.n	80067b6 <_free_r+0x22>
 8006800:	d902      	bls.n	8006808 <_free_r+0x74>
 8006802:	230c      	movs	r3, #12
 8006804:	602b      	str	r3, [r5, #0]
 8006806:	e7d6      	b.n	80067b6 <_free_r+0x22>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	1821      	adds	r1, r4, r0
 800680c:	428b      	cmp	r3, r1
 800680e:	bf04      	itt	eq
 8006810:	6819      	ldreq	r1, [r3, #0]
 8006812:	685b      	ldreq	r3, [r3, #4]
 8006814:	6063      	str	r3, [r4, #4]
 8006816:	bf04      	itt	eq
 8006818:	1809      	addeq	r1, r1, r0
 800681a:	6021      	streq	r1, [r4, #0]
 800681c:	6054      	str	r4, [r2, #4]
 800681e:	e7ca      	b.n	80067b6 <_free_r+0x22>
 8006820:	bd38      	pop	{r3, r4, r5, pc}
 8006822:	bf00      	nop
 8006824:	2000086c 	.word	0x2000086c

08006828 <sbrk_aligned>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4e0e      	ldr	r6, [pc, #56]	; (8006864 <sbrk_aligned+0x3c>)
 800682c:	460c      	mov	r4, r1
 800682e:	6831      	ldr	r1, [r6, #0]
 8006830:	4605      	mov	r5, r0
 8006832:	b911      	cbnz	r1, 800683a <sbrk_aligned+0x12>
 8006834:	f000 f8bc 	bl	80069b0 <_sbrk_r>
 8006838:	6030      	str	r0, [r6, #0]
 800683a:	4621      	mov	r1, r4
 800683c:	4628      	mov	r0, r5
 800683e:	f000 f8b7 	bl	80069b0 <_sbrk_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d00a      	beq.n	800685c <sbrk_aligned+0x34>
 8006846:	1cc4      	adds	r4, r0, #3
 8006848:	f024 0403 	bic.w	r4, r4, #3
 800684c:	42a0      	cmp	r0, r4
 800684e:	d007      	beq.n	8006860 <sbrk_aligned+0x38>
 8006850:	1a21      	subs	r1, r4, r0
 8006852:	4628      	mov	r0, r5
 8006854:	f000 f8ac 	bl	80069b0 <_sbrk_r>
 8006858:	3001      	adds	r0, #1
 800685a:	d101      	bne.n	8006860 <sbrk_aligned+0x38>
 800685c:	f04f 34ff 	mov.w	r4, #4294967295
 8006860:	4620      	mov	r0, r4
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	20000870 	.word	0x20000870

08006868 <_malloc_r>:
 8006868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	1ccd      	adds	r5, r1, #3
 800686e:	f025 0503 	bic.w	r5, r5, #3
 8006872:	3508      	adds	r5, #8
 8006874:	2d0c      	cmp	r5, #12
 8006876:	bf38      	it	cc
 8006878:	250c      	movcc	r5, #12
 800687a:	2d00      	cmp	r5, #0
 800687c:	4607      	mov	r7, r0
 800687e:	db01      	blt.n	8006884 <_malloc_r+0x1c>
 8006880:	42a9      	cmp	r1, r5
 8006882:	d905      	bls.n	8006890 <_malloc_r+0x28>
 8006884:	230c      	movs	r3, #12
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	2600      	movs	r6, #0
 800688a:	4630      	mov	r0, r6
 800688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006890:	4e2e      	ldr	r6, [pc, #184]	; (800694c <_malloc_r+0xe4>)
 8006892:	f000 f89d 	bl	80069d0 <__malloc_lock>
 8006896:	6833      	ldr	r3, [r6, #0]
 8006898:	461c      	mov	r4, r3
 800689a:	bb34      	cbnz	r4, 80068ea <_malloc_r+0x82>
 800689c:	4629      	mov	r1, r5
 800689e:	4638      	mov	r0, r7
 80068a0:	f7ff ffc2 	bl	8006828 <sbrk_aligned>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	4604      	mov	r4, r0
 80068a8:	d14d      	bne.n	8006946 <_malloc_r+0xde>
 80068aa:	6834      	ldr	r4, [r6, #0]
 80068ac:	4626      	mov	r6, r4
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d140      	bne.n	8006934 <_malloc_r+0xcc>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4631      	mov	r1, r6
 80068b6:	4638      	mov	r0, r7
 80068b8:	eb04 0803 	add.w	r8, r4, r3
 80068bc:	f000 f878 	bl	80069b0 <_sbrk_r>
 80068c0:	4580      	cmp	r8, r0
 80068c2:	d13a      	bne.n	800693a <_malloc_r+0xd2>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	3503      	adds	r5, #3
 80068c8:	1a6d      	subs	r5, r5, r1
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	4629      	mov	r1, r5
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff ffa5 	bl	8006828 <sbrk_aligned>
 80068de:	3001      	adds	r0, #1
 80068e0:	d02b      	beq.n	800693a <_malloc_r+0xd2>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	442b      	add	r3, r5
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	e00e      	b.n	8006908 <_malloc_r+0xa0>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	1b52      	subs	r2, r2, r5
 80068ee:	d41e      	bmi.n	800692e <_malloc_r+0xc6>
 80068f0:	2a0b      	cmp	r2, #11
 80068f2:	d916      	bls.n	8006922 <_malloc_r+0xba>
 80068f4:	1961      	adds	r1, r4, r5
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	6025      	str	r5, [r4, #0]
 80068fa:	bf18      	it	ne
 80068fc:	6059      	strne	r1, [r3, #4]
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	bf08      	it	eq
 8006902:	6031      	streq	r1, [r6, #0]
 8006904:	5162      	str	r2, [r4, r5]
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	4638      	mov	r0, r7
 800690a:	f104 060b 	add.w	r6, r4, #11
 800690e:	f000 f865 	bl	80069dc <__malloc_unlock>
 8006912:	f026 0607 	bic.w	r6, r6, #7
 8006916:	1d23      	adds	r3, r4, #4
 8006918:	1af2      	subs	r2, r6, r3
 800691a:	d0b6      	beq.n	800688a <_malloc_r+0x22>
 800691c:	1b9b      	subs	r3, r3, r6
 800691e:	50a3      	str	r3, [r4, r2]
 8006920:	e7b3      	b.n	800688a <_malloc_r+0x22>
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	42a3      	cmp	r3, r4
 8006926:	bf0c      	ite	eq
 8006928:	6032      	streq	r2, [r6, #0]
 800692a:	605a      	strne	r2, [r3, #4]
 800692c:	e7ec      	b.n	8006908 <_malloc_r+0xa0>
 800692e:	4623      	mov	r3, r4
 8006930:	6864      	ldr	r4, [r4, #4]
 8006932:	e7b2      	b.n	800689a <_malloc_r+0x32>
 8006934:	4634      	mov	r4, r6
 8006936:	6876      	ldr	r6, [r6, #4]
 8006938:	e7b9      	b.n	80068ae <_malloc_r+0x46>
 800693a:	230c      	movs	r3, #12
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	4638      	mov	r0, r7
 8006940:	f000 f84c 	bl	80069dc <__malloc_unlock>
 8006944:	e7a1      	b.n	800688a <_malloc_r+0x22>
 8006946:	6025      	str	r5, [r4, #0]
 8006948:	e7de      	b.n	8006908 <_malloc_r+0xa0>
 800694a:	bf00      	nop
 800694c:	2000086c 	.word	0x2000086c

08006950 <_realloc_r>:
 8006950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006954:	4680      	mov	r8, r0
 8006956:	4614      	mov	r4, r2
 8006958:	460e      	mov	r6, r1
 800695a:	b921      	cbnz	r1, 8006966 <_realloc_r+0x16>
 800695c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	4611      	mov	r1, r2
 8006962:	f7ff bf81 	b.w	8006868 <_malloc_r>
 8006966:	b92a      	cbnz	r2, 8006974 <_realloc_r+0x24>
 8006968:	f7ff ff14 	bl	8006794 <_free_r>
 800696c:	4625      	mov	r5, r4
 800696e:	4628      	mov	r0, r5
 8006970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006974:	f000 f838 	bl	80069e8 <_malloc_usable_size_r>
 8006978:	4284      	cmp	r4, r0
 800697a:	4607      	mov	r7, r0
 800697c:	d802      	bhi.n	8006984 <_realloc_r+0x34>
 800697e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006982:	d812      	bhi.n	80069aa <_realloc_r+0x5a>
 8006984:	4621      	mov	r1, r4
 8006986:	4640      	mov	r0, r8
 8006988:	f7ff ff6e 	bl	8006868 <_malloc_r>
 800698c:	4605      	mov	r5, r0
 800698e:	2800      	cmp	r0, #0
 8006990:	d0ed      	beq.n	800696e <_realloc_r+0x1e>
 8006992:	42bc      	cmp	r4, r7
 8006994:	4622      	mov	r2, r4
 8006996:	4631      	mov	r1, r6
 8006998:	bf28      	it	cs
 800699a:	463a      	movcs	r2, r7
 800699c:	f7ff fba6 	bl	80060ec <memcpy>
 80069a0:	4631      	mov	r1, r6
 80069a2:	4640      	mov	r0, r8
 80069a4:	f7ff fef6 	bl	8006794 <_free_r>
 80069a8:	e7e1      	b.n	800696e <_realloc_r+0x1e>
 80069aa:	4635      	mov	r5, r6
 80069ac:	e7df      	b.n	800696e <_realloc_r+0x1e>
	...

080069b0 <_sbrk_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d06      	ldr	r5, [pc, #24]	; (80069cc <_sbrk_r+0x1c>)
 80069b4:	2300      	movs	r3, #0
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	602b      	str	r3, [r5, #0]
 80069bc:	f7fa ff4a 	bl	8001854 <_sbrk>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_sbrk_r+0x1a>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_sbrk_r+0x1a>
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	20000874 	.word	0x20000874

080069d0 <__malloc_lock>:
 80069d0:	4801      	ldr	r0, [pc, #4]	; (80069d8 <__malloc_lock+0x8>)
 80069d2:	f000 b811 	b.w	80069f8 <__retarget_lock_acquire_recursive>
 80069d6:	bf00      	nop
 80069d8:	20000878 	.word	0x20000878

080069dc <__malloc_unlock>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__malloc_unlock+0x8>)
 80069de:	f000 b80c 	b.w	80069fa <__retarget_lock_release_recursive>
 80069e2:	bf00      	nop
 80069e4:	20000878 	.word	0x20000878

080069e8 <_malloc_usable_size_r>:
 80069e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ec:	1f18      	subs	r0, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bfbc      	itt	lt
 80069f2:	580b      	ldrlt	r3, [r1, r0]
 80069f4:	18c0      	addlt	r0, r0, r3
 80069f6:	4770      	bx	lr

080069f8 <__retarget_lock_acquire_recursive>:
 80069f8:	4770      	bx	lr

080069fa <__retarget_lock_release_recursive>:
 80069fa:	4770      	bx	lr

080069fc <_init>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr

08006a08 <_fini>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr
