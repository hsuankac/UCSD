
Embedded C Assigment 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000562c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057fc  080057fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005804  08005804  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800580c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  2000000c  08005818  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  08005818  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a41  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b0  00000000  00000000  00039a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  0003cc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  0003e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ff0  00000000  00000000  0003f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d3f  00000000  00000000  000688e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9357  00000000  00000000  00082627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017b97e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f0  00000000  00000000  0017b9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800579c 	.word	0x0800579c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800579c 	.word	0x0800579c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <__NVIC_GetPriorityGrouping+0x18>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	f003 0307 	and.w	r3, r3, #7
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <__NVIC_EnableIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	; (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000578:	b480      	push	{r7}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	f1c3 0307 	rsb	r3, r3, #7
 8000592:	2b04      	cmp	r3, #4
 8000594:	bf28      	it	cs
 8000596:	2304      	movcs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3304      	adds	r3, #4
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d902      	bls.n	80005a8 <NVIC_EncodePriority+0x30>
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3b03      	subs	r3, #3
 80005a6:	e000      	b.n	80005aa <NVIC_EncodePriority+0x32>
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43da      	mvns	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	401a      	ands	r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43d9      	mvns	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	4313      	orrs	r3, r2
         );
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3724      	adds	r7, #36	; 0x24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b087      	sub	sp, #28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <LL_SYSCFG_SetEXTISource+0x68>)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	3302      	adds	r3, #2
 80005f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	43db      	mvns	r3, r3
 80005fc:	ea02 0103 	and.w	r1, r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	fa93 f3a3 	rbit	r3, r3
 800060c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d101      	bne.n	800061c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000618:	2320      	movs	r3, #32
 800061a:	e003      	b.n	8000624 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	fab3 f383 	clz	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	fa03 f202 	lsl.w	r2, r3, r2
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <LL_SYSCFG_SetEXTISource+0x68>)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	430a      	orrs	r2, r1
 8000634:	3302      	adds	r3, #2
 8000636:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800063a:	bf00      	nop
 800063c:	371c      	adds	r7, #28
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40010000 	.word	0x40010000

0800064c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800064c:	b480      	push	{r7}
 800064e:	b08b      	sub	sp, #44	; 0x2c
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	fa93 f3a3 	rbit	r3, r3
 8000666:	613b      	str	r3, [r7, #16]
  return result;
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000672:	2320      	movs	r3, #32
 8000674:	e003      	b.n	800067e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	fab3 f383 	clz	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	2103      	movs	r1, #3
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	401a      	ands	r2, r3
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	fa93 f3a3 	rbit	r3, r3
 8000694:	61fb      	str	r3, [r7, #28]
  return result;
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	2b00      	cmp	r3, #0
 800069e:	d101      	bne.n	80006a4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80006a0:	2320      	movs	r3, #32
 80006a2:	e003      	b.n	80006ac <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80006a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a6:	fab3 f383 	clz	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	431a      	orrs	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	372c      	adds	r7, #44	; 0x2c
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b08b      	sub	sp, #44	; 0x2c
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	68da      	ldr	r2, [r3, #12]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	fa93 f3a3 	rbit	r3, r3
 80006e0:	613b      	str	r3, [r7, #16]
  return result;
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80006ec:	2320      	movs	r3, #32
 80006ee:	e003      	b.n	80006f8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fab3 f383 	clz	r3, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	2103      	movs	r1, #3
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	401a      	ands	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	fa93 f3a3 	rbit	r3, r3
 800070e:	61fb      	str	r3, [r7, #28]
  return result;
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	2b00      	cmp	r3, #0
 8000718:	d101      	bne.n	800071e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800071a:	2320      	movs	r3, #32
 800071c:	e003      	b.n	8000726 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	fab3 f383 	clz	r3, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	431a      	orrs	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	60da      	str	r2, [r3, #12]
}
 8000734:	bf00      	nop
 8000736:	372c      	adds	r7, #44	; 0x2c
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	431a      	orrs	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	691a      	ldr	r2, [r3, #16]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	4013      	ands	r3, r2
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d101      	bne.n	800077e <LL_GPIO_IsInputPinSet+0x1c>
 800077a:	2301      	movs	r3, #1
 800077c:	e000      	b.n	8000780 <LL_GPIO_IsInputPinSet+0x1e>
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	619a      	str	r2, [r3, #24]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4013      	ands	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40021000 	.word	0x40021000

080007f4 <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]: X and Y coordinates on the wafer expressed in BCD format
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <LL_GetUID_Word0+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	1fff7590 	.word	0x1fff7590

0800080c <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <LL_GetUID_Word1+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	1fff7594 	.word	0x1fff7594

08000824 <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <LL_GetUID_Word2+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	1fff7598 	.word	0x1fff7598

0800083c <LL_GetFlashSize>:
  * @note   This bitfield indicates the size of the device Flash memory expressed in
  *         Kbytes. As an example, 0x040 corresponds to 64 Kbytes.
  * @retval FLASH_SIZE[15:0]: Flash memory size
  */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0xFFFFU);
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <LL_GetFlashSize+0x14>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	1fff75e0 	.word	0x1fff75e0

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f001 f8d4 	bl	8001a06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f835 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 f9fd 	bl	8000c60 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000866:	f000 f893 	bl	8000990 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800086a:	f000 f8c9 	bl	8000a00 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800086e:	f000 f905 	bl	8000a7c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000872:	f000 f929 	bl	8000ac8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000876:	f000 f965 	bl	8000b44 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800087a:	f000 f993 	bl	8000ba4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800087e:	f000 f9c1 	bl	8000c04 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  uint32_t flashSize = LL_GetFlashSize();
 8000882:	f7ff ffdb 	bl	800083c <LL_GetFlashSize>
 8000886:	60f8      	str	r0, [r7, #12]
  uint32_t deviceID0 = LL_GetUID_Word0();
 8000888:	f7ff ffb4 	bl	80007f4 <LL_GetUID_Word0>
 800088c:	60b8      	str	r0, [r7, #8]
  uint32_t deviceID1 = LL_GetUID_Word1();
 800088e:	f7ff ffbd 	bl	800080c <LL_GetUID_Word1>
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t deviceID2 = LL_GetUID_Word2();
 8000894:	f7ff ffc6 	bl	8000824 <LL_GetUID_Word2>
 8000898:	6038      	str	r0, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(!LL_GPIO_IsInputPinSet(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin))
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	4809      	ldr	r0, [pc, #36]	; (80008c4 <main+0x70>)
 80008a0:	f7ff ff5f 	bl	8000762 <LL_GPIO_IsInputPinSet>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d105      	bne.n	80008b6 <main+0x62>
	{
		LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 80008aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <main+0x74>)
 80008b0:	f7ff ff6c 	bl	800078c <LL_GPIO_SetOutputPin>
 80008b4:	e7f1      	b.n	800089a <main+0x46>
	}
	else
	{
		LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 80008b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <main+0x74>)
 80008bc:	f7ff ff74 	bl	80007a8 <LL_GPIO_ResetOutputPin>
	if(!LL_GPIO_IsInputPinSet(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin))
 80008c0:	e7eb      	b.n	800089a <main+0x46>
 80008c2:	bf00      	nop
 80008c4:	48000800 	.word	0x48000800
 80008c8:	48000400 	.word	0x48000400

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	; 0x58
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2244      	movs	r2, #68	; 0x44
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 ff56 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f2:	f001 ff49 	bl	8002788 <HAL_PWREx_ControlVoltageScaling>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008fc:	f000 fcde 	bl	80012bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000900:	f001 ff24 	bl	800274c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <SystemClock_Config+0xc0>)
 8000906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800090a:	4a20      	ldr	r2, [pc, #128]	; (800098c <SystemClock_Config+0xc0>)
 800090c:	f023 0318 	bic.w	r3, r3, #24
 8000910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000914:	2314      	movs	r3, #20
 8000916:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800092c:	2301      	movs	r3, #1
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000934:	2328      	movs	r3, #40	; 0x28
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000938:	2307      	movs	r3, #7
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4618      	mov	r0, r3
 800094a:	f002 f83f 	bl	80029cc <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000954:	f000 fcb2 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2303      	movs	r3, #3
 800095e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	2104      	movs	r1, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fc07 	bl	8003184 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800097c:	f000 fc9e 	bl	80012bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000980:	f003 f90e 	bl	8003ba0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000984:	bf00      	nop
 8000986:	3758      	adds	r7, #88	; 0x58
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000

08000990 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <MX_DFSDM1_Init+0x6c>)
 8000998:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 800099c:	2201      	movs	r2, #1
 800099e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009be:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_DFSDM1_Init+0x68>)
 80009e6:	f001 f98d 	bl	8001d04 <HAL_DFSDM_ChannelInit>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80009f0:	f000 fc64 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000028 	.word	0x20000028
 80009fc:	40016020 	.word	0x40016020

08000a00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_I2C2_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a0c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000a10:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a3e:	f001 fc17 	bl	8002270 <HAL_I2C_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a48:	f000 fc38 	bl	80012bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a50:	f001 fc9d 	bl	800238e <HAL_I2CEx_ConfigAnalogFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000a5a:	f000 fc2f 	bl	80012bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a62:	f001 fcdf 	bl	8002424 <HAL_I2CEx_ConfigDigitalFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000a6c:	f000 fc26 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000060 	.word	0x20000060
 8000a78:	40005800 	.word	0x40005800

08000a7c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_QUADSPI_Init+0x44>)
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <MX_QUADSPI_Init+0x48>)
 8000a84:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_QUADSPI_Init+0x44>)
 8000a88:	2202      	movs	r2, #2
 8000a8a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_QUADSPI_Init+0x44>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_QUADSPI_Init+0x44>)
 8000a94:	2210      	movs	r2, #16
 8000a96:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_QUADSPI_Init+0x44>)
 8000a9a:	2217      	movs	r2, #23
 8000a9c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_QUADSPI_Init+0x44>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_QUADSPI_Init+0x44>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_QUADSPI_Init+0x44>)
 8000aac:	f001 fed2 	bl	8002854 <HAL_QSPI_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000ab6:	f000 fc01 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000b4 	.word	0x200000b4
 8000ac4:	a0001000 	.word	0xa0001000

08000ac8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_SPI3_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000ae2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ae6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000b16:	2207      	movs	r2, #7
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000b22:	2208      	movs	r2, #8
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_SPI3_Init+0x74>)
 8000b28:	f003 fa1c 	bl	8003f64 <HAL_SPI_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f000 fbc3 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000f8 	.word	0x200000f8
 8000b40:	40003c00 	.word	0x40003c00

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART1_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART1_UART_Init+0x58>)
 8000b88:	f003 fa8f 	bl	80040aa <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 fb93 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000015c 	.word	0x2000015c
 8000ba0:	40013800 	.word	0x40013800

08000ba4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_USART3_UART_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART3_UART_Init+0x58>)
 8000be8:	f003 fa5f 	bl	80040aa <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 fb63 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001e0 	.word	0x200001e0
 8000c00:	40004800 	.word	0x40004800

08000c04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c12:	2206      	movs	r2, #6
 8000c14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	f001 fc38 	bl	80024bc <HAL_PCD_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 fb33 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000264 	.word	0x20000264

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8000c82:	2010      	movs	r0, #16
 8000c84:	f7ff fd9e 	bl	80007c4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c88:	2004      	movs	r0, #4
 8000c8a:	f7ff fd9b 	bl	80007c4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fd98 	bl	80007c4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c94:	2002      	movs	r0, #2
 8000c96:	f7ff fd95 	bl	80007c4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000c9a:	2008      	movs	r0, #8
 8000c9c:	f7ff fd92 	bl	80007c4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 8000ca0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ca4:	48c9      	ldr	r0, [pc, #804]	; (8000fcc <MX_GPIO_Init+0x36c>)
 8000ca6:	f7ff fd7f 	bl	80007a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin);
 8000caa:	f248 1104 	movw	r1, #33028	; 0x8104
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f7ff fd79 	bl	80007a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cb6:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000cba:	48c5      	ldr	r0, [pc, #788]	; (8000fd0 <MX_GPIO_Init+0x370>)
 8000cbc:	f7ff fd74 	bl	80007a8 <LL_GPIO_ResetOutputPin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8000cc0:	f241 0181 	movw	r1, #4225	; 0x1081
 8000cc4:	48c3      	ldr	r0, [pc, #780]	; (8000fd4 <MX_GPIO_Init+0x374>)
 8000cc6:	f7ff fd6f 	bl	80007a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 8000cca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000cce:	48c2      	ldr	r0, [pc, #776]	; (8000fd8 <MX_GPIO_Init+0x378>)
 8000cd0:	f7ff fd6a 	bl	80007a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 8000cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd8:	48be      	ldr	r0, [pc, #760]	; (8000fd4 <MX_GPIO_Init+0x374>)
 8000cda:	f7ff fd57 	bl	800078c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 8000cde:	2120      	movs	r1, #32
 8000ce0:	48bb      	ldr	r0, [pc, #748]	; (8000fd0 <MX_GPIO_Init+0x370>)
 8000ce2:	f7ff fd53 	bl	800078c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	48b8      	ldr	r0, [pc, #736]	; (8000fcc <MX_GPIO_Init+0x36c>)
 8000cea:	f7ff fd4f 	bl	800078c <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cee:	f240 1315 	movw	r3, #277	; 0x115
 8000cf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	48b0      	ldr	r0, [pc, #704]	; (8000fcc <MX_GPIO_Init+0x36c>)
 8000d0a:	f004 f9f7 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d0e:	233f      	movs	r3, #63	; 0x3f
 8000d10:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d12:	2303      	movs	r3, #3
 8000d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	48ae      	ldr	r0, [pc, #696]	; (8000fd8 <MX_GPIO_Init+0x378>)
 8000d20:	f004 f9ec 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d24:	2303      	movs	r3, #3
 8000d26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f004 f9da 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d48:	f248 1304 	movw	r3, #33028	; 0x8104
 8000d4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f004 f9c9 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f004 f9b7 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d92:	2303      	movs	r3, #3
 8000d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f004 f9ab 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000da6:	23e0      	movs	r3, #224	; 0xe0
 8000da8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000daa:	2302      	movs	r3, #2
 8000dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dba:	2305      	movs	r3, #5
 8000dbc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f004 f999 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	487d      	ldr	r0, [pc, #500]	; (8000fd0 <MX_GPIO_Init+0x370>)
 8000ddc:	f004 f98e 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000de0:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000de4:	607b      	str	r3, [r7, #4]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000de6:	2301      	movs	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4875      	ldr	r0, [pc, #468]	; (8000fd0 <MX_GPIO_Init+0x370>)
 8000dfc:	f004 f97e 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e00:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e06:	2301      	movs	r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	486e      	ldr	r0, [pc, #440]	; (8000fd4 <MX_GPIO_Init+0x374>)
 8000e1c:	f004 f96e 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e20:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4867      	ldr	r0, [pc, #412]	; (8000fd8 <MX_GPIO_Init+0x378>)
 8000e3c:	f004 f95e 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e40:	2302      	movs	r3, #2
 8000e42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e44:	2302      	movs	r3, #2
 8000e46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000e54:	2305      	movs	r3, #5
 8000e56:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	485d      	ldr	r0, [pc, #372]	; (8000fd4 <MX_GPIO_Init+0x374>)
 8000e5e:	f004 f94d 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e62:	2378      	movs	r3, #120	; 0x78
 8000e64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e66:	2302      	movs	r3, #2
 8000e68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e76:	2307      	movs	r3, #7
 8000e78:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4855      	ldr	r0, [pc, #340]	; (8000fd4 <MX_GPIO_Init+0x374>)
 8000e80:	f004 f93c 	bl	80050fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000e92:	2301      	movs	r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	484b      	ldr	r0, [pc, #300]	; (8000fd0 <MX_GPIO_Init+0x370>)
 8000ea4:	f004 f92a 	bl	80050fc <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 8000ea8:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000eac:	2004      	movs	r0, #4
 8000eae:	f7ff fb97 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 8000eb2:	494a      	ldr	r1, [pc, #296]	; (8000fdc <MX_GPIO_Init+0x37c>)
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f7ff fb93 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 8000eba:	4949      	ldr	r1, [pc, #292]	; (8000fe0 <MX_GPIO_Init+0x380>)
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	f7ff fb8f 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000ec2:	4948      	ldr	r1, [pc, #288]	; (8000fe4 <MX_GPIO_Init+0x384>)
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f7ff fb8b 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000eca:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fb86 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 8000ed4:	4944      	ldr	r1, [pc, #272]	; (8000fe8 <MX_GPIO_Init+0x388>)
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f7ff fb82 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 8000edc:	4943      	ldr	r1, [pc, #268]	; (8000fec <MX_GPIO_Init+0x38c>)
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f7ff fb7e 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 8000ee4:	4942      	ldr	r1, [pc, #264]	; (8000ff0 <MX_GPIO_Init+0x390>)
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f7ff fb7a 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 8000eec:	4941      	ldr	r1, [pc, #260]	; (8000ff4 <MX_GPIO_Init+0x394>)
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f7ff fb76 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 8000ef4:	4940      	ldr	r1, [pc, #256]	; (8000ff8 <MX_GPIO_Init+0x398>)
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff fb72 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 8000efc:	493f      	ldr	r1, [pc, #252]	; (8000ffc <MX_GPIO_Init+0x39c>)
 8000efe:	2002      	movs	r0, #2
 8000f00:	f7ff fb6e 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 8000f04:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f7ff fb69 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8000f0e:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000f12:	2004      	movs	r0, #4
 8000f14:	f7ff fb64 	bl	80005e0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 fe9e 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f50:	2301      	movs	r3, #1
 8000f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fe8c 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8000f60:	2340      	movs	r3, #64	; 0x40
 8000f62:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 fe7a 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f88:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fe67 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4618      	mov	r0, r3
 8000fca:	e019      	b.n	8001000 <MX_GPIO_Init+0x3a0>
 8000fcc:	48001000 	.word	0x48001000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000c00 	.word	0x48000c00
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	00f00001 	.word	0x00f00001
 8000fe0:	0f000001 	.word	0x0f000001
 8000fe4:	00f00003 	.word	0x00f00003
 8000fe8:	0f000002 	.word	0x0f000002
 8000fec:	f0000002 	.word	0xf0000002
 8000ff0:	0f000003 	.word	0x0f000003
 8000ff4:	f0000003 	.word	0xf0000003
 8000ff8:	f0000001 	.word	0xf0000001
 8000ffc:	000f0002 	.word	0x000f0002
 8001000:	f003 fe3a 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8001004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001008:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800100e:	2301      	movs	r3, #1
 8001010:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800101a:	2301      	movs	r3, #1
 800101c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fe27 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 800102a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001034:	2301      	movs	r3, #1
 8001036:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001040:	2301      	movs	r3, #1
 8001042:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fe14 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001050:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001054:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800105a:	2301      	movs	r3, #1
 800105c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001066:	2301      	movs	r3, #1
 8001068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fe01 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800107a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001080:	2301      	movs	r3, #1
 8001082:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800108c:	2301      	movs	r3, #1
 800108e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fdee 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fddc 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80010c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fdc9 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80010e6:	2304      	movs	r3, #4
 80010e8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fdb7 	bl	8004c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800110a:	2302      	movs	r3, #2
 800110c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001112:	2301      	movs	r3, #1
 8001114:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001118:	2300      	movs	r3, #0
 800111a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800111e:	2301      	movs	r3, #1
 8001120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fda5 	bl	8004c78 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 800112e:	2200      	movs	r2, #0
 8001130:	2108      	movs	r1, #8
 8001132:	485e      	ldr	r0, [pc, #376]	; (80012ac <MX_GPIO_Init+0x64c>)
 8001134:	f7ff fac7 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 8001138:	2200      	movs	r2, #0
 800113a:	2120      	movs	r1, #32
 800113c:	485b      	ldr	r0, [pc, #364]	; (80012ac <MX_GPIO_Init+0x64c>)
 800113e:	f7ff fac2 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 8001142:	2200      	movs	r2, #0
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	4859      	ldr	r0, [pc, #356]	; (80012ac <MX_GPIO_Init+0x64c>)
 8001148:	f7ff fabd 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001152:	4857      	ldr	r0, [pc, #348]	; (80012b0 <MX_GPIO_Init+0x650>)
 8001154:	f7ff fab7 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	4855      	ldr	r0, [pc, #340]	; (80012b4 <MX_GPIO_Init+0x654>)
 800115e:	f7ff fab2 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001168:	4853      	ldr	r0, [pc, #332]	; (80012b8 <MX_GPIO_Init+0x658>)
 800116a:	f7ff faac 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	4850      	ldr	r0, [pc, #320]	; (80012b8 <MX_GPIO_Init+0x658>)
 8001176:	f7ff faa6 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001180:	484d      	ldr	r0, [pc, #308]	; (80012b8 <MX_GPIO_Init+0x658>)
 8001182:	f7ff faa0 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118c:	484a      	ldr	r0, [pc, #296]	; (80012b8 <MX_GPIO_Init+0x658>)
 800118e:	f7ff fa9a 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 8001192:	2200      	movs	r2, #0
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	4846      	ldr	r0, [pc, #280]	; (80012b0 <MX_GPIO_Init+0x650>)
 8001198:	f7ff fa95 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	4843      	ldr	r0, [pc, #268]	; (80012b0 <MX_GPIO_Init+0x650>)
 80011a4:	f7ff fa8f 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2104      	movs	r1, #4
 80011ac:	4842      	ldr	r0, [pc, #264]	; (80012b8 <MX_GPIO_Init+0x658>)
 80011ae:	f7ff fa8a 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	483d      	ldr	r0, [pc, #244]	; (80012ac <MX_GPIO_Init+0x64c>)
 80011b8:	f7ff fa85 	bl	80006c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 80011bc:	2200      	movs	r2, #0
 80011be:	2108      	movs	r1, #8
 80011c0:	483a      	ldr	r0, [pc, #232]	; (80012ac <MX_GPIO_Init+0x64c>)
 80011c2:	f7ff fa43 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2120      	movs	r1, #32
 80011ca:	4838      	ldr	r0, [pc, #224]	; (80012ac <MX_GPIO_Init+0x64c>)
 80011cc:	f7ff fa3e 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2140      	movs	r1, #64	; 0x40
 80011d4:	4835      	ldr	r0, [pc, #212]	; (80012ac <MX_GPIO_Init+0x64c>)
 80011d6:	f7ff fa39 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	4833      	ldr	r0, [pc, #204]	; (80012b0 <MX_GPIO_Init+0x650>)
 80011e2:	f7ff fa33 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	4832      	ldr	r0, [pc, #200]	; (80012b4 <MX_GPIO_Init+0x654>)
 80011ec:	f7ff fa2e 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f6:	4830      	ldr	r0, [pc, #192]	; (80012b8 <MX_GPIO_Init+0x658>)
 80011f8:	f7ff fa28 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001202:	482d      	ldr	r0, [pc, #180]	; (80012b8 <MX_GPIO_Init+0x658>)
 8001204:	f7ff fa22 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	482a      	ldr	r0, [pc, #168]	; (80012b8 <MX_GPIO_Init+0x658>)
 8001210:	f7ff fa1c 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800121a:	4827      	ldr	r0, [pc, #156]	; (80012b8 <MX_GPIO_Init+0x658>)
 800121c:	f7ff fa16 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 8001220:	2200      	movs	r2, #0
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	4822      	ldr	r0, [pc, #136]	; (80012b0 <MX_GPIO_Init+0x650>)
 8001226:	f7ff fa11 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001230:	481f      	ldr	r0, [pc, #124]	; (80012b0 <MX_GPIO_Init+0x650>)
 8001232:	f7ff fa0b 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 8001236:	2200      	movs	r2, #0
 8001238:	2104      	movs	r1, #4
 800123a:	481f      	ldr	r0, [pc, #124]	; (80012b8 <MX_GPIO_Init+0x658>)
 800123c:	f7ff fa06 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001240:	2200      	movs	r2, #0
 8001242:	2102      	movs	r1, #2
 8001244:	4819      	ldr	r0, [pc, #100]	; (80012ac <MX_GPIO_Init+0x64c>)
 8001246:	f7ff fa01 	bl	800064c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800124a:	213f      	movs	r1, #63	; 0x3f
 800124c:	4818      	ldr	r0, [pc, #96]	; (80012b0 <MX_GPIO_Init+0x650>)
 800124e:	f7ff fa77 	bl	8000740 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D7_GPIO_Port, ARD_D7_Pin);
 8001252:	2110      	movs	r1, #16
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f7ff fa72 	bl	8000740 <LL_GPIO_EnablePinAnalogControl>

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D6_GPIO_Port, ARD_D6_Pin);
 800125c:	2102      	movs	r1, #2
 800125e:	4815      	ldr	r0, [pc, #84]	; (80012b4 <MX_GPIO_Init+0x654>)
 8001260:	f7ff fa6e 	bl	8000740 <LL_GPIO_EnablePinAnalogControl>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001264:	f7ff f932 	bl	80004cc <__NVIC_GetPriorityGrouping>
 8001268:	4603      	mov	r3, r0
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f982 	bl	8000578 <NVIC_EncodePriority>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	2017      	movs	r0, #23
 800127a:	f7ff f953 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800127e:	2017      	movs	r0, #23
 8001280:	f7ff f932 	bl	80004e8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001284:	f7ff f922 	bl	80004cc <__NVIC_GetPriorityGrouping>
 8001288:	4603      	mov	r3, r0
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f972 	bl	8000578 <NVIC_EncodePriority>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	2028      	movs	r0, #40	; 0x28
 800129a:	f7ff f943 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129e:	2028      	movs	r0, #40	; 0x28
 80012a0:	f7ff f922 	bl	80004e8 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	48001000 	.word	0x48001000
 80012b0:	48000800 	.word	0x48000800
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48000c00 	.word	0x48000c00

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>
	...

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_MspInit+0x44>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_MspInit+0x44>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6613      	str	r3, [r2, #96]	; 0x60
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_MspInit+0x44>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_MspInit+0x44>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_MspInit+0x44>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6593      	str	r3, [r2, #88]	; 0x58
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_MspInit+0x44>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0ac      	sub	sp, #176	; 0xb0
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2288      	movs	r2, #136	; 0x88
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f004 fa2b 	bl	800578c <memset>
  if(DFSDM1_Init == 0)
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d142      	bne.n	80013c4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800133e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001342:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4618      	mov	r0, r3
 8001350:	f002 f93c 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800135a:	f7ff ffaf 	bl	80012bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001368:	6613      	str	r3, [r2, #96]	; 0x60
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800138e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013a8:	2306      	movs	r3, #6
 80013aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013b6:	f000 fdb1 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a02      	ldr	r2, [pc, #8]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013c2:	6013      	str	r3, [r2, #0]
  }

}
 80013c4:	bf00      	nop
 80013c6:	37b0      	adds	r7, #176	; 0xb0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000770 	.word	0x20000770
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48001000 	.word	0x48001000

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0ac      	sub	sp, #176	; 0xb0
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2288      	movs	r2, #136	; 0x88
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 f9c7 	bl	800578c <memset>
  if(hi2c->Instance==I2C2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a21      	ldr	r2, [pc, #132]	; (8001488 <HAL_I2C_MspInit+0xb0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d13b      	bne.n	8001480 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f002 f8d9 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001420:	f7ff ff4c 	bl	80012bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_I2C_MspInit+0xb4>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	4a18      	ldr	r2, [pc, #96]	; (800148c <HAL_I2C_MspInit+0xb4>)
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_I2C_MspInit+0xb4>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800143c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001444:	2312      	movs	r3, #18
 8001446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001456:	2304      	movs	r3, #4
 8001458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001460:	4619      	mov	r1, r3
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <HAL_I2C_MspInit+0xb8>)
 8001464:	f000 fd5a 	bl	8001f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_I2C_MspInit+0xb4>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_I2C_MspInit+0xb4>)
 800146e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001472:	6593      	str	r3, [r2, #88]	; 0x58
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_I2C_MspInit+0xb4>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001480:	bf00      	nop
 8001482:	37b0      	adds	r7, #176	; 0xb0
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40005800 	.word	0x40005800
 800148c:	40021000 	.word	0x40021000
 8001490:	48000400 	.word	0x48000400

08001494 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_QSPI_MspInit+0x7c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d128      	bne.n	8001508 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_QSPI_MspInit+0x80>)
 80014b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <HAL_QSPI_MspInit+0x80>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6513      	str	r3, [r2, #80]	; 0x50
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_QSPI_MspInit+0x80>)
 80014c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_QSPI_MspInit+0x80>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_QSPI_MspInit+0x80>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_QSPI_MspInit+0x80>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80014e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80014ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014f8:	230a      	movs	r3, #10
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_QSPI_MspInit+0x84>)
 8001504:	f000 fd0a 	bl	8001f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	a0001000 	.word	0xa0001000
 8001514:	40021000 	.word	0x40021000
 8001518:	48001000 	.word	0x48001000

0800151c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_SPI_MspInit+0x7c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d128      	bne.n	8001590 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_SPI_MspInit+0x80>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <HAL_SPI_MspInit+0x80>)
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	6593      	str	r3, [r2, #88]	; 0x58
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_SPI_MspInit+0x80>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_SPI_MspInit+0x80>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_SPI_MspInit+0x80>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_SPI_MspInit+0x80>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800156e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001580:	2306      	movs	r3, #6
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_SPI_MspInit+0x84>)
 800158c:	f000 fcc6 	bl	8001f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40003c00 	.word	0x40003c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000800 	.word	0x48000800

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0ae      	sub	sp, #184	; 0xb8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2288      	movs	r2, #136	; 0x88
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 f8e1 	bl	800578c <memset>
  if(huart->Instance==USART1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a42      	ldr	r2, [pc, #264]	; (80016d8 <HAL_UART_MspInit+0x134>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d13b      	bne.n	800164c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015d8:	2300      	movs	r3, #0
 80015da:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fff3 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015ec:	f7ff fe66 	bl	80012bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <HAL_UART_MspInit+0x138>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f4:	4a39      	ldr	r2, [pc, #228]	; (80016dc <HAL_UART_MspInit+0x138>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fa:	6613      	str	r3, [r2, #96]	; 0x60
 80015fc:	4b37      	ldr	r3, [pc, #220]	; (80016dc <HAL_UART_MspInit+0x138>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_UART_MspInit+0x138>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a33      	ldr	r2, [pc, #204]	; (80016dc <HAL_UART_MspInit+0x138>)
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_UART_MspInit+0x138>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001620:	23c0      	movs	r3, #192	; 0xc0
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001638:	2307      	movs	r3, #7
 800163a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001642:	4619      	mov	r1, r3
 8001644:	4826      	ldr	r0, [pc, #152]	; (80016e0 <HAL_UART_MspInit+0x13c>)
 8001646:	f000 fc69 	bl	8001f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800164a:	e040      	b.n	80016ce <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_UART_MspInit+0x140>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d13b      	bne.n	80016ce <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001656:	2304      	movs	r3, #4
 8001658:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800165a:	2300      	movs	r3, #0
 800165c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4618      	mov	r0, r3
 8001664:	f001 ffb2 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800166e:	f7ff fe25 	bl	80012bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_UART_MspInit+0x138>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	4a19      	ldr	r2, [pc, #100]	; (80016dc <HAL_UART_MspInit+0x138>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_UART_MspInit+0x138>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_UART_MspInit+0x138>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <HAL_UART_MspInit+0x138>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_UART_MspInit+0x138>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016bc:	2307      	movs	r3, #7
 80016be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <HAL_UART_MspInit+0x144>)
 80016ca:	f000 fc27 	bl	8001f1c <HAL_GPIO_Init>
}
 80016ce:	bf00      	nop
 80016d0:	37b8      	adds	r7, #184	; 0xb8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000400 	.word	0x48000400
 80016e4:	40004800 	.word	0x40004800
 80016e8:	48000c00 	.word	0x48000c00

080016ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0ac      	sub	sp, #176	; 0xb0
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2288      	movs	r2, #136	; 0x88
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f004 f83d 	bl	800578c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800171a:	d17c      	bne.n	8001816 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001722:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001726:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001732:	2318      	movs	r3, #24
 8001734:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001736:	2307      	movs	r3, #7
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800173e:	2302      	movs	r3, #2
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001742:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4618      	mov	r0, r3
 800174e:	f001 ff3d 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001758:	f7ff fdb0 	bl	80012bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_PCD_MspInit+0x134>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <HAL_PCD_MspInit+0x134>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_PCD_MspInit+0x134>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f000 fbc3 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001796:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800179a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b0:	230a      	movs	r3, #10
 80017b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f000 fbac 	bl	8001f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_PCD_MspInit+0x134>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	4a15      	ldr	r2, [pc, #84]	; (8001820 <HAL_PCD_MspInit+0x134>)
 80017ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_PCD_MspInit+0x134>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_PCD_MspInit+0x134>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d114      	bne.n	8001812 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_PCD_MspInit+0x134>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <HAL_PCD_MspInit+0x134>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6593      	str	r3, [r2, #88]	; 0x58
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_PCD_MspInit+0x134>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001800:	f001 f818 	bl	8002834 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_PCD_MspInit+0x134>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	4a05      	ldr	r2, [pc, #20]	; (8001820 <HAL_PCD_MspInit+0x134>)
 800180a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001810:	e001      	b.n	8001816 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001812:	f001 f80f 	bl	8002834 <HAL_PWREx_EnableVddUSB>
}
 8001816:	bf00      	nop
 8001818:	37b0      	adds	r7, #176	; 0xb0
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	d101      	bne.n	800183e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40010400 	.word	0x40010400

08001850 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6153      	str	r3, [r2, #20]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40010400 	.word	0x40010400

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f8f8 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 80018c8:	2020      	movs	r0, #32
 80018ca:	f7ff ffab 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 80018d4:	2020      	movs	r0, #32
 80018d6:	f7ff ffbb 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 80018da:	2040      	movs	r0, #64	; 0x40
 80018dc:	f7ff ffa2 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80018e6:	2040      	movs	r0, #64	; 0x40
 80018e8:	f7ff ffb2 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 80018ec:	2080      	movs	r0, #128	; 0x80
 80018ee:	f7ff ff99 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 80018f8:	2080      	movs	r0, #128	; 0x80
 80018fa:	f7ff ffa9 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 80018fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001902:	f7ff ff8f 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 800190c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001910:	f7ff ff9e 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 800191c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001920:	f7ff ff80 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 800192a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800192e:	f7ff ff8f 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8001932:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001936:	f7ff ff75 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001940:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001944:	f7ff ff84 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001948:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800194c:	f7ff ff6a 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001956:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800195a:	f7ff ff79 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800195e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001962:	f7ff ff5f 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800196c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001970:	f7ff ff6e 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001974:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001978:	f7ff ff54 	bl	8001824 <LL_EXTI_IsActiveFlag_0_31>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001982:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001986:	f7ff ff63 	bl	8001850 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <SystemInit+0x20>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <SystemInit+0x20>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b8:	f7ff ffea 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	; (80019f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f003 feaf 	bl	8005744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019e6:	f7fe ff35 	bl	8000854 <main>

080019ea <LoopForever>:

LoopForever:
    b LoopForever
 80019ea:	e7fe      	b.n	80019ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019f8:	0800580c 	.word	0x0800580c
  ldr r2, =_sbss
 80019fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a00:	2000079c 	.word	0x2000079c

08001a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC1_2_IRQHandler>

08001a06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 f943 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f80e 	bl	8001a38 <HAL_InitTick>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	e001      	b.n	8001a2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a28:	f7ff fc4e 	bl	80012c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_InitTick+0x6c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_InitTick+0x70>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_InitTick+0x6c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f941 	bl	8001cea <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d809      	bhi.n	8001a88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 f919 	bl	8001cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_InitTick+0x74>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e007      	b.n	8001a98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e004      	b.n	8001a98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e001      	b.n	8001a98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000774 	.word	0x20000774

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000774 	.word	0x20000774

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008

08001b38 <__NVIC_SetPriorityGrouping>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_SetPriority>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff47 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff5c 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff8e 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffb0 	bl	8001c58 <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0ac      	b.n	8001e70 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f8b2 	bl	8001e84 <DFSDM_GetChannelFromInstance>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a55      	ldr	r2, [pc, #340]	; (8001e78 <HAL_DFSDM_ChannelInit+0x174>)
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e09f      	b.n	8001e70 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff faed 	bl	8001310 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_DFSDM_ChannelInit+0x178>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_DFSDM_ChannelInit+0x178>)
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001d40:	4b4e      	ldr	r3, [pc, #312]	; (8001e7c <HAL_DFSDM_ChannelInit+0x178>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d125      	bne.n	8001d94 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d52:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4948      	ldr	r1, [pc, #288]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d68:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001d6c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	791b      	ldrb	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001d76:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	493f      	ldr	r1, [pc, #252]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001d88:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a3c      	ldr	r2, [pc, #240]	; (8001e80 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d92:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001da2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6819      	ldr	r1, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001db2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001db8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 020f 	bic.w	r2, r2, #15
 8001dd0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001df8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6899      	ldr	r1, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f002 0207 	and.w	r2, r2, #7
 8001e24:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e50:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f810 	bl	8001e84 <DFSDM_GetChannelFromInstance>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4904      	ldr	r1, [pc, #16]	; (8001e78 <HAL_DFSDM_ChannelInit+0x174>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000077c 	.word	0x2000077c
 8001e7c:	20000778 	.word	0x20000778
 8001e80:	40016000 	.word	0x40016000

08001e84 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <DFSDM_GetChannelFromInstance+0x7c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d102      	bne.n	8001e9a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e02b      	b.n	8001ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <DFSDM_GetChannelFromInstance+0x80>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d102      	bne.n	8001ea8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	e024      	b.n	8001ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <DFSDM_GetChannelFromInstance+0x84>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d102      	bne.n	8001eb6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e01d      	b.n	8001ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <DFSDM_GetChannelFromInstance+0x88>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d102      	bne.n	8001ec4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e016      	b.n	8001ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001ecc:	2305      	movs	r3, #5
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e00f      	b.n	8001ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <DFSDM_GetChannelFromInstance+0x90>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d102      	bne.n	8001ee0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001eda:	2306      	movs	r3, #6
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e008      	b.n	8001ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <DFSDM_GetChannelFromInstance+0x94>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d102      	bne.n	8001eee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e001      	b.n	8001ef2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40016000 	.word	0x40016000
 8001f04:	40016020 	.word	0x40016020
 8001f08:	40016040 	.word	0x40016040
 8001f0c:	40016080 	.word	0x40016080
 8001f10:	400160a0 	.word	0x400160a0
 8001f14:	400160c0 	.word	0x400160c0
 8001f18:	400160e0 	.word	0x400160e0

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2a:	e17f      	b.n	800222c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8171 	beq.w	8002226 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d005      	beq.n	8001f5c <HAL_GPIO_Init+0x40>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d130      	bne.n	8001fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f92:	2201      	movs	r2, #1
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	f003 0201 	and.w	r2, r3, #1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d118      	bne.n	8001ffc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f003 0201 	and.w	r2, r3, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b03      	cmp	r3, #3
 8002006:	d017      	beq.n	8002038 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	6939      	ldr	r1, [r7, #16]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80ac 	beq.w	8002226 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	4b5f      	ldr	r3, [pc, #380]	; (800224c <HAL_GPIO_Init+0x330>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	4a5e      	ldr	r2, [pc, #376]	; (800224c <HAL_GPIO_Init+0x330>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6613      	str	r3, [r2, #96]	; 0x60
 80020da:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_GPIO_Init+0x330>)
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020e6:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_GPIO_Init+0x334>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002110:	d025      	beq.n	800215e <HAL_GPIO_Init+0x242>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <HAL_GPIO_Init+0x338>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01f      	beq.n	800215a <HAL_GPIO_Init+0x23e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <HAL_GPIO_Init+0x33c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d019      	beq.n	8002156 <HAL_GPIO_Init+0x23a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4d      	ldr	r2, [pc, #308]	; (800225c <HAL_GPIO_Init+0x340>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0x236>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4c      	ldr	r2, [pc, #304]	; (8002260 <HAL_GPIO_Init+0x344>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00d      	beq.n	800214e <HAL_GPIO_Init+0x232>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4b      	ldr	r2, [pc, #300]	; (8002264 <HAL_GPIO_Init+0x348>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x22e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4a      	ldr	r2, [pc, #296]	; (8002268 <HAL_GPIO_Init+0x34c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_GPIO_Init+0x22a>
 8002142:	2306      	movs	r3, #6
 8002144:	e00c      	b.n	8002160 <HAL_GPIO_Init+0x244>
 8002146:	2307      	movs	r3, #7
 8002148:	e00a      	b.n	8002160 <HAL_GPIO_Init+0x244>
 800214a:	2305      	movs	r3, #5
 800214c:	e008      	b.n	8002160 <HAL_GPIO_Init+0x244>
 800214e:	2304      	movs	r3, #4
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x244>
 8002152:	2303      	movs	r3, #3
 8002154:	e004      	b.n	8002160 <HAL_GPIO_Init+0x244>
 8002156:	2302      	movs	r3, #2
 8002158:	e002      	b.n	8002160 <HAL_GPIO_Init+0x244>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x244>
 800215e:	2300      	movs	r3, #0
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	f002 0203 	and.w	r2, r2, #3
 8002166:	0092      	lsls	r2, r2, #2
 8002168:	4093      	lsls	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002170:	4937      	ldr	r1, [pc, #220]	; (8002250 <HAL_GPIO_Init+0x334>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800217e:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_GPIO_Init+0x350>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a2:	4a32      	ldr	r2, [pc, #200]	; (800226c <HAL_GPIO_Init+0x350>)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_GPIO_Init+0x350>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_GPIO_Init+0x350>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_GPIO_Init+0x350>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f6:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_GPIO_Init+0x350>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_GPIO_Init+0x350>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <HAL_GPIO_Init+0x350>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa22 f303 	lsr.w	r3, r2, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	f47f ae78 	bne.w	8001f2c <HAL_GPIO_Init+0x10>
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	40010000 	.word	0x40010000
 8002254:	48000400 	.word	0x48000400
 8002258:	48000800 	.word	0x48000800
 800225c:	48000c00 	.word	0x48000c00
 8002260:	48001000 	.word	0x48001000
 8002264:	48001400 	.word	0x48001400
 8002268:	48001800 	.word	0x48001800
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e081      	b.n	8002386 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff f89e 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	e006      	b.n	80022f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d104      	bne.n	800230a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800232c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69d9      	ldr	r1, [r3, #28]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d138      	bne.n	8002416 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e032      	b.n	8002418 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2224      	movs	r2, #36	; 0x24
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	d139      	bne.n	80024ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002444:	2302      	movs	r3, #2
 8002446:	e033      	b.n	80024b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002476:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
  }
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	b08f      	sub	sp, #60	; 0x3c
 80024c0:	af0a      	add	r7, sp, #40	; 0x28
 80024c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e116      	b.n	80026fc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff f8ff 	bl	80016ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fe8f 	bl	8005230 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	687e      	ldr	r6, [r7, #4]
 800251a:	466d      	mov	r5, sp
 800251c:	f106 0410 	add.w	r4, r6, #16
 8002520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002528:	e894 0003 	ldmia.w	r4, {r0, r1}
 800252c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002530:	1d33      	adds	r3, r6, #4
 8002532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002534:	6838      	ldr	r0, [r7, #0]
 8002536:	f002 fe4f 	bl	80051d8 <USB_CoreInit>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0d7      	b.n	80026fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fe7d 	bl	8005252 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e04a      	b.n	80025f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	333d      	adds	r3, #61	; 0x3d
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	333c      	adds	r3, #60	; 0x3c
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	b298      	uxth	r0, r3
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	3344      	adds	r3, #68	; 0x44
 800259a:	4602      	mov	r2, r0
 800259c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3340      	adds	r3, #64	; 0x40
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3348      	adds	r3, #72	; 0x48
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	334c      	adds	r3, #76	; 0x4c
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3354      	adds	r3, #84	; 0x54
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	3301      	adds	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d3af      	bcc.n	800255e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	e044      	b.n	800268e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	3301      	adds	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	d3b5      	bcc.n	8002604 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	687e      	ldr	r6, [r7, #4]
 80026a0:	466d      	mov	r5, sp
 80026a2:	f106 0410 	add.w	r4, r6, #16
 80026a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b6:	1d33      	adds	r3, r6, #4
 80026b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f002 fe16 	bl	80052ec <USB_DevInit>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e014      	b.n	80026fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f80a 	bl	8002704 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 ffc2 	bl	800567e <USB_DevDisconnect>

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002704 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	f043 0303 	orr.w	r3, r3, #3
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40007000 	.word	0x40007000

0800276c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_PWREx_GetVoltageRange+0x18>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40007000 	.word	0x40007000

08002788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d130      	bne.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002798:	4b23      	ldr	r3, [pc, #140]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a4:	d038      	beq.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ae:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2232      	movs	r2, #50	; 0x32
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	3301      	adds	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027cc:	e002      	b.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e0:	d102      	bne.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f2      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f4:	d110      	bne.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e00f      	b.n	800281a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002806:	d007      	beq.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002810:	4a05      	ldr	r2, [pc, #20]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002816:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40007000 	.word	0x40007000
 800282c:	20000000 	.word	0x20000000
 8002830:	431bde83 	.word	0x431bde83

08002834 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_PWREx_EnableVddUSB+0x1c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_PWREx_EnableVddUSB+0x1c>)
 800283e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002842:	6053      	str	r3, [r2, #4]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40007000 	.word	0x40007000

08002854 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff f93c 	bl	8001ad8 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e063      	b.n	8002934 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fe fe07 	bl	8001494 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002886:	f241 3188 	movw	r1, #5000	; 0x1388
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f858 	bl	8002940 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	3b01      	subs	r3, #1
 80028a0:	021a      	lsls	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2120      	movs	r1, #32
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f850 	bl	800295c <QSPI_WaitFlagStateUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d131      	bne.n	800292a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028d0:	f023 0310 	bic.w	r3, r3, #16
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6852      	ldr	r2, [r2, #4]
 80028d8:	0611      	lsls	r1, r2, #24
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68d2      	ldr	r2, [r2, #12]
 80028de:	4311      	orrs	r1, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <HAL_QSPI_Init+0xe8>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6912      	ldr	r2, [r2, #16]
 80028f6:	0411      	lsls	r1, r2, #16
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6952      	ldr	r2, [r2, #20]
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6992      	ldr	r2, [r2, #24]
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002932:	7afb      	ldrb	r3, [r7, #11]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	ffe0f8fe 	.word	0xffe0f8fe

08002940 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800296c:	e01a      	b.n	80029a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d016      	beq.n	80029a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002976:	f7ff f8af 	bl	8001ad8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	429a      	cmp	r2, r3
 8002984:	d302      	bcc.n	800298c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10b      	bne.n	80029a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2204      	movs	r2, #4
 8002990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e00e      	b.n	80029c2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf14      	ite	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	2300      	moveq	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1d6      	bne.n	800296e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e3ca      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	4b97      	ldr	r3, [pc, #604]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e8:	4b94      	ldr	r3, [pc, #592]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80e4 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_RCC_OscConfig+0x4a>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	f040 808b 	bne.w	8002b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	f040 8087 	bne.w	8002b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a16:	4b89      	ldr	r3, [pc, #548]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e3a2      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1a      	ldr	r2, [r3, #32]
 8002a32:	4b82      	ldr	r3, [pc, #520]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <HAL_RCC_OscConfig+0x7c>
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a46:	e005      	b.n	8002a54 <HAL_RCC_OscConfig+0x88>
 8002a48:	4b7c      	ldr	r3, [pc, #496]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d223      	bcs.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd55 	bl	800350c <RCC_SetFlashLatencyFromMSIRange>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e383      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6c:	4b73      	ldr	r3, [pc, #460]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a72      	ldr	r2, [pc, #456]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a72:	f043 0308 	orr.w	r3, r3, #8
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b70      	ldr	r3, [pc, #448]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	496d      	ldr	r1, [pc, #436]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8a:	4b6c      	ldr	r3, [pc, #432]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	4968      	ldr	r1, [pc, #416]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
 8002a9e:	e025      	b.n	8002aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a65      	ldr	r2, [pc, #404]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4960      	ldr	r1, [pc, #384]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abe:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	495b      	ldr	r1, [pc, #364]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fd15 	bl	800350c <RCC_SetFlashLatencyFromMSIRange>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e343      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aec:	f000 fc4a 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b52      	ldr	r3, [pc, #328]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	4950      	ldr	r1, [pc, #320]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	4a4e      	ldr	r2, [pc, #312]	; (8002c44 <HAL_RCC_OscConfig+0x278>)
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b0c:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <HAL_RCC_OscConfig+0x27c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe ff91 	bl	8001a38 <HAL_InitTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d052      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	e327      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d032      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b2c:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a42      	ldr	r2, [pc, #264]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b38:	f7fe ffce 	bl	8001ad8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b40:	f7fe ffca 	bl	8001ad8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e310      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b52:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a36      	ldr	r2, [pc, #216]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b64:	f043 0308 	orr.w	r3, r3, #8
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b34      	ldr	r3, [pc, #208]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4931      	ldr	r1, [pc, #196]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	492c      	ldr	r1, [pc, #176]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	e01a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe ff9b 	bl	8001ad8 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba6:	f7fe ff97 	bl	8001ad8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e2dd      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb8:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x1da>
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d074      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x21a>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d10e      	bne.n	8002bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d064      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d160      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e2ba      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x24a>
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e026      	b.n	8002c64 <HAL_RCC_OscConfig+0x298>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1e:	d115      	bne.n	8002c4c <HAL_RCC_OscConfig+0x280>
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a02      	ldr	r2, [pc, #8]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x298>
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	080057b4 	.word	0x080057b4
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	4ba0      	ldr	r3, [pc, #640]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a9f      	ldr	r2, [pc, #636]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b9d      	ldr	r3, [pc, #628]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a9c      	ldr	r2, [pc, #624]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe ff34 	bl	8001ad8 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe ff30 	bl	8001ad8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e276      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	4b92      	ldr	r3, [pc, #584]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2a8>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe ff20 	bl	8001ad8 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe ff1c 	bl	8001ad8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e262      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2d0>
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d060      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x310>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d119      	bne.n	8002d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d116      	bne.n	8002d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	4b7c      	ldr	r3, [pc, #496]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x328>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e23f      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	4973      	ldr	r1, [pc, #460]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	e040      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d023      	beq.n	8002d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d12:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6e      	ldr	r2, [pc, #440]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fedb 	bl	8001ad8 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fed7 	bl	8001ad8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e21d      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b62      	ldr	r3, [pc, #392]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	495f      	ldr	r1, [pc, #380]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e018      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a5c      	ldr	r2, [pc, #368]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe feb7 	bl	8001ad8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fe feb3 	bl	8001ad8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e1f9      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d03c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01c      	beq.n	8002dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da6:	4a4a      	ldr	r2, [pc, #296]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fe92 	bl	8001ad8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe fe8e 	bl	8001ad8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1d4      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3ec>
 8002dd8:	e01b      	b.n	8002e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de0:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fe75 	bl	8001ad8 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe fe71 	bl	8001ad8 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1b7      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ef      	bne.n	8002df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80a6 	beq.w	8002f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <HAL_RCC_OscConfig+0x508>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d118      	bne.n	8002e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <HAL_RCC_OscConfig+0x508>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_RCC_OscConfig+0x508>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fe38 	bl	8001ad8 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6c:	f7fe fe34 	bl	8001ad8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e17a      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_OscConfig+0x508>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4d8>
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea2:	e029      	b.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d115      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x50c>
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	4a03      	ldr	r2, [pc, #12]	; (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ecc:	e014      	b.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	4b9c      	ldr	r3, [pc, #624]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	4a9b      	ldr	r2, [pc, #620]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee8:	4b98      	ldr	r3, [pc, #608]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	4a97      	ldr	r2, [pc, #604]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d016      	beq.n	8002f2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fdea 	bl	8001ad8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fde6 	bl	8001ad8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e12a      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ed      	beq.n	8002f08 <HAL_RCC_OscConfig+0x53c>
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fdd3 	bl	8001ad8 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fdcf 	bl	8001ad8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e113      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f4c:	4b7f      	ldr	r3, [pc, #508]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ed      	bne.n	8002f36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b7a      	ldr	r3, [pc, #488]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4a79      	ldr	r2, [pc, #484]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80fe 	beq.w	8003172 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	f040 80d0 	bne.w	8003120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f80:	4b72      	ldr	r3, [pc, #456]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d130      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d127      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d11f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc0:	2a07      	cmp	r2, #7
 8002fc2:	bf14      	ite	ne
 8002fc4:	2201      	movne	r2, #1
 8002fc6:	2200      	moveq	r2, #0
 8002fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d113      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d06e      	beq.n	80030d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d069      	beq.n	80030d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_OscConfig+0x780>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0ad      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <HAL_RCC_OscConfig+0x780>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4b      	ldr	r2, [pc, #300]	; (800314c <HAL_RCC_OscConfig+0x780>)
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003024:	f7fe fd58 	bl	8001ad8 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fd54 	bl	8001ad8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e09a      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303e:	4b43      	ldr	r3, [pc, #268]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304a:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_RCC_OscConfig+0x780>)
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	4b40      	ldr	r3, [pc, #256]	; (8003150 <HAL_RCC_OscConfig+0x784>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800305a:	3a01      	subs	r2, #1
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003064:	0212      	lsls	r2, r2, #8
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800306c:	0852      	lsrs	r2, r2, #1
 800306e:	3a01      	subs	r2, #1
 8003070:	0552      	lsls	r2, r2, #21
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003078:	0852      	lsrs	r2, r2, #1
 800307a:	3a01      	subs	r2, #1
 800307c:	0652      	lsls	r2, r2, #25
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003084:	0912      	lsrs	r2, r2, #4
 8003086:	0452      	lsls	r2, r2, #17
 8003088:	430a      	orrs	r2, r1
 800308a:	4930      	ldr	r1, [pc, #192]	; (800314c <HAL_RCC_OscConfig+0x780>)
 800308c:	4313      	orrs	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800309c:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_RCC_OscConfig+0x780>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a2a      	ldr	r2, [pc, #168]	; (800314c <HAL_RCC_OscConfig+0x780>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030a8:	f7fe fd16 	bl	8001ad8 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fd12 	bl	8001ad8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e058      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c2:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_RCC_OscConfig+0x780>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ce:	e050      	b.n	8003172 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e04f      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_RCC_OscConfig+0x780>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d148      	bne.n	8003172 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_RCC_OscConfig+0x780>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_RCC_OscConfig+0x780>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_RCC_OscConfig+0x780>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_RCC_OscConfig+0x780>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030f8:	f7fe fcee 	bl	8001ad8 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fcea 	bl	8001ad8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e030      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x734>
 800311e:	e028      	b.n	8003172 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d023      	beq.n	800316e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_OscConfig+0x780>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a08      	ldr	r2, [pc, #32]	; (800314c <HAL_RCC_OscConfig+0x780>)
 800312c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe fcd1 	bl	8001ad8 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003138:	e00c      	b.n	8003154 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe fccd 	bl	8001ad8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d905      	bls.n	8003154 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e013      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
 800314c:	40021000 	.word	0x40021000
 8003150:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_OscConfig+0x7b0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ec      	bne.n	800313a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_OscConfig+0x7b0>)
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	4905      	ldr	r1, [pc, #20]	; (800317c <HAL_RCC_OscConfig+0x7b0>)
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_RCC_OscConfig+0x7b4>)
 8003168:	4013      	ands	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
 800316c:	e001      	b.n	8003172 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	feeefffc 	.word	0xfeeefffc

08003184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0e7      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b75      	ldr	r3, [pc, #468]	; (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b72      	ldr	r3, [pc, #456]	; (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4970      	ldr	r1, [pc, #448]	; (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b6e      	ldr	r3, [pc, #440]	; (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0cf      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d908      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4960      	ldr	r1, [pc, #384]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d04c      	beq.n	800329c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	4b5a      	ldr	r3, [pc, #360]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d121      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0a6      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d115      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e09a      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800323a:	4b4e      	ldr	r3, [pc, #312]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e08e      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800324a:	4b4a      	ldr	r3, [pc, #296]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e086      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4943      	ldr	r1, [pc, #268]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe fc34 	bl	8001ad8 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe fc30 	bl	8001ad8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e06e      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b31      	ldr	r3, [pc, #196]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d208      	bcs.n	80032ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	492b      	ldr	r1, [pc, #172]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ca:	4b29      	ldr	r3, [pc, #164]	; (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d210      	bcs.n	80032fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d8:	4b25      	ldr	r3, [pc, #148]	; (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 0207 	bic.w	r2, r3, #7
 80032e0:	4923      	ldr	r1, [pc, #140]	; (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e036      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4918      	ldr	r1, [pc, #96]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4910      	ldr	r1, [pc, #64]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003338:	f000 f824 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	490b      	ldr	r1, [pc, #44]	; (8003378 <HAL_RCC_ClockConfig+0x1f4>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
 8003354:	4a09      	ldr	r2, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1f8>)
 8003356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_ClockConfig+0x1fc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fb6b 	bl	8001a38 <HAL_InitTick>
 8003362:	4603      	mov	r3, r0
 8003364:	72fb      	strb	r3, [r7, #11]

  return status;
 8003366:	7afb      	ldrb	r3, [r7, #11]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40022000 	.word	0x40022000
 8003374:	40021000 	.word	0x40021000
 8003378:	080057b4 	.word	0x080057b4
 800337c:	20000000 	.word	0x20000000
 8003380:	20000004 	.word	0x20000004

08003384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003392:	4b3e      	ldr	r3, [pc, #248]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339c:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x34>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d121      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d11e      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033b8:	4b34      	ldr	r3, [pc, #208]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e005      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033e0:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f4:	e00a      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d102      	bne.n	8003402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033fc:	4b25      	ldr	r3, [pc, #148]	; (8003494 <HAL_RCC_GetSysClockFreq+0x110>)
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	e004      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d101      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003408:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_RCC_GetSysClockFreq+0x114>)
 800340a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d134      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003412:	4b1e      	ldr	r3, [pc, #120]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0xa6>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d003      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xac>
 8003428:	e005      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <HAL_RCC_GetSysClockFreq+0x110>)
 800342c:	617b      	str	r3, [r7, #20]
      break;
 800342e:	e005      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_GetSysClockFreq+0x114>)
 8003432:	617b      	str	r3, [r7, #20]
      break;
 8003434:	e002      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	617b      	str	r3, [r7, #20]
      break;
 800343a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	3301      	adds	r3, #1
 8003448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	fb03 f202 	mul.w	r2, r3, r2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	0e5b      	lsrs	r3, r3, #25
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	3301      	adds	r3, #1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800347c:	69bb      	ldr	r3, [r7, #24]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	080057cc 	.word	0x080057cc
 8003494:	00f42400 	.word	0x00f42400
 8003498:	007a1200 	.word	0x007a1200

0800349c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000000 	.word	0x20000000

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4904      	ldr	r1, [pc, #16]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	080057c4 	.word	0x080057c4

080034e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034e4:	f7ff ffda 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0adb      	lsrs	r3, r3, #11
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4904      	ldr	r1, [pc, #16]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	080057c4 	.word	0x080057c4

0800350c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003524:	f7ff f922 	bl	800276c <HAL_PWREx_GetVoltageRange>
 8003528:	6178      	str	r0, [r7, #20]
 800352a:	e014      	b.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	4a24      	ldr	r2, [pc, #144]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003536:	6593      	str	r3, [r2, #88]	; 0x58
 8003538:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff f912 	bl	800276c <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355c:	d10b      	bne.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b80      	cmp	r3, #128	; 0x80
 8003562:	d919      	bls.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2ba0      	cmp	r3, #160	; 0xa0
 8003568:	d902      	bls.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800356a:	2302      	movs	r3, #2
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	e013      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003570:	2301      	movs	r3, #1
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e010      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d902      	bls.n	8003582 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800357c:	2303      	movs	r3, #3
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	e00a      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d102      	bne.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003588:	2302      	movs	r3, #2
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	e004      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b70      	cmp	r3, #112	; 0x70
 8003592:	d101      	bne.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003594:	2301      	movs	r3, #1
 8003596:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 0207 	bic.w	r2, r3, #7
 80035a0:	4909      	ldr	r1, [pc, #36]	; (80035c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035a8:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40022000 	.word	0x40022000

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035d4:	2300      	movs	r3, #0
 80035d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035d8:	2300      	movs	r3, #0
 80035da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d041      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035f0:	d02a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035f6:	d824      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035fc:	d008      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003602:	d81e      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360c:	d010      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800360e:	e018      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003610:	4b86      	ldr	r3, [pc, #536]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a85      	ldr	r2, [pc, #532]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800361c:	e015      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f000 facb 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362e:	e00c      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3320      	adds	r3, #32
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fbb6 	bl	8003da8 <RCCEx_PLLSAI2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	74fb      	strb	r3, [r7, #19]
      break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003650:	4b76      	ldr	r3, [pc, #472]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365e:	4973      	ldr	r1, [pc, #460]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003666:	e001      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d041      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003680:	d02a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003682:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003686:	d824      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368c:	d008      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800368e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003692:	d81e      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369c:	d010      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800369e:	e018      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036a0:	4b62      	ldr	r3, [pc, #392]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a61      	ldr	r2, [pc, #388]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036ac:	e015      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fa83 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036be:	e00c      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3320      	adds	r3, #32
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fb6e 	bl	8003da8 <RCCEx_PLLSAI2_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	74fb      	strb	r3, [r7, #19]
      break;
 80036d6:	e000      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036da:	7cfb      	ldrb	r3, [r7, #19]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036e0:	4b52      	ldr	r3, [pc, #328]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ee:	494f      	ldr	r1, [pc, #316]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036f6:	e001      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a0 	beq.w	800384a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800370e:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	4a40      	ldr	r2, [pc, #256]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372e:	6593      	str	r3, [r2, #88]	; 0x58
 8003730:	4b3e      	ldr	r3, [pc, #248]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373c:	2301      	movs	r3, #1
 800373e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003740:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3a      	ldr	r2, [pc, #232]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800374c:	f7fe f9c4 	bl	8001ad8 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003752:	e009      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003754:	f7fe f9c0 	bl	8001ad8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d902      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	74fb      	strb	r3, [r7, #19]
        break;
 8003766:	e005      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003768:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ef      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d15c      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800377a:	4b2c      	ldr	r3, [pc, #176]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003784:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	429a      	cmp	r2, r3
 8003796:	d019      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037a4:	4b21      	ldr	r3, [pc, #132]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	4a20      	ldr	r2, [pc, #128]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe f97f 	bl	8001ad8 <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037dc:	e00b      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe f97b 	bl	8001ad8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d902      	bls.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	74fb      	strb	r3, [r7, #19]
            break;
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ec      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381a:	4904      	ldr	r1, [pc, #16]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003822:	e009      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
 8003828:	e006      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003838:	7c7b      	ldrb	r3, [r7, #17]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b9e      	ldr	r3, [pc, #632]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	4a9d      	ldr	r2, [pc, #628]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003848:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003856:	4b98      	ldr	r3, [pc, #608]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f023 0203 	bic.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	4994      	ldr	r1, [pc, #592]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003878:	4b8f      	ldr	r3, [pc, #572]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f023 020c 	bic.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	498c      	ldr	r1, [pc, #560]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800389a:	4b87      	ldr	r3, [pc, #540]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4983      	ldr	r1, [pc, #524]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038bc:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	497b      	ldr	r1, [pc, #492]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038de:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	4972      	ldr	r1, [pc, #456]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003900:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	496a      	ldr	r1, [pc, #424]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003922:	4b65      	ldr	r3, [pc, #404]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	4961      	ldr	r1, [pc, #388]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003944:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003952:	4959      	ldr	r1, [pc, #356]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003966:	4b54      	ldr	r3, [pc, #336]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	4950      	ldr	r1, [pc, #320]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003988:	4b4b      	ldr	r3, [pc, #300]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	4948      	ldr	r1, [pc, #288]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039aa:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	493f      	ldr	r1, [pc, #252]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d028      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039cc:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039da:	4937      	ldr	r1, [pc, #220]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ea:	d106      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ec:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a31      	ldr	r2, [pc, #196]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f6:	60d3      	str	r3, [r2, #12]
 80039f8:	e011      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f8d8 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d028      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a2a:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	491f      	ldr	r1, [pc, #124]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a54:	60d3      	str	r3, [r2, #12]
 8003a56:	e011      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f8a9 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a96:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa6:	d109      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a02      	ldr	r2, [pc, #8]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab2:	60d3      	str	r3, [r2, #12]
 8003ab4:	e014      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f877 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02f      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003afa:	4928      	ldr	r1, [pc, #160]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0a:	d10d      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f854 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d014      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	74bb      	strb	r3, [r7, #18]
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3320      	adds	r3, #32
 8003b36:	2102      	movs	r1, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f935 	bl	8003da8 <RCCEx_PLLSAI2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b66:	490d      	ldr	r1, [pc, #52]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8a:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b92:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bce:	4b75      	ldr	r3, [pc, #468]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d018      	beq.n	8003c0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bda:	4b72      	ldr	r3, [pc, #456]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0203 	and.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d10d      	bne.n	8003c06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
       ||
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bf2:	4b6c      	ldr	r3, [pc, #432]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
       ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d047      	beq.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e044      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d018      	beq.n	8003c46 <RCCEx_PLLSAI1_Config+0x86>
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d825      	bhi.n	8003c64 <RCCEx_PLLSAI1_Config+0xa4>
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d002      	beq.n	8003c22 <RCCEx_PLLSAI1_Config+0x62>
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d009      	beq.n	8003c34 <RCCEx_PLLSAI1_Config+0x74>
 8003c20:	e020      	b.n	8003c64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c22:	4b60      	ldr	r3, [pc, #384]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d11d      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c32:	e01a      	b.n	8003c6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c34:	4b5b      	ldr	r3, [pc, #364]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c44:	e013      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c46:	4b57      	ldr	r3, [pc, #348]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c52:	4b54      	ldr	r3, [pc, #336]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c62:	e006      	b.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      break;
 8003c68:	e004      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c72:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10d      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c7a:	4b4a      	ldr	r3, [pc, #296]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	4944      	ldr	r1, [pc, #272]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d17d      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c9c:	4b41      	ldr	r3, [pc, #260]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a40      	ldr	r2, [pc, #256]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd ff16 	bl	8001ad8 <HAL_GetTick>
 8003cac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cae:	e009      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb0:	f7fd ff12 	bl	8001ad8 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d902      	bls.n	8003cc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	73fb      	strb	r3, [r7, #15]
        break;
 8003cc2:	e005      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cc4:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ef      	bne.n	8003cb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d160      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d111      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cdc:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6892      	ldr	r2, [r2, #8]
 8003cec:	0211      	lsls	r1, r2, #8
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68d2      	ldr	r2, [r2, #12]
 8003cf2:	0912      	lsrs	r2, r2, #4
 8003cf4:	0452      	lsls	r2, r2, #17
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	492a      	ldr	r1, [pc, #168]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	610b      	str	r3, [r1, #16]
 8003cfe:	e027      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d112      	bne.n	8003d2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d06:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6892      	ldr	r2, [r2, #8]
 8003d16:	0211      	lsls	r1, r2, #8
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6912      	ldr	r2, [r2, #16]
 8003d1c:	0852      	lsrs	r2, r2, #1
 8003d1e:	3a01      	subs	r2, #1
 8003d20:	0552      	lsls	r2, r2, #21
 8003d22:	430a      	orrs	r2, r1
 8003d24:	491f      	ldr	r1, [pc, #124]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	610b      	str	r3, [r1, #16]
 8003d2a:	e011      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6892      	ldr	r2, [r2, #8]
 8003d3c:	0211      	lsls	r1, r2, #8
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6952      	ldr	r2, [r2, #20]
 8003d42:	0852      	lsrs	r2, r2, #1
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0652      	lsls	r2, r2, #25
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	4916      	ldr	r1, [pc, #88]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd febc 	bl	8001ad8 <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d62:	e009      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d64:	f7fd feb8 	bl	8001ad8 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d902      	bls.n	8003d78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	73fb      	strb	r3, [r7, #15]
          break;
 8003d76:	e005      	b.n	8003d84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	4904      	ldr	r1, [pc, #16]	; (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000

08003da8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003db6:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d018      	beq.n	8003df4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dc2:	4b67      	ldr	r3, [pc, #412]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0203 	and.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d10d      	bne.n	8003dee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dda:	4b61      	ldr	r3, [pc, #388]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d047      	beq.n	8003e7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e044      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d018      	beq.n	8003e2e <RCCEx_PLLSAI2_Config+0x86>
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d825      	bhi.n	8003e4c <RCCEx_PLLSAI2_Config+0xa4>
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d002      	beq.n	8003e0a <RCCEx_PLLSAI2_Config+0x62>
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d009      	beq.n	8003e1c <RCCEx_PLLSAI2_Config+0x74>
 8003e08:	e020      	b.n	8003e4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e0a:	4b55      	ldr	r3, [pc, #340]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11d      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1a:	e01a      	b.n	8003e52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e1c:	4b50      	ldr	r3, [pc, #320]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d116      	bne.n	8003e56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2c:	e013      	b.n	8003e56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e2e:	4b4c      	ldr	r3, [pc, #304]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e3a:	4b49      	ldr	r3, [pc, #292]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e4a:	e006      	b.n	8003e5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e50:	e004      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e62:	4b3f      	ldr	r3, [pc, #252]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	430b      	orrs	r3, r1
 8003e78:	4939      	ldr	r1, [pc, #228]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d167      	bne.n	8003f54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a35      	ldr	r2, [pc, #212]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fd fe22 	bl	8001ad8 <HAL_GetTick>
 8003e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e96:	e009      	b.n	8003eac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e98:	f7fd fe1e 	bl	8001ad8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d902      	bls.n	8003eac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eaa:	e005      	b.n	8003eb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eac:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ef      	bne.n	8003e98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d14a      	bne.n	8003f54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d111      	bne.n	8003ee8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec4:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6892      	ldr	r2, [r2, #8]
 8003ed4:	0211      	lsls	r1, r2, #8
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	0912      	lsrs	r2, r2, #4
 8003edc:	0452      	lsls	r2, r2, #17
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	491f      	ldr	r1, [pc, #124]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	614b      	str	r3, [r1, #20]
 8003ee6:	e011      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ef0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6892      	ldr	r2, [r2, #8]
 8003ef8:	0211      	lsls	r1, r2, #8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6912      	ldr	r2, [r2, #16]
 8003efe:	0852      	lsrs	r2, r2, #1
 8003f00:	3a01      	subs	r2, #1
 8003f02:	0652      	lsls	r2, r2, #25
 8003f04:	430a      	orrs	r2, r1
 8003f06:	4916      	ldr	r1, [pc, #88]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fd fdde 	bl	8001ad8 <HAL_GetTick>
 8003f1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f1e:	e009      	b.n	8003f34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f20:	f7fd fdda 	bl	8001ad8 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d902      	bls.n	8003f34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	73fb      	strb	r3, [r7, #15]
          break;
 8003f32:	e005      	b.n	8003f40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ef      	beq.n	8003f20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4904      	ldr	r1, [pc, #16]	; (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e095      	b.n	80040a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f86:	d009      	beq.n	8003f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	61da      	str	r2, [r3, #28]
 8003f8e:	e005      	b.n	8003f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fab0 	bl	800151c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fdc:	d902      	bls.n	8003fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e002      	b.n	8003fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ff2:	d007      	beq.n	8004004 <HAL_SPI_Init+0xa0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	ea42 0103 	orr.w	r1, r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	f003 0204 	and.w	r2, r3, #4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004080:	ea42 0103 	orr.w	r1, r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e040      	b.n	800413e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fd fa69 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2224      	movs	r2, #36	; 0x24
 80040d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f82d 	bl	8004148 <UART_SetConfig>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e022      	b.n	800413e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fad9 	bl	80046b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004114:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004124:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fb60 	bl	80047fc <UART_CheckIdleState>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800414c:	b08a      	sub	sp, #40	; 0x28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	431a      	orrs	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	4313      	orrs	r3, r2
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4ba4      	ldr	r3, [pc, #656]	; (8004408 <UART_SetConfig+0x2c0>)
 8004178:	4013      	ands	r3, r2
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004180:	430b      	orrs	r3, r1
 8004182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a99      	ldr	r2, [pc, #612]	; (800440c <UART_SetConfig+0x2c4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	4313      	orrs	r3, r2
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a90      	ldr	r2, [pc, #576]	; (8004410 <UART_SetConfig+0x2c8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d126      	bne.n	8004220 <UART_SetConfig+0xd8>
 80041d2:	4b90      	ldr	r3, [pc, #576]	; (8004414 <UART_SetConfig+0x2cc>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d81b      	bhi.n	8004218 <UART_SetConfig+0xd0>
 80041e0:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0xa0>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	08004209 	.word	0x08004209
 80041f0:	08004201 	.word	0x08004201
 80041f4:	08004211 	.word	0x08004211
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fe:	e116      	b.n	800442e <UART_SetConfig+0x2e6>
 8004200:	2302      	movs	r3, #2
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004206:	e112      	b.n	800442e <UART_SetConfig+0x2e6>
 8004208:	2304      	movs	r3, #4
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420e:	e10e      	b.n	800442e <UART_SetConfig+0x2e6>
 8004210:	2308      	movs	r3, #8
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004216:	e10a      	b.n	800442e <UART_SetConfig+0x2e6>
 8004218:	2310      	movs	r3, #16
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421e:	e106      	b.n	800442e <UART_SetConfig+0x2e6>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a7c      	ldr	r2, [pc, #496]	; (8004418 <UART_SetConfig+0x2d0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d138      	bne.n	800429c <UART_SetConfig+0x154>
 800422a:	4b7a      	ldr	r3, [pc, #488]	; (8004414 <UART_SetConfig+0x2cc>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	2b0c      	cmp	r3, #12
 8004236:	d82d      	bhi.n	8004294 <UART_SetConfig+0x14c>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <UART_SetConfig+0xf8>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004275 	.word	0x08004275
 8004244:	08004295 	.word	0x08004295
 8004248:	08004295 	.word	0x08004295
 800424c:	08004295 	.word	0x08004295
 8004250:	08004285 	.word	0x08004285
 8004254:	08004295 	.word	0x08004295
 8004258:	08004295 	.word	0x08004295
 800425c:	08004295 	.word	0x08004295
 8004260:	0800427d 	.word	0x0800427d
 8004264:	08004295 	.word	0x08004295
 8004268:	08004295 	.word	0x08004295
 800426c:	08004295 	.word	0x08004295
 8004270:	0800428d 	.word	0x0800428d
 8004274:	2300      	movs	r3, #0
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427a:	e0d8      	b.n	800442e <UART_SetConfig+0x2e6>
 800427c:	2302      	movs	r3, #2
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e0d4      	b.n	800442e <UART_SetConfig+0x2e6>
 8004284:	2304      	movs	r3, #4
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e0d0      	b.n	800442e <UART_SetConfig+0x2e6>
 800428c:	2308      	movs	r3, #8
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e0cc      	b.n	800442e <UART_SetConfig+0x2e6>
 8004294:	2310      	movs	r3, #16
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e0c8      	b.n	800442e <UART_SetConfig+0x2e6>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a5e      	ldr	r2, [pc, #376]	; (800441c <UART_SetConfig+0x2d4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d125      	bne.n	80042f2 <UART_SetConfig+0x1aa>
 80042a6:	4b5b      	ldr	r3, [pc, #364]	; (8004414 <UART_SetConfig+0x2cc>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042b0:	2b30      	cmp	r3, #48	; 0x30
 80042b2:	d016      	beq.n	80042e2 <UART_SetConfig+0x19a>
 80042b4:	2b30      	cmp	r3, #48	; 0x30
 80042b6:	d818      	bhi.n	80042ea <UART_SetConfig+0x1a2>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d00a      	beq.n	80042d2 <UART_SetConfig+0x18a>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d814      	bhi.n	80042ea <UART_SetConfig+0x1a2>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <UART_SetConfig+0x182>
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d008      	beq.n	80042da <UART_SetConfig+0x192>
 80042c8:	e00f      	b.n	80042ea <UART_SetConfig+0x1a2>
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d0:	e0ad      	b.n	800442e <UART_SetConfig+0x2e6>
 80042d2:	2302      	movs	r3, #2
 80042d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d8:	e0a9      	b.n	800442e <UART_SetConfig+0x2e6>
 80042da:	2304      	movs	r3, #4
 80042dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e0:	e0a5      	b.n	800442e <UART_SetConfig+0x2e6>
 80042e2:	2308      	movs	r3, #8
 80042e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e8:	e0a1      	b.n	800442e <UART_SetConfig+0x2e6>
 80042ea:	2310      	movs	r3, #16
 80042ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f0:	e09d      	b.n	800442e <UART_SetConfig+0x2e6>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4a      	ldr	r2, [pc, #296]	; (8004420 <UART_SetConfig+0x2d8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d125      	bne.n	8004348 <UART_SetConfig+0x200>
 80042fc:	4b45      	ldr	r3, [pc, #276]	; (8004414 <UART_SetConfig+0x2cc>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004306:	2bc0      	cmp	r3, #192	; 0xc0
 8004308:	d016      	beq.n	8004338 <UART_SetConfig+0x1f0>
 800430a:	2bc0      	cmp	r3, #192	; 0xc0
 800430c:	d818      	bhi.n	8004340 <UART_SetConfig+0x1f8>
 800430e:	2b80      	cmp	r3, #128	; 0x80
 8004310:	d00a      	beq.n	8004328 <UART_SetConfig+0x1e0>
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d814      	bhi.n	8004340 <UART_SetConfig+0x1f8>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <UART_SetConfig+0x1d8>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d008      	beq.n	8004330 <UART_SetConfig+0x1e8>
 800431e:	e00f      	b.n	8004340 <UART_SetConfig+0x1f8>
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e082      	b.n	800442e <UART_SetConfig+0x2e6>
 8004328:	2302      	movs	r3, #2
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e07e      	b.n	800442e <UART_SetConfig+0x2e6>
 8004330:	2304      	movs	r3, #4
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e07a      	b.n	800442e <UART_SetConfig+0x2e6>
 8004338:	2308      	movs	r3, #8
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e076      	b.n	800442e <UART_SetConfig+0x2e6>
 8004340:	2310      	movs	r3, #16
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e072      	b.n	800442e <UART_SetConfig+0x2e6>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a35      	ldr	r2, [pc, #212]	; (8004424 <UART_SetConfig+0x2dc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d12a      	bne.n	80043a8 <UART_SetConfig+0x260>
 8004352:	4b30      	ldr	r3, [pc, #192]	; (8004414 <UART_SetConfig+0x2cc>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004360:	d01a      	beq.n	8004398 <UART_SetConfig+0x250>
 8004362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004366:	d81b      	bhi.n	80043a0 <UART_SetConfig+0x258>
 8004368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436c:	d00c      	beq.n	8004388 <UART_SetConfig+0x240>
 800436e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004372:	d815      	bhi.n	80043a0 <UART_SetConfig+0x258>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <UART_SetConfig+0x238>
 8004378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437c:	d008      	beq.n	8004390 <UART_SetConfig+0x248>
 800437e:	e00f      	b.n	80043a0 <UART_SetConfig+0x258>
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e052      	b.n	800442e <UART_SetConfig+0x2e6>
 8004388:	2302      	movs	r3, #2
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e04e      	b.n	800442e <UART_SetConfig+0x2e6>
 8004390:	2304      	movs	r3, #4
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e04a      	b.n	800442e <UART_SetConfig+0x2e6>
 8004398:	2308      	movs	r3, #8
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e046      	b.n	800442e <UART_SetConfig+0x2e6>
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a6:	e042      	b.n	800442e <UART_SetConfig+0x2e6>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a17      	ldr	r2, [pc, #92]	; (800440c <UART_SetConfig+0x2c4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d13a      	bne.n	8004428 <UART_SetConfig+0x2e0>
 80043b2:	4b18      	ldr	r3, [pc, #96]	; (8004414 <UART_SetConfig+0x2cc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c0:	d01a      	beq.n	80043f8 <UART_SetConfig+0x2b0>
 80043c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c6:	d81b      	bhi.n	8004400 <UART_SetConfig+0x2b8>
 80043c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043cc:	d00c      	beq.n	80043e8 <UART_SetConfig+0x2a0>
 80043ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d2:	d815      	bhi.n	8004400 <UART_SetConfig+0x2b8>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <UART_SetConfig+0x298>
 80043d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043dc:	d008      	beq.n	80043f0 <UART_SetConfig+0x2a8>
 80043de:	e00f      	b.n	8004400 <UART_SetConfig+0x2b8>
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e022      	b.n	800442e <UART_SetConfig+0x2e6>
 80043e8:	2302      	movs	r3, #2
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ee:	e01e      	b.n	800442e <UART_SetConfig+0x2e6>
 80043f0:	2304      	movs	r3, #4
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f6:	e01a      	b.n	800442e <UART_SetConfig+0x2e6>
 80043f8:	2308      	movs	r3, #8
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fe:	e016      	b.n	800442e <UART_SetConfig+0x2e6>
 8004400:	2310      	movs	r3, #16
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e012      	b.n	800442e <UART_SetConfig+0x2e6>
 8004408:	efff69f3 	.word	0xefff69f3
 800440c:	40008000 	.word	0x40008000
 8004410:	40013800 	.word	0x40013800
 8004414:	40021000 	.word	0x40021000
 8004418:	40004400 	.word	0x40004400
 800441c:	40004800 	.word	0x40004800
 8004420:	40004c00 	.word	0x40004c00
 8004424:	40005000 	.word	0x40005000
 8004428:	2310      	movs	r3, #16
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a9f      	ldr	r2, [pc, #636]	; (80046b0 <UART_SetConfig+0x568>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d17a      	bne.n	800452e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800443c:	2b08      	cmp	r3, #8
 800443e:	d824      	bhi.n	800448a <UART_SetConfig+0x342>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0x300>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800446d 	.word	0x0800446d
 800444c:	0800448b 	.word	0x0800448b
 8004450:	08004475 	.word	0x08004475
 8004454:	0800448b 	.word	0x0800448b
 8004458:	0800447b 	.word	0x0800447b
 800445c:	0800448b 	.word	0x0800448b
 8004460:	0800448b 	.word	0x0800448b
 8004464:	0800448b 	.word	0x0800448b
 8004468:	08004483 	.word	0x08004483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7ff f822 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004470:	61f8      	str	r0, [r7, #28]
        break;
 8004472:	e010      	b.n	8004496 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004474:	4b8f      	ldr	r3, [pc, #572]	; (80046b4 <UART_SetConfig+0x56c>)
 8004476:	61fb      	str	r3, [r7, #28]
        break;
 8004478:	e00d      	b.n	8004496 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447a:	f7fe ff83 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 800447e:	61f8      	str	r0, [r7, #28]
        break;
 8004480:	e009      	b.n	8004496 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	61fb      	str	r3, [r7, #28]
        break;
 8004488:	e005      	b.n	8004496 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004494:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80fb 	beq.w	8004694 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d305      	bcc.n	80044ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d903      	bls.n	80044c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044c0:	e0e8      	b.n	8004694 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2200      	movs	r2, #0
 80044c6:	461c      	mov	r4, r3
 80044c8:	4615      	mov	r5, r2
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	022b      	lsls	r3, r5, #8
 80044d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044d8:	0222      	lsls	r2, r4, #8
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	6849      	ldr	r1, [r1, #4]
 80044de:	0849      	lsrs	r1, r1, #1
 80044e0:	2000      	movs	r0, #0
 80044e2:	4688      	mov	r8, r1
 80044e4:	4681      	mov	r9, r0
 80044e6:	eb12 0a08 	adds.w	sl, r2, r8
 80044ea:	eb43 0b09 	adc.w	fp, r3, r9
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fc:	4650      	mov	r0, sl
 80044fe:	4659      	mov	r1, fp
 8004500:	f7fb fe62 	bl	80001c8 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4613      	mov	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004512:	d308      	bcc.n	8004526 <UART_SetConfig+0x3de>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d204      	bcs.n	8004526 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	e0b6      	b.n	8004694 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800452c:	e0b2      	b.n	8004694 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004536:	d15e      	bne.n	80045f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800453c:	2b08      	cmp	r3, #8
 800453e:	d828      	bhi.n	8004592 <UART_SetConfig+0x44a>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x400>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004575 	.word	0x08004575
 8004550:	0800457d 	.word	0x0800457d
 8004554:	08004593 	.word	0x08004593
 8004558:	08004583 	.word	0x08004583
 800455c:	08004593 	.word	0x08004593
 8004560:	08004593 	.word	0x08004593
 8004564:	08004593 	.word	0x08004593
 8004568:	0800458b 	.word	0x0800458b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800456c:	f7fe ffa2 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004570:	61f8      	str	r0, [r7, #28]
        break;
 8004572:	e014      	b.n	800459e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7fe ffb4 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8004578:	61f8      	str	r0, [r7, #28]
        break;
 800457a:	e010      	b.n	800459e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800457c:	4b4d      	ldr	r3, [pc, #308]	; (80046b4 <UART_SetConfig+0x56c>)
 800457e:	61fb      	str	r3, [r7, #28]
        break;
 8004580:	e00d      	b.n	800459e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004582:	f7fe feff 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8004586:	61f8      	str	r0, [r7, #28]
        break;
 8004588:	e009      	b.n	800459e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458e:	61fb      	str	r3, [r7, #28]
        break;
 8004590:	e005      	b.n	800459e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800459c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d077      	beq.n	8004694 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005a      	lsls	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d916      	bls.n	80045ee <UART_SetConfig+0x4a6>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d212      	bcs.n	80045ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f023 030f 	bic.w	r3, r3, #15
 80045d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	b29a      	uxth	r2, r3
 80045de:	8afb      	ldrh	r3, [r7, #22]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	8afa      	ldrh	r2, [r7, #22]
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	e052      	b.n	8004694 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045f4:	e04e      	b.n	8004694 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d827      	bhi.n	800464e <UART_SetConfig+0x506>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x4bc>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	0800464f 	.word	0x0800464f
 8004614:	0800463f 	.word	0x0800463f
 8004618:	0800464f 	.word	0x0800464f
 800461c:	0800464f 	.word	0x0800464f
 8004620:	0800464f 	.word	0x0800464f
 8004624:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7fe ff44 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 800462c:	61f8      	str	r0, [r7, #28]
        break;
 800462e:	e014      	b.n	800465a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004630:	f7fe ff56 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8004634:	61f8      	str	r0, [r7, #28]
        break;
 8004636:	e010      	b.n	800465a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004638:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <UART_SetConfig+0x56c>)
 800463a:	61fb      	str	r3, [r7, #28]
        break;
 800463c:	e00d      	b.n	800465a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463e:	f7fe fea1 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8004642:	61f8      	str	r0, [r7, #28]
        break;
 8004644:	e009      	b.n	800465a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464a:	61fb      	str	r3, [r7, #28]
        break;
 800464c:	e005      	b.n	800465a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004658:	bf00      	nop
    }

    if (pclk != 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d019      	beq.n	8004694 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	085a      	lsrs	r2, r3, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	441a      	add	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b0f      	cmp	r3, #15
 8004678:	d909      	bls.n	800468e <UART_SetConfig+0x546>
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d205      	bcs.n	800468e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e002      	b.n	8004694 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ae:	bf00      	nop
 80046b0:	40008000 	.word	0x40008000
 80046b4:	00f42400 	.word	0x00f42400

080046b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01a      	beq.n	80047ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b6:	d10a      	bne.n	80047ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af02      	add	r7, sp, #8
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800480c:	f7fd f964 	bl	8001ad8 <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d10e      	bne.n	800483e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f82d 	bl	800488e <UART_WaitOnFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e023      	b.n	8004886 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b04      	cmp	r3, #4
 800484a:	d10e      	bne.n	800486a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800484c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f817 	bl	800488e <UART_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e00d      	b.n	8004886 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b09c      	sub	sp, #112	; 0x70
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4613      	mov	r3, r2
 800489c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489e:	e0a5      	b.n	80049ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	f000 80a1 	beq.w	80049ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048aa:	f7fd f915 	bl	8001ad8 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d302      	bcc.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d13e      	bne.n	800493e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048d4:	667b      	str	r3, [r7, #100]	; 0x64
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e6      	bne.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	663b      	str	r3, [r7, #96]	; 0x60
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004912:	64ba      	str	r2, [r7, #72]	; 0x48
 8004914:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e067      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d04f      	beq.n	80049ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495a:	d147      	bne.n	80049ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004964:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800497a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
 8004986:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800498a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e6      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	613b      	str	r3, [r7, #16]
   return(result);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3308      	adds	r3, #8
 80049b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049b8:	623a      	str	r2, [r7, #32]
 80049ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	69f9      	ldr	r1, [r7, #28]
 80049be:	6a3a      	ldr	r2, [r7, #32]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e5      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e010      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	f43f af4a 	beq.w	80048a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3770      	adds	r7, #112	; 0x70
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <LL_EXTI_EnableIT_0_31>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <LL_EXTI_EnableIT_0_31+0x20>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4904      	ldr	r1, [pc, #16]	; (8004a38 <LL_EXTI_EnableIT_0_31+0x20>)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	40010400 	.word	0x40010400

08004a3c <LL_EXTI_EnableIT_32_63>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <LL_EXTI_EnableIT_32_63+0x20>)
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	4904      	ldr	r1, [pc, #16]	; (8004a5c <LL_EXTI_EnableIT_32_63+0x20>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	620b      	str	r3, [r1, #32]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40010400 	.word	0x40010400

08004a60 <LL_EXTI_DisableIT_0_31>:
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <LL_EXTI_DisableIT_0_31+0x24>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	4904      	ldr	r1, [pc, #16]	; (8004a84 <LL_EXTI_DisableIT_0_31+0x24>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010400 	.word	0x40010400

08004a88 <LL_EXTI_DisableIT_32_63>:
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <LL_EXTI_DisableIT_32_63+0x24>)
 8004a92:	6a1a      	ldr	r2, [r3, #32]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	4904      	ldr	r1, [pc, #16]	; (8004aac <LL_EXTI_DisableIT_32_63+0x24>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	620b      	str	r3, [r1, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010400 	.word	0x40010400

08004ab0 <LL_EXTI_EnableEvent_0_31>:
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	4904      	ldr	r1, [pc, #16]	; (8004ad0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40010400 	.word	0x40010400

08004ad4 <LL_EXTI_EnableEvent_32_63>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ae0:	4904      	ldr	r1, [pc, #16]	; (8004af4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40010400 	.word	0x40010400

08004af8 <LL_EXTI_DisableEvent_0_31>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	4904      	ldr	r1, [pc, #16]	; (8004b1c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40010400 	.word	0x40010400

08004b20 <LL_EXTI_DisableEvent_32_63>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	4904      	ldr	r1, [pc, #16]	; (8004b44 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010400 	.word	0x40010400

08004b48 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	4904      	ldr	r1, [pc, #16]	; (8004b68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40010400 	.word	0x40010400

08004b6c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b78:	4904      	ldr	r1, [pc, #16]	; (8004b8c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40010400 	.word	0x40010400

08004b90 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	4904      	ldr	r1, [pc, #16]	; (8004bdc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010400 	.word	0x40010400

08004be0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	4904      	ldr	r1, [pc, #16]	; (8004c00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60cb      	str	r3, [r1, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40010400 	.word	0x40010400

08004c04 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c10:	4904      	ldr	r1, [pc, #16]	; (8004c24 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40010400 	.word	0x40010400

08004c28 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	43db      	mvns	r3, r3
 8004c38:	4904      	ldr	r1, [pc, #16]	; (8004c4c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010400 	.word	0x40010400

08004c50 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	4904      	ldr	r1, [pc, #16]	; (8004c74 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010400 	.word	0x40010400

08004c78 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7a1b      	ldrb	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80d1 	beq.w	8004e30 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d063      	beq.n	8004d5e <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	7a5b      	ldrb	r3, [r3, #9]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d01c      	beq.n	8004cd8 <LL_EXTI_Init+0x60>
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	dc25      	bgt.n	8004cee <LL_EXTI_Init+0x76>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <LL_EXTI_Init+0x34>
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d00b      	beq.n	8004cc2 <LL_EXTI_Init+0x4a>
 8004caa:	e020      	b.n	8004cee <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff21 	bl	8004af8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff feac 	bl	8004a18 <LL_EXTI_EnableIT_0_31>
          break;
 8004cc0:	e018      	b.n	8004cf4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff feca 	bl	8004a60 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff feed 	bl	8004ab0 <LL_EXTI_EnableEvent_0_31>
          break;
 8004cd6:	e00d      	b.n	8004cf4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fe9b 	bl	8004a18 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fee2 	bl	8004ab0 <LL_EXTI_EnableEvent_0_31>
          break;
 8004cec:	e002      	b.n	8004cf4 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
          break;
 8004cf2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	7a9b      	ldrb	r3, [r3, #10]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d030      	beq.n	8004d5e <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	7a9b      	ldrb	r3, [r3, #10]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d01c      	beq.n	8004d3e <LL_EXTI_Init+0xc6>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	dc25      	bgt.n	8004d54 <LL_EXTI_Init+0xdc>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d002      	beq.n	8004d12 <LL_EXTI_Init+0x9a>
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d00b      	beq.n	8004d28 <LL_EXTI_Init+0xb0>
 8004d10:	e020      	b.n	8004d54 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff86 	bl	8004c28 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff11 	bl	8004b48 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004d26:	e01b      	b.n	8004d60 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff2f 	bl	8004b90 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ff52 	bl	8004be0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004d3c:	e010      	b.n	8004d60 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff00 	bl	8004b48 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ff47 	bl	8004be0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004d52:	e005      	b.n	8004d60 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f043 0302 	orr.w	r3, r3, #2
 8004d5a:	60fb      	str	r3, [r7, #12]
            break;
 8004d5c:	e000      	b.n	8004d60 <LL_EXTI_Init+0xe8>
        }
      }
 8004d5e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d078      	beq.n	8004e5a <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	7a5b      	ldrb	r3, [r3, #9]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d01c      	beq.n	8004daa <LL_EXTI_Init+0x132>
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	dc25      	bgt.n	8004dc0 <LL_EXTI_Init+0x148>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <LL_EXTI_Init+0x106>
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d00b      	beq.n	8004d94 <LL_EXTI_Init+0x11c>
 8004d7c:	e020      	b.n	8004dc0 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fecc 	bl	8004b20 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fe55 	bl	8004a3c <LL_EXTI_EnableIT_32_63>
          break;
 8004d92:	e01a      	b.n	8004dca <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fe75 	bl	8004a88 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fe96 	bl	8004ad4 <LL_EXTI_EnableEvent_32_63>
          break;
 8004da8:	e00f      	b.n	8004dca <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fe44 	bl	8004a3c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fe8b 	bl	8004ad4 <LL_EXTI_EnableEvent_32_63>
          break;
 8004dbe:	e004      	b.n	8004dca <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f043 0304 	orr.w	r3, r3, #4
 8004dc6:	60fb      	str	r3, [r7, #12]
          break;
 8004dc8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7a9b      	ldrb	r3, [r3, #10]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d043      	beq.n	8004e5a <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	7a9b      	ldrb	r3, [r3, #10]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d01c      	beq.n	8004e14 <LL_EXTI_Init+0x19c>
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	dc25      	bgt.n	8004e2a <LL_EXTI_Init+0x1b2>
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d002      	beq.n	8004de8 <LL_EXTI_Init+0x170>
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d00b      	beq.n	8004dfe <LL_EXTI_Init+0x186>
 8004de6:	e020      	b.n	8004e2a <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ff2f 	bl	8004c50 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff feb8 	bl	8004b6c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004dfc:	e02e      	b.n	8004e5c <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fed8 	bl	8004bb8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fef9 	bl	8004c04 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004e12:	e023      	b.n	8004e5c <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fea7 	bl	8004b6c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff feee 	bl	8004c04 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004e28:	e018      	b.n	8004e5c <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
            break;
 8004e2e:	e015      	b.n	8004e5c <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fe13 	bl	8004a60 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fe5a 	bl	8004af8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fe1d 	bl	8004a88 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fe64 	bl	8004b20 <LL_EXTI_DisableEvent_32_63>
 8004e58:	e000      	b.n	8004e5c <LL_EXTI_Init+0x1e4>
      }
 8004e5a:	bf00      	nop
  }

  return status;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <LL_GPIO_SetPinMode>:
{
 8004e66:	b480      	push	{r7}
 8004e68:	b08b      	sub	sp, #44	; 0x2c
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	fa93 f3a3 	rbit	r3, r3
 8004e80:	613b      	str	r3, [r7, #16]
  return result;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	e003      	b.n	8004e98 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	2103      	movs	r1, #3
 8004e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	61fb      	str	r3, [r7, #28]
  return result;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004eba:	2320      	movs	r3, #32
 8004ebc:	e003      	b.n	8004ec6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	372c      	adds	r7, #44	; 0x2c
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <LL_GPIO_SetPinOutputType>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	401a      	ands	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	605a      	str	r2, [r3, #4]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <LL_GPIO_SetPinSpeed>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b08b      	sub	sp, #44	; 0x2c
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	fa93 f3a3 	rbit	r3, r3
 8004f2a:	613b      	str	r3, [r7, #16]
  return result;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004f36:	2320      	movs	r3, #32
 8004f38:	e003      	b.n	8004f42 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	fab3 f383 	clz	r3, r3
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	2103      	movs	r1, #3
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	401a      	ands	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	61fb      	str	r3, [r7, #28]
  return result;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004f64:	2320      	movs	r3, #32
 8004f66:	e003      	b.n	8004f70 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	fab3 f383 	clz	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	fa01 f303 	lsl.w	r3, r1, r3
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	609a      	str	r2, [r3, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	372c      	adds	r7, #44	; 0x2c
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_GPIO_SetPinPull>:
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b08b      	sub	sp, #44	; 0x2c
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	fa93 f3a3 	rbit	r3, r3
 8004fa4:	613b      	str	r3, [r7, #16]
  return result;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	e003      	b.n	8004fbc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	2103      	movs	r1, #3
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	61fb      	str	r3, [r7, #28]
  return result;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004fde:	2320      	movs	r3, #32
 8004fe0:	e003      	b.n	8004fea <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	fab3 f383 	clz	r3, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	60da      	str	r2, [r3, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	372c      	adds	r7, #44	; 0x2c
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_GPIO_SetAFPin_0_7>:
{
 8005004:	b480      	push	{r7}
 8005006:	b08b      	sub	sp, #44	; 0x2c
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1a      	ldr	r2, [r3, #32]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	613b      	str	r3, [r7, #16]
  return result;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800502a:	2320      	movs	r3, #32
 800502c:	e003      	b.n	8005036 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	210f      	movs	r1, #15
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	43db      	mvns	r3, r3
 8005040:	401a      	ands	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	61fb      	str	r3, [r7, #28]
  return result;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005058:	2320      	movs	r3, #32
 800505a:	e003      	b.n	8005064 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	fab3 f383 	clz	r3, r3
 8005062:	b2db      	uxtb	r3, r3
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	431a      	orrs	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	372c      	adds	r7, #44	; 0x2c
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_GPIO_SetAFPin_8_15>:
{
 800507e:	b480      	push	{r7}
 8005080:	b08b      	sub	sp, #44	; 0x2c
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	613b      	str	r3, [r7, #16]
  return result;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80050a6:	2320      	movs	r3, #32
 80050a8:	e003      	b.n	80050b2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	fab3 f383 	clz	r3, r3
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	210f      	movs	r1, #15
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	401a      	ands	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	fa93 f3a3 	rbit	r3, r3
 80050ca:	61fb      	str	r3, [r7, #28]
  return result;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80050d6:	2320      	movs	r3, #32
 80050d8:	e003      	b.n	80050e2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	fab3 f383 	clz	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ea:	431a      	orrs	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80050f0:	bf00      	nop
 80050f2:	372c      	adds	r7, #44	; 0x2c
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	fa93 f3a3 	rbit	r3, r3
 8005112:	60fb      	str	r3, [r7, #12]
  return result;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <LL_GPIO_Init+0x26>
    return 32U;
 800511e:	2320      	movs	r3, #32
 8005120:	e003      	b.n	800512a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	fab3 f383 	clz	r3, r3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800512c:	e048      	b.n	80051c0 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2101      	movs	r1, #1
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d03a      	beq.n	80051ba <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d003      	beq.n	8005154 <LL_GPIO_Init+0x58>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d10e      	bne.n	8005172 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	461a      	mov	r2, r3
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff fed7 	bl	8004f10 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	461a      	mov	r2, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff feb7 	bl	8004ee0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	461a      	mov	r2, r3
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff ff05 	bl	8004f8a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d111      	bne.n	80051ac <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2bff      	cmp	r3, #255	; 0xff
 800518c:	d807      	bhi.n	800519e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	461a      	mov	r2, r3
 8005194:	69b9      	ldr	r1, [r7, #24]
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff ff34 	bl	8005004 <LL_GPIO_SetAFPin_0_7>
 800519c:	e006      	b.n	80051ac <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	461a      	mov	r2, r3
 80051a4:	69b9      	ldr	r1, [r7, #24]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff ff69 	bl	800507e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	461a      	mov	r2, r3
 80051b2:	69b9      	ldr	r1, [r7, #24]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fe56 	bl	8004e66 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1af      	bne.n	800512e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d8:	b084      	sub	sp, #16
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	f107 001c 	add.w	r0, r7, #28
 80051e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa70 	bl	80056dc <USB_CoreReset>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
 8005212:	e005      	b.n	8005220 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800522c:	b004      	add	sp, #16
 800522e:	4770      	bx	lr

08005230 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f023 0201 	bic.w	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	460b      	mov	r3, r1
 800525c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d115      	bne.n	80052a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005280:	2001      	movs	r0, #1
 8005282:	f7fc fc35 	bl	8001af0 <HAL_Delay>
      ms++;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3301      	adds	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fa17 	bl	80056c0 <USB_GetMode>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d01e      	beq.n	80052d6 <USB_SetCurrentMode+0x84>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b31      	cmp	r3, #49	; 0x31
 800529c:	d9f0      	bls.n	8005280 <USB_SetCurrentMode+0x2e>
 800529e:	e01a      	b.n	80052d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d115      	bne.n	80052d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052b2:	2001      	movs	r0, #1
 80052b4:	f7fc fc1c 	bl	8001af0 <HAL_Delay>
      ms++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f9fe 	bl	80056c0 <USB_GetMode>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <USB_SetCurrentMode+0x84>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b31      	cmp	r3, #49	; 0x31
 80052ce:	d9f0      	bls.n	80052b2 <USB_SetCurrentMode+0x60>
 80052d0:	e001      	b.n	80052d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e005      	b.n	80052e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b32      	cmp	r3, #50	; 0x32
 80052da:	d101      	bne.n	80052e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052ec:	b084      	sub	sp, #16
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	e009      	b.n	8005320 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3340      	adds	r3, #64	; 0x40
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	2200      	movs	r2, #0
 8005318:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	3301      	adds	r3, #1
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b0e      	cmp	r3, #14
 8005324:	d9f2      	bls.n	800530c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11c      	bne.n	8005366 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533a:	f043 0302 	orr.w	r3, r3, #2
 800533e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e005      	b.n	8005372 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005378:	461a      	mov	r2, r3
 800537a:	2300      	movs	r3, #0
 800537c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	4619      	mov	r1, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	461a      	mov	r2, r3
 800538e:	680b      	ldr	r3, [r1, #0]
 8005390:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005392:	2103      	movs	r1, #3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f959 	bl	800564c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800539a:	2110      	movs	r1, #16
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8f1 	bl	8005584 <USB_FlushTxFifo>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f91d 	bl	80055ec <USB_FlushRxFifo>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	461a      	mov	r2, r3
 80053c4:	2300      	movs	r3, #0
 80053c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	461a      	mov	r2, r3
 80053d0:	2300      	movs	r3, #0
 80053d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	461a      	mov	r2, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	e043      	b.n	800546e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053fc:	d118      	bne.n	8005430 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	461a      	mov	r2, r3
 8005412:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e013      	b.n	8005442 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e008      	b.n	8005442 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	461a      	mov	r2, r3
 800543e:	2300      	movs	r3, #0
 8005440:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	461a      	mov	r2, r3
 8005462:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005466:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3301      	adds	r3, #1
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	429a      	cmp	r2, r3
 8005474:	d3b7      	bcc.n	80053e6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	e043      	b.n	8005504 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800548e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005492:	d118      	bne.n	80054c6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10a      	bne.n	80054b0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e013      	b.n	80054d8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	461a      	mov	r2, r3
 80054be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	e008      	b.n	80054d8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	461a      	mov	r2, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	461a      	mov	r2, r3
 80054f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3301      	adds	r3, #1
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	429a      	cmp	r2, r3
 800550a:	d3b7      	bcc.n	800547c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800551e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800552c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f043 0210 	orr.w	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	4b10      	ldr	r3, [pc, #64]	; (8005580 <USB_DevInit+0x294>)
 8005540:	4313      	orrs	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f043 0208 	orr.w	r2, r3, #8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005566:	f043 0304 	orr.w	r3, r3, #4
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800557a:	b004      	add	sp, #16
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	803c3800 	.word	0x803c3800

08005584 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <USB_FlushTxFifo+0x64>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e01b      	b.n	80055dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	daf2      	bge.n	8005592 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	019b      	lsls	r3, r3, #6
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <USB_FlushTxFifo+0x64>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e006      	b.n	80055dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d0f0      	beq.n	80055bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	00030d40 	.word	0x00030d40

080055ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a11      	ldr	r2, [pc, #68]	; (8005648 <USB_FlushRxFifo+0x5c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e018      	b.n	800563c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	daf2      	bge.n	80055f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2210      	movs	r2, #16
 800561a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <USB_FlushRxFifo+0x5c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e006      	b.n	800563c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b10      	cmp	r3, #16
 8005638:	d0f0      	beq.n	800561c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	00030d40 	.word	0x00030d40

0800564c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566c:	4313      	orrs	r3, r2
 800566e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005698:	f023 0303 	bic.w	r3, r3, #3
 800569c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0301 	and.w	r3, r3, #1
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4a13      	ldr	r2, [pc, #76]	; (8005740 <USB_CoreReset+0x64>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e01b      	b.n	8005732 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	daf2      	bge.n	80056e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a09      	ldr	r2, [pc, #36]	; (8005740 <USB_CoreReset+0x64>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e006      	b.n	8005732 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d0f0      	beq.n	8005712 <USB_CoreReset+0x36>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	00030d40 	.word	0x00030d40

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4d0d      	ldr	r5, [pc, #52]	; (800577c <__libc_init_array+0x38>)
 8005748:	4c0d      	ldr	r4, [pc, #52]	; (8005780 <__libc_init_array+0x3c>)
 800574a:	1b64      	subs	r4, r4, r5
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	2600      	movs	r6, #0
 8005750:	42a6      	cmp	r6, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	4d0b      	ldr	r5, [pc, #44]	; (8005784 <__libc_init_array+0x40>)
 8005756:	4c0c      	ldr	r4, [pc, #48]	; (8005788 <__libc_init_array+0x44>)
 8005758:	f000 f820 	bl	800579c <_init>
 800575c:	1b64      	subs	r4, r4, r5
 800575e:	10a4      	asrs	r4, r4, #2
 8005760:	2600      	movs	r6, #0
 8005762:	42a6      	cmp	r6, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f855 3b04 	ldr.w	r3, [r5], #4
 800576c:	4798      	blx	r3
 800576e:	3601      	adds	r6, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	f855 3b04 	ldr.w	r3, [r5], #4
 8005776:	4798      	blx	r3
 8005778:	3601      	adds	r6, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	08005804 	.word	0x08005804
 8005780:	08005804 	.word	0x08005804
 8005784:	08005804 	.word	0x08005804
 8005788:	08005808 	.word	0x08005808

0800578c <memset>:
 800578c:	4402      	add	r2, r0
 800578e:	4603      	mov	r3, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
