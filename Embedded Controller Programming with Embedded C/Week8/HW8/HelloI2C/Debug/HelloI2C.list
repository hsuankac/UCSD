
HelloI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000955c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080096f0  080096f0  000196f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b24  08009b24  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b2c  08009b2c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b2c  08009b2c  00019b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b30  08009b30  00019b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  200001f8  08009d2c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  08009d2c  000209f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae1b  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003574  00000000  00000000  0003b03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  0003e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  0003fd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029649  00000000  00000000  00041400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b30b  00000000  00000000  0006aa49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6826  00000000  00000000  00085d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c57a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076b8  00000000  00000000  0017c5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096d4 	.word	0x080096d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080096d4 	.word	0x080096d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e16:	2afd      	cmp	r2, #253	; 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	; 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	; 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	; 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__gesf2>:
 8001064:	f04f 3cff 	mov.w	ip, #4294967295
 8001068:	e006      	b.n	8001078 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__lesf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	e002      	b.n	8001078 <__cmpsf2+0x4>
 8001072:	bf00      	nop

08001074 <__cmpsf2>:
 8001074:	f04f 0c01 	mov.w	ip, #1
 8001078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	bf18      	it	ne
 800108a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108e:	d011      	beq.n	80010b4 <__cmpsf2+0x40>
 8001090:	b001      	add	sp, #4
 8001092:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001096:	bf18      	it	ne
 8001098:	ea90 0f01 	teqne	r0, r1
 800109c:	bf58      	it	pl
 800109e:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a2:	bf88      	it	hi
 80010a4:	17c8      	asrhi	r0, r1, #31
 80010a6:	bf38      	it	cc
 80010a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ac:	bf18      	it	ne
 80010ae:	f040 0001 	orrne.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	d102      	bne.n	80010c0 <__cmpsf2+0x4c>
 80010ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010be:	d105      	bne.n	80010cc <__cmpsf2+0x58>
 80010c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c4:	d1e4      	bne.n	8001090 <__cmpsf2+0x1c>
 80010c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ca:	d0e1      	beq.n	8001090 <__cmpsf2+0x1c>
 80010cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__aeabi_cfrcmple>:
 80010d4:	4684      	mov	ip, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4661      	mov	r1, ip
 80010da:	e7ff      	b.n	80010dc <__aeabi_cfcmpeq>

080010dc <__aeabi_cfcmpeq>:
 80010dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010de:	f7ff ffc9 	bl	8001074 <__cmpsf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	bf48      	it	mi
 80010e6:	f110 0f00 	cmnmi.w	r0, #0
 80010ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ec <__aeabi_fcmpeq>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff fff4 	bl	80010dc <__aeabi_cfcmpeq>
 80010f4:	bf0c      	ite	eq
 80010f6:	2001      	moveq	r0, #1
 80010f8:	2000      	movne	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmplt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffea 	bl	80010dc <__aeabi_cfcmpeq>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmple>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffe0 	bl	80010dc <__aeabi_cfcmpeq>
 800111c:	bf94      	ite	ls
 800111e:	2001      	movls	r0, #1
 8001120:	2000      	movhi	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmpge>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffd2 	bl	80010d4 <__aeabi_cfrcmple>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpgt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffc8 	bl	80010d4 <__aeabi_cfrcmple>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_uldivmod>:
 8001150:	b953      	cbnz	r3, 8001168 <__aeabi_uldivmod+0x18>
 8001152:	b94a      	cbnz	r2, 8001168 <__aeabi_uldivmod+0x18>
 8001154:	2900      	cmp	r1, #0
 8001156:	bf08      	it	eq
 8001158:	2800      	cmpeq	r0, #0
 800115a:	bf1c      	itt	ne
 800115c:	f04f 31ff 	movne.w	r1, #4294967295
 8001160:	f04f 30ff 	movne.w	r0, #4294967295
 8001164:	f000 b974 	b.w	8001450 <__aeabi_idiv0>
 8001168:	f1ad 0c08 	sub.w	ip, sp, #8
 800116c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001170:	f000 f806 	bl	8001180 <__udivmoddi4>
 8001174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800117c:	b004      	add	sp, #16
 800117e:	4770      	bx	lr

08001180 <__udivmoddi4>:
 8001180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001184:	9e08      	ldr	r6, [sp, #32]
 8001186:	460d      	mov	r5, r1
 8001188:	4604      	mov	r4, r0
 800118a:	4688      	mov	r8, r1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d14d      	bne.n	800122c <__udivmoddi4+0xac>
 8001190:	428a      	cmp	r2, r1
 8001192:	4694      	mov	ip, r2
 8001194:	d968      	bls.n	8001268 <__udivmoddi4+0xe8>
 8001196:	fab2 f282 	clz	r2, r2
 800119a:	b152      	cbz	r2, 80011b2 <__udivmoddi4+0x32>
 800119c:	fa01 f302 	lsl.w	r3, r1, r2
 80011a0:	f1c2 0120 	rsb	r1, r2, #32
 80011a4:	fa20 f101 	lsr.w	r1, r0, r1
 80011a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80011ac:	ea41 0803 	orr.w	r8, r1, r3
 80011b0:	4094      	lsls	r4, r2
 80011b2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011b6:	0c21      	lsrs	r1, r4, #16
 80011b8:	fbb8 fef5 	udiv	lr, r8, r5
 80011bc:	fa1f f78c 	uxth.w	r7, ip
 80011c0:	fb05 831e 	mls	r3, r5, lr, r8
 80011c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011c8:	fb0e f107 	mul.w	r1, lr, r7
 80011cc:	4299      	cmp	r1, r3
 80011ce:	d90b      	bls.n	80011e8 <__udivmoddi4+0x68>
 80011d0:	eb1c 0303 	adds.w	r3, ip, r3
 80011d4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80011d8:	f080 811e 	bcs.w	8001418 <__udivmoddi4+0x298>
 80011dc:	4299      	cmp	r1, r3
 80011de:	f240 811b 	bls.w	8001418 <__udivmoddi4+0x298>
 80011e2:	f1ae 0e02 	sub.w	lr, lr, #2
 80011e6:	4463      	add	r3, ip
 80011e8:	1a5b      	subs	r3, r3, r1
 80011ea:	b2a4      	uxth	r4, r4
 80011ec:	fbb3 f0f5 	udiv	r0, r3, r5
 80011f0:	fb05 3310 	mls	r3, r5, r0, r3
 80011f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011f8:	fb00 f707 	mul.w	r7, r0, r7
 80011fc:	42a7      	cmp	r7, r4
 80011fe:	d90a      	bls.n	8001216 <__udivmoddi4+0x96>
 8001200:	eb1c 0404 	adds.w	r4, ip, r4
 8001204:	f100 33ff 	add.w	r3, r0, #4294967295
 8001208:	f080 8108 	bcs.w	800141c <__udivmoddi4+0x29c>
 800120c:	42a7      	cmp	r7, r4
 800120e:	f240 8105 	bls.w	800141c <__udivmoddi4+0x29c>
 8001212:	4464      	add	r4, ip
 8001214:	3802      	subs	r0, #2
 8001216:	1be4      	subs	r4, r4, r7
 8001218:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800121c:	2100      	movs	r1, #0
 800121e:	b11e      	cbz	r6, 8001228 <__udivmoddi4+0xa8>
 8001220:	40d4      	lsrs	r4, r2
 8001222:	2300      	movs	r3, #0
 8001224:	e9c6 4300 	strd	r4, r3, [r6]
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122c:	428b      	cmp	r3, r1
 800122e:	d908      	bls.n	8001242 <__udivmoddi4+0xc2>
 8001230:	2e00      	cmp	r6, #0
 8001232:	f000 80ee 	beq.w	8001412 <__udivmoddi4+0x292>
 8001236:	2100      	movs	r1, #0
 8001238:	e9c6 0500 	strd	r0, r5, [r6]
 800123c:	4608      	mov	r0, r1
 800123e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001242:	fab3 f183 	clz	r1, r3
 8001246:	2900      	cmp	r1, #0
 8001248:	d14a      	bne.n	80012e0 <__udivmoddi4+0x160>
 800124a:	42ab      	cmp	r3, r5
 800124c:	d302      	bcc.n	8001254 <__udivmoddi4+0xd4>
 800124e:	4282      	cmp	r2, r0
 8001250:	f200 80f9 	bhi.w	8001446 <__udivmoddi4+0x2c6>
 8001254:	1a84      	subs	r4, r0, r2
 8001256:	eb65 0303 	sbc.w	r3, r5, r3
 800125a:	2001      	movs	r0, #1
 800125c:	4698      	mov	r8, r3
 800125e:	2e00      	cmp	r6, #0
 8001260:	d0e2      	beq.n	8001228 <__udivmoddi4+0xa8>
 8001262:	e9c6 4800 	strd	r4, r8, [r6]
 8001266:	e7df      	b.n	8001228 <__udivmoddi4+0xa8>
 8001268:	b902      	cbnz	r2, 800126c <__udivmoddi4+0xec>
 800126a:	deff      	udf	#255	; 0xff
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	2a00      	cmp	r2, #0
 8001272:	f040 8091 	bne.w	8001398 <__udivmoddi4+0x218>
 8001276:	eba1 050c 	sub.w	r5, r1, ip
 800127a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800127e:	fa1f fe8c 	uxth.w	lr, ip
 8001282:	2101      	movs	r1, #1
 8001284:	fbb5 f3f7 	udiv	r3, r5, r7
 8001288:	fb07 5013 	mls	r0, r7, r3, r5
 800128c:	0c25      	lsrs	r5, r4, #16
 800128e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001292:	fb0e f003 	mul.w	r0, lr, r3
 8001296:	42a8      	cmp	r0, r5
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x12c>
 800129a:	eb1c 0505 	adds.w	r5, ip, r5
 800129e:	f103 38ff 	add.w	r8, r3, #4294967295
 80012a2:	d202      	bcs.n	80012aa <__udivmoddi4+0x12a>
 80012a4:	42a8      	cmp	r0, r5
 80012a6:	f200 80cb 	bhi.w	8001440 <__udivmoddi4+0x2c0>
 80012aa:	4643      	mov	r3, r8
 80012ac:	1a2d      	subs	r5, r5, r0
 80012ae:	b2a4      	uxth	r4, r4
 80012b0:	fbb5 f0f7 	udiv	r0, r5, r7
 80012b4:	fb07 5510 	mls	r5, r7, r0, r5
 80012b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012bc:	fb0e fe00 	mul.w	lr, lr, r0
 80012c0:	45a6      	cmp	lr, r4
 80012c2:	d908      	bls.n	80012d6 <__udivmoddi4+0x156>
 80012c4:	eb1c 0404 	adds.w	r4, ip, r4
 80012c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012cc:	d202      	bcs.n	80012d4 <__udivmoddi4+0x154>
 80012ce:	45a6      	cmp	lr, r4
 80012d0:	f200 80bb 	bhi.w	800144a <__udivmoddi4+0x2ca>
 80012d4:	4628      	mov	r0, r5
 80012d6:	eba4 040e 	sub.w	r4, r4, lr
 80012da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012de:	e79e      	b.n	800121e <__udivmoddi4+0x9e>
 80012e0:	f1c1 0720 	rsb	r7, r1, #32
 80012e4:	408b      	lsls	r3, r1
 80012e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80012ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80012ee:	fa20 f407 	lsr.w	r4, r0, r7
 80012f2:	fa05 f301 	lsl.w	r3, r5, r1
 80012f6:	431c      	orrs	r4, r3
 80012f8:	40fd      	lsrs	r5, r7
 80012fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012fe:	fa00 f301 	lsl.w	r3, r0, r1
 8001302:	fbb5 f8f9 	udiv	r8, r5, r9
 8001306:	0c20      	lsrs	r0, r4, #16
 8001308:	fa1f fe8c 	uxth.w	lr, ip
 800130c:	fb09 5518 	mls	r5, r9, r8, r5
 8001310:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001314:	fb08 f00e 	mul.w	r0, r8, lr
 8001318:	42a8      	cmp	r0, r5
 800131a:	fa02 f201 	lsl.w	r2, r2, r1
 800131e:	d90b      	bls.n	8001338 <__udivmoddi4+0x1b8>
 8001320:	eb1c 0505 	adds.w	r5, ip, r5
 8001324:	f108 3aff 	add.w	sl, r8, #4294967295
 8001328:	f080 8088 	bcs.w	800143c <__udivmoddi4+0x2bc>
 800132c:	42a8      	cmp	r0, r5
 800132e:	f240 8085 	bls.w	800143c <__udivmoddi4+0x2bc>
 8001332:	f1a8 0802 	sub.w	r8, r8, #2
 8001336:	4465      	add	r5, ip
 8001338:	1a2d      	subs	r5, r5, r0
 800133a:	b2a4      	uxth	r4, r4
 800133c:	fbb5 f0f9 	udiv	r0, r5, r9
 8001340:	fb09 5510 	mls	r5, r9, r0, r5
 8001344:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001348:	fb00 fe0e 	mul.w	lr, r0, lr
 800134c:	45ae      	cmp	lr, r5
 800134e:	d908      	bls.n	8001362 <__udivmoddi4+0x1e2>
 8001350:	eb1c 0505 	adds.w	r5, ip, r5
 8001354:	f100 34ff 	add.w	r4, r0, #4294967295
 8001358:	d26c      	bcs.n	8001434 <__udivmoddi4+0x2b4>
 800135a:	45ae      	cmp	lr, r5
 800135c:	d96a      	bls.n	8001434 <__udivmoddi4+0x2b4>
 800135e:	3802      	subs	r0, #2
 8001360:	4465      	add	r5, ip
 8001362:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001366:	fba0 9402 	umull	r9, r4, r0, r2
 800136a:	eba5 050e 	sub.w	r5, r5, lr
 800136e:	42a5      	cmp	r5, r4
 8001370:	46c8      	mov	r8, r9
 8001372:	46a6      	mov	lr, r4
 8001374:	d356      	bcc.n	8001424 <__udivmoddi4+0x2a4>
 8001376:	d053      	beq.n	8001420 <__udivmoddi4+0x2a0>
 8001378:	b15e      	cbz	r6, 8001392 <__udivmoddi4+0x212>
 800137a:	ebb3 0208 	subs.w	r2, r3, r8
 800137e:	eb65 050e 	sbc.w	r5, r5, lr
 8001382:	fa05 f707 	lsl.w	r7, r5, r7
 8001386:	fa22 f301 	lsr.w	r3, r2, r1
 800138a:	40cd      	lsrs	r5, r1
 800138c:	431f      	orrs	r7, r3
 800138e:	e9c6 7500 	strd	r7, r5, [r6]
 8001392:	2100      	movs	r1, #0
 8001394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001398:	f1c2 0320 	rsb	r3, r2, #32
 800139c:	fa20 f103 	lsr.w	r1, r0, r3
 80013a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80013a4:	fa25 f303 	lsr.w	r3, r5, r3
 80013a8:	4095      	lsls	r5, r2
 80013aa:	430d      	orrs	r5, r1
 80013ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013b0:	fa1f fe8c 	uxth.w	lr, ip
 80013b4:	fbb3 f1f7 	udiv	r1, r3, r7
 80013b8:	fb07 3011 	mls	r0, r7, r1, r3
 80013bc:	0c2b      	lsrs	r3, r5, #16
 80013be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013c2:	fb01 f00e 	mul.w	r0, r1, lr
 80013c6:	4298      	cmp	r0, r3
 80013c8:	fa04 f402 	lsl.w	r4, r4, r2
 80013cc:	d908      	bls.n	80013e0 <__udivmoddi4+0x260>
 80013ce:	eb1c 0303 	adds.w	r3, ip, r3
 80013d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80013d6:	d22f      	bcs.n	8001438 <__udivmoddi4+0x2b8>
 80013d8:	4298      	cmp	r0, r3
 80013da:	d92d      	bls.n	8001438 <__udivmoddi4+0x2b8>
 80013dc:	3902      	subs	r1, #2
 80013de:	4463      	add	r3, ip
 80013e0:	1a1b      	subs	r3, r3, r0
 80013e2:	b2ad      	uxth	r5, r5
 80013e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80013e8:	fb07 3310 	mls	r3, r7, r0, r3
 80013ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80013f0:	fb00 f30e 	mul.w	r3, r0, lr
 80013f4:	42ab      	cmp	r3, r5
 80013f6:	d908      	bls.n	800140a <__udivmoddi4+0x28a>
 80013f8:	eb1c 0505 	adds.w	r5, ip, r5
 80013fc:	f100 38ff 	add.w	r8, r0, #4294967295
 8001400:	d216      	bcs.n	8001430 <__udivmoddi4+0x2b0>
 8001402:	42ab      	cmp	r3, r5
 8001404:	d914      	bls.n	8001430 <__udivmoddi4+0x2b0>
 8001406:	3802      	subs	r0, #2
 8001408:	4465      	add	r5, ip
 800140a:	1aed      	subs	r5, r5, r3
 800140c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001410:	e738      	b.n	8001284 <__udivmoddi4+0x104>
 8001412:	4631      	mov	r1, r6
 8001414:	4630      	mov	r0, r6
 8001416:	e707      	b.n	8001228 <__udivmoddi4+0xa8>
 8001418:	4686      	mov	lr, r0
 800141a:	e6e5      	b.n	80011e8 <__udivmoddi4+0x68>
 800141c:	4618      	mov	r0, r3
 800141e:	e6fa      	b.n	8001216 <__udivmoddi4+0x96>
 8001420:	454b      	cmp	r3, r9
 8001422:	d2a9      	bcs.n	8001378 <__udivmoddi4+0x1f8>
 8001424:	ebb9 0802 	subs.w	r8, r9, r2
 8001428:	eb64 0e0c 	sbc.w	lr, r4, ip
 800142c:	3801      	subs	r0, #1
 800142e:	e7a3      	b.n	8001378 <__udivmoddi4+0x1f8>
 8001430:	4640      	mov	r0, r8
 8001432:	e7ea      	b.n	800140a <__udivmoddi4+0x28a>
 8001434:	4620      	mov	r0, r4
 8001436:	e794      	b.n	8001362 <__udivmoddi4+0x1e2>
 8001438:	4641      	mov	r1, r8
 800143a:	e7d1      	b.n	80013e0 <__udivmoddi4+0x260>
 800143c:	46d0      	mov	r8, sl
 800143e:	e77b      	b.n	8001338 <__udivmoddi4+0x1b8>
 8001440:	3b02      	subs	r3, #2
 8001442:	4465      	add	r5, ip
 8001444:	e732      	b.n	80012ac <__udivmoddi4+0x12c>
 8001446:	4608      	mov	r0, r1
 8001448:	e709      	b.n	800125e <__udivmoddi4+0xde>
 800144a:	4464      	add	r4, ip
 800144c:	3802      	subs	r0, #2
 800144e:	e742      	b.n	80012d6 <__udivmoddi4+0x156>

08001450 <__aeabi_idiv0>:
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f001 fb06 	bl	8002a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f831 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f000 f9fb 	bl	800185c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001466:	f000 f88f 	bl	8001588 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800146a:	f000 f8c5 	bl	80015f8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800146e:	f000 f903 	bl	8001678 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001472:	f000 f927 	bl	80016c4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001476:	f000 f963 	bl	8001740 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800147a:	f000 f991 	bl	80017a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800147e:	f000 f9bf 	bl	8001800 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_TSENSOR_Init();
 8001482:	f001 f92f 	bl	80026e4 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 8001486:	f001 f901 	bl	800268c <BSP_HSENSOR_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	float humidity = BSP_HSENSOR_ReadHumidity();
 800148a:	f001 f91f 	bl	80026cc <BSP_HSENSOR_ReadHumidity>
 800148e:	6078      	str	r0, [r7, #4]
	float temp = BSP_TSENSOR_ReadTemp();
 8001490:	f001 f944 	bl	800271c <BSP_TSENSOR_ReadTemp>
 8001494:	6038      	str	r0, [r7, #0]
	printf("humidity is %f \r\n", humidity);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff f856 	bl	8000548 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <main+0x6c>)
 80014a2:	f006 f873 	bl	800758c <iprintf>
	printf("humidity is %f \r\n", humidity);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff f84e 	bl	8000548 <__aeabi_f2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <main+0x6c>)
 80014b2:	f006 f86b 	bl	800758c <iprintf>

	HAL_Delay(5000);
 80014b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80014ba:	f001 fb47 	bl	8002b4c <HAL_Delay>
  {
 80014be:	e7e4      	b.n	800148a <main+0x36>
 80014c0:	080096f0 	.word	0x080096f0

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b096      	sub	sp, #88	; 0x58
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	2244      	movs	r2, #68	; 0x44
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fbf6 	bl	8006cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ea:	f002 ffc9 	bl	8004480 <HAL_PWREx_ControlVoltageScaling>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014f4:	f000 fb64 	bl	8001bc0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014f8:	f002 ffa8 	bl	800444c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <SystemClock_Config+0xc0>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	4a20      	ldr	r2, [pc, #128]	; (8001584 <SystemClock_Config+0xc0>)
 8001504:	f023 0318 	bic.w	r3, r3, #24
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800150c:	2314      	movs	r3, #20
 800150e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800151c:	2360      	movs	r3, #96	; 0x60
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001520:	2302      	movs	r3, #2
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001524:	2301      	movs	r3, #1
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001528:	2301      	movs	r3, #1
 800152a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800152c:	2328      	movs	r3, #40	; 0x28
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001530:	2307      	movs	r3, #7
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001534:	2302      	movs	r3, #2
 8001536:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4618      	mov	r0, r3
 8001542:	f003 f8b9 	bl	80046b8 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800154c:	f000 fb38 	bl	8001bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	230f      	movs	r3, #15
 8001552:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001554:	2303      	movs	r3, #3
 8001556:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2104      	movs	r1, #4
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fc81 	bl	8004e70 <HAL_RCC_ClockConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001574:	f000 fb24 	bl	8001bc0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001578:	f004 f984 	bl	8005884 <HAL_RCCEx_EnableMSIPLLMode>
}
 800157c:	bf00      	nop
 800157e:	3758      	adds	r7, #88	; 0x58
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000

08001588 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <MX_DFSDM1_Init+0x6c>)
 8001590:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 8001594:	2201      	movs	r2, #1
 8001596:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015a0:	2202      	movs	r2, #2
 80015a2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_DFSDM1_Init+0x68>)
 80015de:	f001 fbe7 	bl	8002db0 <HAL_DFSDM_ChannelInit>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80015e8:	f000 faea 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000214 	.word	0x20000214
 80015f4:	40016020 	.word	0x40016020

080015f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_I2C2_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_I2C2_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_I2C2_Init+0x74>)
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <MX_I2C2_Init+0x7c>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_I2C2_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_I2C2_Init+0x74>)
 8001610:	2201      	movs	r2, #1
 8001612:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_I2C2_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_I2C2_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_I2C2_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_I2C2_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_I2C2_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <MX_I2C2_Init+0x74>)
 8001634:	f001 ff9e 	bl	8003574 <HAL_I2C_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800163e:	f000 fabf 	bl	8001bc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <MX_I2C2_Init+0x74>)
 8001646:	f002 fd25 	bl	8004094 <HAL_I2CEx_ConfigAnalogFilter>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001650:	f000 fab6 	bl	8001bc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_I2C2_Init+0x74>)
 8001658:	f002 fd66 	bl	8004128 <HAL_I2CEx_ConfigDigitalFilter>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001662:	f000 faad 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000024c 	.word	0x2000024c
 8001670:	40005800 	.word	0x40005800
 8001674:	10909cec 	.word	0x10909cec

08001678 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_QUADSPI_Init+0x44>)
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <MX_QUADSPI_Init+0x48>)
 8001680:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_QUADSPI_Init+0x44>)
 8001684:	2202      	movs	r2, #2
 8001686:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_QUADSPI_Init+0x44>)
 800168a:	2204      	movs	r2, #4
 800168c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_QUADSPI_Init+0x44>)
 8001690:	2210      	movs	r2, #16
 8001692:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_QUADSPI_Init+0x44>)
 8001696:	2217      	movs	r2, #23
 8001698:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_QUADSPI_Init+0x44>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_QUADSPI_Init+0x44>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_QUADSPI_Init+0x44>)
 80016a8:	f002 ff4c 	bl	8004544 <HAL_QSPI_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80016b2:	f000 fa85 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200002a0 	.word	0x200002a0
 80016c0:	a0001000 	.word	0xa0001000

080016c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_SPI3_Init+0x74>)
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <MX_SPI3_Init+0x78>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI3_Init+0x74>)
 80016d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_SPI3_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI3_Init+0x74>)
 80016de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI3_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_SPI3_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI3_Init+0x74>)
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI3_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI3_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI3_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI3_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI3_Init+0x74>)
 8001712:	2207      	movs	r2, #7
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI3_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI3_Init+0x74>)
 800171e:	2208      	movs	r2, #8
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_SPI3_Init+0x74>)
 8001724:	f004 fa8e 	bl	8005c44 <HAL_SPI_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800172e:	f000 fa47 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002e4 	.word	0x200002e4
 800173c:	40003c00 	.word	0x40003c00

08001740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <MX_USART1_UART_Init+0x5c>)
 8001748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001784:	f004 fb01 	bl	8005d8a <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800178e:	f000 fa17 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000348 	.word	0x20000348
 800179c:	40013800 	.word	0x40013800

080017a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART3_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017e4:	f004 fad1 	bl	8005d8a <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017ee:	f000 f9e7 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200003cc 	.word	0x200003cc
 80017fc:	40004800 	.word	0x40004800

08001800 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001806:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800180a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800180e:	2206      	movs	r2, #6
 8001810:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001814:	2202      	movs	r2, #2
 8001816:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181a:	2202      	movs	r2, #2
 800181c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183e:	2200      	movs	r2, #0
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001844:	f002 fcbb 	bl	80041be <HAL_PCD_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800184e:	f000 f9b7 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000450 	.word	0x20000450

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001872:	4bbd      	ldr	r3, [pc, #756]	; (8001b68 <MX_GPIO_Init+0x30c>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4abc      	ldr	r2, [pc, #752]	; (8001b68 <MX_GPIO_Init+0x30c>)
 8001878:	f043 0310 	orr.w	r3, r3, #16
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4bba      	ldr	r3, [pc, #744]	; (8001b68 <MX_GPIO_Init+0x30c>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	4bb7      	ldr	r3, [pc, #732]	; (8001b68 <MX_GPIO_Init+0x30c>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4ab6      	ldr	r2, [pc, #728]	; (8001b68 <MX_GPIO_Init+0x30c>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4bb4      	ldr	r3, [pc, #720]	; (8001b68 <MX_GPIO_Init+0x30c>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4bb1      	ldr	r3, [pc, #708]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4ab0      	ldr	r2, [pc, #704]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4bae      	ldr	r3, [pc, #696]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4bab      	ldr	r3, [pc, #684]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4aaa      	ldr	r2, [pc, #680]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4ba8      	ldr	r3, [pc, #672]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	4ba5      	ldr	r3, [pc, #660]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	4aa4      	ldr	r2, [pc, #656]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018de:	4ba2      	ldr	r3, [pc, #648]	; (8001b68 <MX_GPIO_Init+0x30c>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 718a 	mov.w	r1, #276	; 0x114
 80018f0:	489e      	ldr	r0, [pc, #632]	; (8001b6c <MX_GPIO_Init+0x310>)
 80018f2:	f001 fe05 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f248 1104 	movw	r1, #33028	; 0x8104
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f001 fdfe 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001904:	2200      	movs	r2, #0
 8001906:	f24f 0114 	movw	r1, #61460	; 0xf014
 800190a:	4899      	ldr	r0, [pc, #612]	; (8001b70 <MX_GPIO_Init+0x314>)
 800190c:	f001 fdf8 	bl	8003500 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f241 0181 	movw	r1, #4225	; 0x1081
 8001916:	4897      	ldr	r0, [pc, #604]	; (8001b74 <MX_GPIO_Init+0x318>)
 8001918:	f001 fdf2 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001922:	4894      	ldr	r0, [pc, #592]	; (8001b74 <MX_GPIO_Init+0x318>)
 8001924:	f001 fdec 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800192e:	4892      	ldr	r0, [pc, #584]	; (8001b78 <MX_GPIO_Init+0x31c>)
 8001930:	f001 fde6 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2120      	movs	r1, #32
 8001938:	488d      	ldr	r0, [pc, #564]	; (8001b70 <MX_GPIO_Init+0x314>)
 800193a:	f001 fde1 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2101      	movs	r1, #1
 8001942:	488a      	ldr	r0, [pc, #552]	; (8001b6c <MX_GPIO_Init+0x310>)
 8001944:	f001 fddc 	bl	8003500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001948:	f240 1315 	movw	r3, #277	; 0x115
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4882      	ldr	r0, [pc, #520]	; (8001b6c <MX_GPIO_Init+0x310>)
 8001962:	f001 fb31 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001966:	236a      	movs	r3, #106	; 0x6a
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	487c      	ldr	r0, [pc, #496]	; (8001b6c <MX_GPIO_Init+0x310>)
 800197c:	f001 fb24 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001986:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4878      	ldr	r0, [pc, #480]	; (8001b78 <MX_GPIO_Init+0x31c>)
 8001998:	f001 fb16 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800199c:	233f      	movs	r3, #63	; 0x3f
 800199e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019a0:	230b      	movs	r3, #11
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4872      	ldr	r0, [pc, #456]	; (8001b78 <MX_GPIO_Init+0x31c>)
 80019b0:	f001 fb0a 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80019b4:	2303      	movs	r3, #3
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019c4:	2308      	movs	r3, #8
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d2:	f001 faf9 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80019d6:	f248 1304 	movw	r3, #33028	; 0x8104
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f001 fae9 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80019f6:	2308      	movs	r3, #8
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a06:	2301      	movs	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f001 fad8 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2e:	f001 facb 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001a32:	23e0      	movs	r3, #224	; 0xe0
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a42:	2305      	movs	r3, #5
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f001 faba 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4841      	ldr	r0, [pc, #260]	; (8001b70 <MX_GPIO_Init+0x314>)
 8001a6a:	f001 faad 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a72:	230b      	movs	r3, #11
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	483b      	ldr	r0, [pc, #236]	; (8001b70 <MX_GPIO_Init+0x314>)
 8001a82:	f001 faa1 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001a86:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001a8a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4834      	ldr	r0, [pc, #208]	; (8001b70 <MX_GPIO_Init+0x314>)
 8001aa0:	f001 fa92 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001aa4:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001aa8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	482e      	ldr	r0, [pc, #184]	; (8001b74 <MX_GPIO_Init+0x318>)
 8001abc:	f001 fa84 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001ac0:	f243 0381 	movw	r3, #12417	; 0x3081
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4826      	ldr	r0, [pc, #152]	; (8001b74 <MX_GPIO_Init+0x318>)
 8001ada:	f001 fa75 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001ade:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4820      	ldr	r0, [pc, #128]	; (8001b78 <MX_GPIO_Init+0x31c>)
 8001af8:	f001 fa66 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001afc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4819      	ldr	r0, [pc, #100]	; (8001b78 <MX_GPIO_Init+0x31c>)
 8001b14:	f001 fa58 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b28:	2305      	movs	r3, #5
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4810      	ldr	r0, [pc, #64]	; (8001b74 <MX_GPIO_Init+0x318>)
 8001b34:	f001 fa48 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001b38:	2378      	movs	r3, #120	; 0x78
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4808      	ldr	r0, [pc, #32]	; (8001b74 <MX_GPIO_Init+0x318>)
 8001b54:	f001 fa38 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001b58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5e:	2312      	movs	r3, #18
 8001b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e00a      	b.n	8001b7c <MX_GPIO_Init+0x320>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48001000 	.word	0x48001000
 8001b70:	48000400 	.word	0x48000400
 8001b74:	48000c00 	.word	0x48000c00
 8001b78:	48000800 	.word	0x48000800
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b82:	2304      	movs	r3, #4
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <MX_GPIO_Init+0x360>)
 8001b8e:	f001 fa1b 	bl	8002fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2017      	movs	r0, #23
 8001b98:	f001 f8d3 	bl	8002d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b9c:	2017      	movs	r0, #23
 8001b9e:	f001 f8ec 	bl	8002d7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2028      	movs	r0, #40	; 0x28
 8001ba8:	f001 f8cb 	bl	8002d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bac:	2028      	movs	r0, #40	; 0x28
 8001bae:	f001 f8e4 	bl	8002d7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	48000400 	.word	0x48000400

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <Error_Handler+0x8>
	...

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_MspInit+0x40>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd6:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_MspInit+0x40>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_MspInit+0x40>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_MspInit+0x40>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_MspInit+0x40>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_MspInit+0x40>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0ac      	sub	sp, #176	; 0xb0
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2288      	movs	r2, #136	; 0x88
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 f847 	bl	8006cc4 <memset>
  if(DFSDM1_Init == 0)
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d142      	bne.n	8001cc4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fb2e 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001c5a:	f7ff ffb1 	bl	8001bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c68:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c8e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ca8:	2306      	movs	r3, #6
 8001caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001cb6:	f001 f987 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	4a02      	ldr	r2, [pc, #8]	; (8001ccc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001cc2:	6013      	str	r3, [r2, #0]
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	37b0      	adds	r7, #176	; 0xb0
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2000095c 	.word	0x2000095c
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48001000 	.word	0x48001000

08001cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0ac      	sub	sp, #176	; 0xb0
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2288      	movs	r2, #136	; 0x88
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 ffe3 	bl	8006cc4 <memset>
  if(hi2c->Instance==I2C2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <HAL_I2C_MspInit+0xb0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d13b      	bne.n	8001d80 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 facb 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d20:	f7ff ff4e 	bl	8001bc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_I2C_MspInit+0xb4>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_I2C_MspInit+0xb4>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_I2C_MspInit+0xb4>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001d3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d44:	2312      	movs	r3, #18
 8001d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d56:	2304      	movs	r3, #4
 8001d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d60:	4619      	mov	r1, r3
 8001d62:	480b      	ldr	r0, [pc, #44]	; (8001d90 <HAL_I2C_MspInit+0xb8>)
 8001d64:	f001 f930 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_I2C_MspInit+0xb4>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_I2C_MspInit+0xb4>)
 8001d6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d72:	6593      	str	r3, [r2, #88]	; 0x58
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_I2C_MspInit+0xb4>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	37b0      	adds	r7, #176	; 0xb0
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40005800 	.word	0x40005800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000400 	.word	0x48000400

08001d94 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_I2C_MspDeInit+0x3c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10f      	bne.n	8001dc6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_I2C_MspDeInit+0x40>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_I2C_MspDeInit+0x40>)
 8001dac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001db0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001db2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db6:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <HAL_I2C_MspDeInit+0x44>)
 8001db8:	f001 faae 	bl	8003318 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_I2C_MspDeInit+0x44>)
 8001dc2:	f001 faa9 	bl	8003318 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40005800 	.word	0x40005800
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000400 	.word	0x48000400

08001ddc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_QSPI_MspInit+0x7c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d128      	bne.n	8001e50 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_QSPI_MspInit+0x80>)
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_QSPI_MspInit+0x80>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6513      	str	r3, [r2, #80]	; 0x50
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_QSPI_MspInit+0x80>)
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_QSPI_MspInit+0x80>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_QSPI_MspInit+0x80>)
 8001e1c:	f043 0310 	orr.w	r3, r3, #16
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_QSPI_MspInit+0x80>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001e2e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001e32:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e40:	230a      	movs	r3, #10
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HAL_QSPI_MspInit+0x84>)
 8001e4c:	f001 f8bc 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	a0001000 	.word	0xa0001000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48001000 	.word	0x48001000

08001e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_SPI_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d128      	bne.n	8001ed8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_SPI_MspInit+0x80>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001eb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ec8:	2306      	movs	r3, #6
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_SPI_MspInit+0x84>)
 8001ed4:	f001 f878 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40003c00 	.word	0x40003c00
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000800 	.word	0x48000800

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ae      	sub	sp, #184	; 0xb8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	2288      	movs	r2, #136	; 0x88
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fed9 	bl	8006cc4 <memset>
  if(huart->Instance==USART1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a42      	ldr	r2, [pc, #264]	; (8002020 <HAL_UART_MspInit+0x134>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d13b      	bne.n	8001f94 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f20:	2300      	movs	r3, #0
 8001f22:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 f9c1 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f34:	f7ff fe44 	bl	8001bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f38:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	4a39      	ldr	r2, [pc, #228]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f42:	6613      	str	r3, [r2, #96]	; 0x60
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a33      	ldr	r2, [pc, #204]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001f68:	23c0      	movs	r3, #192	; 0xc0
 8001f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f80:	2307      	movs	r3, #7
 8001f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4826      	ldr	r0, [pc, #152]	; (8002028 <HAL_UART_MspInit+0x13c>)
 8001f8e:	f001 f81b 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f92:	e040      	b.n	8002016 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_UART_MspInit+0x140>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d13b      	bne.n	8002016 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 f980 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001fb6:	f7ff fe03 	bl	8001bc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_UART_MspInit+0x138>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002004:	2307      	movs	r3, #7
 8002006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800200a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800200e:	4619      	mov	r1, r3
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <HAL_UART_MspInit+0x144>)
 8002012:	f000 ffd9 	bl	8002fc8 <HAL_GPIO_Init>
}
 8002016:	bf00      	nop
 8002018:	37b8      	adds	r7, #184	; 0xb8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40013800 	.word	0x40013800
 8002024:	40021000 	.word	0x40021000
 8002028:	48000400 	.word	0x48000400
 800202c:	40004800 	.word	0x40004800
 8002030:	48000c00 	.word	0x48000c00

08002034 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0ac      	sub	sp, #176	; 0xb0
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2288      	movs	r2, #136	; 0x88
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fe35 	bl	8006cc4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002062:	d17c      	bne.n	800215e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800206a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800206e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002076:	2301      	movs	r3, #1
 8002078:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800207a:	2318      	movs	r3, #24
 800207c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800207e:	2307      	movs	r3, #7
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002082:	2302      	movs	r3, #2
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002086:	2302      	movs	r3, #2
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800208a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4618      	mov	r0, r3
 8002096:	f003 f90b 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80020a0:	f7ff fd8e 	bl	8001bc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_PCD_MspInit+0x134>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <HAL_PCD_MspInit+0x134>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_PCD_MspInit+0x134>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80020bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020da:	f000 ff75 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80020de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020f8:	230a      	movs	r3, #10
 80020fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002102:	4619      	mov	r1, r3
 8002104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002108:	f000 ff5e 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_PCD_MspInit+0x134>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a15      	ldr	r2, [pc, #84]	; (8002168 <HAL_PCD_MspInit+0x134>)
 8002112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_PCD_MspInit+0x134>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_PCD_MspInit+0x134>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d114      	bne.n	800215a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_PCD_MspInit+0x134>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <HAL_PCD_MspInit+0x134>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_PCD_MspInit+0x134>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002148:	f002 f9ee 	bl	8004528 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_PCD_MspInit+0x134>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_PCD_MspInit+0x134>)
 8002152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002156:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002158:	e001      	b.n	800215e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800215a:	f002 f9e5 	bl	8004528 <HAL_PWREx_EnableVddUSB>
}
 800215e:	bf00      	nop
 8002160:	37b0      	adds	r7, #176	; 0xb0
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <MemManage_Handler+0x4>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler+0x4>

0800218a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b2:	f000 fcaf 	bl	8002b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}

080021ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80021be:	2020      	movs	r0, #32
 80021c0:	f001 f9b6 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80021c4:	2040      	movs	r0, #64	; 0x40
 80021c6:	f001 f9b3 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80021ca:	2080      	movs	r0, #128	; 0x80
 80021cc:	f001 f9b0 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80021d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021d4:	f001 f9ac 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80021e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021e4:	f001 f9a4 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80021e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021ec:	f001 f9a0 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80021f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021f4:	f001 f99c 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80021f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021fc:	f001 f998 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002200:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002204:	f001 f994 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return 1;
 8002210:	2301      	movs	r3, #1
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <_kill>:

int _kill(int pid, int sig)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002224:	f004 fd16 	bl	8006c54 <__errno>
 8002228:	4603      	mov	r3, r0
 800222a:	2216      	movs	r2, #22
 800222c:	601a      	str	r2, [r3, #0]
  return -1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_exit>:

void _exit (int status)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002242:	f04f 31ff 	mov.w	r1, #4294967295
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffe7 	bl	800221a <_kill>
  while (1) {}    /* Make sure we hang here */
 800224c:	e7fe      	b.n	800224c <_exit+0x12>

0800224e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e00a      	b.n	8002276 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002260:	f3af 8000 	nop.w
 8002264:	4601      	mov	r1, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	60ba      	str	r2, [r7, #8]
 800226c:	b2ca      	uxtb	r2, r1
 800226e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	dbf0      	blt.n	8002260 <_read+0x12>
  }

  return len;
 800227e:	687b      	ldr	r3, [r7, #4]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	e009      	b.n	80022ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	60ba      	str	r2, [r7, #8]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3301      	adds	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dbf1      	blt.n	800229a <_write+0x12>
  }
  return len;
 80022b6:	687b      	ldr	r3, [r7, #4]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_close>:

int _close(int file)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e6:	605a      	str	r2, [r3, #4]
  return 0;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <_isatty>:

int _isatty(int file)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f004 fc80 	bl	8006c54 <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20018000 	.word	0x20018000
 8002380:	00000400 	.word	0x00000400
 8002384:	20000960 	.word	0x20000960
 8002388:	200009f8 	.word	0x200009f8

0800238c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
#endif
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800239c:	f7ff fff6 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80023a2:	490d      	ldr	r1, [pc, #52]	; (80023d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <LoopForever+0xe>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023b8:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <LoopForever+0x16>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c6:	f004 fc4b 	bl	8006c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ca:	f7ff f843 	bl	8001454 <main>

080023ce <LoopForever>:

LoopForever:
    b LoopForever
 80023ce:	e7fe      	b.n	80023ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80023dc:	08009b34 	.word	0x08009b34
  ldr r2, =_sbss
 80023e0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80023e4:	200009f8 	.word	0x200009f8

080023e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC1_2_IRQHandler>
	...

080023ec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <I2Cx_MspInit+0xa8>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	4a26      	ldr	r2, [pc, #152]	; (8002494 <I2Cx_MspInit+0xa8>)
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <I2Cx_MspInit+0xa8>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800240c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002410:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002412:	2312      	movs	r3, #18
 8002414:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002416:	2301      	movs	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800241e:	2304      	movs	r3, #4
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	481b      	ldr	r0, [pc, #108]	; (8002498 <I2Cx_MspInit+0xac>)
 800242a:	f000 fdcd 	bl	8002fc8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4818      	ldr	r0, [pc, #96]	; (8002498 <I2Cx_MspInit+0xac>)
 8002436:	f000 fdc7 	bl	8002fc8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <I2Cx_MspInit+0xa8>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <I2Cx_MspInit+0xa8>)
 8002440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002444:	6593      	str	r3, [r2, #88]	; 0x58
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <I2Cx_MspInit+0xa8>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <I2Cx_MspInit+0xa8>)
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <I2Cx_MspInit+0xa8>)
 8002458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800245c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <I2Cx_MspInit+0xa8>)
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <I2Cx_MspInit+0xa8>)
 8002464:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002468:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	210f      	movs	r1, #15
 800246e:	2021      	movs	r0, #33	; 0x21
 8002470:	f000 fc67 	bl	8002d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002474:	2021      	movs	r0, #33	; 0x21
 8002476:	f000 fc80 	bl	8002d7a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	210f      	movs	r1, #15
 800247e:	2022      	movs	r0, #34	; 0x22
 8002480:	f000 fc5f 	bl	8002d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002484:	2022      	movs	r0, #34	; 0x22
 8002486:	f000 fc78 	bl	8002d7a <HAL_NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	48000400 	.word	0x48000400

0800249c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <I2Cx_Init+0x54>)
 80024a8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <I2Cx_Init+0x58>)
 80024ae:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff89 	bl	80023ec <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f001 f84a 	bl	8003574 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80024e0:	2100      	movs	r1, #0
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f001 fdd6 	bl	8004094 <HAL_I2CEx_ConfigAnalogFilter>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40005800 	.word	0x40005800
 80024f4:	00702681 	.word	0x00702681

080024f8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af04      	add	r7, sp, #16
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4603      	mov	r3, r0
 8002508:	72fb      	strb	r3, [r7, #11]
 800250a:	460b      	mov	r3, r1
 800250c:	813b      	strh	r3, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002516:	7afb      	ldrb	r3, [r7, #11]
 8002518:	b299      	uxth	r1, r3
 800251a:	88f8      	ldrh	r0, [r7, #6]
 800251c:	893a      	ldrh	r2, [r7, #8]
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	9302      	str	r3, [sp, #8]
 8002524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4603      	mov	r3, r0
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f001 f9f2 	bl	8003918 <HAL_I2C_Mem_Read>
 8002534:	4603      	mov	r3, r0
 8002536:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	4619      	mov	r1, r3
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f832 	bl	80025ac <I2Cx_Error>
  }
  return status;
 8002548:	7dfb      	ldrb	r3, [r7, #23]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b08a      	sub	sp, #40	; 0x28
 8002556:	af04      	add	r7, sp, #16
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	4608      	mov	r0, r1
 800255c:	4611      	mov	r1, r2
 800255e:	461a      	mov	r2, r3
 8002560:	4603      	mov	r3, r0
 8002562:	72fb      	strb	r3, [r7, #11]
 8002564:	460b      	mov	r3, r1
 8002566:	813b      	strh	r3, [r7, #8]
 8002568:	4613      	mov	r3, r2
 800256a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002570:	7afb      	ldrb	r3, [r7, #11]
 8002572:	b299      	uxth	r1, r3
 8002574:	88f8      	ldrh	r0, [r7, #6]
 8002576:	893a      	ldrh	r2, [r7, #8]
 8002578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	4603      	mov	r3, r0
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f001 f8b1 	bl	80036f0 <HAL_I2C_Mem_Write>
 800258e:	4603      	mov	r3, r0
 8002590:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002598:	7afb      	ldrb	r3, [r7, #11]
 800259a:	4619      	mov	r1, r3
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f805 	bl	80025ac <I2Cx_Error>
  }
  return status;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f001 f86a 	bl	8003692 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ff6c 	bl	800249c <I2Cx_Init>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <SENSOR_IO_Init+0x10>)
 80025d2:	f7ff ff63 	bl	800249c <I2Cx_Init>
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000964 	.word	0x20000964

080025e0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	460b      	mov	r3, r1
 80025ec:	71bb      	strb	r3, [r7, #6]
 80025ee:	4613      	mov	r3, r2
 80025f0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	79f9      	ldrb	r1, [r7, #7]
 80025f8:	2301      	movs	r3, #1
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	1d7b      	adds	r3, r7, #5
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	4803      	ldr	r0, [pc, #12]	; (8002610 <SENSOR_IO_Write+0x30>)
 8002604:	f7ff ffa5 	bl	8002552 <I2Cx_WriteMultiple>
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000964 	.word	0x20000964

08002614 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af02      	add	r7, sp, #8
 800261a:	4603      	mov	r3, r0
 800261c:	460a      	mov	r2, r1
 800261e:	71fb      	strb	r3, [r7, #7]
 8002620:	4613      	mov	r3, r2
 8002622:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002628:	79bb      	ldrb	r3, [r7, #6]
 800262a:	b29a      	uxth	r2, r3
 800262c:	79f9      	ldrb	r1, [r7, #7]
 800262e:	2301      	movs	r3, #1
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	f107 030f 	add.w	r3, r7, #15
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2301      	movs	r3, #1
 800263a:	4804      	ldr	r0, [pc, #16]	; (800264c <SENSOR_IO_Read+0x38>)
 800263c:	f7ff ff5c 	bl	80024f8 <I2Cx_ReadMultiple>

  return read_value;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000964 	.word	0x20000964

08002650 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af02      	add	r7, sp, #8
 8002656:	603a      	str	r2, [r7, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	460b      	mov	r3, r1
 8002660:	71bb      	strb	r3, [r7, #6]
 8002662:	4613      	mov	r3, r2
 8002664:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002666:	79bb      	ldrb	r3, [r7, #6]
 8002668:	b29a      	uxth	r2, r3
 800266a:	79f9      	ldrb	r1, [r7, #7]
 800266c:	88bb      	ldrh	r3, [r7, #4]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2301      	movs	r3, #1
 8002676:	4804      	ldr	r0, [pc, #16]	; (8002688 <SENSOR_IO_ReadMultiple+0x38>)
 8002678:	f7ff ff3e 	bl	80024f8 <I2Cx_ReadMultiple>
 800267c:	4603      	mov	r3, r0
 800267e:	b29b      	uxth	r3, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000964 	.word	0x20000964

0800268c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <BSP_HSENSOR_Init+0x38>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	20be      	movs	r0, #190	; 0xbe
 8002698:	4798      	blx	r3
 800269a:	4603      	mov	r3, r0
 800269c:	2bbc      	cmp	r3, #188	; 0xbc
 800269e:	d002      	beq.n	80026a6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	e009      	b.n	80026ba <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <BSP_HSENSOR_Init+0x3c>)
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <BSP_HSENSOR_Init+0x38>)
 80026aa:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <BSP_HSENSOR_Init+0x3c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	20be      	movs	r0, #190	; 0xbe
 80026b4:	4798      	blx	r3
    ret = HSENSOR_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80026ba:	687b      	ldr	r3, [r7, #4]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000004 	.word	0x20000004
 80026c8:	200009b8 	.word	0x200009b8

080026cc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <BSP_HSENSOR_ReadHumidity+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	20be      	movs	r0, #190	; 0xbe
 80026d8:	4798      	blx	r3
 80026da:	4603      	mov	r3, r0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200009b8 	.word	0x200009b8

080026e4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <BSP_TSENSOR_Init+0x30>)
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <BSP_TSENSOR_Init+0x34>)
 80026f2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80026f4:	f7ff ff6a 	bl	80025cc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <BSP_TSENSOR_Init+0x30>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2100      	movs	r1, #0
 8002700:	20be      	movs	r0, #190	; 0xbe
 8002702:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002708:	79fb      	ldrb	r3, [r7, #7]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200009bc 	.word	0x200009bc
 8002718:	20000010 	.word	0x20000010

0800271c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <BSP_TSENSOR_ReadTemp+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	20be      	movs	r0, #190	; 0xbe
 8002728:	4798      	blx	r3
 800272a:	4603      	mov	r3, r0
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200009bc 	.word	0x200009bc

08002734 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2120      	movs	r1, #32
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff65 	bl	8002614 <SENSOR_IO_Read>
 800274a:	4603      	mov	r3, r0
 800274c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	f023 0303 	bic.w	r3, r3, #3
 8002764:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002774:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	2120      	movs	r1, #32
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff2e 	bl	80025e0 <SENSOR_IO_Write>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800279a:	f7ff ff17 	bl	80025cc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	210f      	movs	r1, #15
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff35 	bl	8002614 <SENSOR_IO_Read>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	b2d8      	uxtb	r0, r3
 80027c6:	f107 020c 	add.w	r2, r7, #12
 80027ca:	2302      	movs	r3, #2
 80027cc:	21b0      	movs	r1, #176	; 0xb0
 80027ce:	f7ff ff3f 	bl	8002650 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80027d2:	7b3b      	ldrb	r3, [r7, #12]
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80027da:	7b7b      	ldrb	r3, [r7, #13]
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	b2d8      	uxtb	r0, r3
 80027e6:	f107 020c 	add.w	r2, r7, #12
 80027ea:	2302      	movs	r3, #2
 80027ec:	21b6      	movs	r1, #182	; 0xb6
 80027ee:	f7ff ff2f 	bl	8002650 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80027f2:	7b7b      	ldrb	r3, [r7, #13]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	7b3b      	ldrb	r3, [r7, #12]
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	b2d8      	uxtb	r0, r3
 8002804:	f107 020c 	add.w	r2, r7, #12
 8002808:	2302      	movs	r3, #2
 800280a:	21ba      	movs	r1, #186	; 0xba
 800280c:	f7ff ff20 	bl	8002650 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002810:	7b7b      	ldrb	r3, [r7, #13]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	7b3b      	ldrb	r3, [r7, #12]
 8002818:	b21b      	sxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	b2d8      	uxtb	r0, r3
 8002822:	f107 020c 	add.w	r2, r7, #12
 8002826:	2302      	movs	r3, #2
 8002828:	21a8      	movs	r1, #168	; 0xa8
 800282a:	f7ff ff11 	bl	8002650 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800282e:	7b7b      	ldrb	r3, [r7, #13]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	b21a      	sxth	r2, r3
 8002834:	7b3b      	ldrb	r3, [r7, #12]
 8002836:	b21b      	sxth	r3, r3
 8002838:	4313      	orrs	r3, r2
 800283a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800283c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002840:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fa68 	bl	8000d1c <__aeabi_i2f>
 800284c:	4604      	mov	r4, r0
 800284e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002852:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fa5f 	bl	8000d1c <__aeabi_i2f>
 800285e:	4603      	mov	r3, r0
 8002860:	4619      	mov	r1, r3
 8002862:	4620      	mov	r0, r4
 8002864:	f7fe faae 	bl	8000dc4 <__aeabi_fmul>
 8002868:	4603      	mov	r3, r0
 800286a:	461c      	mov	r4, r3
 800286c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002870:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fa50 	bl	8000d1c <__aeabi_i2f>
 800287c:	4603      	mov	r3, r0
 800287e:	4619      	mov	r1, r3
 8002880:	4620      	mov	r0, r4
 8002882:	f7fe fb53 	bl	8000f2c <__aeabi_fdiv>
 8002886:	4603      	mov	r3, r0
 8002888:	461c      	mov	r4, r3
 800288a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fa44 	bl	8000d1c <__aeabi_i2f>
 8002894:	4603      	mov	r3, r0
 8002896:	4619      	mov	r1, r3
 8002898:	4620      	mov	r0, r4
 800289a:	f7fe f98b 	bl	8000bb4 <__addsf3>
 800289e:	4603      	mov	r3, r0
 80028a0:	613b      	str	r3, [r7, #16]
  tmp_f *= 10.0f;
 80028a2:	4912      	ldr	r1, [pc, #72]	; (80028ec <HTS221_H_ReadHumidity+0x134>)
 80028a4:	6938      	ldr	r0, [r7, #16]
 80028a6:	f7fe fa8d 	bl	8000dc4 <__aeabi_fmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	613b      	str	r3, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80028ae:	4910      	ldr	r1, [pc, #64]	; (80028f0 <HTS221_H_ReadHumidity+0x138>)
 80028b0:	6938      	ldr	r0, [r7, #16]
 80028b2:	f7fe fc43 	bl	800113c <__aeabi_fcmpgt>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HTS221_H_ReadHumidity+0x108>
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HTS221_H_ReadHumidity+0x138>)
 80028be:	e00b      	b.n	80028d8 <HTS221_H_ReadHumidity+0x120>
        : tmp_f;
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	6938      	ldr	r0, [r7, #16]
 80028c6:	f7fe fc1b 	bl	8001100 <__aeabi_fcmplt>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HTS221_H_ReadHumidity+0x11e>
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e000      	b.n	80028d8 <HTS221_H_ReadHumidity+0x120>
 80028d6:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80028d8:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80028da:	4904      	ldr	r1, [pc, #16]	; (80028ec <HTS221_H_ReadHumidity+0x134>)
 80028dc:	6938      	ldr	r0, [r7, #16]
 80028de:	f7fe fb25 	bl	8000f2c <__aeabi_fdiv>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3724      	adds	r7, #36	; 0x24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	41200000 	.word	0x41200000
 80028f0:	447a0000 	.word	0x447a0000

080028f4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2120      	movs	r1, #32
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fe84 	bl	8002614 <SENSOR_IO_Read>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	f023 0304 	bic.w	r3, r3, #4
 8002916:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002936:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	2120      	movs	r1, #32
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fe4d 	bl	80025e0 <SENSOR_IO_Write>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800294e:	b590      	push	{r4, r7, lr}
 8002950:	b089      	sub	sp, #36	; 0x24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	b2d8      	uxtb	r0, r3
 800295c:	f107 0208 	add.w	r2, r7, #8
 8002960:	2302      	movs	r3, #2
 8002962:	21b2      	movs	r1, #178	; 0xb2
 8002964:	f7ff fe74 	bl	8002650 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2135      	movs	r1, #53	; 0x35
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fe50 	bl	8002614 <SENSOR_IO_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002978:	7ffb      	ldrb	r3, [r7, #31]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21b      	sxth	r3, r3
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	b21a      	sxth	r2, r3
 8002984:	7a3b      	ldrb	r3, [r7, #8]
 8002986:	b21b      	sxth	r3, r3
 8002988:	4313      	orrs	r3, r2
 800298a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800298c:	7ffb      	ldrb	r3, [r7, #31]
 800298e:	019b      	lsls	r3, r3, #6
 8002990:	b21b      	sxth	r3, r3
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	b21a      	sxth	r2, r3
 8002998:	7a7b      	ldrb	r3, [r7, #9]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80029a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029a4:	10db      	asrs	r3, r3, #3
 80029a6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80029a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029ac:	10db      	asrs	r3, r3, #3
 80029ae:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	b2d8      	uxtb	r0, r3
 80029b4:	f107 0208 	add.w	r2, r7, #8
 80029b8:	2304      	movs	r3, #4
 80029ba:	21bc      	movs	r1, #188	; 0xbc
 80029bc:	f7ff fe48 	bl	8002650 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029c0:	7a7b      	ldrb	r3, [r7, #9]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	7a3b      	ldrb	r3, [r7, #8]
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	7abb      	ldrb	r3, [r7, #10]
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	4313      	orrs	r3, r2
 80029da:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	b2d8      	uxtb	r0, r3
 80029e0:	f107 0208 	add.w	r2, r7, #8
 80029e4:	2302      	movs	r3, #2
 80029e6:	21aa      	movs	r1, #170	; 0xaa
 80029e8:	f7ff fe32 	bl	8002650 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029ec:	7a7b      	ldrb	r3, [r7, #9]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	7a3b      	ldrb	r3, [r7, #8]
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80029fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe f989 	bl	8000d1c <__aeabi_i2f>
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f980 	bl	8000d1c <__aeabi_i2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe f9cf 	bl	8000dc4 <__aeabi_fmul>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461c      	mov	r4, r3
 8002a2a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe f971 	bl	8000d1c <__aeabi_i2f>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe fa74 	bl	8000f2c <__aeabi_fdiv>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461c      	mov	r4, r3
 8002a48:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe f965 	bl	8000d1c <__aeabi_i2f>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4619      	mov	r1, r3
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7fe f8ac 	bl	8000bb4 <__addsf3>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]

  return tmp_f;
 8002a60:	68fb      	ldr	r3, [r7, #12]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd90      	pop	{r4, r7, pc}

08002a6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a74:	2003      	movs	r0, #3
 8002a76:	f000 f959 	bl	8002d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f000 f80e 	bl	8002a9c <HAL_InitTick>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	71fb      	strb	r3, [r7, #7]
 8002a8a:	e001      	b.n	8002a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a8c:	f7ff f89e 	bl	8001bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a90:	79fb      	ldrb	r3, [r7, #7]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_InitTick+0x6c>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d023      	beq.n	8002af8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ab0:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_InitTick+0x70>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_InitTick+0x6c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f965 	bl	8002d96 <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d809      	bhi.n	8002aec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	f000 f92f 	bl	8002d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_InitTick+0x74>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e007      	b.n	8002afc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	e004      	b.n	8002afc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e001      	b.n	8002afc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000024 	.word	0x20000024
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20000020 	.word	0x20000020

08002b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_IncTick+0x1c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_IncTick+0x20>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	4a03      	ldr	r2, [pc, #12]	; (8002b34 <HAL_IncTick+0x20>)
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000024 	.word	0x20000024
 8002b34:	200009c0 	.word	0x200009c0

08002b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b3c:	4b02      	ldr	r3, [pc, #8]	; (8002b48 <HAL_GetTick+0x10>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	200009c0 	.word	0x200009c0

08002b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff fff0 	bl	8002b38 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d005      	beq.n	8002b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_Delay+0x44>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b72:	bf00      	nop
 8002b74:	f7ff ffe0 	bl	8002b38 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d8f7      	bhi.n	8002b74 <HAL_Delay+0x28>
  {
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000024 	.word	0x20000024

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4906      	ldr	r1, [pc, #24]	; (8002c2c <__NVIC_EnableIRQ+0x34>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	; (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf8:	d301      	bcc.n	8002cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00f      	b.n	8002d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <SysTick_Config+0x40>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d06:	210f      	movs	r1, #15
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f7ff ff90 	bl	8002c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <SysTick_Config+0x40>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <SysTick_Config+0x40>)
 8002d18:	2207      	movs	r2, #7
 8002d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	e000e010 	.word	0xe000e010

08002d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ff2d 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	4603      	mov	r3, r0
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d54:	f7ff ff42 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f7ff ff90 	bl	8002c84 <NVIC_EncodePriority>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff5f 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff35 	bl	8002bf8 <__NVIC_EnableIRQ>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ffa2 	bl	8002ce8 <SysTick_Config>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0ac      	b.n	8002f1c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f8b2 	bl	8002f30 <DFSDM_GetChannelFromInstance>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4a55      	ldr	r2, [pc, #340]	; (8002f24 <HAL_DFSDM_ChannelInit+0x174>)
 8002dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e09f      	b.n	8002f1c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fe ff17 	bl	8001c10 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002de2:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <HAL_DFSDM_ChannelInit+0x178>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	4a4f      	ldr	r2, [pc, #316]	; (8002f28 <HAL_DFSDM_ChannelInit+0x178>)
 8002dea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002dec:	4b4e      	ldr	r3, [pc, #312]	; (8002f28 <HAL_DFSDM_ChannelInit+0x178>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d125      	bne.n	8002e40 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4c      	ldr	r2, [pc, #304]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dfe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002e00:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4948      	ldr	r1, [pc, #288]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a46      	ldr	r2, [pc, #280]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e14:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002e18:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	791b      	ldrb	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002e22:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	493f      	ldr	r1, [pc, #252]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e34:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3c      	ldr	r2, [pc, #240]	; (8002f2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e3e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002e4e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e5e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e64:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 020f 	bic.w	r2, r2, #15
 8002e7c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ea4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f002 0207 	and.w	r2, r2, #7
 8002ed0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002efc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f810 	bl	8002f30 <DFSDM_GetChannelFromInstance>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4904      	ldr	r1, [pc, #16]	; (8002f24 <HAL_DFSDM_ChannelInit+0x174>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200009c8 	.word	0x200009c8
 8002f28:	200009c4 	.word	0x200009c4
 8002f2c:	40016000 	.word	0x40016000

08002f30 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <DFSDM_GetChannelFromInstance+0x7c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d102      	bne.n	8002f46 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e02b      	b.n	8002f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <DFSDM_GetChannelFromInstance+0x80>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d102      	bne.n	8002f54 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e024      	b.n	8002f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <DFSDM_GetChannelFromInstance+0x84>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d102      	bne.n	8002f62 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e01d      	b.n	8002f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <DFSDM_GetChannelFromInstance+0x88>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d102      	bne.n	8002f70 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e016      	b.n	8002f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <DFSDM_GetChannelFromInstance+0x8c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d102      	bne.n	8002f7e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002f78:	2305      	movs	r3, #5
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e00f      	b.n	8002f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <DFSDM_GetChannelFromInstance+0x90>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d102      	bne.n	8002f8c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002f86:	2306      	movs	r3, #6
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	e008      	b.n	8002f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <DFSDM_GetChannelFromInstance+0x94>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d102      	bne.n	8002f9a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002f94:	2307      	movs	r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e001      	b.n	8002f9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40016000 	.word	0x40016000
 8002fb0:	40016020 	.word	0x40016020
 8002fb4:	40016040 	.word	0x40016040
 8002fb8:	40016080 	.word	0x40016080
 8002fbc:	400160a0 	.word	0x400160a0
 8002fc0:	400160c0 	.word	0x400160c0
 8002fc4:	400160e0 	.word	0x400160e0

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd6:	e17f      	b.n	80032d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8171 	beq.w	80032d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d005      	beq.n	8003008 <HAL_GPIO_Init+0x40>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d130      	bne.n	800306a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800303e:	2201      	movs	r2, #1
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 0201 	and.w	r2, r3, #1
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b03      	cmp	r3, #3
 8003074:	d118      	bne.n	80030a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	08db      	lsrs	r3, r3, #3
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d017      	beq.n	80030e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d123      	bne.n	8003138 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	6939      	ldr	r1, [r7, #16]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80ac 	beq.w	80032d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	4b5e      	ldr	r3, [pc, #376]	; (80032f4 <HAL_GPIO_Init+0x32c>)
 800317c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317e:	4a5d      	ldr	r2, [pc, #372]	; (80032f4 <HAL_GPIO_Init+0x32c>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6613      	str	r3, [r2, #96]	; 0x60
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_GPIO_Init+0x32c>)
 8003188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003192:	4a59      	ldr	r2, [pc, #356]	; (80032f8 <HAL_GPIO_Init+0x330>)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031bc:	d025      	beq.n	800320a <HAL_GPIO_Init+0x242>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4e      	ldr	r2, [pc, #312]	; (80032fc <HAL_GPIO_Init+0x334>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01f      	beq.n	8003206 <HAL_GPIO_Init+0x23e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4d      	ldr	r2, [pc, #308]	; (8003300 <HAL_GPIO_Init+0x338>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_GPIO_Init+0x23a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	; (8003304 <HAL_GPIO_Init+0x33c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x236>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4b      	ldr	r2, [pc, #300]	; (8003308 <HAL_GPIO_Init+0x340>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x232>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4a      	ldr	r2, [pc, #296]	; (800330c <HAL_GPIO_Init+0x344>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x22e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a49      	ldr	r2, [pc, #292]	; (8003310 <HAL_GPIO_Init+0x348>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x22a>
 80031ee:	2306      	movs	r3, #6
 80031f0:	e00c      	b.n	800320c <HAL_GPIO_Init+0x244>
 80031f2:	2307      	movs	r3, #7
 80031f4:	e00a      	b.n	800320c <HAL_GPIO_Init+0x244>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x244>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x244>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x244>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x244>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x244>
 800320a:	2300      	movs	r3, #0
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800321c:	4936      	ldr	r1, [pc, #216]	; (80032f8 <HAL_GPIO_Init+0x330>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_GPIO_Init+0x34c>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800324e:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_GPIO_Init+0x34c>)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_GPIO_Init+0x34c>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_GPIO_Init+0x34c>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_GPIO_Init+0x34c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_GPIO_Init+0x34c>)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_GPIO_Init+0x34c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_GPIO_Init+0x34c>)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3301      	adds	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa22 f303 	lsr.w	r3, r2, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f47f ae78 	bne.w	8002fd8 <HAL_GPIO_Init+0x10>
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40010000 	.word	0x40010000
 80032fc:	48000400 	.word	0x48000400
 8003300:	48000800 	.word	0x48000800
 8003304:	48000c00 	.word	0x48000c00
 8003308:	48001000 	.word	0x48001000
 800330c:	48001400 	.word	0x48001400
 8003310:	48001800 	.word	0x48001800
 8003314:	40010400 	.word	0x40010400

08003318 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003326:	e0cd      	b.n	80034c4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003328:	2201      	movs	r2, #1
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80c0 	beq.w	80034be <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800333e:	4a68      	ldr	r2, [pc, #416]	; (80034e0 <HAL_GPIO_DeInit+0x1c8>)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003366:	d025      	beq.n	80033b4 <HAL_GPIO_DeInit+0x9c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a5e      	ldr	r2, [pc, #376]	; (80034e4 <HAL_GPIO_DeInit+0x1cc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01f      	beq.n	80033b0 <HAL_GPIO_DeInit+0x98>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <HAL_GPIO_DeInit+0x1d0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d019      	beq.n	80033ac <HAL_GPIO_DeInit+0x94>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a5c      	ldr	r2, [pc, #368]	; (80034ec <HAL_GPIO_DeInit+0x1d4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_GPIO_DeInit+0x90>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a5b      	ldr	r2, [pc, #364]	; (80034f0 <HAL_GPIO_DeInit+0x1d8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00d      	beq.n	80033a4 <HAL_GPIO_DeInit+0x8c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a5a      	ldr	r2, [pc, #360]	; (80034f4 <HAL_GPIO_DeInit+0x1dc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <HAL_GPIO_DeInit+0x88>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a59      	ldr	r2, [pc, #356]	; (80034f8 <HAL_GPIO_DeInit+0x1e0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <HAL_GPIO_DeInit+0x84>
 8003398:	2306      	movs	r3, #6
 800339a:	e00c      	b.n	80033b6 <HAL_GPIO_DeInit+0x9e>
 800339c:	2307      	movs	r3, #7
 800339e:	e00a      	b.n	80033b6 <HAL_GPIO_DeInit+0x9e>
 80033a0:	2305      	movs	r3, #5
 80033a2:	e008      	b.n	80033b6 <HAL_GPIO_DeInit+0x9e>
 80033a4:	2304      	movs	r3, #4
 80033a6:	e006      	b.n	80033b6 <HAL_GPIO_DeInit+0x9e>
 80033a8:	2303      	movs	r3, #3
 80033aa:	e004      	b.n	80033b6 <HAL_GPIO_DeInit+0x9e>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e002      	b.n	80033b6 <HAL_GPIO_DeInit+0x9e>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_GPIO_DeInit+0x9e>
 80033b4:	2300      	movs	r3, #0
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	f002 0203 	and.w	r2, r2, #3
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	4093      	lsls	r3, r2
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d132      	bne.n	800342c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <HAL_GPIO_DeInit+0x1e4>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	494b      	ldr	r1, [pc, #300]	; (80034fc <HAL_GPIO_DeInit+0x1e4>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80033d4:	4b49      	ldr	r3, [pc, #292]	; (80034fc <HAL_GPIO_DeInit+0x1e4>)
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	43db      	mvns	r3, r3
 80033dc:	4947      	ldr	r1, [pc, #284]	; (80034fc <HAL_GPIO_DeInit+0x1e4>)
 80033de:	4013      	ands	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80033e2:	4b46      	ldr	r3, [pc, #280]	; (80034fc <HAL_GPIO_DeInit+0x1e4>)
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4944      	ldr	r1, [pc, #272]	; (80034fc <HAL_GPIO_DeInit+0x1e4>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80033f0:	4b42      	ldr	r3, [pc, #264]	; (80034fc <HAL_GPIO_DeInit+0x1e4>)
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	4940      	ldr	r1, [pc, #256]	; (80034fc <HAL_GPIO_DeInit+0x1e4>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800340e:	4a34      	ldr	r2, [pc, #208]	; (80034e0 <HAL_GPIO_DeInit+0x1c8>)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3302      	adds	r3, #2
 8003416:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43da      	mvns	r2, r3
 800341e:	4830      	ldr	r0, [pc, #192]	; (80034e0 <HAL_GPIO_DeInit+0x1c8>)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	400a      	ands	r2, r1
 8003426:	3302      	adds	r3, #2
 8003428:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2103      	movs	r1, #3
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	220f      	movs	r2, #15
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	08d2      	lsrs	r2, r2, #3
 8003460:	4019      	ands	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3208      	adds	r2, #8
 8003466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2103      	movs	r1, #3
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	2101      	movs	r1, #1
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	2103      	movs	r1, #3
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	401a      	ands	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	2101      	movs	r1, #1
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	401a      	ands	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f47f af2b 	bne.w	8003328 <HAL_GPIO_DeInit+0x10>
  }
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40010000 	.word	0x40010000
 80034e4:	48000400 	.word	0x48000400
 80034e8:	48000800 	.word	0x48000800
 80034ec:	48000c00 	.word	0x48000c00
 80034f0:	48001000 	.word	0x48001000
 80034f4:	48001400 	.word	0x48001400
 80034f8:	48001800 	.word	0x48001800
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
 800350c:	4613      	mov	r3, r2
 800350e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003510:	787b      	ldrb	r3, [r7, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800351c:	e002      	b.n	8003524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
	...

08003530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f806 	bl	8003560 <HAL_GPIO_EXTI_Callback>
  }
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40010400 	.word	0x40010400

08003560 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e081      	b.n	800368a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe fb9c 	bl	8001cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	e006      	b.n	80035fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d104      	bne.n	800360e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800360c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800361c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003620:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003630:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69d9      	ldr	r1, [r3, #28]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1a      	ldr	r2, [r3, #32]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e021      	b.n	80036e8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2224      	movs	r2, #36	; 0x24
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fe fb69 	bl	8001d94 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	f040 80f9 	bne.w	800390a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_I2C_Mem_Write+0x34>
 800371e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0ed      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_I2C_Mem_Write+0x4e>
 800373a:	2302      	movs	r3, #2
 800373c:	e0e6      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003746:	f7ff f9f7 	bl	8002b38 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2319      	movs	r3, #25
 8003752:	2201      	movs	r2, #1
 8003754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fac2 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0d1      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2221      	movs	r2, #33	; 0x21
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003790:	88f8      	ldrh	r0, [r7, #6]
 8003792:	893a      	ldrh	r2, [r7, #8]
 8003794:	8979      	ldrh	r1, [r7, #10]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4603      	mov	r3, r0
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f9d3 	bl	8003b4c <I2C_RequestMemoryWrite>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0a9      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2bff      	cmp	r3, #255	; 0xff
 80037c0:	d90e      	bls.n	80037e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fc2b 	bl	8004034 <I2C_TransferConfig>
 80037de:	e00f      	b.n	8003800 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fc1a 	bl	8004034 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 faac 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e07b      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d034      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x1c8>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d130      	bne.n	80038b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	2200      	movs	r2, #0
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fa3e 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e04d      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2bff      	cmp	r3, #255	; 0xff
 8003878:	d90e      	bls.n	8003898 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	22ff      	movs	r2, #255	; 0xff
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	b2da      	uxtb	r2, r3
 8003886:	8979      	ldrh	r1, [r7, #10]
 8003888:	2300      	movs	r3, #0
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fbcf 	bl	8004034 <I2C_TransferConfig>
 8003896:	e00f      	b.n	80038b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fbbe 	bl	8004034 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d19e      	bne.n	8003800 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fa8b 	bl	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e01a      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2220      	movs	r2, #32
 80038dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_I2C_Mem_Write+0x224>)
 80038ea:	400b      	ands	r3, r1
 80038ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	fe00e800 	.word	0xfe00e800

08003918 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	4608      	mov	r0, r1
 8003922:	4611      	mov	r1, r2
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	817b      	strh	r3, [r7, #10]
 800392a:	460b      	mov	r3, r1
 800392c:	813b      	strh	r3, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b20      	cmp	r3, #32
 800393c:	f040 80fd 	bne.w	8003b3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_I2C_Mem_Read+0x34>
 8003946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0f1      	b.n	8003b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_I2C_Mem_Read+0x4e>
 8003962:	2302      	movs	r3, #2
 8003964:	e0ea      	b.n	8003b3c <HAL_I2C_Mem_Read+0x224>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800396e:	f7ff f8e3 	bl	8002b38 <HAL_GetTick>
 8003972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2319      	movs	r3, #25
 800397a:	2201      	movs	r2, #1
 800397c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f9ae 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0d5      	b.n	8003b3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2222      	movs	r2, #34	; 0x22
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039b8:	88f8      	ldrh	r0, [r7, #6]
 80039ba:	893a      	ldrh	r2, [r7, #8]
 80039bc:	8979      	ldrh	r1, [r7, #10]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	4603      	mov	r3, r0
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f913 	bl	8003bf4 <I2C_RequestMemoryRead>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0ad      	b.n	8003b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2bff      	cmp	r3, #255	; 0xff
 80039e8:	d90e      	bls.n	8003a08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	22ff      	movs	r2, #255	; 0xff
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	8979      	ldrh	r1, [r7, #10]
 80039f8:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <HAL_I2C_Mem_Read+0x22c>)
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fb17 	bl	8004034 <I2C_TransferConfig>
 8003a06:	e00f      	b.n	8003a28 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	8979      	ldrh	r1, [r7, #10]
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_I2C_Mem_Read+0x22c>)
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fb06 	bl	8004034 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2104      	movs	r1, #4
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f955 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e07c      	b.n	8003b3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d034      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x1d0>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d130      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f926 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e04d      	b.n	8003b3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2bff      	cmp	r3, #255	; 0xff
 8003aa8:	d90e      	bls.n	8003ac8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	22ff      	movs	r2, #255	; 0xff
 8003aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fab7 	bl	8004034 <I2C_TransferConfig>
 8003ac6:	e00f      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	8979      	ldrh	r1, [r7, #10]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 faa6 	bl	8004034 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d19a      	bne.n	8003a28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f973 	bl	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e01a      	b.n	8003b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_I2C_Mem_Read+0x230>)
 8003b1a:	400b      	ands	r3, r1
 8003b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
  }
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	80002400 	.word	0x80002400
 8003b48:	fe00e800 	.word	0xfe00e800

08003b4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	8979      	ldrh	r1, [r7, #10]
 8003b6c:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <I2C_RequestMemoryWrite+0xa4>)
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fa5d 	bl	8004034 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f8ef 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e02c      	b.n	8003be8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b94:	893b      	ldrh	r3, [r7, #8]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b9e:	e015      	b.n	8003bcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba0:	893b      	ldrh	r3, [r7, #8]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	69b9      	ldr	r1, [r7, #24]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f8d5 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e012      	b.n	8003be8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bc2:	893b      	ldrh	r3, [r7, #8]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f883 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	80002000 	.word	0x80002000

08003bf4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	817b      	strh	r3, [r7, #10]
 8003c06:	460b      	mov	r3, r1
 8003c08:	813b      	strh	r3, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	8979      	ldrh	r1, [r7, #10]
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <I2C_RequestMemoryRead+0xa4>)
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa0a 	bl	8004034 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	69b9      	ldr	r1, [r7, #24]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f89c 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e02c      	b.n	8003c8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3a:	893b      	ldrh	r3, [r7, #8]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
 8003c44:	e015      	b.n	8003c72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c46:	893b      	ldrh	r3, [r7, #8]
 8003c48:	0a1b      	lsrs	r3, r3, #8
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	69b9      	ldr	r1, [r7, #24]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f882 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e012      	b.n	8003c8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c68:	893b      	ldrh	r3, [r7, #8]
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2140      	movs	r1, #64	; 0x40
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f830 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	80002000 	.word	0x80002000

08003c9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d103      	bne.n	8003cba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d007      	beq.n	8003cd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	619a      	str	r2, [r3, #24]
  }
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cf2:	e022      	b.n	8003d3a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d01e      	beq.n	8003d3a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfc:	f7fe ff1c 	bl	8002b38 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d113      	bne.n	8003d3a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d0cd      	beq.n	8003cf4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d6e:	e02c      	b.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f871 	bl	8003e5c <I2C_IsErrorOccurred>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e02a      	b.n	8003dda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d01e      	beq.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8c:	f7fe fed4 	bl	8002b38 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d302      	bcc.n	8003da2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d113      	bne.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e007      	b.n	8003dda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d1cb      	bne.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dee:	e028      	b.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f831 	bl	8003e5c <I2C_IsErrorOccurred>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e026      	b.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e04:	f7fe fe98 	bl	8002b38 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d113      	bne.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e007      	b.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d1cf      	bne.n	8003df0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d075      	beq.n	8003f74 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e90:	e056      	b.n	8003f40 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d052      	beq.n	8003f40 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fe fe4d 	bl	8002b38 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <I2C_IsErrorOccurred+0x54>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d147      	bne.n	8003f40 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ec2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed2:	d12e      	bne.n	8003f32 <I2C_IsErrorOccurred+0xd6>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eda:	d02a      	beq.n	8003f32 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d027      	beq.n	8003f32 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ef2:	f7fe fe21 	bl	8002b38 <HAL_GetTick>
 8003ef6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef8:	e01b      	b.n	8003f32 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003efa:	f7fe fe1d 	bl	8002b38 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b19      	cmp	r3, #25
 8003f06:	d914      	bls.n	8003f32 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d1dc      	bne.n	8003efa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d003      	beq.n	8003f56 <I2C_IsErrorOccurred+0xfa>
 8003f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d09d      	beq.n	8003e92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2220      	movs	r2, #32
 8003f64:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f043 0308 	orr.w	r3, r3, #8
 8003fae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01c      	beq.n	8004024 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff fe56 	bl	8003c9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <I2C_IsErrorOccurred+0x1d4>)
 8003ffc:	400b      	ands	r3, r1
 8003ffe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	431a      	orrs	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	fe00e800 	.word	0xfe00e800

08004034 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	4613      	mov	r3, r2
 8004044:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800404c:	7a7b      	ldrb	r3, [r7, #9]
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004054:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	4313      	orrs	r3, r2
 800405e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004062:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	0d5b      	lsrs	r3, r3, #21
 800406e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <I2C_TransferConfig+0x5c>)
 8004074:	430b      	orrs	r3, r1
 8004076:	43db      	mvns	r3, r3
 8004078:	ea02 0103 	and.w	r1, r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	03ff63ff 	.word	0x03ff63ff

08004094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d138      	bne.n	800411c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e032      	b.n	800411e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6819      	ldr	r1, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d139      	bne.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004148:	2302      	movs	r3, #2
 800414a:	e033      	b.n	80041b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800417a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e000      	b.n	80041b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
  }
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c0:	b08f      	sub	sp, #60	; 0x3c
 80041c2:	af0a      	add	r7, sp, #40	; 0x28
 80041c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e116      	b.n	80043fe <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd ff22 	bl	8002034 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2203      	movs	r2, #3
 80041f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f002 fa9c 	bl	800674c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	687e      	ldr	r6, [r7, #4]
 800421c:	466d      	mov	r5, sp
 800421e:	f106 0410 	add.w	r4, r6, #16
 8004222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800422a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800422e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004232:	1d33      	adds	r3, r6, #4
 8004234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004236:	6838      	ldr	r0, [r7, #0]
 8004238:	f002 fa5c 	bl	80066f4 <USB_CoreInit>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0d7      	b.n	80043fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f002 fa89 	bl	800676c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
 800425e:	e04a      	b.n	80042f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	333d      	adds	r3, #61	; 0x3d
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	333c      	adds	r3, #60	; 0x3c
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004288:	7bfa      	ldrb	r2, [r7, #15]
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	b298      	uxth	r0, r3
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3344      	adds	r3, #68	; 0x44
 800429c:	4602      	mov	r2, r0
 800429e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3340      	adds	r3, #64	; 0x40
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3348      	adds	r3, #72	; 0x48
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	334c      	adds	r3, #76	; 0x4c
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042dc:	7bfa      	ldrb	r2, [r7, #15]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	3354      	adds	r3, #84	; 0x54
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	3301      	adds	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d3af      	bcc.n	8004260 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	e044      	b.n	8004390 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	3301      	adds	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	7bfa      	ldrb	r2, [r7, #15]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d3b5      	bcc.n	8004306 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	687e      	ldr	r6, [r7, #4]
 80043a2:	466d      	mov	r5, sp
 80043a4:	f106 0410 	add.w	r4, r6, #16
 80043a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80043b8:	1d33      	adds	r3, r6, #4
 80043ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043bc:	6838      	ldr	r0, [r7, #0]
 80043be:	f002 fa21 	bl	8006804 <USB_DevInit>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e014      	b.n	80043fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d102      	bne.n	80043f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f80a 	bl	8004406 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f002 fbcc 	bl	8006b94 <USB_DevDisconnect>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004406 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004438:	f043 0303 	orr.w	r3, r3, #3
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	40007000 	.word	0x40007000

08004468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_PWREx_GetVoltageRange+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	40007000 	.word	0x40007000

08004480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448e:	d130      	bne.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004490:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800449c:	d038      	beq.n	8004510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800449e:	4b1f      	ldr	r3, [pc, #124]	; (800451c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044a6:	4a1d      	ldr	r2, [pc, #116]	; (800451c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80044a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044ae:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2232      	movs	r2, #50	; 0x32
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	0c9b      	lsrs	r3, r3, #18
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044c4:	e002      	b.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d8:	d102      	bne.n	80044e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f2      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d110      	bne.n	8004510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e00f      	b.n	8004512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fe:	d007      	beq.n	8004510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004508:	4a04      	ldr	r2, [pc, #16]	; (800451c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800450a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800450e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	40007000 	.word	0x40007000
 8004520:	20000000 	.word	0x20000000
 8004524:	431bde83 	.word	0x431bde83

08004528 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_PWREx_EnableVddUSB+0x18>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a03      	ldr	r2, [pc, #12]	; (8004540 <HAL_PWREx_EnableVddUSB+0x18>)
 8004532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004536:	6053      	str	r3, [r2, #4]
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	40007000 	.word	0x40007000

08004544 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800454c:	f7fe faf4 	bl	8002b38 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e063      	b.n	8004624 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fd fc33 	bl	8001ddc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004576:	f241 3188 	movw	r1, #5000	; 0x1388
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f858 	bl	8004630 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	3b01      	subs	r3, #1
 8004590:	021a      	lsls	r2, r3, #8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	2120      	movs	r1, #32
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f84f 	bl	800464a <QSPI_WaitFlagStateUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80045b0:	7afb      	ldrb	r3, [r7, #11]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d131      	bne.n	800461a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045c0:	f023 0310 	bic.w	r3, r3, #16
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6852      	ldr	r2, [r2, #4]
 80045c8:	0611      	lsls	r1, r2, #24
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68d2      	ldr	r2, [r2, #12]
 80045ce:	4311      	orrs	r1, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <HAL_QSPI_Init+0xe8>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6912      	ldr	r2, [r2, #16]
 80045e6:	0411      	lsls	r1, r2, #16
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6952      	ldr	r2, [r2, #20]
 80045ec:	4311      	orrs	r1, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6992      	ldr	r2, [r2, #24]
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004622:	7afb      	ldrb	r3, [r7, #11]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	ffe0f8fe 	.word	0xffe0f8fe

08004630 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800465a:	e01a      	b.n	8004692 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d016      	beq.n	8004692 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004664:	f7fe fa68 	bl	8002b38 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	429a      	cmp	r2, r3
 8004672:	d302      	bcc.n	800467a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2204      	movs	r2, #4
 800467e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e00e      	b.n	80046b0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d1d6      	bne.n	800465c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e3ca      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ca:	4b97      	ldr	r3, [pc, #604]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d4:	4b94      	ldr	r3, [pc, #592]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80e4 	beq.w	80048b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_RCC_OscConfig+0x4a>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	f040 808b 	bne.w	8004810 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	f040 8087 	bne.w	8004810 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004702:	4b89      	ldr	r3, [pc, #548]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCC_OscConfig+0x62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e3a2      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	4b82      	ldr	r3, [pc, #520]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <HAL_RCC_OscConfig+0x7c>
 800472a:	4b7f      	ldr	r3, [pc, #508]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004732:	e005      	b.n	8004740 <HAL_RCC_OscConfig+0x88>
 8004734:	4b7c      	ldr	r3, [pc, #496]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004740:	4293      	cmp	r3, r2
 8004742:	d223      	bcs.n	800478c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fd51 	bl	80051f0 <RCC_SetFlashLatencyFromMSIRange>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e383      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004758:	4b73      	ldr	r3, [pc, #460]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a72      	ldr	r2, [pc, #456]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800475e:	f043 0308 	orr.w	r3, r3, #8
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b70      	ldr	r3, [pc, #448]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	496d      	ldr	r1, [pc, #436]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004776:	4b6c      	ldr	r3, [pc, #432]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	4968      	ldr	r1, [pc, #416]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
 800478a:	e025      	b.n	80047d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800478c:	4b66      	ldr	r3, [pc, #408]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a65      	ldr	r2, [pc, #404]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4960      	ldr	r1, [pc, #384]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047aa:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	495b      	ldr	r1, [pc, #364]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fd11 	bl	80051f0 <RCC_SetFlashLatencyFromMSIRange>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e343      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047d8:	f000 fc4a 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b52      	ldr	r3, [pc, #328]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	4950      	ldr	r1, [pc, #320]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	4a4e      	ldr	r2, [pc, #312]	; (8004930 <HAL_RCC_OscConfig+0x278>)
 80047f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047f8:	4b4e      	ldr	r3, [pc, #312]	; (8004934 <HAL_RCC_OscConfig+0x27c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe f94d 	bl	8002a9c <HAL_InitTick>
 8004802:	4603      	mov	r3, r0
 8004804:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d052      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	e327      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d032      	beq.n	800487e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004818:	4b43      	ldr	r3, [pc, #268]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a42      	ldr	r2, [pc, #264]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004824:	f7fe f988 	bl	8002b38 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800482c:	f7fe f984 	bl	8002b38 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e310      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800483e:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a36      	ldr	r2, [pc, #216]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b34      	ldr	r3, [pc, #208]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4931      	ldr	r1, [pc, #196]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004868:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	492c      	ldr	r1, [pc, #176]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
 800487c:	e01a      	b.n	80048b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a29      	ldr	r2, [pc, #164]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800488a:	f7fe f955 	bl	8002b38 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004892:	f7fe f951 	bl	8002b38 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e2dd      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048a4:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0x1da>
 80048b0:	e000      	b.n	80048b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d074      	beq.n	80049aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x21a>
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d10e      	bne.n	80048ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d10b      	bne.n	80048ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d064      	beq.n	80049a8 <HAL_RCC_OscConfig+0x2f0>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d160      	bne.n	80049a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e2ba      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x24a>
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a0b      	ldr	r2, [pc, #44]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80048fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	e026      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800490a:	d115      	bne.n	8004938 <HAL_RCC_OscConfig+0x280>
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a05      	ldr	r2, [pc, #20]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a02      	ldr	r2, [pc, #8]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800491e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e014      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	08009704 	.word	0x08009704
 8004930:	20000000 	.word	0x20000000
 8004934:	20000020 	.word	0x20000020
 8004938:	4ba0      	ldr	r3, [pc, #640]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a9f      	ldr	r2, [pc, #636]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b9d      	ldr	r3, [pc, #628]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a9c      	ldr	r2, [pc, #624]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 800494a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fe f8ee 	bl	8002b38 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004960:	f7fe f8ea 	bl	8002b38 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e276      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004972:	4b92      	ldr	r3, [pc, #584]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x2a8>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fe f8da 	bl	8002b38 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004988:	f7fe f8d6 	bl	8002b38 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e262      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800499a:	4b88      	ldr	r3, [pc, #544]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x2d0>
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d060      	beq.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_OscConfig+0x310>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d119      	bne.n	80049f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d116      	bne.n	80049f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049c8:	4b7c      	ldr	r3, [pc, #496]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_OscConfig+0x328>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e23f      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e0:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	4973      	ldr	r1, [pc, #460]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f4:	e040      	b.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d023      	beq.n	8004a46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fe:	4b6f      	ldr	r3, [pc, #444]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6e      	ldr	r2, [pc, #440]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fe f895 	bl	8002b38 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a12:	f7fe f891 	bl	8002b38 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e21d      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a24:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a30:	4b62      	ldr	r3, [pc, #392]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	061b      	lsls	r3, r3, #24
 8004a3e:	495f      	ldr	r1, [pc, #380]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	604b      	str	r3, [r1, #4]
 8004a44:	e018      	b.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a46:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a5c      	ldr	r2, [pc, #368]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fe f871 	bl	8002b38 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5a:	f7fe f86d 	bl	8002b38 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e1f9      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a6c:	4b53      	ldr	r3, [pc, #332]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f0      	bne.n	8004a5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d03c      	beq.n	8004afe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01c      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a92:	4a4a      	ldr	r2, [pc, #296]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fe f84c 	bl	8002b38 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa4:	f7fe f848 	bl	8002b38 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e1d4      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ab6:	4b41      	ldr	r3, [pc, #260]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ef      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x3ec>
 8004ac4:	e01b      	b.n	8004afe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac6:	4b3d      	ldr	r3, [pc, #244]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004acc:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad6:	f7fe f82f 	bl	8002b38 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fe f82b 	bl	8002b38 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e1b7      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ef      	bne.n	8004ade <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a6 	beq.w	8004c58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b10:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10d      	bne.n	8004b38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1c:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	4a26      	ldr	r2, [pc, #152]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6593      	str	r3, [r2, #88]	; 0x58
 8004b28:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b34:	2301      	movs	r3, #1
 8004b36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b38:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <HAL_RCC_OscConfig+0x508>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d118      	bne.n	8004b76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <HAL_RCC_OscConfig+0x508>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1d      	ldr	r2, [pc, #116]	; (8004bc0 <HAL_RCC_OscConfig+0x508>)
 8004b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b50:	f7fd fff2 	bl	8002b38 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b58:	f7fd ffee 	bl	8002b38 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e17a      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <HAL_RCC_OscConfig+0x508>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d108      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4d8>
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	4a0d      	ldr	r2, [pc, #52]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b8e:	e029      	b.n	8004be4 <HAL_RCC_OscConfig+0x52c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d115      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x50c>
 8004b98:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	4a07      	ldr	r2, [pc, #28]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	4a03      	ldr	r2, [pc, #12]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bb8:	e014      	b.n	8004be4 <HAL_RCC_OscConfig+0x52c>
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	4b9c      	ldr	r3, [pc, #624]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	4a9b      	ldr	r2, [pc, #620]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bd4:	4b98      	ldr	r3, [pc, #608]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a97      	ldr	r2, [pc, #604]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d016      	beq.n	8004c1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd ffa4 	bl	8002b38 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fd ffa0 	bl	8002b38 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e12a      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0a:	4b8b      	ldr	r3, [pc, #556]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ed      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x53c>
 8004c18:	e015      	b.n	8004c46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1a:	f7fd ff8d 	bl	8002b38 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fd ff89 	bl	8002b38 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e113      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c38:	4b7f      	ldr	r3, [pc, #508]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ed      	bne.n	8004c22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4c:	4b7a      	ldr	r3, [pc, #488]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	4a79      	ldr	r2, [pc, #484]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80fe 	beq.w	8004e5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	f040 80d0 	bne.w	8004e0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c6c:	4b72      	ldr	r3, [pc, #456]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 0203 	and.w	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d130      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d127      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d11f      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cac:	2a07      	cmp	r2, #7
 8004cae:	bf14      	ite	ne
 8004cb0:	2201      	movne	r2, #1
 8004cb2:	2200      	moveq	r2, #0
 8004cb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d113      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d06e      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d069      	beq.n	8004dbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ce8:	4b53      	ldr	r3, [pc, #332]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004cf4:	4b50      	ldr	r3, [pc, #320]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0ad      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d04:	4b4c      	ldr	r3, [pc, #304]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a4b      	ldr	r2, [pc, #300]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d10:	f7fd ff12 	bl	8002b38 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fd ff0e 	bl	8002b38 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e09a      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d2a:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d36:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <HAL_RCC_OscConfig+0x784>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d46:	3a01      	subs	r2, #1
 8004d48:	0112      	lsls	r2, r2, #4
 8004d4a:	4311      	orrs	r1, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d50:	0212      	lsls	r2, r2, #8
 8004d52:	4311      	orrs	r1, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d58:	0852      	lsrs	r2, r2, #1
 8004d5a:	3a01      	subs	r2, #1
 8004d5c:	0552      	lsls	r2, r2, #21
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d64:	0852      	lsrs	r2, r2, #1
 8004d66:	3a01      	subs	r2, #1
 8004d68:	0652      	lsls	r2, r2, #25
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d70:	0912      	lsrs	r2, r2, #4
 8004d72:	0452      	lsls	r2, r2, #17
 8004d74:	430a      	orrs	r2, r1
 8004d76:	4930      	ldr	r1, [pc, #192]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d7c:	4b2e      	ldr	r3, [pc, #184]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d88:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d94:	f7fd fed0 	bl	8002b38 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fd fecc 	bl	8002b38 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e058      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dba:	e050      	b.n	8004e5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e04f      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d148      	bne.n	8004e5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004de4:	f7fd fea8 	bl	8002b38 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fd fea4 	bl	8002b38 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e030      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x734>
 8004e0a:	e028      	b.n	8004e5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b0c      	cmp	r3, #12
 8004e10:	d023      	beq.n	8004e5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fd fe8b 	bl	8002b38 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e24:	e00c      	b.n	8004e40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fd fe87 	bl	8002b38 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d905      	bls.n	8004e40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e013      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_OscConfig+0x7b0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ec      	bne.n	8004e26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCC_OscConfig+0x7b0>)
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	4905      	ldr	r1, [pc, #20]	; (8004e68 <HAL_RCC_OscConfig+0x7b0>)
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_OscConfig+0x7b4>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	60cb      	str	r3, [r1, #12]
 8004e58:	e001      	b.n	8004e5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	feeefffc 	.word	0xfeeefffc

08004e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0e7      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e84:	4b75      	ldr	r3, [pc, #468]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d910      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e92:	4b72      	ldr	r3, [pc, #456]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 0207 	bic.w	r2, r3, #7
 8004e9a:	4970      	ldr	r1, [pc, #448]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b6e      	ldr	r3, [pc, #440]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0cf      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d908      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed0:	4b63      	ldr	r3, [pc, #396]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4960      	ldr	r1, [pc, #384]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04c      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef6:	4b5a      	ldr	r3, [pc, #360]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d121      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e0a6      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0e:	4b54      	ldr	r3, [pc, #336]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d115      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e09a      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f26:	4b4e      	ldr	r3, [pc, #312]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e08e      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e086      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f46:	4b46      	ldr	r3, [pc, #280]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4943      	ldr	r1, [pc, #268]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fd fdee 	bl	8002b38 <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fd fdea 	bl	8002b38 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e06e      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b3a      	ldr	r3, [pc, #232]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 020c 	and.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1eb      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d208      	bcs.n	8004fb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa4:	4b2e      	ldr	r3, [pc, #184]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	492b      	ldr	r1, [pc, #172]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb6:	4b29      	ldr	r3, [pc, #164]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d210      	bcs.n	8004fe6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f023 0207 	bic.w	r2, r3, #7
 8004fcc:	4923      	ldr	r1, [pc, #140]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e036      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	4918      	ldr	r1, [pc, #96]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8005000:	4313      	orrs	r3, r2
 8005002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005010:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4910      	ldr	r1, [pc, #64]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005024:	f000 f824 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	490b      	ldr	r1, [pc, #44]	; (8005064 <HAL_RCC_ClockConfig+0x1f4>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8005042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1fc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fd fd27 	bl	8002a9c <HAL_InitTick>
 800504e:	4603      	mov	r3, r0
 8005050:	72fb      	strb	r3, [r7, #11]

  return status;
 8005052:	7afb      	ldrb	r3, [r7, #11]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40022000 	.word	0x40022000
 8005060:	40021000 	.word	0x40021000
 8005064:	08009704 	.word	0x08009704
 8005068:	20000000 	.word	0x20000000
 800506c:	20000020 	.word	0x20000020

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800507e:	4b3d      	ldr	r3, [pc, #244]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005088:	4b3a      	ldr	r3, [pc, #232]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d121      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d11e      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050a4:	4b33      	ldr	r3, [pc, #204]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050b0:	4b30      	ldr	r3, [pc, #192]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 80050b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	e005      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050c0:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050cc:	4a2a      	ldr	r2, [pc, #168]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050e0:	e00a      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d102      	bne.n	80050ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050e8:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCC_GetSysClockFreq+0x10c>)
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	e004      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050f4:	4b22      	ldr	r3, [pc, #136]	; (8005180 <HAL_RCC_GetSysClockFreq+0x110>)
 80050f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d134      	bne.n	8005168 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050fe:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d003      	beq.n	8005116 <HAL_RCC_GetSysClockFreq+0xa6>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d003      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0xac>
 8005114:	e005      	b.n	8005122 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005116:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005118:	617b      	str	r3, [r7, #20]
      break;
 800511a:	e005      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800511c:	4b18      	ldr	r3, [pc, #96]	; (8005180 <HAL_RCC_GetSysClockFreq+0x110>)
 800511e:	617b      	str	r3, [r7, #20]
      break;
 8005120:	e002      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	617b      	str	r3, [r7, #20]
      break;
 8005126:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	3301      	adds	r3, #1
 8005134:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005136:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	fb03 f202 	mul.w	r2, r3, r2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_GetSysClockFreq+0x104>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	0e5b      	lsrs	r3, r3, #25
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	3301      	adds	r3, #1
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005168:	69bb      	ldr	r3, [r7, #24]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3724      	adds	r7, #36	; 0x24
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	40021000 	.word	0x40021000
 8005178:	0800971c 	.word	0x0800971c
 800517c:	00f42400 	.word	0x00f42400
 8005180:	007a1200 	.word	0x007a1200

08005184 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <HAL_RCC_GetHCLKFreq+0x10>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr
 8005194:	20000000 	.word	0x20000000

08005198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800519c:	f7ff fff2 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051a0:	4602      	mov	r2, r0
 80051a2:	4b06      	ldr	r3, [pc, #24]	; (80051bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	4904      	ldr	r1, [pc, #16]	; (80051c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ae:	5ccb      	ldrb	r3, [r1, r3]
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000
 80051c0:	08009714 	.word	0x08009714

080051c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051c8:	f7ff ffdc 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	0adb      	lsrs	r3, r3, #11
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	4904      	ldr	r1, [pc, #16]	; (80051ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000
 80051ec:	08009714 	.word	0x08009714

080051f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051fc:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005208:	f7ff f92e 	bl	8004468 <HAL_PWREx_GetVoltageRange>
 800520c:	6178      	str	r0, [r7, #20]
 800520e:	e014      	b.n	800523a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005210:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	4a24      	ldr	r2, [pc, #144]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	6593      	str	r3, [r2, #88]	; 0x58
 800521c:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005228:	f7ff f91e 	bl	8004468 <HAL_PWREx_GetVoltageRange>
 800522c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800522e:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005238:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005240:	d10b      	bne.n	800525a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b80      	cmp	r3, #128	; 0x80
 8005246:	d919      	bls.n	800527c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2ba0      	cmp	r3, #160	; 0xa0
 800524c:	d902      	bls.n	8005254 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800524e:	2302      	movs	r3, #2
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	e013      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005254:	2301      	movs	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	e010      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d902      	bls.n	8005266 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005260:	2303      	movs	r3, #3
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e00a      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b80      	cmp	r3, #128	; 0x80
 800526a:	d102      	bne.n	8005272 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800526c:	2302      	movs	r3, #2
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	e004      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b70      	cmp	r3, #112	; 0x70
 8005276:	d101      	bne.n	800527c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005278:	2301      	movs	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 0207 	bic.w	r2, r3, #7
 8005284:	4909      	ldr	r1, [pc, #36]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800528c:	4b07      	ldr	r3, [pc, #28]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40021000 	.word	0x40021000
 80052ac:	40022000 	.word	0x40022000

080052b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052b8:	2300      	movs	r3, #0
 80052ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052bc:	2300      	movs	r3, #0
 80052be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d041      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052d4:	d02a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052da:	d824      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052e0:	d008      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052e6:	d81e      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f0:	d010      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052f2:	e018      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052f4:	4b86      	ldr	r3, [pc, #536]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a85      	ldr	r2, [pc, #532]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005300:	e015      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fac9 	bl	80058a0 <RCCEx_PLLSAI1_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005312:	e00c      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3320      	adds	r3, #32
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fbb4 	bl	8005a88 <RCCEx_PLLSAI2_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	74fb      	strb	r3, [r7, #19]
      break;
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800532c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532e:	7cfb      	ldrb	r3, [r7, #19]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10b      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005334:	4b76      	ldr	r3, [pc, #472]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005342:	4973      	ldr	r1, [pc, #460]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800534a:	e001      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d041      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005360:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005364:	d02a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005366:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800536a:	d824      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800536c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005370:	d008      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005376:	d81e      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800537c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005380:	d010      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005382:	e018      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005384:	4b62      	ldr	r3, [pc, #392]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4a61      	ldr	r2, [pc, #388]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005390:	e015      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fa81 	bl	80058a0 <RCCEx_PLLSAI1_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053a2:	e00c      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3320      	adds	r3, #32
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fb6c 	bl	8005a88 <RCCEx_PLLSAI2_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053b4:	e003      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	74fb      	strb	r3, [r7, #19]
      break;
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80053bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053be:	7cfb      	ldrb	r3, [r7, #19]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053c4:	4b52      	ldr	r3, [pc, #328]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d2:	494f      	ldr	r1, [pc, #316]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053da:	e001      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80a0 	beq.w	800552e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ee:	2300      	movs	r3, #0
 80053f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053f2:	4b47      	ldr	r3, [pc, #284]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005408:	4b41      	ldr	r3, [pc, #260]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540c:	4a40      	ldr	r2, [pc, #256]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005412:	6593      	str	r3, [r2, #88]	; 0x58
 8005414:	4b3e      	ldr	r3, [pc, #248]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005420:	2301      	movs	r3, #1
 8005422:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005424:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a3a      	ldr	r2, [pc, #232]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800542a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005430:	f7fd fb82 	bl	8002b38 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005436:	e009      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005438:	f7fd fb7e 	bl	8002b38 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d902      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	74fb      	strb	r3, [r7, #19]
        break;
 800544a:	e005      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800544c:	4b31      	ldr	r3, [pc, #196]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ef      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005458:	7cfb      	ldrb	r3, [r7, #19]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d15c      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800545e:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005468:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01f      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	429a      	cmp	r2, r3
 800547a:	d019      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800547c:	4b24      	ldr	r3, [pc, #144]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005488:	4b21      	ldr	r3, [pc, #132]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548e:	4a20      	ldr	r2, [pc, #128]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054a8:	4a19      	ldr	r2, [pc, #100]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ba:	f7fd fb3d 	bl	8002b38 <HAL_GetTick>
 80054be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c0:	e00b      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c2:	f7fd fb39 	bl	8002b38 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d902      	bls.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	74fb      	strb	r3, [r7, #19]
            break;
 80054d8:	e006      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ec      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10c      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fe:	4904      	ldr	r1, [pc, #16]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005506:	e009      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	74bb      	strb	r3, [r7, #18]
 800550c:	e006      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800550e:	bf00      	nop
 8005510:	40021000 	.word	0x40021000
 8005514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800551c:	7c7b      	ldrb	r3, [r7, #17]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005522:	4b9e      	ldr	r3, [pc, #632]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	4a9d      	ldr	r2, [pc, #628]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800553a:	4b98      	ldr	r3, [pc, #608]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	f023 0203 	bic.w	r2, r3, #3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	4994      	ldr	r1, [pc, #592]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800555c:	4b8f      	ldr	r3, [pc, #572]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 020c 	bic.w	r2, r3, #12
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	498c      	ldr	r1, [pc, #560]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800557e:	4b87      	ldr	r3, [pc, #540]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	4983      	ldr	r1, [pc, #524]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a0:	4b7e      	ldr	r3, [pc, #504]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	497b      	ldr	r1, [pc, #492]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055c2:	4b76      	ldr	r3, [pc, #472]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d0:	4972      	ldr	r1, [pc, #456]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e4:	4b6d      	ldr	r3, [pc, #436]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f2:	496a      	ldr	r1, [pc, #424]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005606:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	4961      	ldr	r1, [pc, #388]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005628:	4b5c      	ldr	r3, [pc, #368]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005636:	4959      	ldr	r1, [pc, #356]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564a:	4b54      	ldr	r3, [pc, #336]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	4950      	ldr	r1, [pc, #320]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800566c:	4b4b      	ldr	r3, [pc, #300]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	4948      	ldr	r1, [pc, #288]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800568e:	4b43      	ldr	r3, [pc, #268]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	493f      	ldr	r1, [pc, #252]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d028      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b0:	4b3a      	ldr	r3, [pc, #232]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056be:	4937      	ldr	r1, [pc, #220]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ce:	d106      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d0:	4b32      	ldr	r3, [pc, #200]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4a31      	ldr	r2, [pc, #196]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056da:	60d3      	str	r3, [r2, #12]
 80056dc:	e011      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056e6:	d10c      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	2101      	movs	r1, #1
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f8d6 	bl	80058a0 <RCCEx_PLLSAI1_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056f8:	7cfb      	ldrb	r3, [r7, #19]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d028      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800570e:	4b23      	ldr	r3, [pc, #140]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	491f      	ldr	r1, [pc, #124]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800572c:	d106      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800572e:	4b1b      	ldr	r3, [pc, #108]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	4a1a      	ldr	r2, [pc, #104]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005738:	60d3      	str	r3, [r2, #12]
 800573a:	e011      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005744:	d10c      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	2101      	movs	r1, #1
 800574c:	4618      	mov	r0, r3
 800574e:	f000 f8a7 	bl	80058a0 <RCCEx_PLLSAI1_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02b      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577a:	4908      	ldr	r1, [pc, #32]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578a:	d109      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a02      	ldr	r2, [pc, #8]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005796:	60d3      	str	r3, [r2, #12]
 8005798:	e014      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	2101      	movs	r1, #1
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f875 	bl	80058a0 <RCCEx_PLLSAI1_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ba:	7cfb      	ldrb	r3, [r7, #19]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02f      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057de:	4928      	ldr	r1, [pc, #160]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ee:	d10d      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	2102      	movs	r1, #2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f852 	bl	80058a0 <RCCEx_PLLSAI1_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005800:	7cfb      	ldrb	r3, [r7, #19]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d014      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	74bb      	strb	r3, [r7, #18]
 800580a:	e011      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005814:	d10c      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3320      	adds	r3, #32
 800581a:	2102      	movs	r1, #2
 800581c:	4618      	mov	r0, r3
 800581e:	f000 f933 	bl	8005a88 <RCCEx_PLLSAI2_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800584a:	490d      	ldr	r1, [pc, #52]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800585e:	4b08      	ldr	r3, [pc, #32]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586e:	4904      	ldr	r1, [pc, #16]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005876:	7cbb      	ldrb	r3, [r7, #18]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000

08005884 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a03      	ldr	r2, [pc, #12]	; (800589c <HAL_RCCEx_EnableMSIPLLMode+0x18>)
 800588e:	f043 0304 	orr.w	r3, r3, #4
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr
 800589c:	40021000 	.word	0x40021000

080058a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ae:	4b75      	ldr	r3, [pc, #468]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d018      	beq.n	80058ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058ba:	4b72      	ldr	r3, [pc, #456]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0203 	and.w	r2, r3, #3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d10d      	bne.n	80058e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
       ||
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058d2:	4b6c      	ldr	r3, [pc, #432]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	091b      	lsrs	r3, r3, #4
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
       ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d047      	beq.n	8005976 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	73fb      	strb	r3, [r7, #15]
 80058ea:	e044      	b.n	8005976 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d018      	beq.n	8005926 <RCCEx_PLLSAI1_Config+0x86>
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d825      	bhi.n	8005944 <RCCEx_PLLSAI1_Config+0xa4>
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d002      	beq.n	8005902 <RCCEx_PLLSAI1_Config+0x62>
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d009      	beq.n	8005914 <RCCEx_PLLSAI1_Config+0x74>
 8005900:	e020      	b.n	8005944 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005902:	4b60      	ldr	r3, [pc, #384]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11d      	bne.n	800594a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005912:	e01a      	b.n	800594a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005914:	4b5b      	ldr	r3, [pc, #364]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591c:	2b00      	cmp	r3, #0
 800591e:	d116      	bne.n	800594e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005924:	e013      	b.n	800594e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005926:	4b57      	ldr	r3, [pc, #348]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10f      	bne.n	8005952 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005932:	4b54      	ldr	r3, [pc, #336]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005942:	e006      	b.n	8005952 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      break;
 8005948:	e004      	b.n	8005954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800594a:	bf00      	nop
 800594c:	e002      	b.n	8005954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800594e:	bf00      	nop
 8005950:	e000      	b.n	8005954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005952:	bf00      	nop
    }

    if(status == HAL_OK)
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800595a:	4b4a      	ldr	r3, [pc, #296]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6819      	ldr	r1, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	3b01      	subs	r3, #1
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	430b      	orrs	r3, r1
 8005970:	4944      	ldr	r1, [pc, #272]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005972:	4313      	orrs	r3, r2
 8005974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d17d      	bne.n	8005a78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800597c:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005988:	f7fd f8d6 	bl	8002b38 <HAL_GetTick>
 800598c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800598e:	e009      	b.n	80059a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005990:	f7fd f8d2 	bl	8002b38 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d902      	bls.n	80059a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	73fb      	strb	r3, [r7, #15]
        break;
 80059a2:	e005      	b.n	80059b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059a4:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ef      	bne.n	8005990 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d160      	bne.n	8005a78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d111      	bne.n	80059e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059bc:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6892      	ldr	r2, [r2, #8]
 80059cc:	0211      	lsls	r1, r2, #8
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	68d2      	ldr	r2, [r2, #12]
 80059d2:	0912      	lsrs	r2, r2, #4
 80059d4:	0452      	lsls	r2, r2, #17
 80059d6:	430a      	orrs	r2, r1
 80059d8:	492a      	ldr	r1, [pc, #168]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	610b      	str	r3, [r1, #16]
 80059de:	e027      	b.n	8005a30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d112      	bne.n	8005a0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059e6:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6892      	ldr	r2, [r2, #8]
 80059f6:	0211      	lsls	r1, r2, #8
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6912      	ldr	r2, [r2, #16]
 80059fc:	0852      	lsrs	r2, r2, #1
 80059fe:	3a01      	subs	r2, #1
 8005a00:	0552      	lsls	r2, r2, #21
 8005a02:	430a      	orrs	r2, r1
 8005a04:	491f      	ldr	r1, [pc, #124]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	610b      	str	r3, [r1, #16]
 8005a0a:	e011      	b.n	8005a30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a0c:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6892      	ldr	r2, [r2, #8]
 8005a1c:	0211      	lsls	r1, r2, #8
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6952      	ldr	r2, [r2, #20]
 8005a22:	0852      	lsrs	r2, r2, #1
 8005a24:	3a01      	subs	r2, #1
 8005a26:	0652      	lsls	r2, r2, #25
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	4916      	ldr	r1, [pc, #88]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a30:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3c:	f7fd f87c 	bl	8002b38 <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a42:	e009      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a44:	f7fd f878 	bl	8002b38 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d902      	bls.n	8005a58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	73fb      	strb	r3, [r7, #15]
          break;
 8005a56:	e005      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ef      	beq.n	8005a44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	4904      	ldr	r1, [pc, #16]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000

08005a88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a96:	4b6a      	ldr	r3, [pc, #424]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d018      	beq.n	8005ad4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005aa2:	4b67      	ldr	r3, [pc, #412]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0203 	and.w	r2, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d10d      	bne.n	8005ace <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005aba:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
       ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d047      	beq.n	8005b5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	73fb      	strb	r3, [r7, #15]
 8005ad2:	e044      	b.n	8005b5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d018      	beq.n	8005b0e <RCCEx_PLLSAI2_Config+0x86>
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d825      	bhi.n	8005b2c <RCCEx_PLLSAI2_Config+0xa4>
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d002      	beq.n	8005aea <RCCEx_PLLSAI2_Config+0x62>
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d009      	beq.n	8005afc <RCCEx_PLLSAI2_Config+0x74>
 8005ae8:	e020      	b.n	8005b2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aea:	4b55      	ldr	r3, [pc, #340]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d11d      	bne.n	8005b32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005afa:	e01a      	b.n	8005b32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005afc:	4b50      	ldr	r3, [pc, #320]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d116      	bne.n	8005b36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b0c:	e013      	b.n	8005b36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b0e:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10f      	bne.n	8005b3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b1a:	4b49      	ldr	r3, [pc, #292]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b2a:	e006      	b.n	8005b3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b30:	e004      	b.n	8005b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b32:	bf00      	nop
 8005b34:	e002      	b.n	8005b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10d      	bne.n	8005b5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b42:	4b3f      	ldr	r3, [pc, #252]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6819      	ldr	r1, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	430b      	orrs	r3, r1
 8005b58:	4939      	ldr	r1, [pc, #228]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d167      	bne.n	8005c34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b64:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a35      	ldr	r2, [pc, #212]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b70:	f7fc ffe2 	bl	8002b38 <HAL_GetTick>
 8005b74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b76:	e009      	b.n	8005b8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b78:	f7fc ffde 	bl	8002b38 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d902      	bls.n	8005b8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	73fb      	strb	r3, [r7, #15]
        break;
 8005b8a:	e005      	b.n	8005b98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b8c:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1ef      	bne.n	8005b78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d14a      	bne.n	8005c34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d111      	bne.n	8005bc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ba4:	4b26      	ldr	r3, [pc, #152]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6892      	ldr	r2, [r2, #8]
 8005bb4:	0211      	lsls	r1, r2, #8
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68d2      	ldr	r2, [r2, #12]
 8005bba:	0912      	lsrs	r2, r2, #4
 8005bbc:	0452      	lsls	r2, r2, #17
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	491f      	ldr	r1, [pc, #124]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	614b      	str	r3, [r1, #20]
 8005bc6:	e011      	b.n	8005bec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bc8:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6892      	ldr	r2, [r2, #8]
 8005bd8:	0211      	lsls	r1, r2, #8
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6912      	ldr	r2, [r2, #16]
 8005bde:	0852      	lsrs	r2, r2, #1
 8005be0:	3a01      	subs	r2, #1
 8005be2:	0652      	lsls	r2, r2, #25
 8005be4:	430a      	orrs	r2, r1
 8005be6:	4916      	ldr	r1, [pc, #88]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bec:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fc ff9e 	bl	8002b38 <HAL_GetTick>
 8005bfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bfe:	e009      	b.n	8005c14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c00:	f7fc ff9a 	bl	8002b38 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d902      	bls.n	8005c14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	73fb      	strb	r3, [r7, #15]
          break;
 8005c12:	e005      	b.n	8005c20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c14:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0ef      	beq.n	8005c00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	4904      	ldr	r1, [pc, #16]	; (8005c40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40021000 	.word	0x40021000

08005c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e095      	b.n	8005d82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d108      	bne.n	8005c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c66:	d009      	beq.n	8005c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	61da      	str	r2, [r3, #28]
 8005c6e:	e005      	b.n	8005c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fc f8e4 	bl	8001e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cbc:	d902      	bls.n	8005cc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e002      	b.n	8005cca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cd2:	d007      	beq.n	8005ce4 <HAL_SPI_Init+0xa0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cdc:	d002      	beq.n	8005ce4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	ea42 0103 	orr.w	r1, r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	0c1b      	lsrs	r3, r3, #16
 8005d40:	f003 0204 	and.w	r2, r3, #4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d60:	ea42 0103 	orr.w	r1, r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e040      	b.n	8005e1e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fc f89d 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2224      	movs	r2, #36	; 0x24
 8005db6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f82d 	bl	8005e28 <UART_SetConfig>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e022      	b.n	8005e1e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fad9 	bl	8006398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fb5f 	bl	80064da <UART_CheckIdleState>
 8005e1c:	4603      	mov	r3, r0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b08a      	sub	sp, #40	; 0x28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4ba4      	ldr	r3, [pc, #656]	; (80060e8 <UART_SetConfig+0x2c0>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a99      	ldr	r2, [pc, #612]	; (80060ec <UART_SetConfig+0x2c4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	4313      	orrs	r3, r2
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a90      	ldr	r2, [pc, #576]	; (80060f0 <UART_SetConfig+0x2c8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d126      	bne.n	8005f00 <UART_SetConfig+0xd8>
 8005eb2:	4b90      	ldr	r3, [pc, #576]	; (80060f4 <UART_SetConfig+0x2cc>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d81b      	bhi.n	8005ef8 <UART_SetConfig+0xd0>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <UART_SetConfig+0xa0>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005ee9 	.word	0x08005ee9
 8005ed0:	08005ee1 	.word	0x08005ee1
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ede:	e116      	b.n	800610e <UART_SetConfig+0x2e6>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee6:	e112      	b.n	800610e <UART_SetConfig+0x2e6>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eee:	e10e      	b.n	800610e <UART_SetConfig+0x2e6>
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef6:	e10a      	b.n	800610e <UART_SetConfig+0x2e6>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efe:	e106      	b.n	800610e <UART_SetConfig+0x2e6>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a7c      	ldr	r2, [pc, #496]	; (80060f8 <UART_SetConfig+0x2d0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d138      	bne.n	8005f7c <UART_SetConfig+0x154>
 8005f0a:	4b7a      	ldr	r3, [pc, #488]	; (80060f4 <UART_SetConfig+0x2cc>)
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	f003 030c 	and.w	r3, r3, #12
 8005f14:	2b0c      	cmp	r3, #12
 8005f16:	d82d      	bhi.n	8005f74 <UART_SetConfig+0x14c>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0xf8>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08005f75 	.word	0x08005f75
 8005f28:	08005f75 	.word	0x08005f75
 8005f2c:	08005f75 	.word	0x08005f75
 8005f30:	08005f65 	.word	0x08005f65
 8005f34:	08005f75 	.word	0x08005f75
 8005f38:	08005f75 	.word	0x08005f75
 8005f3c:	08005f75 	.word	0x08005f75
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	08005f75 	.word	0x08005f75
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f6d 	.word	0x08005f6d
 8005f54:	2300      	movs	r3, #0
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e0d8      	b.n	800610e <UART_SetConfig+0x2e6>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e0d4      	b.n	800610e <UART_SetConfig+0x2e6>
 8005f64:	2304      	movs	r3, #4
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e0d0      	b.n	800610e <UART_SetConfig+0x2e6>
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f72:	e0cc      	b.n	800610e <UART_SetConfig+0x2e6>
 8005f74:	2310      	movs	r3, #16
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7a:	e0c8      	b.n	800610e <UART_SetConfig+0x2e6>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5e      	ldr	r2, [pc, #376]	; (80060fc <UART_SetConfig+0x2d4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d125      	bne.n	8005fd2 <UART_SetConfig+0x1aa>
 8005f86:	4b5b      	ldr	r3, [pc, #364]	; (80060f4 <UART_SetConfig+0x2cc>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d016      	beq.n	8005fc2 <UART_SetConfig+0x19a>
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d818      	bhi.n	8005fca <UART_SetConfig+0x1a2>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d00a      	beq.n	8005fb2 <UART_SetConfig+0x18a>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d814      	bhi.n	8005fca <UART_SetConfig+0x1a2>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <UART_SetConfig+0x182>
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d008      	beq.n	8005fba <UART_SetConfig+0x192>
 8005fa8:	e00f      	b.n	8005fca <UART_SetConfig+0x1a2>
 8005faa:	2300      	movs	r3, #0
 8005fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb0:	e0ad      	b.n	800610e <UART_SetConfig+0x2e6>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb8:	e0a9      	b.n	800610e <UART_SetConfig+0x2e6>
 8005fba:	2304      	movs	r3, #4
 8005fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc0:	e0a5      	b.n	800610e <UART_SetConfig+0x2e6>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc8:	e0a1      	b.n	800610e <UART_SetConfig+0x2e6>
 8005fca:	2310      	movs	r3, #16
 8005fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd0:	e09d      	b.n	800610e <UART_SetConfig+0x2e6>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a4a      	ldr	r2, [pc, #296]	; (8006100 <UART_SetConfig+0x2d8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d125      	bne.n	8006028 <UART_SetConfig+0x200>
 8005fdc:	4b45      	ldr	r3, [pc, #276]	; (80060f4 <UART_SetConfig+0x2cc>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fe8:	d016      	beq.n	8006018 <UART_SetConfig+0x1f0>
 8005fea:	2bc0      	cmp	r3, #192	; 0xc0
 8005fec:	d818      	bhi.n	8006020 <UART_SetConfig+0x1f8>
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d00a      	beq.n	8006008 <UART_SetConfig+0x1e0>
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d814      	bhi.n	8006020 <UART_SetConfig+0x1f8>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <UART_SetConfig+0x1d8>
 8005ffa:	2b40      	cmp	r3, #64	; 0x40
 8005ffc:	d008      	beq.n	8006010 <UART_SetConfig+0x1e8>
 8005ffe:	e00f      	b.n	8006020 <UART_SetConfig+0x1f8>
 8006000:	2300      	movs	r3, #0
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e082      	b.n	800610e <UART_SetConfig+0x2e6>
 8006008:	2302      	movs	r3, #2
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600e:	e07e      	b.n	800610e <UART_SetConfig+0x2e6>
 8006010:	2304      	movs	r3, #4
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006016:	e07a      	b.n	800610e <UART_SetConfig+0x2e6>
 8006018:	2308      	movs	r3, #8
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601e:	e076      	b.n	800610e <UART_SetConfig+0x2e6>
 8006020:	2310      	movs	r3, #16
 8006022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006026:	e072      	b.n	800610e <UART_SetConfig+0x2e6>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a35      	ldr	r2, [pc, #212]	; (8006104 <UART_SetConfig+0x2dc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d12a      	bne.n	8006088 <UART_SetConfig+0x260>
 8006032:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <UART_SetConfig+0x2cc>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006040:	d01a      	beq.n	8006078 <UART_SetConfig+0x250>
 8006042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006046:	d81b      	bhi.n	8006080 <UART_SetConfig+0x258>
 8006048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604c:	d00c      	beq.n	8006068 <UART_SetConfig+0x240>
 800604e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006052:	d815      	bhi.n	8006080 <UART_SetConfig+0x258>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <UART_SetConfig+0x238>
 8006058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605c:	d008      	beq.n	8006070 <UART_SetConfig+0x248>
 800605e:	e00f      	b.n	8006080 <UART_SetConfig+0x258>
 8006060:	2300      	movs	r3, #0
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e052      	b.n	800610e <UART_SetConfig+0x2e6>
 8006068:	2302      	movs	r3, #2
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e04e      	b.n	800610e <UART_SetConfig+0x2e6>
 8006070:	2304      	movs	r3, #4
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e04a      	b.n	800610e <UART_SetConfig+0x2e6>
 8006078:	2308      	movs	r3, #8
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e046      	b.n	800610e <UART_SetConfig+0x2e6>
 8006080:	2310      	movs	r3, #16
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006086:	e042      	b.n	800610e <UART_SetConfig+0x2e6>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a17      	ldr	r2, [pc, #92]	; (80060ec <UART_SetConfig+0x2c4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d13a      	bne.n	8006108 <UART_SetConfig+0x2e0>
 8006092:	4b18      	ldr	r3, [pc, #96]	; (80060f4 <UART_SetConfig+0x2cc>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800609c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060a0:	d01a      	beq.n	80060d8 <UART_SetConfig+0x2b0>
 80060a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060a6:	d81b      	bhi.n	80060e0 <UART_SetConfig+0x2b8>
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ac:	d00c      	beq.n	80060c8 <UART_SetConfig+0x2a0>
 80060ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b2:	d815      	bhi.n	80060e0 <UART_SetConfig+0x2b8>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <UART_SetConfig+0x298>
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060bc:	d008      	beq.n	80060d0 <UART_SetConfig+0x2a8>
 80060be:	e00f      	b.n	80060e0 <UART_SetConfig+0x2b8>
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e022      	b.n	800610e <UART_SetConfig+0x2e6>
 80060c8:	2302      	movs	r3, #2
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ce:	e01e      	b.n	800610e <UART_SetConfig+0x2e6>
 80060d0:	2304      	movs	r3, #4
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d6:	e01a      	b.n	800610e <UART_SetConfig+0x2e6>
 80060d8:	2308      	movs	r3, #8
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060de:	e016      	b.n	800610e <UART_SetConfig+0x2e6>
 80060e0:	2310      	movs	r3, #16
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e6:	e012      	b.n	800610e <UART_SetConfig+0x2e6>
 80060e8:	efff69f3 	.word	0xefff69f3
 80060ec:	40008000 	.word	0x40008000
 80060f0:	40013800 	.word	0x40013800
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40004400 	.word	0x40004400
 80060fc:	40004800 	.word	0x40004800
 8006100:	40004c00 	.word	0x40004c00
 8006104:	40005000 	.word	0x40005000
 8006108:	2310      	movs	r3, #16
 800610a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a9f      	ldr	r2, [pc, #636]	; (8006390 <UART_SetConfig+0x568>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d17a      	bne.n	800620e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800611c:	2b08      	cmp	r3, #8
 800611e:	d824      	bhi.n	800616a <UART_SetConfig+0x342>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <UART_SetConfig+0x300>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	0800614d 	.word	0x0800614d
 800612c:	0800616b 	.word	0x0800616b
 8006130:	08006155 	.word	0x08006155
 8006134:	0800616b 	.word	0x0800616b
 8006138:	0800615b 	.word	0x0800615b
 800613c:	0800616b 	.word	0x0800616b
 8006140:	0800616b 	.word	0x0800616b
 8006144:	0800616b 	.word	0x0800616b
 8006148:	08006163 	.word	0x08006163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800614c:	f7ff f824 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 8006150:	61f8      	str	r0, [r7, #28]
        break;
 8006152:	e010      	b.n	8006176 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006154:	4b8f      	ldr	r3, [pc, #572]	; (8006394 <UART_SetConfig+0x56c>)
 8006156:	61fb      	str	r3, [r7, #28]
        break;
 8006158:	e00d      	b.n	8006176 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615a:	f7fe ff89 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800615e:	61f8      	str	r0, [r7, #28]
        break;
 8006160:	e009      	b.n	8006176 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006166:	61fb      	str	r3, [r7, #28]
        break;
 8006168:	e005      	b.n	8006176 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006174:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80fb 	beq.w	8006374 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	4413      	add	r3, r2
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	429a      	cmp	r2, r3
 800618c:	d305      	bcc.n	800619a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	429a      	cmp	r2, r3
 8006198:	d903      	bls.n	80061a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061a0:	e0e8      	b.n	8006374 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	2200      	movs	r2, #0
 80061a6:	461c      	mov	r4, r3
 80061a8:	4615      	mov	r5, r2
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	022b      	lsls	r3, r5, #8
 80061b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061b8:	0222      	lsls	r2, r4, #8
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	6849      	ldr	r1, [r1, #4]
 80061be:	0849      	lsrs	r1, r1, #1
 80061c0:	2000      	movs	r0, #0
 80061c2:	4688      	mov	r8, r1
 80061c4:	4681      	mov	r9, r0
 80061c6:	eb12 0a08 	adds.w	sl, r2, r8
 80061ca:	eb43 0b09 	adc.w	fp, r3, r9
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061dc:	4650      	mov	r0, sl
 80061de:	4659      	mov	r1, fp
 80061e0:	f7fa ffb6 	bl	8001150 <__aeabi_uldivmod>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4613      	mov	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061f2:	d308      	bcc.n	8006206 <UART_SetConfig+0x3de>
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061fa:	d204      	bcs.n	8006206 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	60da      	str	r2, [r3, #12]
 8006204:	e0b6      	b.n	8006374 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800620c:	e0b2      	b.n	8006374 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006216:	d15e      	bne.n	80062d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800621c:	2b08      	cmp	r3, #8
 800621e:	d828      	bhi.n	8006272 <UART_SetConfig+0x44a>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <UART_SetConfig+0x400>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006255 	.word	0x08006255
 8006230:	0800625d 	.word	0x0800625d
 8006234:	08006273 	.word	0x08006273
 8006238:	08006263 	.word	0x08006263
 800623c:	08006273 	.word	0x08006273
 8006240:	08006273 	.word	0x08006273
 8006244:	08006273 	.word	0x08006273
 8006248:	0800626b 	.word	0x0800626b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fe ffa4 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 8006250:	61f8      	str	r0, [r7, #28]
        break;
 8006252:	e014      	b.n	800627e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006254:	f7fe ffb6 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 8006258:	61f8      	str	r0, [r7, #28]
        break;
 800625a:	e010      	b.n	800627e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800625c:	4b4d      	ldr	r3, [pc, #308]	; (8006394 <UART_SetConfig+0x56c>)
 800625e:	61fb      	str	r3, [r7, #28]
        break;
 8006260:	e00d      	b.n	800627e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006262:	f7fe ff05 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8006266:	61f8      	str	r0, [r7, #28]
        break;
 8006268:	e009      	b.n	800627e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626e:	61fb      	str	r3, [r7, #28]
        break;
 8006270:	e005      	b.n	800627e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800627c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d077      	beq.n	8006374 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	005a      	lsls	r2, r3, #1
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	441a      	add	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	fbb2 f3f3 	udiv	r3, r2, r3
 8006298:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b0f      	cmp	r3, #15
 800629e:	d916      	bls.n	80062ce <UART_SetConfig+0x4a6>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a6:	d212      	bcs.n	80062ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f023 030f 	bic.w	r3, r3, #15
 80062b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	b29a      	uxth	r2, r3
 80062be:	8afb      	ldrh	r3, [r7, #22]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	8afa      	ldrh	r2, [r7, #22]
 80062ca:	60da      	str	r2, [r3, #12]
 80062cc:	e052      	b.n	8006374 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062d4:	e04e      	b.n	8006374 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d827      	bhi.n	800632e <UART_SetConfig+0x506>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0x4bc>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006309 	.word	0x08006309
 80062e8:	08006311 	.word	0x08006311
 80062ec:	08006319 	.word	0x08006319
 80062f0:	0800632f 	.word	0x0800632f
 80062f4:	0800631f 	.word	0x0800631f
 80062f8:	0800632f 	.word	0x0800632f
 80062fc:	0800632f 	.word	0x0800632f
 8006300:	0800632f 	.word	0x0800632f
 8006304:	08006327 	.word	0x08006327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006308:	f7fe ff46 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 800630c:	61f8      	str	r0, [r7, #28]
        break;
 800630e:	e014      	b.n	800633a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006310:	f7fe ff58 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 8006314:	61f8      	str	r0, [r7, #28]
        break;
 8006316:	e010      	b.n	800633a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006318:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <UART_SetConfig+0x56c>)
 800631a:	61fb      	str	r3, [r7, #28]
        break;
 800631c:	e00d      	b.n	800633a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631e:	f7fe fea7 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8006322:	61f8      	str	r0, [r7, #28]
        break;
 8006324:	e009      	b.n	800633a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800632a:	61fb      	str	r3, [r7, #28]
        break;
 800632c:	e005      	b.n	800633a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006338:	bf00      	nop
    }

    if (pclk != 0U)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d019      	beq.n	8006374 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	085a      	lsrs	r2, r3, #1
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	441a      	add	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006352:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b0f      	cmp	r3, #15
 8006358:	d909      	bls.n	800636e <UART_SetConfig+0x546>
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006360:	d205      	bcs.n	800636e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60da      	str	r2, [r3, #12]
 800636c:	e002      	b.n	8006374 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006380:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006384:	4618      	mov	r0, r3
 8006386:	3728      	adds	r7, #40	; 0x28
 8006388:	46bd      	mov	sp, r7
 800638a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800638e:	bf00      	nop
 8006390:	40008000 	.word	0x40008000
 8006394:	00f42400 	.word	0x00f42400

08006398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01a      	beq.n	80064ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006496:	d10a      	bne.n	80064ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	605a      	str	r2, [r3, #4]
  }
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b086      	sub	sp, #24
 80064de:	af02      	add	r7, sp, #8
 80064e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064ea:	f7fc fb25 	bl	8002b38 <HAL_GetTick>
 80064ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d10e      	bne.n	800651c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f82d 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e023      	b.n	8006564 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d10e      	bne.n	8006548 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800652a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f817 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e00d      	b.n	8006564 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b09c      	sub	sp, #112	; 0x70
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657c:	e0a5      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	f000 80a1 	beq.w	80066ca <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006588:	f7fc fad6 	bl	8002b38 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006594:	429a      	cmp	r2, r3
 8006596:	d302      	bcc.n	800659e <UART_WaitOnFlagUntilTimeout+0x32>
 8006598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659a:	2b00      	cmp	r3, #0
 800659c:	d13e      	bne.n	800661c <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b2:	667b      	str	r3, [r7, #100]	; 0x64
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065be:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e6      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	663b      	str	r3, [r7, #96]	; 0x60
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80065f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e5      	bne.n	80065d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e067      	b.n	80066ec <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d04f      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006638:	d147      	bne.n	80066ca <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006642:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
 8006664:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	613b      	str	r3, [r7, #16]
   return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	66bb      	str	r3, [r7, #104]	; 0x68
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006696:	623a      	str	r2, [r7, #32]
 8006698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	69f9      	ldr	r1, [r7, #28]
 800669c:	6a3a      	ldr	r2, [r7, #32]
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e010      	b.n	80066ec <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4013      	ands	r3, r2
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	bf0c      	ite	eq
 80066da:	2301      	moveq	r3, #1
 80066dc:	2300      	movne	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	f43f af4a 	beq.w	800657e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3770      	adds	r7, #112	; 0x70
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066f4:	b084      	sub	sp, #16
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	f107 001c 	add.w	r0, r7, #28
 8006702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa6c 	bl	8006bf0 <USB_CoreReset>
 8006718:	4603      	mov	r3, r0
 800671a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800671c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	639a      	str	r2, [r3, #56]	; 0x38
 800672e:	e005      	b.n	800673c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006748:	b004      	add	sp, #16
 800674a:	4770      	bx	lr

0800674c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f023 0201 	bic.w	r2, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d115      	bne.n	80067ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800679a:	2001      	movs	r0, #1
 800679c:	f7fc f9d6 	bl	8002b4c <HAL_Delay>
      ms++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3301      	adds	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa14 	bl	8006bd4 <USB_GetMode>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d01e      	beq.n	80067f0 <USB_SetCurrentMode+0x84>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b31      	cmp	r3, #49	; 0x31
 80067b6:	d9f0      	bls.n	800679a <USB_SetCurrentMode+0x2e>
 80067b8:	e01a      	b.n	80067f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d115      	bne.n	80067ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067cc:	2001      	movs	r0, #1
 80067ce:	f7fc f9bd 	bl	8002b4c <HAL_Delay>
      ms++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f9fb 	bl	8006bd4 <USB_GetMode>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <USB_SetCurrentMode+0x84>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b31      	cmp	r3, #49	; 0x31
 80067e8:	d9f0      	bls.n	80067cc <USB_SetCurrentMode+0x60>
 80067ea:	e001      	b.n	80067f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e005      	b.n	80067fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b32      	cmp	r3, #50	; 0x32
 80067f4:	d101      	bne.n	80067fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006804:	b084      	sub	sp, #16
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	e009      	b.n	8006838 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3340      	adds	r3, #64	; 0x40
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	2200      	movs	r2, #0
 8006830:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3301      	adds	r3, #1
 8006836:	613b      	str	r3, [r7, #16]
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b0e      	cmp	r3, #14
 800683c:	d9f2      	bls.n	8006824 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800683e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11c      	bne.n	800687e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006852:	f043 0302 	orr.w	r3, r3, #2
 8006856:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	e005      	b.n	800688a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006890:	461a      	mov	r2, r3
 8006892:	2300      	movs	r3, #0
 8006894:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	4619      	mov	r1, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	461a      	mov	r2, r3
 80068a6:	680b      	ldr	r3, [r1, #0]
 80068a8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068aa:	2103      	movs	r1, #3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f959 	bl	8006b64 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068b2:	2110      	movs	r1, #16
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f8f1 	bl	8006a9c <USB_FlushTxFifo>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f91d 	bl	8006b04 <USB_FlushRxFifo>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068da:	461a      	mov	r2, r3
 80068dc:	2300      	movs	r3, #0
 80068de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	461a      	mov	r2, r3
 80068e8:	2300      	movs	r3, #0
 80068ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	461a      	mov	r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	e043      	b.n	8006986 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006914:	d118      	bne.n	8006948 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006928:	461a      	mov	r2, r3
 800692a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	e013      	b.n	800695a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693e:	461a      	mov	r2, r3
 8006940:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e008      	b.n	800695a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	461a      	mov	r2, r3
 8006956:	2300      	movs	r3, #0
 8006958:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	461a      	mov	r2, r3
 8006968:	2300      	movs	r3, #0
 800696a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	461a      	mov	r2, r3
 800697a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800697e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	3301      	adds	r3, #1
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	d3b7      	bcc.n	80068fe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e043      	b.n	8006a1c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069aa:	d118      	bne.n	80069de <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e013      	b.n	80069f0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	461a      	mov	r2, r3
 80069d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	e008      	b.n	80069f0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	461a      	mov	r2, r3
 80069ec:	2300      	movs	r3, #0
 80069ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	461a      	mov	r2, r3
 80069fe:	2300      	movs	r3, #0
 8006a00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d3b7      	bcc.n	8006994 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f043 0210 	orr.w	r2, r3, #16
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <USB_DevInit+0x294>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f043 0208 	orr.w	r2, r3, #8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d107      	bne.n	8006a86 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a7e:	f043 0304 	orr.w	r3, r3, #4
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a92:	b004      	add	sp, #16
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	803c3800 	.word	0x803c3800

08006a9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <USB_FlushTxFifo+0x64>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d901      	bls.n	8006abc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e01b      	b.n	8006af4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	daf2      	bge.n	8006aaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	019b      	lsls	r3, r3, #6
 8006acc:	f043 0220 	orr.w	r2, r3, #32
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a08      	ldr	r2, [pc, #32]	; (8006b00 <USB_FlushTxFifo+0x64>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d901      	bls.n	8006ae6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e006      	b.n	8006af4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d0f0      	beq.n	8006ad4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	00030d40 	.word	0x00030d40

08006b04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a11      	ldr	r2, [pc, #68]	; (8006b60 <USB_FlushRxFifo+0x5c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e018      	b.n	8006b54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	daf2      	bge.n	8006b10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2210      	movs	r2, #16
 8006b32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3301      	adds	r3, #1
 8006b38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <USB_FlushRxFifo+0x5c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e006      	b.n	8006b54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d0f0      	beq.n	8006b34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	00030d40 	.word	0x00030d40

08006b64 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b84:	4313      	orrs	r3, r2
 8006b86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	f003 0301 	and.w	r3, r3, #1
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr
	...

08006bf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a12      	ldr	r2, [pc, #72]	; (8006c50 <USB_CoreReset+0x60>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d901      	bls.n	8006c0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e01b      	b.n	8006c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	daf2      	bge.n	8006bfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f043 0201 	orr.w	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <USB_CoreReset+0x60>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d901      	bls.n	8006c38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e006      	b.n	8006c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d0f0      	beq.n	8006c26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr
 8006c50:	00030d40 	.word	0x00030d40

08006c54 <__errno>:
 8006c54:	4b01      	ldr	r3, [pc, #4]	; (8006c5c <__errno+0x8>)
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000028 	.word	0x20000028

08006c60 <__libc_init_array>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4d0d      	ldr	r5, [pc, #52]	; (8006c98 <__libc_init_array+0x38>)
 8006c64:	4c0d      	ldr	r4, [pc, #52]	; (8006c9c <__libc_init_array+0x3c>)
 8006c66:	1b64      	subs	r4, r4, r5
 8006c68:	10a4      	asrs	r4, r4, #2
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	42a6      	cmp	r6, r4
 8006c6e:	d109      	bne.n	8006c84 <__libc_init_array+0x24>
 8006c70:	4d0b      	ldr	r5, [pc, #44]	; (8006ca0 <__libc_init_array+0x40>)
 8006c72:	4c0c      	ldr	r4, [pc, #48]	; (8006ca4 <__libc_init_array+0x44>)
 8006c74:	f002 fd2e 	bl	80096d4 <_init>
 8006c78:	1b64      	subs	r4, r4, r5
 8006c7a:	10a4      	asrs	r4, r4, #2
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	42a6      	cmp	r6, r4
 8006c80:	d105      	bne.n	8006c8e <__libc_init_array+0x2e>
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c88:	4798      	blx	r3
 8006c8a:	3601      	adds	r6, #1
 8006c8c:	e7ee      	b.n	8006c6c <__libc_init_array+0xc>
 8006c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c92:	4798      	blx	r3
 8006c94:	3601      	adds	r6, #1
 8006c96:	e7f2      	b.n	8006c7e <__libc_init_array+0x1e>
 8006c98:	08009b2c 	.word	0x08009b2c
 8006c9c:	08009b2c 	.word	0x08009b2c
 8006ca0:	08009b2c 	.word	0x08009b2c
 8006ca4:	08009b30 	.word	0x08009b30

08006ca8 <memcpy>:
 8006ca8:	440a      	add	r2, r1
 8006caa:	4291      	cmp	r1, r2
 8006cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cb0:	d100      	bne.n	8006cb4 <memcpy+0xc>
 8006cb2:	4770      	bx	lr
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cbe:	4291      	cmp	r1, r2
 8006cc0:	d1f9      	bne.n	8006cb6 <memcpy+0xe>
 8006cc2:	bd10      	pop	{r4, pc}

08006cc4 <memset>:
 8006cc4:	4402      	add	r2, r0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d100      	bne.n	8006cce <memset+0xa>
 8006ccc:	4770      	bx	lr
 8006cce:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd2:	e7f9      	b.n	8006cc8 <memset+0x4>

08006cd4 <__cvt>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	461f      	mov	r7, r3
 8006cde:	4614      	mov	r4, r2
 8006ce0:	bfb8      	it	lt
 8006ce2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ce8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006cea:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006cee:	bfb6      	itet	lt
 8006cf0:	461f      	movlt	r7, r3
 8006cf2:	2300      	movge	r3, #0
 8006cf4:	232d      	movlt	r3, #45	; 0x2d
 8006cf6:	7013      	strb	r3, [r2, #0]
 8006cf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cfa:	f023 0820 	bic.w	r8, r3, #32
 8006cfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d02:	d005      	beq.n	8006d10 <__cvt+0x3c>
 8006d04:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d08:	d100      	bne.n	8006d0c <__cvt+0x38>
 8006d0a:	3501      	adds	r5, #1
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e000      	b.n	8006d12 <__cvt+0x3e>
 8006d10:	2303      	movs	r3, #3
 8006d12:	aa07      	add	r2, sp, #28
 8006d14:	9204      	str	r2, [sp, #16]
 8006d16:	aa06      	add	r2, sp, #24
 8006d18:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d1c:	e9cd 3500 	strd	r3, r5, [sp]
 8006d20:	4622      	mov	r2, r4
 8006d22:	463b      	mov	r3, r7
 8006d24:	f000 fcd4 	bl	80076d0 <_dtoa_r>
 8006d28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	d102      	bne.n	8006d36 <__cvt+0x62>
 8006d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d522      	bpl.n	8006d7c <__cvt+0xa8>
 8006d36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d3a:	eb06 0905 	add.w	r9, r6, r5
 8006d3e:	d110      	bne.n	8006d62 <__cvt+0x8e>
 8006d40:	7833      	ldrb	r3, [r6, #0]
 8006d42:	2b30      	cmp	r3, #48	; 0x30
 8006d44:	d10a      	bne.n	8006d5c <__cvt+0x88>
 8006d46:	2200      	movs	r2, #0
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	f7f9 febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d52:	b918      	cbnz	r0, 8006d5c <__cvt+0x88>
 8006d54:	f1c5 0501 	rsb	r5, r5, #1
 8006d58:	f8ca 5000 	str.w	r5, [sl]
 8006d5c:	f8da 3000 	ldr.w	r3, [sl]
 8006d60:	4499      	add	r9, r3
 8006d62:	2200      	movs	r2, #0
 8006d64:	2300      	movs	r3, #0
 8006d66:	4620      	mov	r0, r4
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7f9 fead 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d6e:	b108      	cbz	r0, 8006d74 <__cvt+0xa0>
 8006d70:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d74:	2230      	movs	r2, #48	; 0x30
 8006d76:	9b07      	ldr	r3, [sp, #28]
 8006d78:	454b      	cmp	r3, r9
 8006d7a:	d307      	bcc.n	8006d8c <__cvt+0xb8>
 8006d7c:	9b07      	ldr	r3, [sp, #28]
 8006d7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d80:	1b9b      	subs	r3, r3, r6
 8006d82:	4630      	mov	r0, r6
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	b008      	add	sp, #32
 8006d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8c:	1c59      	adds	r1, r3, #1
 8006d8e:	9107      	str	r1, [sp, #28]
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e7f0      	b.n	8006d76 <__cvt+0xa2>

08006d94 <__exponent>:
 8006d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d96:	4603      	mov	r3, r0
 8006d98:	2900      	cmp	r1, #0
 8006d9a:	bfb8      	it	lt
 8006d9c:	4249      	neglt	r1, r1
 8006d9e:	f803 2b02 	strb.w	r2, [r3], #2
 8006da2:	bfb4      	ite	lt
 8006da4:	222d      	movlt	r2, #45	; 0x2d
 8006da6:	222b      	movge	r2, #43	; 0x2b
 8006da8:	2909      	cmp	r1, #9
 8006daa:	7042      	strb	r2, [r0, #1]
 8006dac:	dd2a      	ble.n	8006e04 <__exponent+0x70>
 8006dae:	f10d 0407 	add.w	r4, sp, #7
 8006db2:	46a4      	mov	ip, r4
 8006db4:	270a      	movs	r7, #10
 8006db6:	46a6      	mov	lr, r4
 8006db8:	460a      	mov	r2, r1
 8006dba:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dbe:	fb07 1516 	mls	r5, r7, r6, r1
 8006dc2:	3530      	adds	r5, #48	; 0x30
 8006dc4:	2a63      	cmp	r2, #99	; 0x63
 8006dc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006dce:	4631      	mov	r1, r6
 8006dd0:	dcf1      	bgt.n	8006db6 <__exponent+0x22>
 8006dd2:	3130      	adds	r1, #48	; 0x30
 8006dd4:	f1ae 0502 	sub.w	r5, lr, #2
 8006dd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ddc:	1c44      	adds	r4, r0, #1
 8006dde:	4629      	mov	r1, r5
 8006de0:	4561      	cmp	r1, ip
 8006de2:	d30a      	bcc.n	8006dfa <__exponent+0x66>
 8006de4:	f10d 0209 	add.w	r2, sp, #9
 8006de8:	eba2 020e 	sub.w	r2, r2, lr
 8006dec:	4565      	cmp	r5, ip
 8006dee:	bf88      	it	hi
 8006df0:	2200      	movhi	r2, #0
 8006df2:	4413      	add	r3, r2
 8006df4:	1a18      	subs	r0, r3, r0
 8006df6:	b003      	add	sp, #12
 8006df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e02:	e7ed      	b.n	8006de0 <__exponent+0x4c>
 8006e04:	2330      	movs	r3, #48	; 0x30
 8006e06:	3130      	adds	r1, #48	; 0x30
 8006e08:	7083      	strb	r3, [r0, #2]
 8006e0a:	70c1      	strb	r1, [r0, #3]
 8006e0c:	1d03      	adds	r3, r0, #4
 8006e0e:	e7f1      	b.n	8006df4 <__exponent+0x60>

08006e10 <_printf_float>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	b091      	sub	sp, #68	; 0x44
 8006e16:	460c      	mov	r4, r1
 8006e18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e1c:	4616      	mov	r6, r2
 8006e1e:	461f      	mov	r7, r3
 8006e20:	4605      	mov	r5, r0
 8006e22:	f001 fb39 	bl	8008498 <_localeconv_r>
 8006e26:	6803      	ldr	r3, [r0, #0]
 8006e28:	9309      	str	r3, [sp, #36]	; 0x24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7f9 f9d0 	bl	80001d0 <strlen>
 8006e30:	2300      	movs	r3, #0
 8006e32:	930e      	str	r3, [sp, #56]	; 0x38
 8006e34:	f8d8 3000 	ldr.w	r3, [r8]
 8006e38:	900a      	str	r0, [sp, #40]	; 0x28
 8006e3a:	3307      	adds	r3, #7
 8006e3c:	f023 0307 	bic.w	r3, r3, #7
 8006e40:	f103 0208 	add.w	r2, r3, #8
 8006e44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e48:	f8d4 b000 	ldr.w	fp, [r4]
 8006e4c:	f8c8 2000 	str.w	r2, [r8]
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006e5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e64:	4b9c      	ldr	r3, [pc, #624]	; (80070d8 <_printf_float+0x2c8>)
 8006e66:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	f7f9 fe5e 	bl	8000b2c <__aeabi_dcmpun>
 8006e70:	bb70      	cbnz	r0, 8006ed0 <_printf_float+0xc0>
 8006e72:	4b99      	ldr	r3, [pc, #612]	; (80070d8 <_printf_float+0x2c8>)
 8006e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e76:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f7f9 fe38 	bl	8000af0 <__aeabi_dcmple>
 8006e80:	bb30      	cbnz	r0, 8006ed0 <_printf_float+0xc0>
 8006e82:	2200      	movs	r2, #0
 8006e84:	2300      	movs	r3, #0
 8006e86:	4640      	mov	r0, r8
 8006e88:	4651      	mov	r1, sl
 8006e8a:	f7f9 fe27 	bl	8000adc <__aeabi_dcmplt>
 8006e8e:	b110      	cbz	r0, 8006e96 <_printf_float+0x86>
 8006e90:	232d      	movs	r3, #45	; 0x2d
 8006e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e96:	4b91      	ldr	r3, [pc, #580]	; (80070dc <_printf_float+0x2cc>)
 8006e98:	4891      	ldr	r0, [pc, #580]	; (80070e0 <_printf_float+0x2d0>)
 8006e9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006e9e:	bf94      	ite	ls
 8006ea0:	4698      	movls	r8, r3
 8006ea2:	4680      	movhi	r8, r0
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	f02b 0304 	bic.w	r3, fp, #4
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	f04f 0a00 	mov.w	sl, #0
 8006eb2:	9700      	str	r7, [sp, #0]
 8006eb4:	4633      	mov	r3, r6
 8006eb6:	aa0f      	add	r2, sp, #60	; 0x3c
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4628      	mov	r0, r5
 8006ebc:	f000 f9d2 	bl	8007264 <_printf_common>
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f040 808f 	bne.w	8006fe4 <_printf_float+0x1d4>
 8006ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eca:	b011      	add	sp, #68	; 0x44
 8006ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed0:	4642      	mov	r2, r8
 8006ed2:	4653      	mov	r3, sl
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4651      	mov	r1, sl
 8006ed8:	f7f9 fe28 	bl	8000b2c <__aeabi_dcmpun>
 8006edc:	b140      	cbz	r0, 8006ef0 <_printf_float+0xe0>
 8006ede:	f1ba 0f00 	cmp.w	sl, #0
 8006ee2:	bfbc      	itt	lt
 8006ee4:	232d      	movlt	r3, #45	; 0x2d
 8006ee6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006eea:	487e      	ldr	r0, [pc, #504]	; (80070e4 <_printf_float+0x2d4>)
 8006eec:	4b7e      	ldr	r3, [pc, #504]	; (80070e8 <_printf_float+0x2d8>)
 8006eee:	e7d4      	b.n	8006e9a <_printf_float+0x8a>
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006ef8:	d142      	bne.n	8006f80 <_printf_float+0x170>
 8006efa:	2306      	movs	r3, #6
 8006efc:	6063      	str	r3, [r4, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	9206      	str	r2, [sp, #24]
 8006f02:	aa0e      	add	r2, sp, #56	; 0x38
 8006f04:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f08:	aa0d      	add	r2, sp, #52	; 0x34
 8006f0a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f0e:	9203      	str	r2, [sp, #12]
 8006f10:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	6863      	ldr	r3, [r4, #4]
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	4642      	mov	r2, r8
 8006f20:	4653      	mov	r3, sl
 8006f22:	4628      	mov	r0, r5
 8006f24:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f26:	f7ff fed5 	bl	8006cd4 <__cvt>
 8006f2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f2c:	2947      	cmp	r1, #71	; 0x47
 8006f2e:	4680      	mov	r8, r0
 8006f30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f32:	d108      	bne.n	8006f46 <_printf_float+0x136>
 8006f34:	1cc8      	adds	r0, r1, #3
 8006f36:	db02      	blt.n	8006f3e <_printf_float+0x12e>
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	4299      	cmp	r1, r3
 8006f3c:	dd40      	ble.n	8006fc0 <_printf_float+0x1b0>
 8006f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8006f42:	fa5f f989 	uxtb.w	r9, r9
 8006f46:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f4a:	d81f      	bhi.n	8006f8c <_printf_float+0x17c>
 8006f4c:	3901      	subs	r1, #1
 8006f4e:	464a      	mov	r2, r9
 8006f50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f54:	910d      	str	r1, [sp, #52]	; 0x34
 8006f56:	f7ff ff1d 	bl	8006d94 <__exponent>
 8006f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f5c:	1813      	adds	r3, r2, r0
 8006f5e:	2a01      	cmp	r2, #1
 8006f60:	4682      	mov	sl, r0
 8006f62:	6123      	str	r3, [r4, #16]
 8006f64:	dc02      	bgt.n	8006f6c <_printf_float+0x15c>
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	07d2      	lsls	r2, r2, #31
 8006f6a:	d501      	bpl.n	8006f70 <_printf_float+0x160>
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d09c      	beq.n	8006eb2 <_printf_float+0xa2>
 8006f78:	232d      	movs	r3, #45	; 0x2d
 8006f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7e:	e798      	b.n	8006eb2 <_printf_float+0xa2>
 8006f80:	2947      	cmp	r1, #71	; 0x47
 8006f82:	d1bc      	bne.n	8006efe <_printf_float+0xee>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1ba      	bne.n	8006efe <_printf_float+0xee>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e7b7      	b.n	8006efc <_printf_float+0xec>
 8006f8c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006f90:	d118      	bne.n	8006fc4 <_printf_float+0x1b4>
 8006f92:	2900      	cmp	r1, #0
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	dd0b      	ble.n	8006fb0 <_printf_float+0x1a0>
 8006f98:	6121      	str	r1, [r4, #16]
 8006f9a:	b913      	cbnz	r3, 8006fa2 <_printf_float+0x192>
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	07d0      	lsls	r0, r2, #31
 8006fa0:	d502      	bpl.n	8006fa8 <_printf_float+0x198>
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	440b      	add	r3, r1
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	65a1      	str	r1, [r4, #88]	; 0x58
 8006faa:	f04f 0a00 	mov.w	sl, #0
 8006fae:	e7df      	b.n	8006f70 <_printf_float+0x160>
 8006fb0:	b913      	cbnz	r3, 8006fb8 <_printf_float+0x1a8>
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	07d2      	lsls	r2, r2, #31
 8006fb6:	d501      	bpl.n	8006fbc <_printf_float+0x1ac>
 8006fb8:	3302      	adds	r3, #2
 8006fba:	e7f4      	b.n	8006fa6 <_printf_float+0x196>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e7f2      	b.n	8006fa6 <_printf_float+0x196>
 8006fc0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fc6:	4299      	cmp	r1, r3
 8006fc8:	db05      	blt.n	8006fd6 <_printf_float+0x1c6>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	6121      	str	r1, [r4, #16]
 8006fce:	07d8      	lsls	r0, r3, #31
 8006fd0:	d5ea      	bpl.n	8006fa8 <_printf_float+0x198>
 8006fd2:	1c4b      	adds	r3, r1, #1
 8006fd4:	e7e7      	b.n	8006fa6 <_printf_float+0x196>
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	bfd4      	ite	le
 8006fda:	f1c1 0202 	rsble	r2, r1, #2
 8006fde:	2201      	movgt	r2, #1
 8006fe0:	4413      	add	r3, r2
 8006fe2:	e7e0      	b.n	8006fa6 <_printf_float+0x196>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	055a      	lsls	r2, r3, #21
 8006fe8:	d407      	bmi.n	8006ffa <_printf_float+0x1ea>
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	4642      	mov	r2, r8
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	47b8      	blx	r7
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d12b      	bne.n	8007050 <_printf_float+0x240>
 8006ff8:	e765      	b.n	8006ec6 <_printf_float+0xb6>
 8006ffa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ffe:	f240 80dc 	bls.w	80071ba <_printf_float+0x3aa>
 8007002:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	f7f9 fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800700e:	2800      	cmp	r0, #0
 8007010:	d033      	beq.n	800707a <_printf_float+0x26a>
 8007012:	4a36      	ldr	r2, [pc, #216]	; (80070ec <_printf_float+0x2dc>)
 8007014:	2301      	movs	r3, #1
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	47b8      	blx	r7
 800701c:	3001      	adds	r0, #1
 800701e:	f43f af52 	beq.w	8006ec6 <_printf_float+0xb6>
 8007022:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007026:	429a      	cmp	r2, r3
 8007028:	db02      	blt.n	8007030 <_printf_float+0x220>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	07d8      	lsls	r0, r3, #31
 800702e:	d50f      	bpl.n	8007050 <_printf_float+0x240>
 8007030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007034:	4631      	mov	r1, r6
 8007036:	4628      	mov	r0, r5
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	f43f af43 	beq.w	8006ec6 <_printf_float+0xb6>
 8007040:	f04f 0800 	mov.w	r8, #0
 8007044:	f104 091a 	add.w	r9, r4, #26
 8007048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800704a:	3b01      	subs	r3, #1
 800704c:	4543      	cmp	r3, r8
 800704e:	dc09      	bgt.n	8007064 <_printf_float+0x254>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	079b      	lsls	r3, r3, #30
 8007054:	f100 8101 	bmi.w	800725a <_printf_float+0x44a>
 8007058:	68e0      	ldr	r0, [r4, #12]
 800705a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800705c:	4298      	cmp	r0, r3
 800705e:	bfb8      	it	lt
 8007060:	4618      	movlt	r0, r3
 8007062:	e732      	b.n	8006eca <_printf_float+0xba>
 8007064:	2301      	movs	r3, #1
 8007066:	464a      	mov	r2, r9
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f af29 	beq.w	8006ec6 <_printf_float+0xb6>
 8007074:	f108 0801 	add.w	r8, r8, #1
 8007078:	e7e6      	b.n	8007048 <_printf_float+0x238>
 800707a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800707c:	2b00      	cmp	r3, #0
 800707e:	dc37      	bgt.n	80070f0 <_printf_float+0x2e0>
 8007080:	4a1a      	ldr	r2, [pc, #104]	; (80070ec <_printf_float+0x2dc>)
 8007082:	2301      	movs	r3, #1
 8007084:	4631      	mov	r1, r6
 8007086:	4628      	mov	r0, r5
 8007088:	47b8      	blx	r7
 800708a:	3001      	adds	r0, #1
 800708c:	f43f af1b 	beq.w	8006ec6 <_printf_float+0xb6>
 8007090:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007094:	4313      	orrs	r3, r2
 8007096:	d102      	bne.n	800709e <_printf_float+0x28e>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	07d9      	lsls	r1, r3, #31
 800709c:	d5d8      	bpl.n	8007050 <_printf_float+0x240>
 800709e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b8      	blx	r7
 80070a8:	3001      	adds	r0, #1
 80070aa:	f43f af0c 	beq.w	8006ec6 <_printf_float+0xb6>
 80070ae:	f04f 0900 	mov.w	r9, #0
 80070b2:	f104 0a1a 	add.w	sl, r4, #26
 80070b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070b8:	425b      	negs	r3, r3
 80070ba:	454b      	cmp	r3, r9
 80070bc:	dc01      	bgt.n	80070c2 <_printf_float+0x2b2>
 80070be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070c0:	e794      	b.n	8006fec <_printf_float+0x1dc>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4652      	mov	r2, sl
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	f43f aefa 	beq.w	8006ec6 <_printf_float+0xb6>
 80070d2:	f109 0901 	add.w	r9, r9, #1
 80070d6:	e7ee      	b.n	80070b6 <_printf_float+0x2a6>
 80070d8:	7fefffff 	.word	0x7fefffff
 80070dc:	08009750 	.word	0x08009750
 80070e0:	08009754 	.word	0x08009754
 80070e4:	0800975c 	.word	0x0800975c
 80070e8:	08009758 	.word	0x08009758
 80070ec:	08009760 	.word	0x08009760
 80070f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070f4:	429a      	cmp	r2, r3
 80070f6:	bfa8      	it	ge
 80070f8:	461a      	movge	r2, r3
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	4691      	mov	r9, r2
 80070fe:	dc37      	bgt.n	8007170 <_printf_float+0x360>
 8007100:	f04f 0b00 	mov.w	fp, #0
 8007104:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007108:	f104 021a 	add.w	r2, r4, #26
 800710c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007110:	ebaa 0309 	sub.w	r3, sl, r9
 8007114:	455b      	cmp	r3, fp
 8007116:	dc33      	bgt.n	8007180 <_printf_float+0x370>
 8007118:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800711c:	429a      	cmp	r2, r3
 800711e:	db3b      	blt.n	8007198 <_printf_float+0x388>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	07da      	lsls	r2, r3, #31
 8007124:	d438      	bmi.n	8007198 <_printf_float+0x388>
 8007126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007128:	990d      	ldr	r1, [sp, #52]	; 0x34
 800712a:	eba3 020a 	sub.w	r2, r3, sl
 800712e:	eba3 0901 	sub.w	r9, r3, r1
 8007132:	4591      	cmp	r9, r2
 8007134:	bfa8      	it	ge
 8007136:	4691      	movge	r9, r2
 8007138:	f1b9 0f00 	cmp.w	r9, #0
 800713c:	dc34      	bgt.n	80071a8 <_printf_float+0x398>
 800713e:	f04f 0800 	mov.w	r8, #0
 8007142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007146:	f104 0a1a 	add.w	sl, r4, #26
 800714a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	eba3 0309 	sub.w	r3, r3, r9
 8007154:	4543      	cmp	r3, r8
 8007156:	f77f af7b 	ble.w	8007050 <_printf_float+0x240>
 800715a:	2301      	movs	r3, #1
 800715c:	4652      	mov	r2, sl
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	f43f aeae 	beq.w	8006ec6 <_printf_float+0xb6>
 800716a:	f108 0801 	add.w	r8, r8, #1
 800716e:	e7ec      	b.n	800714a <_printf_float+0x33a>
 8007170:	4613      	mov	r3, r2
 8007172:	4631      	mov	r1, r6
 8007174:	4642      	mov	r2, r8
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	d1c0      	bne.n	8007100 <_printf_float+0x2f0>
 800717e:	e6a2      	b.n	8006ec6 <_printf_float+0xb6>
 8007180:	2301      	movs	r3, #1
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	920b      	str	r2, [sp, #44]	; 0x2c
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	f43f ae9b 	beq.w	8006ec6 <_printf_float+0xb6>
 8007190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007192:	f10b 0b01 	add.w	fp, fp, #1
 8007196:	e7b9      	b.n	800710c <_printf_float+0x2fc>
 8007198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800719c:	4631      	mov	r1, r6
 800719e:	4628      	mov	r0, r5
 80071a0:	47b8      	blx	r7
 80071a2:	3001      	adds	r0, #1
 80071a4:	d1bf      	bne.n	8007126 <_printf_float+0x316>
 80071a6:	e68e      	b.n	8006ec6 <_printf_float+0xb6>
 80071a8:	464b      	mov	r3, r9
 80071aa:	eb08 020a 	add.w	r2, r8, sl
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	47b8      	blx	r7
 80071b4:	3001      	adds	r0, #1
 80071b6:	d1c2      	bne.n	800713e <_printf_float+0x32e>
 80071b8:	e685      	b.n	8006ec6 <_printf_float+0xb6>
 80071ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071bc:	2a01      	cmp	r2, #1
 80071be:	dc01      	bgt.n	80071c4 <_printf_float+0x3b4>
 80071c0:	07db      	lsls	r3, r3, #31
 80071c2:	d537      	bpl.n	8007234 <_printf_float+0x424>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4642      	mov	r2, r8
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f ae79 	beq.w	8006ec6 <_printf_float+0xb6>
 80071d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f ae71 	beq.w	8006ec6 <_printf_float+0xb6>
 80071e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071e8:	2200      	movs	r2, #0
 80071ea:	2300      	movs	r3, #0
 80071ec:	f7f9 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80071f0:	b9d8      	cbnz	r0, 800722a <_printf_float+0x41a>
 80071f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071f4:	f108 0201 	add.w	r2, r8, #1
 80071f8:	3b01      	subs	r3, #1
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	d10e      	bne.n	8007222 <_printf_float+0x412>
 8007204:	e65f      	b.n	8006ec6 <_printf_float+0xb6>
 8007206:	2301      	movs	r3, #1
 8007208:	464a      	mov	r2, r9
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f ae58 	beq.w	8006ec6 <_printf_float+0xb6>
 8007216:	f108 0801 	add.w	r8, r8, #1
 800721a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800721c:	3b01      	subs	r3, #1
 800721e:	4543      	cmp	r3, r8
 8007220:	dcf1      	bgt.n	8007206 <_printf_float+0x3f6>
 8007222:	4653      	mov	r3, sl
 8007224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007228:	e6e1      	b.n	8006fee <_printf_float+0x1de>
 800722a:	f04f 0800 	mov.w	r8, #0
 800722e:	f104 091a 	add.w	r9, r4, #26
 8007232:	e7f2      	b.n	800721a <_printf_float+0x40a>
 8007234:	2301      	movs	r3, #1
 8007236:	4642      	mov	r2, r8
 8007238:	e7df      	b.n	80071fa <_printf_float+0x3ea>
 800723a:	2301      	movs	r3, #1
 800723c:	464a      	mov	r2, r9
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f ae3e 	beq.w	8006ec6 <_printf_float+0xb6>
 800724a:	f108 0801 	add.w	r8, r8, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	4543      	cmp	r3, r8
 8007256:	dcf0      	bgt.n	800723a <_printf_float+0x42a>
 8007258:	e6fe      	b.n	8007058 <_printf_float+0x248>
 800725a:	f04f 0800 	mov.w	r8, #0
 800725e:	f104 0919 	add.w	r9, r4, #25
 8007262:	e7f4      	b.n	800724e <_printf_float+0x43e>

08007264 <_printf_common>:
 8007264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007268:	4616      	mov	r6, r2
 800726a:	4699      	mov	r9, r3
 800726c:	688a      	ldr	r2, [r1, #8]
 800726e:	690b      	ldr	r3, [r1, #16]
 8007270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007274:	4293      	cmp	r3, r2
 8007276:	bfb8      	it	lt
 8007278:	4613      	movlt	r3, r2
 800727a:	6033      	str	r3, [r6, #0]
 800727c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007280:	4607      	mov	r7, r0
 8007282:	460c      	mov	r4, r1
 8007284:	b10a      	cbz	r2, 800728a <_printf_common+0x26>
 8007286:	3301      	adds	r3, #1
 8007288:	6033      	str	r3, [r6, #0]
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	0699      	lsls	r1, r3, #26
 800728e:	bf42      	ittt	mi
 8007290:	6833      	ldrmi	r3, [r6, #0]
 8007292:	3302      	addmi	r3, #2
 8007294:	6033      	strmi	r3, [r6, #0]
 8007296:	6825      	ldr	r5, [r4, #0]
 8007298:	f015 0506 	ands.w	r5, r5, #6
 800729c:	d106      	bne.n	80072ac <_printf_common+0x48>
 800729e:	f104 0a19 	add.w	sl, r4, #25
 80072a2:	68e3      	ldr	r3, [r4, #12]
 80072a4:	6832      	ldr	r2, [r6, #0]
 80072a6:	1a9b      	subs	r3, r3, r2
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dc26      	bgt.n	80072fa <_printf_common+0x96>
 80072ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b0:	1e13      	subs	r3, r2, #0
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	bf18      	it	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	0692      	lsls	r2, r2, #26
 80072ba:	d42b      	bmi.n	8007314 <_printf_common+0xb0>
 80072bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c0:	4649      	mov	r1, r9
 80072c2:	4638      	mov	r0, r7
 80072c4:	47c0      	blx	r8
 80072c6:	3001      	adds	r0, #1
 80072c8:	d01e      	beq.n	8007308 <_printf_common+0xa4>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	68e5      	ldr	r5, [r4, #12]
 80072ce:	6832      	ldr	r2, [r6, #0]
 80072d0:	f003 0306 	and.w	r3, r3, #6
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	bf08      	it	eq
 80072d8:	1aad      	subeq	r5, r5, r2
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	6922      	ldr	r2, [r4, #16]
 80072de:	bf0c      	ite	eq
 80072e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e4:	2500      	movne	r5, #0
 80072e6:	4293      	cmp	r3, r2
 80072e8:	bfc4      	itt	gt
 80072ea:	1a9b      	subgt	r3, r3, r2
 80072ec:	18ed      	addgt	r5, r5, r3
 80072ee:	2600      	movs	r6, #0
 80072f0:	341a      	adds	r4, #26
 80072f2:	42b5      	cmp	r5, r6
 80072f4:	d11a      	bne.n	800732c <_printf_common+0xc8>
 80072f6:	2000      	movs	r0, #0
 80072f8:	e008      	b.n	800730c <_printf_common+0xa8>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4652      	mov	r2, sl
 80072fe:	4649      	mov	r1, r9
 8007300:	4638      	mov	r0, r7
 8007302:	47c0      	blx	r8
 8007304:	3001      	adds	r0, #1
 8007306:	d103      	bne.n	8007310 <_printf_common+0xac>
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007310:	3501      	adds	r5, #1
 8007312:	e7c6      	b.n	80072a2 <_printf_common+0x3e>
 8007314:	18e1      	adds	r1, r4, r3
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	2030      	movs	r0, #48	; 0x30
 800731a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800731e:	4422      	add	r2, r4
 8007320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007328:	3302      	adds	r3, #2
 800732a:	e7c7      	b.n	80072bc <_printf_common+0x58>
 800732c:	2301      	movs	r3, #1
 800732e:	4622      	mov	r2, r4
 8007330:	4649      	mov	r1, r9
 8007332:	4638      	mov	r0, r7
 8007334:	47c0      	blx	r8
 8007336:	3001      	adds	r0, #1
 8007338:	d0e6      	beq.n	8007308 <_printf_common+0xa4>
 800733a:	3601      	adds	r6, #1
 800733c:	e7d9      	b.n	80072f2 <_printf_common+0x8e>
	...

08007340 <_printf_i>:
 8007340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	7e0f      	ldrb	r7, [r1, #24]
 8007346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007348:	2f78      	cmp	r7, #120	; 0x78
 800734a:	4691      	mov	r9, r2
 800734c:	4680      	mov	r8, r0
 800734e:	460c      	mov	r4, r1
 8007350:	469a      	mov	sl, r3
 8007352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007356:	d807      	bhi.n	8007368 <_printf_i+0x28>
 8007358:	2f62      	cmp	r7, #98	; 0x62
 800735a:	d80a      	bhi.n	8007372 <_printf_i+0x32>
 800735c:	2f00      	cmp	r7, #0
 800735e:	f000 80d8 	beq.w	8007512 <_printf_i+0x1d2>
 8007362:	2f58      	cmp	r7, #88	; 0x58
 8007364:	f000 80a3 	beq.w	80074ae <_printf_i+0x16e>
 8007368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800736c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007370:	e03a      	b.n	80073e8 <_printf_i+0xa8>
 8007372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007376:	2b15      	cmp	r3, #21
 8007378:	d8f6      	bhi.n	8007368 <_printf_i+0x28>
 800737a:	a101      	add	r1, pc, #4	; (adr r1, 8007380 <_printf_i+0x40>)
 800737c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007380:	080073d9 	.word	0x080073d9
 8007384:	080073ed 	.word	0x080073ed
 8007388:	08007369 	.word	0x08007369
 800738c:	08007369 	.word	0x08007369
 8007390:	08007369 	.word	0x08007369
 8007394:	08007369 	.word	0x08007369
 8007398:	080073ed 	.word	0x080073ed
 800739c:	08007369 	.word	0x08007369
 80073a0:	08007369 	.word	0x08007369
 80073a4:	08007369 	.word	0x08007369
 80073a8:	08007369 	.word	0x08007369
 80073ac:	080074f9 	.word	0x080074f9
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	080074db 	.word	0x080074db
 80073b8:	08007369 	.word	0x08007369
 80073bc:	08007369 	.word	0x08007369
 80073c0:	0800751b 	.word	0x0800751b
 80073c4:	08007369 	.word	0x08007369
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	08007369 	.word	0x08007369
 80073d0:	08007369 	.word	0x08007369
 80073d4:	080074e3 	.word	0x080074e3
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	602a      	str	r2, [r5, #0]
 80073e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e8:	2301      	movs	r3, #1
 80073ea:	e0a3      	b.n	8007534 <_printf_i+0x1f4>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	6829      	ldr	r1, [r5, #0]
 80073f0:	0606      	lsls	r6, r0, #24
 80073f2:	f101 0304 	add.w	r3, r1, #4
 80073f6:	d50a      	bpl.n	800740e <_printf_i+0xce>
 80073f8:	680e      	ldr	r6, [r1, #0]
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	2e00      	cmp	r6, #0
 80073fe:	da03      	bge.n	8007408 <_printf_i+0xc8>
 8007400:	232d      	movs	r3, #45	; 0x2d
 8007402:	4276      	negs	r6, r6
 8007404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007408:	485e      	ldr	r0, [pc, #376]	; (8007584 <_printf_i+0x244>)
 800740a:	230a      	movs	r3, #10
 800740c:	e019      	b.n	8007442 <_printf_i+0x102>
 800740e:	680e      	ldr	r6, [r1, #0]
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007416:	bf18      	it	ne
 8007418:	b236      	sxthne	r6, r6
 800741a:	e7ef      	b.n	80073fc <_printf_i+0xbc>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	1d19      	adds	r1, r3, #4
 8007422:	6029      	str	r1, [r5, #0]
 8007424:	0601      	lsls	r1, r0, #24
 8007426:	d501      	bpl.n	800742c <_printf_i+0xec>
 8007428:	681e      	ldr	r6, [r3, #0]
 800742a:	e002      	b.n	8007432 <_printf_i+0xf2>
 800742c:	0646      	lsls	r6, r0, #25
 800742e:	d5fb      	bpl.n	8007428 <_printf_i+0xe8>
 8007430:	881e      	ldrh	r6, [r3, #0]
 8007432:	4854      	ldr	r0, [pc, #336]	; (8007584 <_printf_i+0x244>)
 8007434:	2f6f      	cmp	r7, #111	; 0x6f
 8007436:	bf0c      	ite	eq
 8007438:	2308      	moveq	r3, #8
 800743a:	230a      	movne	r3, #10
 800743c:	2100      	movs	r1, #0
 800743e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007442:	6865      	ldr	r5, [r4, #4]
 8007444:	60a5      	str	r5, [r4, #8]
 8007446:	2d00      	cmp	r5, #0
 8007448:	bfa2      	ittt	ge
 800744a:	6821      	ldrge	r1, [r4, #0]
 800744c:	f021 0104 	bicge.w	r1, r1, #4
 8007450:	6021      	strge	r1, [r4, #0]
 8007452:	b90e      	cbnz	r6, 8007458 <_printf_i+0x118>
 8007454:	2d00      	cmp	r5, #0
 8007456:	d04d      	beq.n	80074f4 <_printf_i+0x1b4>
 8007458:	4615      	mov	r5, r2
 800745a:	fbb6 f1f3 	udiv	r1, r6, r3
 800745e:	fb03 6711 	mls	r7, r3, r1, r6
 8007462:	5dc7      	ldrb	r7, [r0, r7]
 8007464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007468:	4637      	mov	r7, r6
 800746a:	42bb      	cmp	r3, r7
 800746c:	460e      	mov	r6, r1
 800746e:	d9f4      	bls.n	800745a <_printf_i+0x11a>
 8007470:	2b08      	cmp	r3, #8
 8007472:	d10b      	bne.n	800748c <_printf_i+0x14c>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	07de      	lsls	r6, r3, #31
 8007478:	d508      	bpl.n	800748c <_printf_i+0x14c>
 800747a:	6923      	ldr	r3, [r4, #16]
 800747c:	6861      	ldr	r1, [r4, #4]
 800747e:	4299      	cmp	r1, r3
 8007480:	bfde      	ittt	le
 8007482:	2330      	movle	r3, #48	; 0x30
 8007484:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007488:	f105 35ff 	addle.w	r5, r5, #4294967295
 800748c:	1b52      	subs	r2, r2, r5
 800748e:	6122      	str	r2, [r4, #16]
 8007490:	f8cd a000 	str.w	sl, [sp]
 8007494:	464b      	mov	r3, r9
 8007496:	aa03      	add	r2, sp, #12
 8007498:	4621      	mov	r1, r4
 800749a:	4640      	mov	r0, r8
 800749c:	f7ff fee2 	bl	8007264 <_printf_common>
 80074a0:	3001      	adds	r0, #1
 80074a2:	d14c      	bne.n	800753e <_printf_i+0x1fe>
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	b004      	add	sp, #16
 80074aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ae:	4835      	ldr	r0, [pc, #212]	; (8007584 <_printf_i+0x244>)
 80074b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074b4:	6829      	ldr	r1, [r5, #0]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80074bc:	6029      	str	r1, [r5, #0]
 80074be:	061d      	lsls	r5, r3, #24
 80074c0:	d514      	bpl.n	80074ec <_printf_i+0x1ac>
 80074c2:	07df      	lsls	r7, r3, #31
 80074c4:	bf44      	itt	mi
 80074c6:	f043 0320 	orrmi.w	r3, r3, #32
 80074ca:	6023      	strmi	r3, [r4, #0]
 80074cc:	b91e      	cbnz	r6, 80074d6 <_printf_i+0x196>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	f023 0320 	bic.w	r3, r3, #32
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	2310      	movs	r3, #16
 80074d8:	e7b0      	b.n	800743c <_printf_i+0xfc>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	f043 0320 	orr.w	r3, r3, #32
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	2378      	movs	r3, #120	; 0x78
 80074e4:	4828      	ldr	r0, [pc, #160]	; (8007588 <_printf_i+0x248>)
 80074e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ea:	e7e3      	b.n	80074b4 <_printf_i+0x174>
 80074ec:	0659      	lsls	r1, r3, #25
 80074ee:	bf48      	it	mi
 80074f0:	b2b6      	uxthmi	r6, r6
 80074f2:	e7e6      	b.n	80074c2 <_printf_i+0x182>
 80074f4:	4615      	mov	r5, r2
 80074f6:	e7bb      	b.n	8007470 <_printf_i+0x130>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	6826      	ldr	r6, [r4, #0]
 80074fc:	6961      	ldr	r1, [r4, #20]
 80074fe:	1d18      	adds	r0, r3, #4
 8007500:	6028      	str	r0, [r5, #0]
 8007502:	0635      	lsls	r5, r6, #24
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	d501      	bpl.n	800750c <_printf_i+0x1cc>
 8007508:	6019      	str	r1, [r3, #0]
 800750a:	e002      	b.n	8007512 <_printf_i+0x1d2>
 800750c:	0670      	lsls	r0, r6, #25
 800750e:	d5fb      	bpl.n	8007508 <_printf_i+0x1c8>
 8007510:	8019      	strh	r1, [r3, #0]
 8007512:	2300      	movs	r3, #0
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	4615      	mov	r5, r2
 8007518:	e7ba      	b.n	8007490 <_printf_i+0x150>
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	1d1a      	adds	r2, r3, #4
 800751e:	602a      	str	r2, [r5, #0]
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	6862      	ldr	r2, [r4, #4]
 8007524:	2100      	movs	r1, #0
 8007526:	4628      	mov	r0, r5
 8007528:	f7f8 fe5a 	bl	80001e0 <memchr>
 800752c:	b108      	cbz	r0, 8007532 <_printf_i+0x1f2>
 800752e:	1b40      	subs	r0, r0, r5
 8007530:	6060      	str	r0, [r4, #4]
 8007532:	6863      	ldr	r3, [r4, #4]
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	2300      	movs	r3, #0
 8007538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753c:	e7a8      	b.n	8007490 <_printf_i+0x150>
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	462a      	mov	r2, r5
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	47d0      	blx	sl
 8007548:	3001      	adds	r0, #1
 800754a:	d0ab      	beq.n	80074a4 <_printf_i+0x164>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	079b      	lsls	r3, r3, #30
 8007550:	d413      	bmi.n	800757a <_printf_i+0x23a>
 8007552:	68e0      	ldr	r0, [r4, #12]
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	4298      	cmp	r0, r3
 8007558:	bfb8      	it	lt
 800755a:	4618      	movlt	r0, r3
 800755c:	e7a4      	b.n	80074a8 <_printf_i+0x168>
 800755e:	2301      	movs	r3, #1
 8007560:	4632      	mov	r2, r6
 8007562:	4649      	mov	r1, r9
 8007564:	4640      	mov	r0, r8
 8007566:	47d0      	blx	sl
 8007568:	3001      	adds	r0, #1
 800756a:	d09b      	beq.n	80074a4 <_printf_i+0x164>
 800756c:	3501      	adds	r5, #1
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	9903      	ldr	r1, [sp, #12]
 8007572:	1a5b      	subs	r3, r3, r1
 8007574:	42ab      	cmp	r3, r5
 8007576:	dcf2      	bgt.n	800755e <_printf_i+0x21e>
 8007578:	e7eb      	b.n	8007552 <_printf_i+0x212>
 800757a:	2500      	movs	r5, #0
 800757c:	f104 0619 	add.w	r6, r4, #25
 8007580:	e7f5      	b.n	800756e <_printf_i+0x22e>
 8007582:	bf00      	nop
 8007584:	08009762 	.word	0x08009762
 8007588:	08009773 	.word	0x08009773

0800758c <iprintf>:
 800758c:	b40f      	push	{r0, r1, r2, r3}
 800758e:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <iprintf+0x2c>)
 8007590:	b513      	push	{r0, r1, r4, lr}
 8007592:	681c      	ldr	r4, [r3, #0]
 8007594:	b124      	cbz	r4, 80075a0 <iprintf+0x14>
 8007596:	69a3      	ldr	r3, [r4, #24]
 8007598:	b913      	cbnz	r3, 80075a0 <iprintf+0x14>
 800759a:	4620      	mov	r0, r4
 800759c:	f000 fede 	bl	800835c <__sinit>
 80075a0:	ab05      	add	r3, sp, #20
 80075a2:	9a04      	ldr	r2, [sp, #16]
 80075a4:	68a1      	ldr	r1, [r4, #8]
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	4620      	mov	r0, r4
 80075aa:	f001 fc1d 	bl	8008de8 <_vfiprintf_r>
 80075ae:	b002      	add	sp, #8
 80075b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b4:	b004      	add	sp, #16
 80075b6:	4770      	bx	lr
 80075b8:	20000028 	.word	0x20000028

080075bc <quorem>:
 80075bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	6903      	ldr	r3, [r0, #16]
 80075c2:	690c      	ldr	r4, [r1, #16]
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	4607      	mov	r7, r0
 80075c8:	db7d      	blt.n	80076c6 <quorem+0x10a>
 80075ca:	3c01      	subs	r4, #1
 80075cc:	f101 0814 	add.w	r8, r1, #20
 80075d0:	f100 0514 	add.w	r5, r0, #20
 80075d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075e2:	3301      	adds	r3, #1
 80075e4:	429a      	cmp	r2, r3
 80075e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80075f2:	d32e      	bcc.n	8007652 <quorem+0x96>
 80075f4:	f04f 0e00 	mov.w	lr, #0
 80075f8:	4640      	mov	r0, r8
 80075fa:	46ac      	mov	ip, r5
 80075fc:	46f2      	mov	sl, lr
 80075fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8007602:	b293      	uxth	r3, r2
 8007604:	fb06 e303 	mla	r3, r6, r3, lr
 8007608:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800760c:	0c12      	lsrs	r2, r2, #16
 800760e:	b29b      	uxth	r3, r3
 8007610:	fb06 e202 	mla	r2, r6, r2, lr
 8007614:	ebaa 0303 	sub.w	r3, sl, r3
 8007618:	f8dc a000 	ldr.w	sl, [ip]
 800761c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007620:	b292      	uxth	r2, r2
 8007622:	fa13 f38a 	uxtah	r3, r3, sl
 8007626:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800762a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800762e:	b29b      	uxth	r3, r3
 8007630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007634:	4581      	cmp	r9, r0
 8007636:	f84c 3b04 	str.w	r3, [ip], #4
 800763a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800763e:	d2de      	bcs.n	80075fe <quorem+0x42>
 8007640:	f855 300b 	ldr.w	r3, [r5, fp]
 8007644:	b92b      	cbnz	r3, 8007652 <quorem+0x96>
 8007646:	9b01      	ldr	r3, [sp, #4]
 8007648:	3b04      	subs	r3, #4
 800764a:	429d      	cmp	r5, r3
 800764c:	461a      	mov	r2, r3
 800764e:	d32e      	bcc.n	80076ae <quorem+0xf2>
 8007650:	613c      	str	r4, [r7, #16]
 8007652:	4638      	mov	r0, r7
 8007654:	f001 f9ae 	bl	80089b4 <__mcmp>
 8007658:	2800      	cmp	r0, #0
 800765a:	db24      	blt.n	80076a6 <quorem+0xea>
 800765c:	3601      	adds	r6, #1
 800765e:	4628      	mov	r0, r5
 8007660:	f04f 0c00 	mov.w	ip, #0
 8007664:	f858 2b04 	ldr.w	r2, [r8], #4
 8007668:	f8d0 e000 	ldr.w	lr, [r0]
 800766c:	b293      	uxth	r3, r2
 800766e:	ebac 0303 	sub.w	r3, ip, r3
 8007672:	0c12      	lsrs	r2, r2, #16
 8007674:	fa13 f38e 	uxtah	r3, r3, lr
 8007678:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800767c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007680:	b29b      	uxth	r3, r3
 8007682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007686:	45c1      	cmp	r9, r8
 8007688:	f840 3b04 	str.w	r3, [r0], #4
 800768c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007690:	d2e8      	bcs.n	8007664 <quorem+0xa8>
 8007692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800769a:	b922      	cbnz	r2, 80076a6 <quorem+0xea>
 800769c:	3b04      	subs	r3, #4
 800769e:	429d      	cmp	r5, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	d30a      	bcc.n	80076ba <quorem+0xfe>
 80076a4:	613c      	str	r4, [r7, #16]
 80076a6:	4630      	mov	r0, r6
 80076a8:	b003      	add	sp, #12
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	3b04      	subs	r3, #4
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	d1cc      	bne.n	8007650 <quorem+0x94>
 80076b6:	3c01      	subs	r4, #1
 80076b8:	e7c7      	b.n	800764a <quorem+0x8e>
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	3b04      	subs	r3, #4
 80076be:	2a00      	cmp	r2, #0
 80076c0:	d1f0      	bne.n	80076a4 <quorem+0xe8>
 80076c2:	3c01      	subs	r4, #1
 80076c4:	e7eb      	b.n	800769e <quorem+0xe2>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e7ee      	b.n	80076a8 <quorem+0xec>
 80076ca:	0000      	movs	r0, r0
 80076cc:	0000      	movs	r0, r0
	...

080076d0 <_dtoa_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076d6:	b099      	sub	sp, #100	; 0x64
 80076d8:	4616      	mov	r6, r2
 80076da:	461f      	mov	r7, r3
 80076dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80076e0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80076e4:	4605      	mov	r5, r0
 80076e6:	b974      	cbnz	r4, 8007706 <_dtoa_r+0x36>
 80076e8:	2010      	movs	r0, #16
 80076ea:	f000 fedd 	bl	80084a8 <malloc>
 80076ee:	4602      	mov	r2, r0
 80076f0:	6268      	str	r0, [r5, #36]	; 0x24
 80076f2:	b920      	cbnz	r0, 80076fe <_dtoa_r+0x2e>
 80076f4:	4ba8      	ldr	r3, [pc, #672]	; (8007998 <_dtoa_r+0x2c8>)
 80076f6:	21ea      	movs	r1, #234	; 0xea
 80076f8:	48a8      	ldr	r0, [pc, #672]	; (800799c <_dtoa_r+0x2cc>)
 80076fa:	f001 fdcb 	bl	8009294 <__assert_func>
 80076fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007702:	6004      	str	r4, [r0, #0]
 8007704:	60c4      	str	r4, [r0, #12]
 8007706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007708:	6819      	ldr	r1, [r3, #0]
 800770a:	b151      	cbz	r1, 8007722 <_dtoa_r+0x52>
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	604a      	str	r2, [r1, #4]
 8007710:	2301      	movs	r3, #1
 8007712:	4093      	lsls	r3, r2
 8007714:	608b      	str	r3, [r1, #8]
 8007716:	4628      	mov	r0, r5
 8007718:	f000 ff0e 	bl	8008538 <_Bfree>
 800771c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	1e3b      	subs	r3, r7, #0
 8007724:	bfb9      	ittee	lt
 8007726:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800772a:	9305      	strlt	r3, [sp, #20]
 800772c:	2300      	movge	r3, #0
 800772e:	f8c8 3000 	strge.w	r3, [r8]
 8007732:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007736:	4b9a      	ldr	r3, [pc, #616]	; (80079a0 <_dtoa_r+0x2d0>)
 8007738:	bfbc      	itt	lt
 800773a:	2201      	movlt	r2, #1
 800773c:	f8c8 2000 	strlt.w	r2, [r8]
 8007740:	ea33 0309 	bics.w	r3, r3, r9
 8007744:	d119      	bne.n	800777a <_dtoa_r+0xaa>
 8007746:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007748:	f242 730f 	movw	r3, #9999	; 0x270f
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007752:	4333      	orrs	r3, r6
 8007754:	f000 8580 	beq.w	8008258 <_dtoa_r+0xb88>
 8007758:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800775a:	b953      	cbnz	r3, 8007772 <_dtoa_r+0xa2>
 800775c:	4b91      	ldr	r3, [pc, #580]	; (80079a4 <_dtoa_r+0x2d4>)
 800775e:	e022      	b.n	80077a6 <_dtoa_r+0xd6>
 8007760:	4b91      	ldr	r3, [pc, #580]	; (80079a8 <_dtoa_r+0x2d8>)
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	3308      	adds	r3, #8
 8007766:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	9803      	ldr	r0, [sp, #12]
 800776c:	b019      	add	sp, #100	; 0x64
 800776e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007772:	4b8c      	ldr	r3, [pc, #560]	; (80079a4 <_dtoa_r+0x2d4>)
 8007774:	9303      	str	r3, [sp, #12]
 8007776:	3303      	adds	r3, #3
 8007778:	e7f5      	b.n	8007766 <_dtoa_r+0x96>
 800777a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800777e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007782:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007786:	2200      	movs	r2, #0
 8007788:	2300      	movs	r3, #0
 800778a:	f7f9 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 800778e:	4680      	mov	r8, r0
 8007790:	b158      	cbz	r0, 80077aa <_dtoa_r+0xda>
 8007792:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007794:	2301      	movs	r3, #1
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 8559 	beq.w	8008252 <_dtoa_r+0xb82>
 80077a0:	4882      	ldr	r0, [pc, #520]	; (80079ac <_dtoa_r+0x2dc>)
 80077a2:	6018      	str	r0, [r3, #0]
 80077a4:	1e43      	subs	r3, r0, #1
 80077a6:	9303      	str	r3, [sp, #12]
 80077a8:	e7df      	b.n	800776a <_dtoa_r+0x9a>
 80077aa:	ab16      	add	r3, sp, #88	; 0x58
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	ab17      	add	r3, sp, #92	; 0x5c
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	4628      	mov	r0, r5
 80077b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077b8:	f001 f9a0 	bl	8008afc <__d2b>
 80077bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80077c0:	4683      	mov	fp, r0
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	d07e      	beq.n	80078c4 <_dtoa_r+0x1f4>
 80077c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80077cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077d4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80077d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80077dc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80077e0:	4b73      	ldr	r3, [pc, #460]	; (80079b0 <_dtoa_r+0x2e0>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	f7f8 fd50 	bl	8000288 <__aeabi_dsub>
 80077e8:	a365      	add	r3, pc, #404	; (adr r3, 8007980 <_dtoa_r+0x2b0>)
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f7f8 ff03 	bl	80005f8 <__aeabi_dmul>
 80077f2:	a365      	add	r3, pc, #404	; (adr r3, 8007988 <_dtoa_r+0x2b8>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fd48 	bl	800028c <__adddf3>
 80077fc:	4606      	mov	r6, r0
 80077fe:	4620      	mov	r0, r4
 8007800:	460f      	mov	r7, r1
 8007802:	f7f8 fe8f 	bl	8000524 <__aeabi_i2d>
 8007806:	a362      	add	r3, pc, #392	; (adr r3, 8007990 <_dtoa_r+0x2c0>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f7f8 fef4 	bl	80005f8 <__aeabi_dmul>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	f7f8 fd38 	bl	800028c <__adddf3>
 800781c:	4606      	mov	r6, r0
 800781e:	460f      	mov	r7, r1
 8007820:	f7f9 f99a 	bl	8000b58 <__aeabi_d2iz>
 8007824:	2200      	movs	r2, #0
 8007826:	4682      	mov	sl, r0
 8007828:	2300      	movs	r3, #0
 800782a:	4630      	mov	r0, r6
 800782c:	4639      	mov	r1, r7
 800782e:	f7f9 f955 	bl	8000adc <__aeabi_dcmplt>
 8007832:	b148      	cbz	r0, 8007848 <_dtoa_r+0x178>
 8007834:	4650      	mov	r0, sl
 8007836:	f7f8 fe75 	bl	8000524 <__aeabi_i2d>
 800783a:	4632      	mov	r2, r6
 800783c:	463b      	mov	r3, r7
 800783e:	f7f9 f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8007842:	b908      	cbnz	r0, 8007848 <_dtoa_r+0x178>
 8007844:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007848:	f1ba 0f16 	cmp.w	sl, #22
 800784c:	d857      	bhi.n	80078fe <_dtoa_r+0x22e>
 800784e:	4b59      	ldr	r3, [pc, #356]	; (80079b4 <_dtoa_r+0x2e4>)
 8007850:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800785c:	f7f9 f93e 	bl	8000adc <__aeabi_dcmplt>
 8007860:	2800      	cmp	r0, #0
 8007862:	d04e      	beq.n	8007902 <_dtoa_r+0x232>
 8007864:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007868:	2300      	movs	r3, #0
 800786a:	930f      	str	r3, [sp, #60]	; 0x3c
 800786c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800786e:	1b1c      	subs	r4, r3, r4
 8007870:	1e63      	subs	r3, r4, #1
 8007872:	9309      	str	r3, [sp, #36]	; 0x24
 8007874:	bf45      	ittet	mi
 8007876:	f1c4 0301 	rsbmi	r3, r4, #1
 800787a:	9306      	strmi	r3, [sp, #24]
 800787c:	2300      	movpl	r3, #0
 800787e:	2300      	movmi	r3, #0
 8007880:	bf4c      	ite	mi
 8007882:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007884:	9306      	strpl	r3, [sp, #24]
 8007886:	f1ba 0f00 	cmp.w	sl, #0
 800788a:	db3c      	blt.n	8007906 <_dtoa_r+0x236>
 800788c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007892:	4453      	add	r3, sl
 8007894:	9309      	str	r3, [sp, #36]	; 0x24
 8007896:	2300      	movs	r3, #0
 8007898:	930a      	str	r3, [sp, #40]	; 0x28
 800789a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800789c:	2b09      	cmp	r3, #9
 800789e:	f200 808d 	bhi.w	80079bc <_dtoa_r+0x2ec>
 80078a2:	2b05      	cmp	r3, #5
 80078a4:	bfc4      	itt	gt
 80078a6:	3b04      	subgt	r3, #4
 80078a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80078aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ac:	f1a3 0302 	sub.w	r3, r3, #2
 80078b0:	bfcc      	ite	gt
 80078b2:	2400      	movgt	r4, #0
 80078b4:	2401      	movle	r4, #1
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	f200 808c 	bhi.w	80079d4 <_dtoa_r+0x304>
 80078bc:	e8df f003 	tbb	[pc, r3]
 80078c0:	5b4d4f2d 	.word	0x5b4d4f2d
 80078c4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80078c8:	441c      	add	r4, r3
 80078ca:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	bfc3      	ittte	gt
 80078d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078d6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80078da:	fa09 f303 	lslgt.w	r3, r9, r3
 80078de:	f1c3 0320 	rsble	r3, r3, #32
 80078e2:	bfc6      	itte	gt
 80078e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078e8:	4318      	orrgt	r0, r3
 80078ea:	fa06 f003 	lslle.w	r0, r6, r3
 80078ee:	f7f8 fe09 	bl	8000504 <__aeabi_ui2d>
 80078f2:	2301      	movs	r3, #1
 80078f4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80078f8:	3c01      	subs	r4, #1
 80078fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80078fc:	e770      	b.n	80077e0 <_dtoa_r+0x110>
 80078fe:	2301      	movs	r3, #1
 8007900:	e7b3      	b.n	800786a <_dtoa_r+0x19a>
 8007902:	900f      	str	r0, [sp, #60]	; 0x3c
 8007904:	e7b2      	b.n	800786c <_dtoa_r+0x19c>
 8007906:	9b06      	ldr	r3, [sp, #24]
 8007908:	eba3 030a 	sub.w	r3, r3, sl
 800790c:	9306      	str	r3, [sp, #24]
 800790e:	f1ca 0300 	rsb	r3, sl, #0
 8007912:	930a      	str	r3, [sp, #40]	; 0x28
 8007914:	2300      	movs	r3, #0
 8007916:	930e      	str	r3, [sp, #56]	; 0x38
 8007918:	e7bf      	b.n	800789a <_dtoa_r+0x1ca>
 800791a:	2300      	movs	r3, #0
 800791c:	930b      	str	r3, [sp, #44]	; 0x2c
 800791e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc5a      	bgt.n	80079da <_dtoa_r+0x30a>
 8007924:	f04f 0901 	mov.w	r9, #1
 8007928:	f8cd 9020 	str.w	r9, [sp, #32]
 800792c:	464b      	mov	r3, r9
 800792e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007932:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007934:	2200      	movs	r2, #0
 8007936:	6042      	str	r2, [r0, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	f102 0614 	add.w	r6, r2, #20
 800793e:	429e      	cmp	r6, r3
 8007940:	6841      	ldr	r1, [r0, #4]
 8007942:	d950      	bls.n	80079e6 <_dtoa_r+0x316>
 8007944:	4628      	mov	r0, r5
 8007946:	f000 fdb7 	bl	80084b8 <_Balloc>
 800794a:	9003      	str	r0, [sp, #12]
 800794c:	2800      	cmp	r0, #0
 800794e:	d14e      	bne.n	80079ee <_dtoa_r+0x31e>
 8007950:	4b19      	ldr	r3, [pc, #100]	; (80079b8 <_dtoa_r+0x2e8>)
 8007952:	4602      	mov	r2, r0
 8007954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007958:	e6ce      	b.n	80076f8 <_dtoa_r+0x28>
 800795a:	2301      	movs	r3, #1
 800795c:	e7de      	b.n	800791c <_dtoa_r+0x24c>
 800795e:	2300      	movs	r3, #0
 8007960:	930b      	str	r3, [sp, #44]	; 0x2c
 8007962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007964:	eb0a 0903 	add.w	r9, sl, r3
 8007968:	f109 0301 	add.w	r3, r9, #1
 800796c:	2b01      	cmp	r3, #1
 800796e:	9308      	str	r3, [sp, #32]
 8007970:	bfb8      	it	lt
 8007972:	2301      	movlt	r3, #1
 8007974:	e7dd      	b.n	8007932 <_dtoa_r+0x262>
 8007976:	2301      	movs	r3, #1
 8007978:	e7f2      	b.n	8007960 <_dtoa_r+0x290>
 800797a:	bf00      	nop
 800797c:	f3af 8000 	nop.w
 8007980:	636f4361 	.word	0x636f4361
 8007984:	3fd287a7 	.word	0x3fd287a7
 8007988:	8b60c8b3 	.word	0x8b60c8b3
 800798c:	3fc68a28 	.word	0x3fc68a28
 8007990:	509f79fb 	.word	0x509f79fb
 8007994:	3fd34413 	.word	0x3fd34413
 8007998:	08009791 	.word	0x08009791
 800799c:	080097a8 	.word	0x080097a8
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	0800978d 	.word	0x0800978d
 80079a8:	08009784 	.word	0x08009784
 80079ac:	08009761 	.word	0x08009761
 80079b0:	3ff80000 	.word	0x3ff80000
 80079b4:	080098f8 	.word	0x080098f8
 80079b8:	08009803 	.word	0x08009803
 80079bc:	2401      	movs	r4, #1
 80079be:	2300      	movs	r3, #0
 80079c0:	9322      	str	r3, [sp, #136]	; 0x88
 80079c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80079c4:	f04f 39ff 	mov.w	r9, #4294967295
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8cd 9020 	str.w	r9, [sp, #32]
 80079ce:	2312      	movs	r3, #18
 80079d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80079d2:	e7ae      	b.n	8007932 <_dtoa_r+0x262>
 80079d4:	2301      	movs	r3, #1
 80079d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d8:	e7f4      	b.n	80079c4 <_dtoa_r+0x2f4>
 80079da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80079de:	f8cd 9020 	str.w	r9, [sp, #32]
 80079e2:	464b      	mov	r3, r9
 80079e4:	e7a5      	b.n	8007932 <_dtoa_r+0x262>
 80079e6:	3101      	adds	r1, #1
 80079e8:	6041      	str	r1, [r0, #4]
 80079ea:	0052      	lsls	r2, r2, #1
 80079ec:	e7a5      	b.n	800793a <_dtoa_r+0x26a>
 80079ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079f0:	9a03      	ldr	r2, [sp, #12]
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	9b08      	ldr	r3, [sp, #32]
 80079f6:	2b0e      	cmp	r3, #14
 80079f8:	f200 80a8 	bhi.w	8007b4c <_dtoa_r+0x47c>
 80079fc:	2c00      	cmp	r4, #0
 80079fe:	f000 80a5 	beq.w	8007b4c <_dtoa_r+0x47c>
 8007a02:	f1ba 0f00 	cmp.w	sl, #0
 8007a06:	dd34      	ble.n	8007a72 <_dtoa_r+0x3a2>
 8007a08:	4a9a      	ldr	r2, [pc, #616]	; (8007c74 <_dtoa_r+0x5a4>)
 8007a0a:	f00a 030f 	and.w	r3, sl, #15
 8007a0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a16:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007a1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a1e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007a22:	d016      	beq.n	8007a52 <_dtoa_r+0x382>
 8007a24:	4b94      	ldr	r3, [pc, #592]	; (8007c78 <_dtoa_r+0x5a8>)
 8007a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a2e:	f7f8 ff0d 	bl	800084c <__aeabi_ddiv>
 8007a32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a36:	f004 040f 	and.w	r4, r4, #15
 8007a3a:	2703      	movs	r7, #3
 8007a3c:	4e8e      	ldr	r6, [pc, #568]	; (8007c78 <_dtoa_r+0x5a8>)
 8007a3e:	b954      	cbnz	r4, 8007a56 <_dtoa_r+0x386>
 8007a40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a48:	f7f8 ff00 	bl	800084c <__aeabi_ddiv>
 8007a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a50:	e029      	b.n	8007aa6 <_dtoa_r+0x3d6>
 8007a52:	2702      	movs	r7, #2
 8007a54:	e7f2      	b.n	8007a3c <_dtoa_r+0x36c>
 8007a56:	07e1      	lsls	r1, r4, #31
 8007a58:	d508      	bpl.n	8007a6c <_dtoa_r+0x39c>
 8007a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a62:	f7f8 fdc9 	bl	80005f8 <__aeabi_dmul>
 8007a66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a6a:	3701      	adds	r7, #1
 8007a6c:	1064      	asrs	r4, r4, #1
 8007a6e:	3608      	adds	r6, #8
 8007a70:	e7e5      	b.n	8007a3e <_dtoa_r+0x36e>
 8007a72:	f000 80a5 	beq.w	8007bc0 <_dtoa_r+0x4f0>
 8007a76:	f1ca 0400 	rsb	r4, sl, #0
 8007a7a:	4b7e      	ldr	r3, [pc, #504]	; (8007c74 <_dtoa_r+0x5a4>)
 8007a7c:	4e7e      	ldr	r6, [pc, #504]	; (8007c78 <_dtoa_r+0x5a8>)
 8007a7e:	f004 020f 	and.w	r2, r4, #15
 8007a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a8e:	f7f8 fdb3 	bl	80005f8 <__aeabi_dmul>
 8007a92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a96:	1124      	asrs	r4, r4, #4
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2702      	movs	r7, #2
 8007a9c:	2c00      	cmp	r4, #0
 8007a9e:	f040 8084 	bne.w	8007baa <_dtoa_r+0x4da>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1d2      	bne.n	8007a4c <_dtoa_r+0x37c>
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 808b 	beq.w	8007bc4 <_dtoa_r+0x4f4>
 8007aae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ab2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ab6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aba:	4b70      	ldr	r3, [pc, #448]	; (8007c7c <_dtoa_r+0x5ac>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	f7f9 f80d 	bl	8000adc <__aeabi_dcmplt>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d07e      	beq.n	8007bc4 <_dtoa_r+0x4f4>
 8007ac6:	9b08      	ldr	r3, [sp, #32]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d07b      	beq.n	8007bc4 <_dtoa_r+0x4f4>
 8007acc:	f1b9 0f00 	cmp.w	r9, #0
 8007ad0:	dd38      	ble.n	8007b44 <_dtoa_r+0x474>
 8007ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ad6:	4b6a      	ldr	r3, [pc, #424]	; (8007c80 <_dtoa_r+0x5b0>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f7f8 fd8d 	bl	80005f8 <__aeabi_dmul>
 8007ade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ae2:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007ae6:	3701      	adds	r7, #1
 8007ae8:	464c      	mov	r4, r9
 8007aea:	4638      	mov	r0, r7
 8007aec:	f7f8 fd1a 	bl	8000524 <__aeabi_i2d>
 8007af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af4:	f7f8 fd80 	bl	80005f8 <__aeabi_dmul>
 8007af8:	4b62      	ldr	r3, [pc, #392]	; (8007c84 <_dtoa_r+0x5b4>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	f7f8 fbc6 	bl	800028c <__adddf3>
 8007b00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b08:	9611      	str	r6, [sp, #68]	; 0x44
 8007b0a:	2c00      	cmp	r4, #0
 8007b0c:	d15d      	bne.n	8007bca <_dtoa_r+0x4fa>
 8007b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b12:	4b5d      	ldr	r3, [pc, #372]	; (8007c88 <_dtoa_r+0x5b8>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	f7f8 fbb7 	bl	8000288 <__aeabi_dsub>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b24:	4633      	mov	r3, r6
 8007b26:	f7f8 fff7 	bl	8000b18 <__aeabi_dcmpgt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f040 829c 	bne.w	8008068 <_dtoa_r+0x998>
 8007b30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b3a:	f7f8 ffcf 	bl	8000adc <__aeabi_dcmplt>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f040 8290 	bne.w	8008064 <_dtoa_r+0x994>
 8007b44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007b48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f2c0 8152 	blt.w	8007df8 <_dtoa_r+0x728>
 8007b54:	f1ba 0f0e 	cmp.w	sl, #14
 8007b58:	f300 814e 	bgt.w	8007df8 <_dtoa_r+0x728>
 8007b5c:	4b45      	ldr	r3, [pc, #276]	; (8007c74 <_dtoa_r+0x5a4>)
 8007b5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007b6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f280 80db 	bge.w	8007d28 <_dtoa_r+0x658>
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f300 80d7 	bgt.w	8007d28 <_dtoa_r+0x658>
 8007b7a:	f040 8272 	bne.w	8008062 <_dtoa_r+0x992>
 8007b7e:	4b42      	ldr	r3, [pc, #264]	; (8007c88 <_dtoa_r+0x5b8>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b86:	f7f8 fd37 	bl	80005f8 <__aeabi_dmul>
 8007b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b8e:	f7f8 ffb9 	bl	8000b04 <__aeabi_dcmpge>
 8007b92:	9c08      	ldr	r4, [sp, #32]
 8007b94:	4626      	mov	r6, r4
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f040 8248 	bne.w	800802c <_dtoa_r+0x95c>
 8007b9c:	9f03      	ldr	r7, [sp, #12]
 8007b9e:	2331      	movs	r3, #49	; 0x31
 8007ba0:	f807 3b01 	strb.w	r3, [r7], #1
 8007ba4:	f10a 0a01 	add.w	sl, sl, #1
 8007ba8:	e244      	b.n	8008034 <_dtoa_r+0x964>
 8007baa:	07e2      	lsls	r2, r4, #31
 8007bac:	d505      	bpl.n	8007bba <_dtoa_r+0x4ea>
 8007bae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bb2:	f7f8 fd21 	bl	80005f8 <__aeabi_dmul>
 8007bb6:	3701      	adds	r7, #1
 8007bb8:	2301      	movs	r3, #1
 8007bba:	1064      	asrs	r4, r4, #1
 8007bbc:	3608      	adds	r6, #8
 8007bbe:	e76d      	b.n	8007a9c <_dtoa_r+0x3cc>
 8007bc0:	2702      	movs	r7, #2
 8007bc2:	e770      	b.n	8007aa6 <_dtoa_r+0x3d6>
 8007bc4:	9c08      	ldr	r4, [sp, #32]
 8007bc6:	46d0      	mov	r8, sl
 8007bc8:	e78f      	b.n	8007aea <_dtoa_r+0x41a>
 8007bca:	9903      	ldr	r1, [sp, #12]
 8007bcc:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <_dtoa_r+0x5a4>)
 8007bce:	4421      	add	r1, r4
 8007bd0:	9112      	str	r1, [sp, #72]	; 0x48
 8007bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bd8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007bdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007be0:	2900      	cmp	r1, #0
 8007be2:	d055      	beq.n	8007c90 <_dtoa_r+0x5c0>
 8007be4:	4929      	ldr	r1, [pc, #164]	; (8007c8c <_dtoa_r+0x5bc>)
 8007be6:	2000      	movs	r0, #0
 8007be8:	f7f8 fe30 	bl	800084c <__aeabi_ddiv>
 8007bec:	463b      	mov	r3, r7
 8007bee:	4632      	mov	r2, r6
 8007bf0:	f7f8 fb4a 	bl	8000288 <__aeabi_dsub>
 8007bf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bf8:	9f03      	ldr	r7, [sp, #12]
 8007bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bfe:	f7f8 ffab 	bl	8000b58 <__aeabi_d2iz>
 8007c02:	4604      	mov	r4, r0
 8007c04:	f7f8 fc8e 	bl	8000524 <__aeabi_i2d>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c10:	f7f8 fb3a 	bl	8000288 <__aeabi_dsub>
 8007c14:	3430      	adds	r4, #48	; 0x30
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c1e:	f807 4b01 	strb.w	r4, [r7], #1
 8007c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c26:	f7f8 ff59 	bl	8000adc <__aeabi_dcmplt>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d174      	bne.n	8007d18 <_dtoa_r+0x648>
 8007c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c32:	4912      	ldr	r1, [pc, #72]	; (8007c7c <_dtoa_r+0x5ac>)
 8007c34:	2000      	movs	r0, #0
 8007c36:	f7f8 fb27 	bl	8000288 <__aeabi_dsub>
 8007c3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c3e:	f7f8 ff4d 	bl	8000adc <__aeabi_dcmplt>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	f040 80b7 	bne.w	8007db6 <_dtoa_r+0x6e6>
 8007c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c4a:	429f      	cmp	r7, r3
 8007c4c:	f43f af7a 	beq.w	8007b44 <_dtoa_r+0x474>
 8007c50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <_dtoa_r+0x5b0>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	f7f8 fcce 	bl	80005f8 <__aeabi_dmul>
 8007c5c:	4b08      	ldr	r3, [pc, #32]	; (8007c80 <_dtoa_r+0x5b0>)
 8007c5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c62:	2200      	movs	r2, #0
 8007c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c68:	f7f8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8007c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c70:	e7c3      	b.n	8007bfa <_dtoa_r+0x52a>
 8007c72:	bf00      	nop
 8007c74:	080098f8 	.word	0x080098f8
 8007c78:	080098d0 	.word	0x080098d0
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	40240000 	.word	0x40240000
 8007c84:	401c0000 	.word	0x401c0000
 8007c88:	40140000 	.word	0x40140000
 8007c8c:	3fe00000 	.word	0x3fe00000
 8007c90:	4630      	mov	r0, r6
 8007c92:	4639      	mov	r1, r7
 8007c94:	f7f8 fcb0 	bl	80005f8 <__aeabi_dmul>
 8007c98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c9e:	9c03      	ldr	r4, [sp, #12]
 8007ca0:	9314      	str	r3, [sp, #80]	; 0x50
 8007ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ca6:	f7f8 ff57 	bl	8000b58 <__aeabi_d2iz>
 8007caa:	9015      	str	r0, [sp, #84]	; 0x54
 8007cac:	f7f8 fc3a 	bl	8000524 <__aeabi_i2d>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cb8:	f7f8 fae6 	bl	8000288 <__aeabi_dsub>
 8007cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cbe:	3330      	adds	r3, #48	; 0x30
 8007cc0:	f804 3b01 	strb.w	r3, [r4], #1
 8007cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	4606      	mov	r6, r0
 8007cca:	460f      	mov	r7, r1
 8007ccc:	f04f 0200 	mov.w	r2, #0
 8007cd0:	d124      	bne.n	8007d1c <_dtoa_r+0x64c>
 8007cd2:	4ba4      	ldr	r3, [pc, #656]	; (8007f64 <_dtoa_r+0x894>)
 8007cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cd8:	f7f8 fad8 	bl	800028c <__adddf3>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 ff18 	bl	8000b18 <__aeabi_dcmpgt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d163      	bne.n	8007db4 <_dtoa_r+0x6e4>
 8007cec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cf0:	499c      	ldr	r1, [pc, #624]	; (8007f64 <_dtoa_r+0x894>)
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	f7f8 fac8 	bl	8000288 <__aeabi_dsub>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 feec 	bl	8000adc <__aeabi_dcmplt>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f43f af1d 	beq.w	8007b44 <_dtoa_r+0x474>
 8007d0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007d0c:	1e7b      	subs	r3, r7, #1
 8007d0e:	9314      	str	r3, [sp, #80]	; 0x50
 8007d10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007d14:	2b30      	cmp	r3, #48	; 0x30
 8007d16:	d0f8      	beq.n	8007d0a <_dtoa_r+0x63a>
 8007d18:	46c2      	mov	sl, r8
 8007d1a:	e03b      	b.n	8007d94 <_dtoa_r+0x6c4>
 8007d1c:	4b92      	ldr	r3, [pc, #584]	; (8007f68 <_dtoa_r+0x898>)
 8007d1e:	f7f8 fc6b 	bl	80005f8 <__aeabi_dmul>
 8007d22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d26:	e7bc      	b.n	8007ca2 <_dtoa_r+0x5d2>
 8007d28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007d2c:	9f03      	ldr	r7, [sp, #12]
 8007d2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f7f8 fd89 	bl	800084c <__aeabi_ddiv>
 8007d3a:	f7f8 ff0d 	bl	8000b58 <__aeabi_d2iz>
 8007d3e:	4604      	mov	r4, r0
 8007d40:	f7f8 fbf0 	bl	8000524 <__aeabi_i2d>
 8007d44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d48:	f7f8 fc56 	bl	80005f8 <__aeabi_dmul>
 8007d4c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 fa96 	bl	8000288 <__aeabi_dsub>
 8007d5c:	f807 6b01 	strb.w	r6, [r7], #1
 8007d60:	9e03      	ldr	r6, [sp, #12]
 8007d62:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007d66:	1bbe      	subs	r6, r7, r6
 8007d68:	45b4      	cmp	ip, r6
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	d136      	bne.n	8007dde <_dtoa_r+0x70e>
 8007d70:	f7f8 fa8c 	bl	800028c <__adddf3>
 8007d74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4689      	mov	r9, r1
 8007d7c:	f7f8 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8007d80:	bb58      	cbnz	r0, 8007dda <_dtoa_r+0x70a>
 8007d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d8e:	b108      	cbz	r0, 8007d94 <_dtoa_r+0x6c4>
 8007d90:	07e1      	lsls	r1, r4, #31
 8007d92:	d422      	bmi.n	8007dda <_dtoa_r+0x70a>
 8007d94:	4628      	mov	r0, r5
 8007d96:	4659      	mov	r1, fp
 8007d98:	f000 fbce 	bl	8008538 <_Bfree>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	703b      	strb	r3, [r7, #0]
 8007da0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007da2:	f10a 0001 	add.w	r0, sl, #1
 8007da6:	6018      	str	r0, [r3, #0]
 8007da8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f43f acdd 	beq.w	800776a <_dtoa_r+0x9a>
 8007db0:	601f      	str	r7, [r3, #0]
 8007db2:	e4da      	b.n	800776a <_dtoa_r+0x9a>
 8007db4:	4627      	mov	r7, r4
 8007db6:	463b      	mov	r3, r7
 8007db8:	461f      	mov	r7, r3
 8007dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dbe:	2a39      	cmp	r2, #57	; 0x39
 8007dc0:	d107      	bne.n	8007dd2 <_dtoa_r+0x702>
 8007dc2:	9a03      	ldr	r2, [sp, #12]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d1f7      	bne.n	8007db8 <_dtoa_r+0x6e8>
 8007dc8:	9903      	ldr	r1, [sp, #12]
 8007dca:	2230      	movs	r2, #48	; 0x30
 8007dcc:	f108 0801 	add.w	r8, r8, #1
 8007dd0:	700a      	strb	r2, [r1, #0]
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	3201      	adds	r2, #1
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	e79e      	b.n	8007d18 <_dtoa_r+0x648>
 8007dda:	46d0      	mov	r8, sl
 8007ddc:	e7eb      	b.n	8007db6 <_dtoa_r+0x6e6>
 8007dde:	4b62      	ldr	r3, [pc, #392]	; (8007f68 <_dtoa_r+0x898>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fc09 	bl	80005f8 <__aeabi_dmul>
 8007de6:	2200      	movs	r2, #0
 8007de8:	2300      	movs	r3, #0
 8007dea:	4680      	mov	r8, r0
 8007dec:	4689      	mov	r9, r1
 8007dee:	f7f8 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d09b      	beq.n	8007d2e <_dtoa_r+0x65e>
 8007df6:	e7cd      	b.n	8007d94 <_dtoa_r+0x6c4>
 8007df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	f000 80d0 	beq.w	8007fa0 <_dtoa_r+0x8d0>
 8007e00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e02:	2a01      	cmp	r2, #1
 8007e04:	f300 80b2 	bgt.w	8007f6c <_dtoa_r+0x89c>
 8007e08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e0a:	2a00      	cmp	r2, #0
 8007e0c:	f000 80a6 	beq.w	8007f5c <_dtoa_r+0x88c>
 8007e10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e16:	9f06      	ldr	r7, [sp, #24]
 8007e18:	9a06      	ldr	r2, [sp, #24]
 8007e1a:	441a      	add	r2, r3
 8007e1c:	9206      	str	r2, [sp, #24]
 8007e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e20:	2101      	movs	r1, #1
 8007e22:	441a      	add	r2, r3
 8007e24:	4628      	mov	r0, r5
 8007e26:	9209      	str	r2, [sp, #36]	; 0x24
 8007e28:	f000 fc3c 	bl	80086a4 <__i2b>
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	dd0c      	ble.n	8007e4c <_dtoa_r+0x77c>
 8007e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dd09      	ble.n	8007e4c <_dtoa_r+0x77c>
 8007e38:	42bb      	cmp	r3, r7
 8007e3a:	9a06      	ldr	r2, [sp, #24]
 8007e3c:	bfa8      	it	ge
 8007e3e:	463b      	movge	r3, r7
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	9206      	str	r2, [sp, #24]
 8007e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e46:	1aff      	subs	r7, r7, r3
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4e:	b1f3      	cbz	r3, 8007e8e <_dtoa_r+0x7be>
 8007e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80a8 	beq.w	8007fa8 <_dtoa_r+0x8d8>
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	dd10      	ble.n	8007e7e <_dtoa_r+0x7ae>
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 fcdd 	bl	8008820 <__pow5mult>
 8007e66:	465a      	mov	r2, fp
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 fc2f 	bl	80086d0 <__multiply>
 8007e72:	4659      	mov	r1, fp
 8007e74:	4680      	mov	r8, r0
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 fb5e 	bl	8008538 <_Bfree>
 8007e7c:	46c3      	mov	fp, r8
 8007e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e80:	1b1a      	subs	r2, r3, r4
 8007e82:	d004      	beq.n	8007e8e <_dtoa_r+0x7be>
 8007e84:	4659      	mov	r1, fp
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 fcca 	bl	8008820 <__pow5mult>
 8007e8c:	4683      	mov	fp, r0
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4628      	mov	r0, r5
 8007e92:	f000 fc07 	bl	80086a4 <__i2b>
 8007e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	f340 8086 	ble.w	8007fac <_dtoa_r+0x8dc>
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 fcbb 	bl	8008820 <__pow5mult>
 8007eaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	4604      	mov	r4, r0
 8007eb0:	dd7f      	ble.n	8007fb2 <_dtoa_r+0x8e2>
 8007eb2:	f04f 0800 	mov.w	r8, #0
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ebc:	6918      	ldr	r0, [r3, #16]
 8007ebe:	f000 fba3 	bl	8008608 <__hi0bits>
 8007ec2:	f1c0 0020 	rsb	r0, r0, #32
 8007ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec8:	4418      	add	r0, r3
 8007eca:	f010 001f 	ands.w	r0, r0, #31
 8007ece:	f000 8092 	beq.w	8007ff6 <_dtoa_r+0x926>
 8007ed2:	f1c0 0320 	rsb	r3, r0, #32
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	f340 808a 	ble.w	8007ff0 <_dtoa_r+0x920>
 8007edc:	f1c0 001c 	rsb	r0, r0, #28
 8007ee0:	9b06      	ldr	r3, [sp, #24]
 8007ee2:	4403      	add	r3, r0
 8007ee4:	9306      	str	r3, [sp, #24]
 8007ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee8:	4403      	add	r3, r0
 8007eea:	4407      	add	r7, r0
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	9b06      	ldr	r3, [sp, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dd05      	ble.n	8007f00 <_dtoa_r+0x830>
 8007ef4:	4659      	mov	r1, fp
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 fceb 	bl	80088d4 <__lshift>
 8007efe:	4683      	mov	fp, r0
 8007f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dd05      	ble.n	8007f12 <_dtoa_r+0x842>
 8007f06:	4621      	mov	r1, r4
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 fce2 	bl	80088d4 <__lshift>
 8007f10:	4604      	mov	r4, r0
 8007f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d070      	beq.n	8007ffa <_dtoa_r+0x92a>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4658      	mov	r0, fp
 8007f1c:	f000 fd4a 	bl	80089b4 <__mcmp>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	da6a      	bge.n	8007ffa <_dtoa_r+0x92a>
 8007f24:	2300      	movs	r3, #0
 8007f26:	4659      	mov	r1, fp
 8007f28:	220a      	movs	r2, #10
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 fb26 	bl	800857c <__multadd>
 8007f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f36:	4683      	mov	fp, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8194 	beq.w	8008266 <_dtoa_r+0xb96>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	2300      	movs	r3, #0
 8007f42:	220a      	movs	r2, #10
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 fb19 	bl	800857c <__multadd>
 8007f4a:	f1b9 0f00 	cmp.w	r9, #0
 8007f4e:	4606      	mov	r6, r0
 8007f50:	f300 8093 	bgt.w	800807a <_dtoa_r+0x9aa>
 8007f54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	dc57      	bgt.n	800800a <_dtoa_r+0x93a>
 8007f5a:	e08e      	b.n	800807a <_dtoa_r+0x9aa>
 8007f5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f62:	e757      	b.n	8007e14 <_dtoa_r+0x744>
 8007f64:	3fe00000 	.word	0x3fe00000
 8007f68:	40240000 	.word	0x40240000
 8007f6c:	9b08      	ldr	r3, [sp, #32]
 8007f6e:	1e5c      	subs	r4, r3, #1
 8007f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	bfbf      	itttt	lt
 8007f76:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007f7a:	1ae2      	sublt	r2, r4, r3
 8007f7c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f7e:	bfb6      	itet	lt
 8007f80:	189b      	addlt	r3, r3, r2
 8007f82:	1b1c      	subge	r4, r3, r4
 8007f84:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f86:	9b08      	ldr	r3, [sp, #32]
 8007f88:	bfb8      	it	lt
 8007f8a:	2400      	movlt	r4, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bfb9      	ittee	lt
 8007f90:	9b06      	ldrlt	r3, [sp, #24]
 8007f92:	9a08      	ldrlt	r2, [sp, #32]
 8007f94:	9f06      	ldrge	r7, [sp, #24]
 8007f96:	9b08      	ldrge	r3, [sp, #32]
 8007f98:	bfbc      	itt	lt
 8007f9a:	1a9f      	sublt	r7, r3, r2
 8007f9c:	2300      	movlt	r3, #0
 8007f9e:	e73b      	b.n	8007e18 <_dtoa_r+0x748>
 8007fa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fa2:	9f06      	ldr	r7, [sp, #24]
 8007fa4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007fa6:	e742      	b.n	8007e2e <_dtoa_r+0x75e>
 8007fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007faa:	e76b      	b.n	8007e84 <_dtoa_r+0x7b4>
 8007fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	dc19      	bgt.n	8007fe6 <_dtoa_r+0x916>
 8007fb2:	9b04      	ldr	r3, [sp, #16]
 8007fb4:	b9bb      	cbnz	r3, 8007fe6 <_dtoa_r+0x916>
 8007fb6:	9b05      	ldr	r3, [sp, #20]
 8007fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fbc:	b99b      	cbnz	r3, 8007fe6 <_dtoa_r+0x916>
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	0d1b      	lsrs	r3, r3, #20
 8007fc6:	051b      	lsls	r3, r3, #20
 8007fc8:	b183      	cbz	r3, 8007fec <_dtoa_r+0x91c>
 8007fca:	9b06      	ldr	r3, [sp, #24]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	9306      	str	r3, [sp, #24]
 8007fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd6:	f04f 0801 	mov.w	r8, #1
 8007fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f af6a 	bne.w	8007eb6 <_dtoa_r+0x7e6>
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	e76f      	b.n	8007ec6 <_dtoa_r+0x7f6>
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	e7f6      	b.n	8007fda <_dtoa_r+0x90a>
 8007fec:	4698      	mov	r8, r3
 8007fee:	e7f4      	b.n	8007fda <_dtoa_r+0x90a>
 8007ff0:	f43f af7d 	beq.w	8007eee <_dtoa_r+0x81e>
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	301c      	adds	r0, #28
 8007ff8:	e772      	b.n	8007ee0 <_dtoa_r+0x810>
 8007ffa:	9b08      	ldr	r3, [sp, #32]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dc36      	bgt.n	800806e <_dtoa_r+0x99e>
 8008000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008002:	2b02      	cmp	r3, #2
 8008004:	dd33      	ble.n	800806e <_dtoa_r+0x99e>
 8008006:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800800a:	f1b9 0f00 	cmp.w	r9, #0
 800800e:	d10d      	bne.n	800802c <_dtoa_r+0x95c>
 8008010:	4621      	mov	r1, r4
 8008012:	464b      	mov	r3, r9
 8008014:	2205      	movs	r2, #5
 8008016:	4628      	mov	r0, r5
 8008018:	f000 fab0 	bl	800857c <__multadd>
 800801c:	4601      	mov	r1, r0
 800801e:	4604      	mov	r4, r0
 8008020:	4658      	mov	r0, fp
 8008022:	f000 fcc7 	bl	80089b4 <__mcmp>
 8008026:	2800      	cmp	r0, #0
 8008028:	f73f adb8 	bgt.w	8007b9c <_dtoa_r+0x4cc>
 800802c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800802e:	9f03      	ldr	r7, [sp, #12]
 8008030:	ea6f 0a03 	mvn.w	sl, r3
 8008034:	f04f 0800 	mov.w	r8, #0
 8008038:	4621      	mov	r1, r4
 800803a:	4628      	mov	r0, r5
 800803c:	f000 fa7c 	bl	8008538 <_Bfree>
 8008040:	2e00      	cmp	r6, #0
 8008042:	f43f aea7 	beq.w	8007d94 <_dtoa_r+0x6c4>
 8008046:	f1b8 0f00 	cmp.w	r8, #0
 800804a:	d005      	beq.n	8008058 <_dtoa_r+0x988>
 800804c:	45b0      	cmp	r8, r6
 800804e:	d003      	beq.n	8008058 <_dtoa_r+0x988>
 8008050:	4641      	mov	r1, r8
 8008052:	4628      	mov	r0, r5
 8008054:	f000 fa70 	bl	8008538 <_Bfree>
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	f000 fa6c 	bl	8008538 <_Bfree>
 8008060:	e698      	b.n	8007d94 <_dtoa_r+0x6c4>
 8008062:	2400      	movs	r4, #0
 8008064:	4626      	mov	r6, r4
 8008066:	e7e1      	b.n	800802c <_dtoa_r+0x95c>
 8008068:	46c2      	mov	sl, r8
 800806a:	4626      	mov	r6, r4
 800806c:	e596      	b.n	8007b9c <_dtoa_r+0x4cc>
 800806e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 80fd 	beq.w	8008274 <_dtoa_r+0xba4>
 800807a:	2f00      	cmp	r7, #0
 800807c:	dd05      	ble.n	800808a <_dtoa_r+0x9ba>
 800807e:	4631      	mov	r1, r6
 8008080:	463a      	mov	r2, r7
 8008082:	4628      	mov	r0, r5
 8008084:	f000 fc26 	bl	80088d4 <__lshift>
 8008088:	4606      	mov	r6, r0
 800808a:	f1b8 0f00 	cmp.w	r8, #0
 800808e:	d05c      	beq.n	800814a <_dtoa_r+0xa7a>
 8008090:	6871      	ldr	r1, [r6, #4]
 8008092:	4628      	mov	r0, r5
 8008094:	f000 fa10 	bl	80084b8 <_Balloc>
 8008098:	4607      	mov	r7, r0
 800809a:	b928      	cbnz	r0, 80080a8 <_dtoa_r+0x9d8>
 800809c:	4b80      	ldr	r3, [pc, #512]	; (80082a0 <_dtoa_r+0xbd0>)
 800809e:	4602      	mov	r2, r0
 80080a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080a4:	f7ff bb28 	b.w	80076f8 <_dtoa_r+0x28>
 80080a8:	6932      	ldr	r2, [r6, #16]
 80080aa:	3202      	adds	r2, #2
 80080ac:	0092      	lsls	r2, r2, #2
 80080ae:	f106 010c 	add.w	r1, r6, #12
 80080b2:	300c      	adds	r0, #12
 80080b4:	f7fe fdf8 	bl	8006ca8 <memcpy>
 80080b8:	2201      	movs	r2, #1
 80080ba:	4639      	mov	r1, r7
 80080bc:	4628      	mov	r0, r5
 80080be:	f000 fc09 	bl	80088d4 <__lshift>
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	444b      	add	r3, r9
 80080cc:	930a      	str	r3, [sp, #40]	; 0x28
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	46b0      	mov	r8, r6
 80080d6:	9309      	str	r3, [sp, #36]	; 0x24
 80080d8:	4606      	mov	r6, r0
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	4621      	mov	r1, r4
 80080de:	3b01      	subs	r3, #1
 80080e0:	4658      	mov	r0, fp
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	f7ff fa6a 	bl	80075bc <quorem>
 80080e8:	4603      	mov	r3, r0
 80080ea:	3330      	adds	r3, #48	; 0x30
 80080ec:	9006      	str	r0, [sp, #24]
 80080ee:	4641      	mov	r1, r8
 80080f0:	4658      	mov	r0, fp
 80080f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f4:	f000 fc5e 	bl	80089b4 <__mcmp>
 80080f8:	4632      	mov	r2, r6
 80080fa:	4681      	mov	r9, r0
 80080fc:	4621      	mov	r1, r4
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fc74 	bl	80089ec <__mdiff>
 8008104:	68c2      	ldr	r2, [r0, #12]
 8008106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008108:	4607      	mov	r7, r0
 800810a:	bb02      	cbnz	r2, 800814e <_dtoa_r+0xa7e>
 800810c:	4601      	mov	r1, r0
 800810e:	4658      	mov	r0, fp
 8008110:	f000 fc50 	bl	80089b4 <__mcmp>
 8008114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008116:	4602      	mov	r2, r0
 8008118:	4639      	mov	r1, r7
 800811a:	4628      	mov	r0, r5
 800811c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008120:	f000 fa0a 	bl	8008538 <_Bfree>
 8008124:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008128:	9f08      	ldr	r7, [sp, #32]
 800812a:	ea43 0102 	orr.w	r1, r3, r2
 800812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008130:	430b      	orrs	r3, r1
 8008132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008134:	d10d      	bne.n	8008152 <_dtoa_r+0xa82>
 8008136:	2b39      	cmp	r3, #57	; 0x39
 8008138:	d029      	beq.n	800818e <_dtoa_r+0xabe>
 800813a:	f1b9 0f00 	cmp.w	r9, #0
 800813e:	dd01      	ble.n	8008144 <_dtoa_r+0xa74>
 8008140:	9b06      	ldr	r3, [sp, #24]
 8008142:	3331      	adds	r3, #49	; 0x31
 8008144:	9a04      	ldr	r2, [sp, #16]
 8008146:	7013      	strb	r3, [r2, #0]
 8008148:	e776      	b.n	8008038 <_dtoa_r+0x968>
 800814a:	4630      	mov	r0, r6
 800814c:	e7b9      	b.n	80080c2 <_dtoa_r+0x9f2>
 800814e:	2201      	movs	r2, #1
 8008150:	e7e2      	b.n	8008118 <_dtoa_r+0xa48>
 8008152:	f1b9 0f00 	cmp.w	r9, #0
 8008156:	db06      	blt.n	8008166 <_dtoa_r+0xa96>
 8008158:	9922      	ldr	r1, [sp, #136]	; 0x88
 800815a:	ea41 0909 	orr.w	r9, r1, r9
 800815e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008160:	ea59 0101 	orrs.w	r1, r9, r1
 8008164:	d120      	bne.n	80081a8 <_dtoa_r+0xad8>
 8008166:	2a00      	cmp	r2, #0
 8008168:	ddec      	ble.n	8008144 <_dtoa_r+0xa74>
 800816a:	4659      	mov	r1, fp
 800816c:	2201      	movs	r2, #1
 800816e:	4628      	mov	r0, r5
 8008170:	9308      	str	r3, [sp, #32]
 8008172:	f000 fbaf 	bl	80088d4 <__lshift>
 8008176:	4621      	mov	r1, r4
 8008178:	4683      	mov	fp, r0
 800817a:	f000 fc1b 	bl	80089b4 <__mcmp>
 800817e:	2800      	cmp	r0, #0
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	dc02      	bgt.n	800818a <_dtoa_r+0xaba>
 8008184:	d1de      	bne.n	8008144 <_dtoa_r+0xa74>
 8008186:	07da      	lsls	r2, r3, #31
 8008188:	d5dc      	bpl.n	8008144 <_dtoa_r+0xa74>
 800818a:	2b39      	cmp	r3, #57	; 0x39
 800818c:	d1d8      	bne.n	8008140 <_dtoa_r+0xa70>
 800818e:	9a04      	ldr	r2, [sp, #16]
 8008190:	2339      	movs	r3, #57	; 0x39
 8008192:	7013      	strb	r3, [r2, #0]
 8008194:	463b      	mov	r3, r7
 8008196:	461f      	mov	r7, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800819e:	2a39      	cmp	r2, #57	; 0x39
 80081a0:	d050      	beq.n	8008244 <_dtoa_r+0xb74>
 80081a2:	3201      	adds	r2, #1
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	e747      	b.n	8008038 <_dtoa_r+0x968>
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	dd03      	ble.n	80081b4 <_dtoa_r+0xae4>
 80081ac:	2b39      	cmp	r3, #57	; 0x39
 80081ae:	d0ee      	beq.n	800818e <_dtoa_r+0xabe>
 80081b0:	3301      	adds	r3, #1
 80081b2:	e7c7      	b.n	8008144 <_dtoa_r+0xa74>
 80081b4:	9a08      	ldr	r2, [sp, #32]
 80081b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081bc:	428a      	cmp	r2, r1
 80081be:	d02a      	beq.n	8008216 <_dtoa_r+0xb46>
 80081c0:	4659      	mov	r1, fp
 80081c2:	2300      	movs	r3, #0
 80081c4:	220a      	movs	r2, #10
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f9d8 	bl	800857c <__multadd>
 80081cc:	45b0      	cmp	r8, r6
 80081ce:	4683      	mov	fp, r0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	f04f 020a 	mov.w	r2, #10
 80081d8:	4641      	mov	r1, r8
 80081da:	4628      	mov	r0, r5
 80081dc:	d107      	bne.n	80081ee <_dtoa_r+0xb1e>
 80081de:	f000 f9cd 	bl	800857c <__multadd>
 80081e2:	4680      	mov	r8, r0
 80081e4:	4606      	mov	r6, r0
 80081e6:	9b08      	ldr	r3, [sp, #32]
 80081e8:	3301      	adds	r3, #1
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	e775      	b.n	80080da <_dtoa_r+0xa0a>
 80081ee:	f000 f9c5 	bl	800857c <__multadd>
 80081f2:	4631      	mov	r1, r6
 80081f4:	4680      	mov	r8, r0
 80081f6:	2300      	movs	r3, #0
 80081f8:	220a      	movs	r2, #10
 80081fa:	4628      	mov	r0, r5
 80081fc:	f000 f9be 	bl	800857c <__multadd>
 8008200:	4606      	mov	r6, r0
 8008202:	e7f0      	b.n	80081e6 <_dtoa_r+0xb16>
 8008204:	f1b9 0f00 	cmp.w	r9, #0
 8008208:	9a03      	ldr	r2, [sp, #12]
 800820a:	bfcc      	ite	gt
 800820c:	464f      	movgt	r7, r9
 800820e:	2701      	movle	r7, #1
 8008210:	4417      	add	r7, r2
 8008212:	f04f 0800 	mov.w	r8, #0
 8008216:	4659      	mov	r1, fp
 8008218:	2201      	movs	r2, #1
 800821a:	4628      	mov	r0, r5
 800821c:	9308      	str	r3, [sp, #32]
 800821e:	f000 fb59 	bl	80088d4 <__lshift>
 8008222:	4621      	mov	r1, r4
 8008224:	4683      	mov	fp, r0
 8008226:	f000 fbc5 	bl	80089b4 <__mcmp>
 800822a:	2800      	cmp	r0, #0
 800822c:	dcb2      	bgt.n	8008194 <_dtoa_r+0xac4>
 800822e:	d102      	bne.n	8008236 <_dtoa_r+0xb66>
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	07db      	lsls	r3, r3, #31
 8008234:	d4ae      	bmi.n	8008194 <_dtoa_r+0xac4>
 8008236:	463b      	mov	r3, r7
 8008238:	461f      	mov	r7, r3
 800823a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800823e:	2a30      	cmp	r2, #48	; 0x30
 8008240:	d0fa      	beq.n	8008238 <_dtoa_r+0xb68>
 8008242:	e6f9      	b.n	8008038 <_dtoa_r+0x968>
 8008244:	9a03      	ldr	r2, [sp, #12]
 8008246:	429a      	cmp	r2, r3
 8008248:	d1a5      	bne.n	8008196 <_dtoa_r+0xac6>
 800824a:	f10a 0a01 	add.w	sl, sl, #1
 800824e:	2331      	movs	r3, #49	; 0x31
 8008250:	e779      	b.n	8008146 <_dtoa_r+0xa76>
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <_dtoa_r+0xbd4>)
 8008254:	f7ff baa7 	b.w	80077a6 <_dtoa_r+0xd6>
 8008258:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800825a:	2b00      	cmp	r3, #0
 800825c:	f47f aa80 	bne.w	8007760 <_dtoa_r+0x90>
 8008260:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <_dtoa_r+0xbd8>)
 8008262:	f7ff baa0 	b.w	80077a6 <_dtoa_r+0xd6>
 8008266:	f1b9 0f00 	cmp.w	r9, #0
 800826a:	dc03      	bgt.n	8008274 <_dtoa_r+0xba4>
 800826c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800826e:	2b02      	cmp	r3, #2
 8008270:	f73f aecb 	bgt.w	800800a <_dtoa_r+0x93a>
 8008274:	9f03      	ldr	r7, [sp, #12]
 8008276:	4621      	mov	r1, r4
 8008278:	4658      	mov	r0, fp
 800827a:	f7ff f99f 	bl	80075bc <quorem>
 800827e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008282:	f807 3b01 	strb.w	r3, [r7], #1
 8008286:	9a03      	ldr	r2, [sp, #12]
 8008288:	1aba      	subs	r2, r7, r2
 800828a:	4591      	cmp	r9, r2
 800828c:	ddba      	ble.n	8008204 <_dtoa_r+0xb34>
 800828e:	4659      	mov	r1, fp
 8008290:	2300      	movs	r3, #0
 8008292:	220a      	movs	r2, #10
 8008294:	4628      	mov	r0, r5
 8008296:	f000 f971 	bl	800857c <__multadd>
 800829a:	4683      	mov	fp, r0
 800829c:	e7eb      	b.n	8008276 <_dtoa_r+0xba6>
 800829e:	bf00      	nop
 80082a0:	08009803 	.word	0x08009803
 80082a4:	08009760 	.word	0x08009760
 80082a8:	08009784 	.word	0x08009784

080082ac <std>:
 80082ac:	2300      	movs	r3, #0
 80082ae:	b510      	push	{r4, lr}
 80082b0:	4604      	mov	r4, r0
 80082b2:	e9c0 3300 	strd	r3, r3, [r0]
 80082b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ba:	6083      	str	r3, [r0, #8]
 80082bc:	8181      	strh	r1, [r0, #12]
 80082be:	6643      	str	r3, [r0, #100]	; 0x64
 80082c0:	81c2      	strh	r2, [r0, #14]
 80082c2:	6183      	str	r3, [r0, #24]
 80082c4:	4619      	mov	r1, r3
 80082c6:	2208      	movs	r2, #8
 80082c8:	305c      	adds	r0, #92	; 0x5c
 80082ca:	f7fe fcfb 	bl	8006cc4 <memset>
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <std+0x38>)
 80082d0:	6263      	str	r3, [r4, #36]	; 0x24
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <std+0x3c>)
 80082d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <std+0x40>)
 80082d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <std+0x44>)
 80082dc:	6224      	str	r4, [r4, #32]
 80082de:	6323      	str	r3, [r4, #48]	; 0x30
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	08009069 	.word	0x08009069
 80082e8:	0800908b 	.word	0x0800908b
 80082ec:	080090c3 	.word	0x080090c3
 80082f0:	080090e7 	.word	0x080090e7

080082f4 <_cleanup_r>:
 80082f4:	4901      	ldr	r1, [pc, #4]	; (80082fc <_cleanup_r+0x8>)
 80082f6:	f000 b8af 	b.w	8008458 <_fwalk_reent>
 80082fa:	bf00      	nop
 80082fc:	080093f5 	.word	0x080093f5

08008300 <__sfmoreglue>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	2268      	movs	r2, #104	; 0x68
 8008304:	1e4d      	subs	r5, r1, #1
 8008306:	4355      	muls	r5, r2
 8008308:	460e      	mov	r6, r1
 800830a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800830e:	f000 fccf 	bl	8008cb0 <_malloc_r>
 8008312:	4604      	mov	r4, r0
 8008314:	b140      	cbz	r0, 8008328 <__sfmoreglue+0x28>
 8008316:	2100      	movs	r1, #0
 8008318:	e9c0 1600 	strd	r1, r6, [r0]
 800831c:	300c      	adds	r0, #12
 800831e:	60a0      	str	r0, [r4, #8]
 8008320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008324:	f7fe fcce 	bl	8006cc4 <memset>
 8008328:	4620      	mov	r0, r4
 800832a:	bd70      	pop	{r4, r5, r6, pc}

0800832c <__sfp_lock_acquire>:
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <__sfp_lock_acquire+0x8>)
 800832e:	f000 b8b8 	b.w	80084a2 <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	200009e9 	.word	0x200009e9

08008338 <__sfp_lock_release>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__sfp_lock_release+0x8>)
 800833a:	f000 b8b3 	b.w	80084a4 <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	200009e9 	.word	0x200009e9

08008344 <__sinit_lock_acquire>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sinit_lock_acquire+0x8>)
 8008346:	f000 b8ac 	b.w	80084a2 <__retarget_lock_acquire_recursive>
 800834a:	bf00      	nop
 800834c:	200009ea 	.word	0x200009ea

08008350 <__sinit_lock_release>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sinit_lock_release+0x8>)
 8008352:	f000 b8a7 	b.w	80084a4 <__retarget_lock_release_recursive>
 8008356:	bf00      	nop
 8008358:	200009ea 	.word	0x200009ea

0800835c <__sinit>:
 800835c:	b510      	push	{r4, lr}
 800835e:	4604      	mov	r4, r0
 8008360:	f7ff fff0 	bl	8008344 <__sinit_lock_acquire>
 8008364:	69a3      	ldr	r3, [r4, #24]
 8008366:	b11b      	cbz	r3, 8008370 <__sinit+0x14>
 8008368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800836c:	f7ff bff0 	b.w	8008350 <__sinit_lock_release>
 8008370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008374:	6523      	str	r3, [r4, #80]	; 0x50
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <__sinit+0x68>)
 8008378:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <__sinit+0x6c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	62a2      	str	r2, [r4, #40]	; 0x28
 800837e:	42a3      	cmp	r3, r4
 8008380:	bf04      	itt	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	61a3      	streq	r3, [r4, #24]
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f820 	bl	80083cc <__sfp>
 800838c:	6060      	str	r0, [r4, #4]
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f81c 	bl	80083cc <__sfp>
 8008394:	60a0      	str	r0, [r4, #8]
 8008396:	4620      	mov	r0, r4
 8008398:	f000 f818 	bl	80083cc <__sfp>
 800839c:	2200      	movs	r2, #0
 800839e:	60e0      	str	r0, [r4, #12]
 80083a0:	2104      	movs	r1, #4
 80083a2:	6860      	ldr	r0, [r4, #4]
 80083a4:	f7ff ff82 	bl	80082ac <std>
 80083a8:	68a0      	ldr	r0, [r4, #8]
 80083aa:	2201      	movs	r2, #1
 80083ac:	2109      	movs	r1, #9
 80083ae:	f7ff ff7d 	bl	80082ac <std>
 80083b2:	68e0      	ldr	r0, [r4, #12]
 80083b4:	2202      	movs	r2, #2
 80083b6:	2112      	movs	r1, #18
 80083b8:	f7ff ff78 	bl	80082ac <std>
 80083bc:	2301      	movs	r3, #1
 80083be:	61a3      	str	r3, [r4, #24]
 80083c0:	e7d2      	b.n	8008368 <__sinit+0xc>
 80083c2:	bf00      	nop
 80083c4:	0800974c 	.word	0x0800974c
 80083c8:	080082f5 	.word	0x080082f5

080083cc <__sfp>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	4607      	mov	r7, r0
 80083d0:	f7ff ffac 	bl	800832c <__sfp_lock_acquire>
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <__sfp+0x84>)
 80083d6:	681e      	ldr	r6, [r3, #0]
 80083d8:	69b3      	ldr	r3, [r6, #24]
 80083da:	b913      	cbnz	r3, 80083e2 <__sfp+0x16>
 80083dc:	4630      	mov	r0, r6
 80083de:	f7ff ffbd 	bl	800835c <__sinit>
 80083e2:	3648      	adds	r6, #72	; 0x48
 80083e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	d503      	bpl.n	80083f4 <__sfp+0x28>
 80083ec:	6833      	ldr	r3, [r6, #0]
 80083ee:	b30b      	cbz	r3, 8008434 <__sfp+0x68>
 80083f0:	6836      	ldr	r6, [r6, #0]
 80083f2:	e7f7      	b.n	80083e4 <__sfp+0x18>
 80083f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083f8:	b9d5      	cbnz	r5, 8008430 <__sfp+0x64>
 80083fa:	4b16      	ldr	r3, [pc, #88]	; (8008454 <__sfp+0x88>)
 80083fc:	60e3      	str	r3, [r4, #12]
 80083fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008402:	6665      	str	r5, [r4, #100]	; 0x64
 8008404:	f000 f84c 	bl	80084a0 <__retarget_lock_init_recursive>
 8008408:	f7ff ff96 	bl	8008338 <__sfp_lock_release>
 800840c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008414:	6025      	str	r5, [r4, #0]
 8008416:	61a5      	str	r5, [r4, #24]
 8008418:	2208      	movs	r2, #8
 800841a:	4629      	mov	r1, r5
 800841c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008420:	f7fe fc50 	bl	8006cc4 <memset>
 8008424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800842c:	4620      	mov	r0, r4
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	3468      	adds	r4, #104	; 0x68
 8008432:	e7d9      	b.n	80083e8 <__sfp+0x1c>
 8008434:	2104      	movs	r1, #4
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ff62 	bl	8008300 <__sfmoreglue>
 800843c:	4604      	mov	r4, r0
 800843e:	6030      	str	r0, [r6, #0]
 8008440:	2800      	cmp	r0, #0
 8008442:	d1d5      	bne.n	80083f0 <__sfp+0x24>
 8008444:	f7ff ff78 	bl	8008338 <__sfp_lock_release>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	e7ee      	b.n	800842c <__sfp+0x60>
 800844e:	bf00      	nop
 8008450:	0800974c 	.word	0x0800974c
 8008454:	ffff0001 	.word	0xffff0001

08008458 <_fwalk_reent>:
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800845c:	4606      	mov	r6, r0
 800845e:	4688      	mov	r8, r1
 8008460:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008464:	2700      	movs	r7, #0
 8008466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800846a:	f1b9 0901 	subs.w	r9, r9, #1
 800846e:	d505      	bpl.n	800847c <_fwalk_reent+0x24>
 8008470:	6824      	ldr	r4, [r4, #0]
 8008472:	2c00      	cmp	r4, #0
 8008474:	d1f7      	bne.n	8008466 <_fwalk_reent+0xe>
 8008476:	4638      	mov	r0, r7
 8008478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847c:	89ab      	ldrh	r3, [r5, #12]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d907      	bls.n	8008492 <_fwalk_reent+0x3a>
 8008482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008486:	3301      	adds	r3, #1
 8008488:	d003      	beq.n	8008492 <_fwalk_reent+0x3a>
 800848a:	4629      	mov	r1, r5
 800848c:	4630      	mov	r0, r6
 800848e:	47c0      	blx	r8
 8008490:	4307      	orrs	r7, r0
 8008492:	3568      	adds	r5, #104	; 0x68
 8008494:	e7e9      	b.n	800846a <_fwalk_reent+0x12>
	...

08008498 <_localeconv_r>:
 8008498:	4800      	ldr	r0, [pc, #0]	; (800849c <_localeconv_r+0x4>)
 800849a:	4770      	bx	lr
 800849c:	2000017c 	.word	0x2000017c

080084a0 <__retarget_lock_init_recursive>:
 80084a0:	4770      	bx	lr

080084a2 <__retarget_lock_acquire_recursive>:
 80084a2:	4770      	bx	lr

080084a4 <__retarget_lock_release_recursive>:
 80084a4:	4770      	bx	lr
	...

080084a8 <malloc>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <malloc+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f000 bbff 	b.w	8008cb0 <_malloc_r>
 80084b2:	bf00      	nop
 80084b4:	20000028 	.word	0x20000028

080084b8 <_Balloc>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084bc:	4604      	mov	r4, r0
 80084be:	460d      	mov	r5, r1
 80084c0:	b976      	cbnz	r6, 80084e0 <_Balloc+0x28>
 80084c2:	2010      	movs	r0, #16
 80084c4:	f7ff fff0 	bl	80084a8 <malloc>
 80084c8:	4602      	mov	r2, r0
 80084ca:	6260      	str	r0, [r4, #36]	; 0x24
 80084cc:	b920      	cbnz	r0, 80084d8 <_Balloc+0x20>
 80084ce:	4b18      	ldr	r3, [pc, #96]	; (8008530 <_Balloc+0x78>)
 80084d0:	4818      	ldr	r0, [pc, #96]	; (8008534 <_Balloc+0x7c>)
 80084d2:	2166      	movs	r1, #102	; 0x66
 80084d4:	f000 fede 	bl	8009294 <__assert_func>
 80084d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084dc:	6006      	str	r6, [r0, #0]
 80084de:	60c6      	str	r6, [r0, #12]
 80084e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084e2:	68f3      	ldr	r3, [r6, #12]
 80084e4:	b183      	cbz	r3, 8008508 <_Balloc+0x50>
 80084e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084ee:	b9b8      	cbnz	r0, 8008520 <_Balloc+0x68>
 80084f0:	2101      	movs	r1, #1
 80084f2:	fa01 f605 	lsl.w	r6, r1, r5
 80084f6:	1d72      	adds	r2, r6, #5
 80084f8:	0092      	lsls	r2, r2, #2
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 fb5a 	bl	8008bb4 <_calloc_r>
 8008500:	b160      	cbz	r0, 800851c <_Balloc+0x64>
 8008502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008506:	e00e      	b.n	8008526 <_Balloc+0x6e>
 8008508:	2221      	movs	r2, #33	; 0x21
 800850a:	2104      	movs	r1, #4
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fb51 	bl	8008bb4 <_calloc_r>
 8008512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008514:	60f0      	str	r0, [r6, #12]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e4      	bne.n	80084e6 <_Balloc+0x2e>
 800851c:	2000      	movs	r0, #0
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	6802      	ldr	r2, [r0, #0]
 8008522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008526:	2300      	movs	r3, #0
 8008528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800852c:	e7f7      	b.n	800851e <_Balloc+0x66>
 800852e:	bf00      	nop
 8008530:	08009791 	.word	0x08009791
 8008534:	08009874 	.word	0x08009874

08008538 <_Bfree>:
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800853c:	4605      	mov	r5, r0
 800853e:	460c      	mov	r4, r1
 8008540:	b976      	cbnz	r6, 8008560 <_Bfree+0x28>
 8008542:	2010      	movs	r0, #16
 8008544:	f7ff ffb0 	bl	80084a8 <malloc>
 8008548:	4602      	mov	r2, r0
 800854a:	6268      	str	r0, [r5, #36]	; 0x24
 800854c:	b920      	cbnz	r0, 8008558 <_Bfree+0x20>
 800854e:	4b09      	ldr	r3, [pc, #36]	; (8008574 <_Bfree+0x3c>)
 8008550:	4809      	ldr	r0, [pc, #36]	; (8008578 <_Bfree+0x40>)
 8008552:	218a      	movs	r1, #138	; 0x8a
 8008554:	f000 fe9e 	bl	8009294 <__assert_func>
 8008558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800855c:	6006      	str	r6, [r0, #0]
 800855e:	60c6      	str	r6, [r0, #12]
 8008560:	b13c      	cbz	r4, 8008572 <_Bfree+0x3a>
 8008562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008564:	6862      	ldr	r2, [r4, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800856c:	6021      	str	r1, [r4, #0]
 800856e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	08009791 	.word	0x08009791
 8008578:	08009874 	.word	0x08009874

0800857c <__multadd>:
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	690d      	ldr	r5, [r1, #16]
 8008582:	4607      	mov	r7, r0
 8008584:	460c      	mov	r4, r1
 8008586:	461e      	mov	r6, r3
 8008588:	f101 0c14 	add.w	ip, r1, #20
 800858c:	2000      	movs	r0, #0
 800858e:	f8dc 3000 	ldr.w	r3, [ip]
 8008592:	b299      	uxth	r1, r3
 8008594:	fb02 6101 	mla	r1, r2, r1, r6
 8008598:	0c1e      	lsrs	r6, r3, #16
 800859a:	0c0b      	lsrs	r3, r1, #16
 800859c:	fb02 3306 	mla	r3, r2, r6, r3
 80085a0:	b289      	uxth	r1, r1
 80085a2:	3001      	adds	r0, #1
 80085a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085a8:	4285      	cmp	r5, r0
 80085aa:	f84c 1b04 	str.w	r1, [ip], #4
 80085ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085b2:	dcec      	bgt.n	800858e <__multadd+0x12>
 80085b4:	b30e      	cbz	r6, 80085fa <__multadd+0x7e>
 80085b6:	68a3      	ldr	r3, [r4, #8]
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	dc19      	bgt.n	80085f0 <__multadd+0x74>
 80085bc:	6861      	ldr	r1, [r4, #4]
 80085be:	4638      	mov	r0, r7
 80085c0:	3101      	adds	r1, #1
 80085c2:	f7ff ff79 	bl	80084b8 <_Balloc>
 80085c6:	4680      	mov	r8, r0
 80085c8:	b928      	cbnz	r0, 80085d6 <__multadd+0x5a>
 80085ca:	4602      	mov	r2, r0
 80085cc:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <__multadd+0x84>)
 80085ce:	480d      	ldr	r0, [pc, #52]	; (8008604 <__multadd+0x88>)
 80085d0:	21b5      	movs	r1, #181	; 0xb5
 80085d2:	f000 fe5f 	bl	8009294 <__assert_func>
 80085d6:	6922      	ldr	r2, [r4, #16]
 80085d8:	3202      	adds	r2, #2
 80085da:	f104 010c 	add.w	r1, r4, #12
 80085de:	0092      	lsls	r2, r2, #2
 80085e0:	300c      	adds	r0, #12
 80085e2:	f7fe fb61 	bl	8006ca8 <memcpy>
 80085e6:	4621      	mov	r1, r4
 80085e8:	4638      	mov	r0, r7
 80085ea:	f7ff ffa5 	bl	8008538 <_Bfree>
 80085ee:	4644      	mov	r4, r8
 80085f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085f4:	3501      	adds	r5, #1
 80085f6:	615e      	str	r6, [r3, #20]
 80085f8:	6125      	str	r5, [r4, #16]
 80085fa:	4620      	mov	r0, r4
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	08009803 	.word	0x08009803
 8008604:	08009874 	.word	0x08009874

08008608 <__hi0bits>:
 8008608:	0c02      	lsrs	r2, r0, #16
 800860a:	0412      	lsls	r2, r2, #16
 800860c:	4603      	mov	r3, r0
 800860e:	b9ca      	cbnz	r2, 8008644 <__hi0bits+0x3c>
 8008610:	0403      	lsls	r3, r0, #16
 8008612:	2010      	movs	r0, #16
 8008614:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008618:	bf04      	itt	eq
 800861a:	021b      	lsleq	r3, r3, #8
 800861c:	3008      	addeq	r0, #8
 800861e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008622:	bf04      	itt	eq
 8008624:	011b      	lsleq	r3, r3, #4
 8008626:	3004      	addeq	r0, #4
 8008628:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800862c:	bf04      	itt	eq
 800862e:	009b      	lsleq	r3, r3, #2
 8008630:	3002      	addeq	r0, #2
 8008632:	2b00      	cmp	r3, #0
 8008634:	db05      	blt.n	8008642 <__hi0bits+0x3a>
 8008636:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800863a:	f100 0001 	add.w	r0, r0, #1
 800863e:	bf08      	it	eq
 8008640:	2020      	moveq	r0, #32
 8008642:	4770      	bx	lr
 8008644:	2000      	movs	r0, #0
 8008646:	e7e5      	b.n	8008614 <__hi0bits+0xc>

08008648 <__lo0bits>:
 8008648:	6803      	ldr	r3, [r0, #0]
 800864a:	4602      	mov	r2, r0
 800864c:	f013 0007 	ands.w	r0, r3, #7
 8008650:	d00b      	beq.n	800866a <__lo0bits+0x22>
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	d421      	bmi.n	800869a <__lo0bits+0x52>
 8008656:	0798      	lsls	r0, r3, #30
 8008658:	bf49      	itett	mi
 800865a:	085b      	lsrmi	r3, r3, #1
 800865c:	089b      	lsrpl	r3, r3, #2
 800865e:	2001      	movmi	r0, #1
 8008660:	6013      	strmi	r3, [r2, #0]
 8008662:	bf5c      	itt	pl
 8008664:	6013      	strpl	r3, [r2, #0]
 8008666:	2002      	movpl	r0, #2
 8008668:	4770      	bx	lr
 800866a:	b299      	uxth	r1, r3
 800866c:	b909      	cbnz	r1, 8008672 <__lo0bits+0x2a>
 800866e:	0c1b      	lsrs	r3, r3, #16
 8008670:	2010      	movs	r0, #16
 8008672:	b2d9      	uxtb	r1, r3
 8008674:	b909      	cbnz	r1, 800867a <__lo0bits+0x32>
 8008676:	3008      	adds	r0, #8
 8008678:	0a1b      	lsrs	r3, r3, #8
 800867a:	0719      	lsls	r1, r3, #28
 800867c:	bf04      	itt	eq
 800867e:	091b      	lsreq	r3, r3, #4
 8008680:	3004      	addeq	r0, #4
 8008682:	0799      	lsls	r1, r3, #30
 8008684:	bf04      	itt	eq
 8008686:	089b      	lsreq	r3, r3, #2
 8008688:	3002      	addeq	r0, #2
 800868a:	07d9      	lsls	r1, r3, #31
 800868c:	d403      	bmi.n	8008696 <__lo0bits+0x4e>
 800868e:	085b      	lsrs	r3, r3, #1
 8008690:	f100 0001 	add.w	r0, r0, #1
 8008694:	d003      	beq.n	800869e <__lo0bits+0x56>
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	4770      	bx	lr
 800869a:	2000      	movs	r0, #0
 800869c:	4770      	bx	lr
 800869e:	2020      	movs	r0, #32
 80086a0:	4770      	bx	lr
	...

080086a4 <__i2b>:
 80086a4:	b510      	push	{r4, lr}
 80086a6:	460c      	mov	r4, r1
 80086a8:	2101      	movs	r1, #1
 80086aa:	f7ff ff05 	bl	80084b8 <_Balloc>
 80086ae:	4602      	mov	r2, r0
 80086b0:	b928      	cbnz	r0, 80086be <__i2b+0x1a>
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <__i2b+0x24>)
 80086b4:	4805      	ldr	r0, [pc, #20]	; (80086cc <__i2b+0x28>)
 80086b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086ba:	f000 fdeb 	bl	8009294 <__assert_func>
 80086be:	2301      	movs	r3, #1
 80086c0:	6144      	str	r4, [r0, #20]
 80086c2:	6103      	str	r3, [r0, #16]
 80086c4:	bd10      	pop	{r4, pc}
 80086c6:	bf00      	nop
 80086c8:	08009803 	.word	0x08009803
 80086cc:	08009874 	.word	0x08009874

080086d0 <__multiply>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	4691      	mov	r9, r2
 80086d6:	690a      	ldr	r2, [r1, #16]
 80086d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086dc:	429a      	cmp	r2, r3
 80086de:	bfb8      	it	lt
 80086e0:	460b      	movlt	r3, r1
 80086e2:	460c      	mov	r4, r1
 80086e4:	bfbc      	itt	lt
 80086e6:	464c      	movlt	r4, r9
 80086e8:	4699      	movlt	r9, r3
 80086ea:	6927      	ldr	r7, [r4, #16]
 80086ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086f0:	68a3      	ldr	r3, [r4, #8]
 80086f2:	6861      	ldr	r1, [r4, #4]
 80086f4:	eb07 060a 	add.w	r6, r7, sl
 80086f8:	42b3      	cmp	r3, r6
 80086fa:	b085      	sub	sp, #20
 80086fc:	bfb8      	it	lt
 80086fe:	3101      	addlt	r1, #1
 8008700:	f7ff feda 	bl	80084b8 <_Balloc>
 8008704:	b930      	cbnz	r0, 8008714 <__multiply+0x44>
 8008706:	4602      	mov	r2, r0
 8008708:	4b43      	ldr	r3, [pc, #268]	; (8008818 <__multiply+0x148>)
 800870a:	4844      	ldr	r0, [pc, #272]	; (800881c <__multiply+0x14c>)
 800870c:	f240 115d 	movw	r1, #349	; 0x15d
 8008710:	f000 fdc0 	bl	8009294 <__assert_func>
 8008714:	f100 0514 	add.w	r5, r0, #20
 8008718:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800871c:	462b      	mov	r3, r5
 800871e:	2200      	movs	r2, #0
 8008720:	4543      	cmp	r3, r8
 8008722:	d321      	bcc.n	8008768 <__multiply+0x98>
 8008724:	f104 0314 	add.w	r3, r4, #20
 8008728:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800872c:	f109 0314 	add.w	r3, r9, #20
 8008730:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008734:	9202      	str	r2, [sp, #8]
 8008736:	1b3a      	subs	r2, r7, r4
 8008738:	3a15      	subs	r2, #21
 800873a:	f022 0203 	bic.w	r2, r2, #3
 800873e:	3204      	adds	r2, #4
 8008740:	f104 0115 	add.w	r1, r4, #21
 8008744:	428f      	cmp	r7, r1
 8008746:	bf38      	it	cc
 8008748:	2204      	movcc	r2, #4
 800874a:	9201      	str	r2, [sp, #4]
 800874c:	9a02      	ldr	r2, [sp, #8]
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	429a      	cmp	r2, r3
 8008752:	d80c      	bhi.n	800876e <__multiply+0x9e>
 8008754:	2e00      	cmp	r6, #0
 8008756:	dd03      	ble.n	8008760 <__multiply+0x90>
 8008758:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800875c:	2b00      	cmp	r3, #0
 800875e:	d059      	beq.n	8008814 <__multiply+0x144>
 8008760:	6106      	str	r6, [r0, #16]
 8008762:	b005      	add	sp, #20
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	f843 2b04 	str.w	r2, [r3], #4
 800876c:	e7d8      	b.n	8008720 <__multiply+0x50>
 800876e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008772:	f1ba 0f00 	cmp.w	sl, #0
 8008776:	d023      	beq.n	80087c0 <__multiply+0xf0>
 8008778:	f104 0e14 	add.w	lr, r4, #20
 800877c:	46a9      	mov	r9, r5
 800877e:	f04f 0c00 	mov.w	ip, #0
 8008782:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008786:	f8d9 1000 	ldr.w	r1, [r9]
 800878a:	fa1f fb82 	uxth.w	fp, r2
 800878e:	b289      	uxth	r1, r1
 8008790:	fb0a 110b 	mla	r1, sl, fp, r1
 8008794:	4461      	add	r1, ip
 8008796:	f8d9 c000 	ldr.w	ip, [r9]
 800879a:	0c12      	lsrs	r2, r2, #16
 800879c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80087a0:	fb0a c202 	mla	r2, sl, r2, ip
 80087a4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087a8:	b289      	uxth	r1, r1
 80087aa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087ae:	4577      	cmp	r7, lr
 80087b0:	f849 1b04 	str.w	r1, [r9], #4
 80087b4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087b8:	d8e3      	bhi.n	8008782 <__multiply+0xb2>
 80087ba:	9a01      	ldr	r2, [sp, #4]
 80087bc:	f845 c002 	str.w	ip, [r5, r2]
 80087c0:	9a03      	ldr	r2, [sp, #12]
 80087c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087c6:	3304      	adds	r3, #4
 80087c8:	f1b9 0f00 	cmp.w	r9, #0
 80087cc:	d020      	beq.n	8008810 <__multiply+0x140>
 80087ce:	6829      	ldr	r1, [r5, #0]
 80087d0:	f104 0c14 	add.w	ip, r4, #20
 80087d4:	46ae      	mov	lr, r5
 80087d6:	f04f 0a00 	mov.w	sl, #0
 80087da:	f8bc b000 	ldrh.w	fp, [ip]
 80087de:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087e2:	fb09 220b 	mla	r2, r9, fp, r2
 80087e6:	4492      	add	sl, r2
 80087e8:	b289      	uxth	r1, r1
 80087ea:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80087ee:	f84e 1b04 	str.w	r1, [lr], #4
 80087f2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087f6:	f8be 1000 	ldrh.w	r1, [lr]
 80087fa:	0c12      	lsrs	r2, r2, #16
 80087fc:	fb09 1102 	mla	r1, r9, r2, r1
 8008800:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008804:	4567      	cmp	r7, ip
 8008806:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800880a:	d8e6      	bhi.n	80087da <__multiply+0x10a>
 800880c:	9a01      	ldr	r2, [sp, #4]
 800880e:	50a9      	str	r1, [r5, r2]
 8008810:	3504      	adds	r5, #4
 8008812:	e79b      	b.n	800874c <__multiply+0x7c>
 8008814:	3e01      	subs	r6, #1
 8008816:	e79d      	b.n	8008754 <__multiply+0x84>
 8008818:	08009803 	.word	0x08009803
 800881c:	08009874 	.word	0x08009874

08008820 <__pow5mult>:
 8008820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008824:	4615      	mov	r5, r2
 8008826:	f012 0203 	ands.w	r2, r2, #3
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	d007      	beq.n	8008840 <__pow5mult+0x20>
 8008830:	4c25      	ldr	r4, [pc, #148]	; (80088c8 <__pow5mult+0xa8>)
 8008832:	3a01      	subs	r2, #1
 8008834:	2300      	movs	r3, #0
 8008836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800883a:	f7ff fe9f 	bl	800857c <__multadd>
 800883e:	4607      	mov	r7, r0
 8008840:	10ad      	asrs	r5, r5, #2
 8008842:	d03d      	beq.n	80088c0 <__pow5mult+0xa0>
 8008844:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008846:	b97c      	cbnz	r4, 8008868 <__pow5mult+0x48>
 8008848:	2010      	movs	r0, #16
 800884a:	f7ff fe2d 	bl	80084a8 <malloc>
 800884e:	4602      	mov	r2, r0
 8008850:	6270      	str	r0, [r6, #36]	; 0x24
 8008852:	b928      	cbnz	r0, 8008860 <__pow5mult+0x40>
 8008854:	4b1d      	ldr	r3, [pc, #116]	; (80088cc <__pow5mult+0xac>)
 8008856:	481e      	ldr	r0, [pc, #120]	; (80088d0 <__pow5mult+0xb0>)
 8008858:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800885c:	f000 fd1a 	bl	8009294 <__assert_func>
 8008860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008864:	6004      	str	r4, [r0, #0]
 8008866:	60c4      	str	r4, [r0, #12]
 8008868:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800886c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008870:	b94c      	cbnz	r4, 8008886 <__pow5mult+0x66>
 8008872:	f240 2171 	movw	r1, #625	; 0x271
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff ff14 	bl	80086a4 <__i2b>
 800887c:	2300      	movs	r3, #0
 800887e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008882:	4604      	mov	r4, r0
 8008884:	6003      	str	r3, [r0, #0]
 8008886:	f04f 0900 	mov.w	r9, #0
 800888a:	07eb      	lsls	r3, r5, #31
 800888c:	d50a      	bpl.n	80088a4 <__pow5mult+0x84>
 800888e:	4639      	mov	r1, r7
 8008890:	4622      	mov	r2, r4
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff ff1c 	bl	80086d0 <__multiply>
 8008898:	4639      	mov	r1, r7
 800889a:	4680      	mov	r8, r0
 800889c:	4630      	mov	r0, r6
 800889e:	f7ff fe4b 	bl	8008538 <_Bfree>
 80088a2:	4647      	mov	r7, r8
 80088a4:	106d      	asrs	r5, r5, #1
 80088a6:	d00b      	beq.n	80088c0 <__pow5mult+0xa0>
 80088a8:	6820      	ldr	r0, [r4, #0]
 80088aa:	b938      	cbnz	r0, 80088bc <__pow5mult+0x9c>
 80088ac:	4622      	mov	r2, r4
 80088ae:	4621      	mov	r1, r4
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7ff ff0d 	bl	80086d0 <__multiply>
 80088b6:	6020      	str	r0, [r4, #0]
 80088b8:	f8c0 9000 	str.w	r9, [r0]
 80088bc:	4604      	mov	r4, r0
 80088be:	e7e4      	b.n	800888a <__pow5mult+0x6a>
 80088c0:	4638      	mov	r0, r7
 80088c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c6:	bf00      	nop
 80088c8:	080099c0 	.word	0x080099c0
 80088cc:	08009791 	.word	0x08009791
 80088d0:	08009874 	.word	0x08009874

080088d4 <__lshift>:
 80088d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d8:	460c      	mov	r4, r1
 80088da:	6849      	ldr	r1, [r1, #4]
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	4607      	mov	r7, r0
 80088e6:	4691      	mov	r9, r2
 80088e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088ec:	f108 0601 	add.w	r6, r8, #1
 80088f0:	42b3      	cmp	r3, r6
 80088f2:	db0b      	blt.n	800890c <__lshift+0x38>
 80088f4:	4638      	mov	r0, r7
 80088f6:	f7ff fddf 	bl	80084b8 <_Balloc>
 80088fa:	4605      	mov	r5, r0
 80088fc:	b948      	cbnz	r0, 8008912 <__lshift+0x3e>
 80088fe:	4602      	mov	r2, r0
 8008900:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <__lshift+0xd8>)
 8008902:	482b      	ldr	r0, [pc, #172]	; (80089b0 <__lshift+0xdc>)
 8008904:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008908:	f000 fcc4 	bl	8009294 <__assert_func>
 800890c:	3101      	adds	r1, #1
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	e7ee      	b.n	80088f0 <__lshift+0x1c>
 8008912:	2300      	movs	r3, #0
 8008914:	f100 0114 	add.w	r1, r0, #20
 8008918:	f100 0210 	add.w	r2, r0, #16
 800891c:	4618      	mov	r0, r3
 800891e:	4553      	cmp	r3, sl
 8008920:	db37      	blt.n	8008992 <__lshift+0xbe>
 8008922:	6920      	ldr	r0, [r4, #16]
 8008924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008928:	f104 0314 	add.w	r3, r4, #20
 800892c:	f019 091f 	ands.w	r9, r9, #31
 8008930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008934:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008938:	d02f      	beq.n	800899a <__lshift+0xc6>
 800893a:	f1c9 0e20 	rsb	lr, r9, #32
 800893e:	468a      	mov	sl, r1
 8008940:	f04f 0c00 	mov.w	ip, #0
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	fa02 f209 	lsl.w	r2, r2, r9
 800894a:	ea42 020c 	orr.w	r2, r2, ip
 800894e:	f84a 2b04 	str.w	r2, [sl], #4
 8008952:	f853 2b04 	ldr.w	r2, [r3], #4
 8008956:	4298      	cmp	r0, r3
 8008958:	fa22 fc0e 	lsr.w	ip, r2, lr
 800895c:	d8f2      	bhi.n	8008944 <__lshift+0x70>
 800895e:	1b03      	subs	r3, r0, r4
 8008960:	3b15      	subs	r3, #21
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	3304      	adds	r3, #4
 8008968:	f104 0215 	add.w	r2, r4, #21
 800896c:	4290      	cmp	r0, r2
 800896e:	bf38      	it	cc
 8008970:	2304      	movcc	r3, #4
 8008972:	f841 c003 	str.w	ip, [r1, r3]
 8008976:	f1bc 0f00 	cmp.w	ip, #0
 800897a:	d001      	beq.n	8008980 <__lshift+0xac>
 800897c:	f108 0602 	add.w	r6, r8, #2
 8008980:	3e01      	subs	r6, #1
 8008982:	4638      	mov	r0, r7
 8008984:	612e      	str	r6, [r5, #16]
 8008986:	4621      	mov	r1, r4
 8008988:	f7ff fdd6 	bl	8008538 <_Bfree>
 800898c:	4628      	mov	r0, r5
 800898e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008992:	f842 0f04 	str.w	r0, [r2, #4]!
 8008996:	3301      	adds	r3, #1
 8008998:	e7c1      	b.n	800891e <__lshift+0x4a>
 800899a:	3904      	subs	r1, #4
 800899c:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80089a4:	4298      	cmp	r0, r3
 80089a6:	d8f9      	bhi.n	800899c <__lshift+0xc8>
 80089a8:	e7ea      	b.n	8008980 <__lshift+0xac>
 80089aa:	bf00      	nop
 80089ac:	08009803 	.word	0x08009803
 80089b0:	08009874 	.word	0x08009874

080089b4 <__mcmp>:
 80089b4:	690a      	ldr	r2, [r1, #16]
 80089b6:	4603      	mov	r3, r0
 80089b8:	6900      	ldr	r0, [r0, #16]
 80089ba:	1a80      	subs	r0, r0, r2
 80089bc:	b530      	push	{r4, r5, lr}
 80089be:	d10d      	bne.n	80089dc <__mcmp+0x28>
 80089c0:	3314      	adds	r3, #20
 80089c2:	3114      	adds	r1, #20
 80089c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089d4:	4295      	cmp	r5, r2
 80089d6:	d002      	beq.n	80089de <__mcmp+0x2a>
 80089d8:	d304      	bcc.n	80089e4 <__mcmp+0x30>
 80089da:	2001      	movs	r0, #1
 80089dc:	bd30      	pop	{r4, r5, pc}
 80089de:	42a3      	cmp	r3, r4
 80089e0:	d3f4      	bcc.n	80089cc <__mcmp+0x18>
 80089e2:	e7fb      	b.n	80089dc <__mcmp+0x28>
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e7f8      	b.n	80089dc <__mcmp+0x28>
	...

080089ec <__mdiff>:
 80089ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	460d      	mov	r5, r1
 80089f2:	4607      	mov	r7, r0
 80089f4:	4611      	mov	r1, r2
 80089f6:	4628      	mov	r0, r5
 80089f8:	4614      	mov	r4, r2
 80089fa:	f7ff ffdb 	bl	80089b4 <__mcmp>
 80089fe:	1e06      	subs	r6, r0, #0
 8008a00:	d111      	bne.n	8008a26 <__mdiff+0x3a>
 8008a02:	4631      	mov	r1, r6
 8008a04:	4638      	mov	r0, r7
 8008a06:	f7ff fd57 	bl	80084b8 <_Balloc>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	b928      	cbnz	r0, 8008a1a <__mdiff+0x2e>
 8008a0e:	4b39      	ldr	r3, [pc, #228]	; (8008af4 <__mdiff+0x108>)
 8008a10:	f240 2132 	movw	r1, #562	; 0x232
 8008a14:	4838      	ldr	r0, [pc, #224]	; (8008af8 <__mdiff+0x10c>)
 8008a16:	f000 fc3d 	bl	8009294 <__assert_func>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a20:	4610      	mov	r0, r2
 8008a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a26:	bfa4      	itt	ge
 8008a28:	4623      	movge	r3, r4
 8008a2a:	462c      	movge	r4, r5
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	6861      	ldr	r1, [r4, #4]
 8008a30:	bfa6      	itte	ge
 8008a32:	461d      	movge	r5, r3
 8008a34:	2600      	movge	r6, #0
 8008a36:	2601      	movlt	r6, #1
 8008a38:	f7ff fd3e 	bl	80084b8 <_Balloc>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	b918      	cbnz	r0, 8008a48 <__mdiff+0x5c>
 8008a40:	4b2c      	ldr	r3, [pc, #176]	; (8008af4 <__mdiff+0x108>)
 8008a42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a46:	e7e5      	b.n	8008a14 <__mdiff+0x28>
 8008a48:	6927      	ldr	r7, [r4, #16]
 8008a4a:	60c6      	str	r6, [r0, #12]
 8008a4c:	692e      	ldr	r6, [r5, #16]
 8008a4e:	f104 0014 	add.w	r0, r4, #20
 8008a52:	f105 0914 	add.w	r9, r5, #20
 8008a56:	f102 0e14 	add.w	lr, r2, #20
 8008a5a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8008a5e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a62:	3410      	adds	r4, #16
 8008a64:	46f2      	mov	sl, lr
 8008a66:	2100      	movs	r1, #0
 8008a68:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a6c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008a70:	fa1f f883 	uxth.w	r8, r3
 8008a74:	fa11 f18b 	uxtah	r1, r1, fp
 8008a78:	0c1b      	lsrs	r3, r3, #16
 8008a7a:	eba1 0808 	sub.w	r8, r1, r8
 8008a7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a86:	fa1f f888 	uxth.w	r8, r8
 8008a8a:	1419      	asrs	r1, r3, #16
 8008a8c:	454e      	cmp	r6, r9
 8008a8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a92:	f84a 3b04 	str.w	r3, [sl], #4
 8008a96:	d8e7      	bhi.n	8008a68 <__mdiff+0x7c>
 8008a98:	1b73      	subs	r3, r6, r5
 8008a9a:	3b15      	subs	r3, #21
 8008a9c:	f023 0303 	bic.w	r3, r3, #3
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	3515      	adds	r5, #21
 8008aa4:	42ae      	cmp	r6, r5
 8008aa6:	bf38      	it	cc
 8008aa8:	2304      	movcc	r3, #4
 8008aaa:	4418      	add	r0, r3
 8008aac:	4473      	add	r3, lr
 8008aae:	469e      	mov	lr, r3
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	4566      	cmp	r6, ip
 8008ab4:	d30e      	bcc.n	8008ad4 <__mdiff+0xe8>
 8008ab6:	f10c 0103 	add.w	r1, ip, #3
 8008aba:	1a09      	subs	r1, r1, r0
 8008abc:	f021 0103 	bic.w	r1, r1, #3
 8008ac0:	3803      	subs	r0, #3
 8008ac2:	4584      	cmp	ip, r0
 8008ac4:	bf38      	it	cc
 8008ac6:	2100      	movcc	r1, #0
 8008ac8:	4419      	add	r1, r3
 8008aca:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ace:	b17b      	cbz	r3, 8008af0 <__mdiff+0x104>
 8008ad0:	6117      	str	r7, [r2, #16]
 8008ad2:	e7a5      	b.n	8008a20 <__mdiff+0x34>
 8008ad4:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ad8:	fa11 f488 	uxtah	r4, r1, r8
 8008adc:	1425      	asrs	r5, r4, #16
 8008ade:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8008ae2:	b2a4      	uxth	r4, r4
 8008ae4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008ae8:	f84e 4b04 	str.w	r4, [lr], #4
 8008aec:	1429      	asrs	r1, r5, #16
 8008aee:	e7e0      	b.n	8008ab2 <__mdiff+0xc6>
 8008af0:	3f01      	subs	r7, #1
 8008af2:	e7ea      	b.n	8008aca <__mdiff+0xde>
 8008af4:	08009803 	.word	0x08009803
 8008af8:	08009874 	.word	0x08009874

08008afc <__d2b>:
 8008afc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b00:	2101      	movs	r1, #1
 8008b02:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008b06:	4690      	mov	r8, r2
 8008b08:	461d      	mov	r5, r3
 8008b0a:	f7ff fcd5 	bl	80084b8 <_Balloc>
 8008b0e:	4604      	mov	r4, r0
 8008b10:	b930      	cbnz	r0, 8008b20 <__d2b+0x24>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <__d2b+0xb0>)
 8008b16:	4826      	ldr	r0, [pc, #152]	; (8008bb0 <__d2b+0xb4>)
 8008b18:	f240 310a 	movw	r1, #778	; 0x30a
 8008b1c:	f000 fbba 	bl	8009294 <__assert_func>
 8008b20:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008b24:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008b28:	bb2d      	cbnz	r5, 8008b76 <__d2b+0x7a>
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b30:	d026      	beq.n	8008b80 <__d2b+0x84>
 8008b32:	4668      	mov	r0, sp
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	f7ff fd87 	bl	8008648 <__lo0bits>
 8008b3a:	9900      	ldr	r1, [sp, #0]
 8008b3c:	b1f0      	cbz	r0, 8008b7c <__d2b+0x80>
 8008b3e:	9a01      	ldr	r2, [sp, #4]
 8008b40:	f1c0 0320 	rsb	r3, r0, #32
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	40c2      	lsrs	r2, r0
 8008b4c:	6163      	str	r3, [r4, #20]
 8008b4e:	9201      	str	r2, [sp, #4]
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	61a3      	str	r3, [r4, #24]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bf14      	ite	ne
 8008b58:	2102      	movne	r1, #2
 8008b5a:	2101      	moveq	r1, #1
 8008b5c:	6121      	str	r1, [r4, #16]
 8008b5e:	b1c5      	cbz	r5, 8008b92 <__d2b+0x96>
 8008b60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b64:	4405      	add	r5, r0
 8008b66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b6a:	603d      	str	r5, [r7, #0]
 8008b6c:	6030      	str	r0, [r6, #0]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	b002      	add	sp, #8
 8008b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b7a:	e7d6      	b.n	8008b2a <__d2b+0x2e>
 8008b7c:	6161      	str	r1, [r4, #20]
 8008b7e:	e7e7      	b.n	8008b50 <__d2b+0x54>
 8008b80:	a801      	add	r0, sp, #4
 8008b82:	f7ff fd61 	bl	8008648 <__lo0bits>
 8008b86:	9b01      	ldr	r3, [sp, #4]
 8008b88:	6163      	str	r3, [r4, #20]
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	6121      	str	r1, [r4, #16]
 8008b8e:	3020      	adds	r0, #32
 8008b90:	e7e5      	b.n	8008b5e <__d2b+0x62>
 8008b92:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008b96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b9a:	6038      	str	r0, [r7, #0]
 8008b9c:	6918      	ldr	r0, [r3, #16]
 8008b9e:	f7ff fd33 	bl	8008608 <__hi0bits>
 8008ba2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008ba6:	6031      	str	r1, [r6, #0]
 8008ba8:	e7e1      	b.n	8008b6e <__d2b+0x72>
 8008baa:	bf00      	nop
 8008bac:	08009803 	.word	0x08009803
 8008bb0:	08009874 	.word	0x08009874

08008bb4 <_calloc_r>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	fba1 5402 	umull	r5, r4, r1, r2
 8008bba:	b934      	cbnz	r4, 8008bca <_calloc_r+0x16>
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f000 f877 	bl	8008cb0 <_malloc_r>
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	b928      	cbnz	r0, 8008bd2 <_calloc_r+0x1e>
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	bd70      	pop	{r4, r5, r6, pc}
 8008bca:	220c      	movs	r2, #12
 8008bcc:	6002      	str	r2, [r0, #0]
 8008bce:	2600      	movs	r6, #0
 8008bd0:	e7f9      	b.n	8008bc6 <_calloc_r+0x12>
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f7fe f875 	bl	8006cc4 <memset>
 8008bda:	e7f4      	b.n	8008bc6 <_calloc_r+0x12>

08008bdc <_free_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4605      	mov	r5, r0
 8008be0:	2900      	cmp	r1, #0
 8008be2:	d041      	beq.n	8008c68 <_free_r+0x8c>
 8008be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008be8:	1f0c      	subs	r4, r1, #4
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	bfb8      	it	lt
 8008bee:	18e4      	addlt	r4, r4, r3
 8008bf0:	f000 fcd8 	bl	80095a4 <__malloc_lock>
 8008bf4:	4a1d      	ldr	r2, [pc, #116]	; (8008c6c <_free_r+0x90>)
 8008bf6:	6813      	ldr	r3, [r2, #0]
 8008bf8:	b933      	cbnz	r3, 8008c08 <_free_r+0x2c>
 8008bfa:	6063      	str	r3, [r4, #4]
 8008bfc:	6014      	str	r4, [r2, #0]
 8008bfe:	4628      	mov	r0, r5
 8008c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c04:	f000 bcd4 	b.w	80095b0 <__malloc_unlock>
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	d908      	bls.n	8008c1e <_free_r+0x42>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	1821      	adds	r1, r4, r0
 8008c10:	428b      	cmp	r3, r1
 8008c12:	bf01      	itttt	eq
 8008c14:	6819      	ldreq	r1, [r3, #0]
 8008c16:	685b      	ldreq	r3, [r3, #4]
 8008c18:	1809      	addeq	r1, r1, r0
 8008c1a:	6021      	streq	r1, [r4, #0]
 8008c1c:	e7ed      	b.n	8008bfa <_free_r+0x1e>
 8008c1e:	461a      	mov	r2, r3
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	b10b      	cbz	r3, 8008c28 <_free_r+0x4c>
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	d9fa      	bls.n	8008c1e <_free_r+0x42>
 8008c28:	6811      	ldr	r1, [r2, #0]
 8008c2a:	1850      	adds	r0, r2, r1
 8008c2c:	42a0      	cmp	r0, r4
 8008c2e:	d10b      	bne.n	8008c48 <_free_r+0x6c>
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	4401      	add	r1, r0
 8008c34:	1850      	adds	r0, r2, r1
 8008c36:	4283      	cmp	r3, r0
 8008c38:	6011      	str	r1, [r2, #0]
 8008c3a:	d1e0      	bne.n	8008bfe <_free_r+0x22>
 8008c3c:	6818      	ldr	r0, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	6053      	str	r3, [r2, #4]
 8008c42:	4401      	add	r1, r0
 8008c44:	6011      	str	r1, [r2, #0]
 8008c46:	e7da      	b.n	8008bfe <_free_r+0x22>
 8008c48:	d902      	bls.n	8008c50 <_free_r+0x74>
 8008c4a:	230c      	movs	r3, #12
 8008c4c:	602b      	str	r3, [r5, #0]
 8008c4e:	e7d6      	b.n	8008bfe <_free_r+0x22>
 8008c50:	6820      	ldr	r0, [r4, #0]
 8008c52:	1821      	adds	r1, r4, r0
 8008c54:	428b      	cmp	r3, r1
 8008c56:	bf04      	itt	eq
 8008c58:	6819      	ldreq	r1, [r3, #0]
 8008c5a:	685b      	ldreq	r3, [r3, #4]
 8008c5c:	6063      	str	r3, [r4, #4]
 8008c5e:	bf04      	itt	eq
 8008c60:	1809      	addeq	r1, r1, r0
 8008c62:	6021      	streq	r1, [r4, #0]
 8008c64:	6054      	str	r4, [r2, #4]
 8008c66:	e7ca      	b.n	8008bfe <_free_r+0x22>
 8008c68:	bd38      	pop	{r3, r4, r5, pc}
 8008c6a:	bf00      	nop
 8008c6c:	200009ec 	.word	0x200009ec

08008c70 <sbrk_aligned>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4e0e      	ldr	r6, [pc, #56]	; (8008cac <sbrk_aligned+0x3c>)
 8008c74:	460c      	mov	r4, r1
 8008c76:	6831      	ldr	r1, [r6, #0]
 8008c78:	4605      	mov	r5, r0
 8008c7a:	b911      	cbnz	r1, 8008c82 <sbrk_aligned+0x12>
 8008c7c:	f000 f9e4 	bl	8009048 <_sbrk_r>
 8008c80:	6030      	str	r0, [r6, #0]
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	f000 f9df 	bl	8009048 <_sbrk_r>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d00a      	beq.n	8008ca4 <sbrk_aligned+0x34>
 8008c8e:	1cc4      	adds	r4, r0, #3
 8008c90:	f024 0403 	bic.w	r4, r4, #3
 8008c94:	42a0      	cmp	r0, r4
 8008c96:	d007      	beq.n	8008ca8 <sbrk_aligned+0x38>
 8008c98:	1a21      	subs	r1, r4, r0
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f000 f9d4 	bl	8009048 <_sbrk_r>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d101      	bne.n	8008ca8 <sbrk_aligned+0x38>
 8008ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ca8:	4620      	mov	r0, r4
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	200009f0 	.word	0x200009f0

08008cb0 <_malloc_r>:
 8008cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb4:	1ccd      	adds	r5, r1, #3
 8008cb6:	f025 0503 	bic.w	r5, r5, #3
 8008cba:	3508      	adds	r5, #8
 8008cbc:	2d0c      	cmp	r5, #12
 8008cbe:	bf38      	it	cc
 8008cc0:	250c      	movcc	r5, #12
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	db01      	blt.n	8008ccc <_malloc_r+0x1c>
 8008cc8:	42a9      	cmp	r1, r5
 8008cca:	d905      	bls.n	8008cd8 <_malloc_r+0x28>
 8008ccc:	230c      	movs	r3, #12
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	2600      	movs	r6, #0
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	4e2e      	ldr	r6, [pc, #184]	; (8008d94 <_malloc_r+0xe4>)
 8008cda:	f000 fc63 	bl	80095a4 <__malloc_lock>
 8008cde:	6833      	ldr	r3, [r6, #0]
 8008ce0:	461c      	mov	r4, r3
 8008ce2:	bb34      	cbnz	r4, 8008d32 <_malloc_r+0x82>
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	f7ff ffc2 	bl	8008c70 <sbrk_aligned>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	4604      	mov	r4, r0
 8008cf0:	d14d      	bne.n	8008d8e <_malloc_r+0xde>
 8008cf2:	6834      	ldr	r4, [r6, #0]
 8008cf4:	4626      	mov	r6, r4
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	d140      	bne.n	8008d7c <_malloc_r+0xcc>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4638      	mov	r0, r7
 8008d00:	eb04 0803 	add.w	r8, r4, r3
 8008d04:	f000 f9a0 	bl	8009048 <_sbrk_r>
 8008d08:	4580      	cmp	r8, r0
 8008d0a:	d13a      	bne.n	8008d82 <_malloc_r+0xd2>
 8008d0c:	6821      	ldr	r1, [r4, #0]
 8008d0e:	3503      	adds	r5, #3
 8008d10:	1a6d      	subs	r5, r5, r1
 8008d12:	f025 0503 	bic.w	r5, r5, #3
 8008d16:	3508      	adds	r5, #8
 8008d18:	2d0c      	cmp	r5, #12
 8008d1a:	bf38      	it	cc
 8008d1c:	250c      	movcc	r5, #12
 8008d1e:	4629      	mov	r1, r5
 8008d20:	4638      	mov	r0, r7
 8008d22:	f7ff ffa5 	bl	8008c70 <sbrk_aligned>
 8008d26:	3001      	adds	r0, #1
 8008d28:	d02b      	beq.n	8008d82 <_malloc_r+0xd2>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	442b      	add	r3, r5
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	e00e      	b.n	8008d50 <_malloc_r+0xa0>
 8008d32:	6822      	ldr	r2, [r4, #0]
 8008d34:	1b52      	subs	r2, r2, r5
 8008d36:	d41e      	bmi.n	8008d76 <_malloc_r+0xc6>
 8008d38:	2a0b      	cmp	r2, #11
 8008d3a:	d916      	bls.n	8008d6a <_malloc_r+0xba>
 8008d3c:	1961      	adds	r1, r4, r5
 8008d3e:	42a3      	cmp	r3, r4
 8008d40:	6025      	str	r5, [r4, #0]
 8008d42:	bf18      	it	ne
 8008d44:	6059      	strne	r1, [r3, #4]
 8008d46:	6863      	ldr	r3, [r4, #4]
 8008d48:	bf08      	it	eq
 8008d4a:	6031      	streq	r1, [r6, #0]
 8008d4c:	5162      	str	r2, [r4, r5]
 8008d4e:	604b      	str	r3, [r1, #4]
 8008d50:	4638      	mov	r0, r7
 8008d52:	f104 060b 	add.w	r6, r4, #11
 8008d56:	f000 fc2b 	bl	80095b0 <__malloc_unlock>
 8008d5a:	f026 0607 	bic.w	r6, r6, #7
 8008d5e:	1d23      	adds	r3, r4, #4
 8008d60:	1af2      	subs	r2, r6, r3
 8008d62:	d0b6      	beq.n	8008cd2 <_malloc_r+0x22>
 8008d64:	1b9b      	subs	r3, r3, r6
 8008d66:	50a3      	str	r3, [r4, r2]
 8008d68:	e7b3      	b.n	8008cd2 <_malloc_r+0x22>
 8008d6a:	6862      	ldr	r2, [r4, #4]
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	bf0c      	ite	eq
 8008d70:	6032      	streq	r2, [r6, #0]
 8008d72:	605a      	strne	r2, [r3, #4]
 8008d74:	e7ec      	b.n	8008d50 <_malloc_r+0xa0>
 8008d76:	4623      	mov	r3, r4
 8008d78:	6864      	ldr	r4, [r4, #4]
 8008d7a:	e7b2      	b.n	8008ce2 <_malloc_r+0x32>
 8008d7c:	4634      	mov	r4, r6
 8008d7e:	6876      	ldr	r6, [r6, #4]
 8008d80:	e7b9      	b.n	8008cf6 <_malloc_r+0x46>
 8008d82:	230c      	movs	r3, #12
 8008d84:	603b      	str	r3, [r7, #0]
 8008d86:	4638      	mov	r0, r7
 8008d88:	f000 fc12 	bl	80095b0 <__malloc_unlock>
 8008d8c:	e7a1      	b.n	8008cd2 <_malloc_r+0x22>
 8008d8e:	6025      	str	r5, [r4, #0]
 8008d90:	e7de      	b.n	8008d50 <_malloc_r+0xa0>
 8008d92:	bf00      	nop
 8008d94:	200009ec 	.word	0x200009ec

08008d98 <__sfputc_r>:
 8008d98:	6893      	ldr	r3, [r2, #8]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	b410      	push	{r4}
 8008da0:	6093      	str	r3, [r2, #8]
 8008da2:	da07      	bge.n	8008db4 <__sfputc_r+0x1c>
 8008da4:	6994      	ldr	r4, [r2, #24]
 8008da6:	42a3      	cmp	r3, r4
 8008da8:	db01      	blt.n	8008dae <__sfputc_r+0x16>
 8008daa:	290a      	cmp	r1, #10
 8008dac:	d102      	bne.n	8008db4 <__sfputc_r+0x1c>
 8008dae:	bc10      	pop	{r4}
 8008db0:	f000 b99e 	b.w	80090f0 <__swbuf_r>
 8008db4:	6813      	ldr	r3, [r2, #0]
 8008db6:	1c58      	adds	r0, r3, #1
 8008db8:	6010      	str	r0, [r2, #0]
 8008dba:	7019      	strb	r1, [r3, #0]
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	bc10      	pop	{r4}
 8008dc0:	4770      	bx	lr

08008dc2 <__sfputs_r>:
 8008dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	460f      	mov	r7, r1
 8008dc8:	4614      	mov	r4, r2
 8008dca:	18d5      	adds	r5, r2, r3
 8008dcc:	42ac      	cmp	r4, r5
 8008dce:	d101      	bne.n	8008dd4 <__sfputs_r+0x12>
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e007      	b.n	8008de4 <__sfputs_r+0x22>
 8008dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd8:	463a      	mov	r2, r7
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff ffdc 	bl	8008d98 <__sfputc_r>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d1f3      	bne.n	8008dcc <__sfputs_r+0xa>
 8008de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008de8 <_vfiprintf_r>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	460d      	mov	r5, r1
 8008dee:	b09d      	sub	sp, #116	; 0x74
 8008df0:	4614      	mov	r4, r2
 8008df2:	4698      	mov	r8, r3
 8008df4:	4606      	mov	r6, r0
 8008df6:	b118      	cbz	r0, 8008e00 <_vfiprintf_r+0x18>
 8008df8:	6983      	ldr	r3, [r0, #24]
 8008dfa:	b90b      	cbnz	r3, 8008e00 <_vfiprintf_r+0x18>
 8008dfc:	f7ff faae 	bl	800835c <__sinit>
 8008e00:	4b89      	ldr	r3, [pc, #548]	; (8009028 <_vfiprintf_r+0x240>)
 8008e02:	429d      	cmp	r5, r3
 8008e04:	d11b      	bne.n	8008e3e <_vfiprintf_r+0x56>
 8008e06:	6875      	ldr	r5, [r6, #4]
 8008e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e0a:	07d9      	lsls	r1, r3, #31
 8008e0c:	d405      	bmi.n	8008e1a <_vfiprintf_r+0x32>
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	059a      	lsls	r2, r3, #22
 8008e12:	d402      	bmi.n	8008e1a <_vfiprintf_r+0x32>
 8008e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e16:	f7ff fb44 	bl	80084a2 <__retarget_lock_acquire_recursive>
 8008e1a:	89ab      	ldrh	r3, [r5, #12]
 8008e1c:	071b      	lsls	r3, r3, #28
 8008e1e:	d501      	bpl.n	8008e24 <_vfiprintf_r+0x3c>
 8008e20:	692b      	ldr	r3, [r5, #16]
 8008e22:	b9eb      	cbnz	r3, 8008e60 <_vfiprintf_r+0x78>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4630      	mov	r0, r6
 8008e28:	f000 f9c6 	bl	80091b8 <__swsetup_r>
 8008e2c:	b1c0      	cbz	r0, 8008e60 <_vfiprintf_r+0x78>
 8008e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e30:	07dc      	lsls	r4, r3, #31
 8008e32:	d50e      	bpl.n	8008e52 <_vfiprintf_r+0x6a>
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	b01d      	add	sp, #116	; 0x74
 8008e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3e:	4b7b      	ldr	r3, [pc, #492]	; (800902c <_vfiprintf_r+0x244>)
 8008e40:	429d      	cmp	r5, r3
 8008e42:	d101      	bne.n	8008e48 <_vfiprintf_r+0x60>
 8008e44:	68b5      	ldr	r5, [r6, #8]
 8008e46:	e7df      	b.n	8008e08 <_vfiprintf_r+0x20>
 8008e48:	4b79      	ldr	r3, [pc, #484]	; (8009030 <_vfiprintf_r+0x248>)
 8008e4a:	429d      	cmp	r5, r3
 8008e4c:	bf08      	it	eq
 8008e4e:	68f5      	ldreq	r5, [r6, #12]
 8008e50:	e7da      	b.n	8008e08 <_vfiprintf_r+0x20>
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	0598      	lsls	r0, r3, #22
 8008e56:	d4ed      	bmi.n	8008e34 <_vfiprintf_r+0x4c>
 8008e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e5a:	f7ff fb23 	bl	80084a4 <__retarget_lock_release_recursive>
 8008e5e:	e7e9      	b.n	8008e34 <_vfiprintf_r+0x4c>
 8008e60:	2300      	movs	r3, #0
 8008e62:	9309      	str	r3, [sp, #36]	; 0x24
 8008e64:	2320      	movs	r3, #32
 8008e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e6e:	2330      	movs	r3, #48	; 0x30
 8008e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009034 <_vfiprintf_r+0x24c>
 8008e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e78:	f04f 0901 	mov.w	r9, #1
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	469a      	mov	sl, r3
 8008e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e84:	b10a      	cbz	r2, 8008e8a <_vfiprintf_r+0xa2>
 8008e86:	2a25      	cmp	r2, #37	; 0x25
 8008e88:	d1f9      	bne.n	8008e7e <_vfiprintf_r+0x96>
 8008e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e8e:	d00b      	beq.n	8008ea8 <_vfiprintf_r+0xc0>
 8008e90:	465b      	mov	r3, fp
 8008e92:	4622      	mov	r2, r4
 8008e94:	4629      	mov	r1, r5
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7ff ff93 	bl	8008dc2 <__sfputs_r>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f000 80aa 	beq.w	8008ff6 <_vfiprintf_r+0x20e>
 8008ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ea4:	445a      	add	r2, fp
 8008ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80a2 	beq.w	8008ff6 <_vfiprintf_r+0x20e>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ebc:	f10a 0a01 	add.w	sl, sl, #1
 8008ec0:	9304      	str	r3, [sp, #16]
 8008ec2:	9307      	str	r3, [sp, #28]
 8008ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eca:	4654      	mov	r4, sl
 8008ecc:	2205      	movs	r2, #5
 8008ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed2:	4858      	ldr	r0, [pc, #352]	; (8009034 <_vfiprintf_r+0x24c>)
 8008ed4:	f7f7 f984 	bl	80001e0 <memchr>
 8008ed8:	9a04      	ldr	r2, [sp, #16]
 8008eda:	b9d8      	cbnz	r0, 8008f14 <_vfiprintf_r+0x12c>
 8008edc:	06d1      	lsls	r1, r2, #27
 8008ede:	bf44      	itt	mi
 8008ee0:	2320      	movmi	r3, #32
 8008ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ee6:	0713      	lsls	r3, r2, #28
 8008ee8:	bf44      	itt	mi
 8008eea:	232b      	movmi	r3, #43	; 0x2b
 8008eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ef6:	d015      	beq.n	8008f24 <_vfiprintf_r+0x13c>
 8008ef8:	9a07      	ldr	r2, [sp, #28]
 8008efa:	4654      	mov	r4, sl
 8008efc:	2000      	movs	r0, #0
 8008efe:	f04f 0c0a 	mov.w	ip, #10
 8008f02:	4621      	mov	r1, r4
 8008f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f08:	3b30      	subs	r3, #48	; 0x30
 8008f0a:	2b09      	cmp	r3, #9
 8008f0c:	d94e      	bls.n	8008fac <_vfiprintf_r+0x1c4>
 8008f0e:	b1b0      	cbz	r0, 8008f3e <_vfiprintf_r+0x156>
 8008f10:	9207      	str	r2, [sp, #28]
 8008f12:	e014      	b.n	8008f3e <_vfiprintf_r+0x156>
 8008f14:	eba0 0308 	sub.w	r3, r0, r8
 8008f18:	fa09 f303 	lsl.w	r3, r9, r3
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	46a2      	mov	sl, r4
 8008f22:	e7d2      	b.n	8008eca <_vfiprintf_r+0xe2>
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	1d19      	adds	r1, r3, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	9103      	str	r1, [sp, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfbb      	ittet	lt
 8008f30:	425b      	neglt	r3, r3
 8008f32:	f042 0202 	orrlt.w	r2, r2, #2
 8008f36:	9307      	strge	r3, [sp, #28]
 8008f38:	9307      	strlt	r3, [sp, #28]
 8008f3a:	bfb8      	it	lt
 8008f3c:	9204      	strlt	r2, [sp, #16]
 8008f3e:	7823      	ldrb	r3, [r4, #0]
 8008f40:	2b2e      	cmp	r3, #46	; 0x2e
 8008f42:	d10c      	bne.n	8008f5e <_vfiprintf_r+0x176>
 8008f44:	7863      	ldrb	r3, [r4, #1]
 8008f46:	2b2a      	cmp	r3, #42	; 0x2a
 8008f48:	d135      	bne.n	8008fb6 <_vfiprintf_r+0x1ce>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	1d1a      	adds	r2, r3, #4
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	9203      	str	r2, [sp, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfb8      	it	lt
 8008f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f5a:	3402      	adds	r4, #2
 8008f5c:	9305      	str	r3, [sp, #20]
 8008f5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009038 <_vfiprintf_r+0x250>
 8008f62:	7821      	ldrb	r1, [r4, #0]
 8008f64:	2203      	movs	r2, #3
 8008f66:	4650      	mov	r0, sl
 8008f68:	f7f7 f93a 	bl	80001e0 <memchr>
 8008f6c:	b140      	cbz	r0, 8008f80 <_vfiprintf_r+0x198>
 8008f6e:	2340      	movs	r3, #64	; 0x40
 8008f70:	eba0 000a 	sub.w	r0, r0, sl
 8008f74:	fa03 f000 	lsl.w	r0, r3, r0
 8008f78:	9b04      	ldr	r3, [sp, #16]
 8008f7a:	4303      	orrs	r3, r0
 8008f7c:	3401      	adds	r4, #1
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f84:	482d      	ldr	r0, [pc, #180]	; (800903c <_vfiprintf_r+0x254>)
 8008f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8a:	2206      	movs	r2, #6
 8008f8c:	f7f7 f928 	bl	80001e0 <memchr>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d03f      	beq.n	8009014 <_vfiprintf_r+0x22c>
 8008f94:	4b2a      	ldr	r3, [pc, #168]	; (8009040 <_vfiprintf_r+0x258>)
 8008f96:	bb1b      	cbnz	r3, 8008fe0 <_vfiprintf_r+0x1f8>
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	3307      	adds	r3, #7
 8008f9c:	f023 0307 	bic.w	r3, r3, #7
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	9303      	str	r3, [sp, #12]
 8008fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa6:	443b      	add	r3, r7
 8008fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8008faa:	e767      	b.n	8008e7c <_vfiprintf_r+0x94>
 8008fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	e7a5      	b.n	8008f02 <_vfiprintf_r+0x11a>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f04f 0c0a 	mov.w	ip, #10
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fc8:	3a30      	subs	r2, #48	; 0x30
 8008fca:	2a09      	cmp	r2, #9
 8008fcc:	d903      	bls.n	8008fd6 <_vfiprintf_r+0x1ee>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0c5      	beq.n	8008f5e <_vfiprintf_r+0x176>
 8008fd2:	9105      	str	r1, [sp, #20]
 8008fd4:	e7c3      	b.n	8008f5e <_vfiprintf_r+0x176>
 8008fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fda:	4604      	mov	r4, r0
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e7f0      	b.n	8008fc2 <_vfiprintf_r+0x1da>
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	4b17      	ldr	r3, [pc, #92]	; (8009044 <_vfiprintf_r+0x25c>)
 8008fe8:	a904      	add	r1, sp, #16
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7fd ff10 	bl	8006e10 <_printf_float>
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	1c78      	adds	r0, r7, #1
 8008ff4:	d1d6      	bne.n	8008fa4 <_vfiprintf_r+0x1bc>
 8008ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff8:	07d9      	lsls	r1, r3, #31
 8008ffa:	d405      	bmi.n	8009008 <_vfiprintf_r+0x220>
 8008ffc:	89ab      	ldrh	r3, [r5, #12]
 8008ffe:	059a      	lsls	r2, r3, #22
 8009000:	d402      	bmi.n	8009008 <_vfiprintf_r+0x220>
 8009002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009004:	f7ff fa4e 	bl	80084a4 <__retarget_lock_release_recursive>
 8009008:	89ab      	ldrh	r3, [r5, #12]
 800900a:	065b      	lsls	r3, r3, #25
 800900c:	f53f af12 	bmi.w	8008e34 <_vfiprintf_r+0x4c>
 8009010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009012:	e711      	b.n	8008e38 <_vfiprintf_r+0x50>
 8009014:	ab03      	add	r3, sp, #12
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	462a      	mov	r2, r5
 800901a:	4b0a      	ldr	r3, [pc, #40]	; (8009044 <_vfiprintf_r+0x25c>)
 800901c:	a904      	add	r1, sp, #16
 800901e:	4630      	mov	r0, r6
 8009020:	f7fe f98e 	bl	8007340 <_printf_i>
 8009024:	e7e4      	b.n	8008ff0 <_vfiprintf_r+0x208>
 8009026:	bf00      	nop
 8009028:	08009834 	.word	0x08009834
 800902c:	08009854 	.word	0x08009854
 8009030:	08009814 	.word	0x08009814
 8009034:	080099cc 	.word	0x080099cc
 8009038:	080099d2 	.word	0x080099d2
 800903c:	080099d6 	.word	0x080099d6
 8009040:	08006e11 	.word	0x08006e11
 8009044:	08008dc3 	.word	0x08008dc3

08009048 <_sbrk_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d06      	ldr	r5, [pc, #24]	; (8009064 <_sbrk_r+0x1c>)
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	f7f9 f964 	bl	8002320 <_sbrk>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_sbrk_r+0x1a>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_sbrk_r+0x1a>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	200009f4 	.word	0x200009f4

08009068 <__sread>:
 8009068:	b510      	push	{r4, lr}
 800906a:	460c      	mov	r4, r1
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	f000 faa4 	bl	80095bc <_read_r>
 8009074:	2800      	cmp	r0, #0
 8009076:	bfab      	itete	ge
 8009078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800907a:	89a3      	ldrhlt	r3, [r4, #12]
 800907c:	181b      	addge	r3, r3, r0
 800907e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009082:	bfac      	ite	ge
 8009084:	6563      	strge	r3, [r4, #84]	; 0x54
 8009086:	81a3      	strhlt	r3, [r4, #12]
 8009088:	bd10      	pop	{r4, pc}

0800908a <__swrite>:
 800908a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908e:	461f      	mov	r7, r3
 8009090:	898b      	ldrh	r3, [r1, #12]
 8009092:	05db      	lsls	r3, r3, #23
 8009094:	4605      	mov	r5, r0
 8009096:	460c      	mov	r4, r1
 8009098:	4616      	mov	r6, r2
 800909a:	d505      	bpl.n	80090a8 <__swrite+0x1e>
 800909c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a0:	2302      	movs	r3, #2
 80090a2:	2200      	movs	r2, #0
 80090a4:	f000 f9f4 	bl	8009490 <_lseek_r>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090b2:	81a3      	strh	r3, [r4, #12]
 80090b4:	4632      	mov	r2, r6
 80090b6:	463b      	mov	r3, r7
 80090b8:	4628      	mov	r0, r5
 80090ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	f000 b869 	b.w	8009194 <_write_r>

080090c2 <__sseek>:
 80090c2:	b510      	push	{r4, lr}
 80090c4:	460c      	mov	r4, r1
 80090c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ca:	f000 f9e1 	bl	8009490 <_lseek_r>
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	bf15      	itete	ne
 80090d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090de:	81a3      	strheq	r3, [r4, #12]
 80090e0:	bf18      	it	ne
 80090e2:	81a3      	strhne	r3, [r4, #12]
 80090e4:	bd10      	pop	{r4, pc}

080090e6 <__sclose>:
 80090e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ea:	f000 b8f1 	b.w	80092d0 <_close_r>
	...

080090f0 <__swbuf_r>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	460e      	mov	r6, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	4605      	mov	r5, r0
 80090f8:	b118      	cbz	r0, 8009102 <__swbuf_r+0x12>
 80090fa:	6983      	ldr	r3, [r0, #24]
 80090fc:	b90b      	cbnz	r3, 8009102 <__swbuf_r+0x12>
 80090fe:	f7ff f92d 	bl	800835c <__sinit>
 8009102:	4b21      	ldr	r3, [pc, #132]	; (8009188 <__swbuf_r+0x98>)
 8009104:	429c      	cmp	r4, r3
 8009106:	d12b      	bne.n	8009160 <__swbuf_r+0x70>
 8009108:	686c      	ldr	r4, [r5, #4]
 800910a:	69a3      	ldr	r3, [r4, #24]
 800910c:	60a3      	str	r3, [r4, #8]
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	071a      	lsls	r2, r3, #28
 8009112:	d52f      	bpl.n	8009174 <__swbuf_r+0x84>
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	b36b      	cbz	r3, 8009174 <__swbuf_r+0x84>
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	6820      	ldr	r0, [r4, #0]
 800911c:	1ac0      	subs	r0, r0, r3
 800911e:	6963      	ldr	r3, [r4, #20]
 8009120:	b2f6      	uxtb	r6, r6
 8009122:	4283      	cmp	r3, r0
 8009124:	4637      	mov	r7, r6
 8009126:	dc04      	bgt.n	8009132 <__swbuf_r+0x42>
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f000 f962 	bl	80093f4 <_fflush_r>
 8009130:	bb30      	cbnz	r0, 8009180 <__swbuf_r+0x90>
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	3b01      	subs	r3, #1
 8009136:	60a3      	str	r3, [r4, #8]
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	6022      	str	r2, [r4, #0]
 800913e:	701e      	strb	r6, [r3, #0]
 8009140:	6963      	ldr	r3, [r4, #20]
 8009142:	3001      	adds	r0, #1
 8009144:	4283      	cmp	r3, r0
 8009146:	d004      	beq.n	8009152 <__swbuf_r+0x62>
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	07db      	lsls	r3, r3, #31
 800914c:	d506      	bpl.n	800915c <__swbuf_r+0x6c>
 800914e:	2e0a      	cmp	r6, #10
 8009150:	d104      	bne.n	800915c <__swbuf_r+0x6c>
 8009152:	4621      	mov	r1, r4
 8009154:	4628      	mov	r0, r5
 8009156:	f000 f94d 	bl	80093f4 <_fflush_r>
 800915a:	b988      	cbnz	r0, 8009180 <__swbuf_r+0x90>
 800915c:	4638      	mov	r0, r7
 800915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <__swbuf_r+0x9c>)
 8009162:	429c      	cmp	r4, r3
 8009164:	d101      	bne.n	800916a <__swbuf_r+0x7a>
 8009166:	68ac      	ldr	r4, [r5, #8]
 8009168:	e7cf      	b.n	800910a <__swbuf_r+0x1a>
 800916a:	4b09      	ldr	r3, [pc, #36]	; (8009190 <__swbuf_r+0xa0>)
 800916c:	429c      	cmp	r4, r3
 800916e:	bf08      	it	eq
 8009170:	68ec      	ldreq	r4, [r5, #12]
 8009172:	e7ca      	b.n	800910a <__swbuf_r+0x1a>
 8009174:	4621      	mov	r1, r4
 8009176:	4628      	mov	r0, r5
 8009178:	f000 f81e 	bl	80091b8 <__swsetup_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	d0cb      	beq.n	8009118 <__swbuf_r+0x28>
 8009180:	f04f 37ff 	mov.w	r7, #4294967295
 8009184:	e7ea      	b.n	800915c <__swbuf_r+0x6c>
 8009186:	bf00      	nop
 8009188:	08009834 	.word	0x08009834
 800918c:	08009854 	.word	0x08009854
 8009190:	08009814 	.word	0x08009814

08009194 <_write_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	; (80091b4 <_write_r+0x20>)
 8009198:	4604      	mov	r4, r0
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7f9 f870 	bl	8002288 <_write>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_write_r+0x1e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_write_r+0x1e>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	200009f4 	.word	0x200009f4

080091b8 <__swsetup_r>:
 80091b8:	4b32      	ldr	r3, [pc, #200]	; (8009284 <__swsetup_r+0xcc>)
 80091ba:	b570      	push	{r4, r5, r6, lr}
 80091bc:	681d      	ldr	r5, [r3, #0]
 80091be:	4606      	mov	r6, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	b125      	cbz	r5, 80091ce <__swsetup_r+0x16>
 80091c4:	69ab      	ldr	r3, [r5, #24]
 80091c6:	b913      	cbnz	r3, 80091ce <__swsetup_r+0x16>
 80091c8:	4628      	mov	r0, r5
 80091ca:	f7ff f8c7 	bl	800835c <__sinit>
 80091ce:	4b2e      	ldr	r3, [pc, #184]	; (8009288 <__swsetup_r+0xd0>)
 80091d0:	429c      	cmp	r4, r3
 80091d2:	d10f      	bne.n	80091f4 <__swsetup_r+0x3c>
 80091d4:	686c      	ldr	r4, [r5, #4]
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091dc:	0719      	lsls	r1, r3, #28
 80091de:	d42c      	bmi.n	800923a <__swsetup_r+0x82>
 80091e0:	06dd      	lsls	r5, r3, #27
 80091e2:	d411      	bmi.n	8009208 <__swsetup_r+0x50>
 80091e4:	2309      	movs	r3, #9
 80091e6:	6033      	str	r3, [r6, #0]
 80091e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	f04f 30ff 	mov.w	r0, #4294967295
 80091f2:	e03e      	b.n	8009272 <__swsetup_r+0xba>
 80091f4:	4b25      	ldr	r3, [pc, #148]	; (800928c <__swsetup_r+0xd4>)
 80091f6:	429c      	cmp	r4, r3
 80091f8:	d101      	bne.n	80091fe <__swsetup_r+0x46>
 80091fa:	68ac      	ldr	r4, [r5, #8]
 80091fc:	e7eb      	b.n	80091d6 <__swsetup_r+0x1e>
 80091fe:	4b24      	ldr	r3, [pc, #144]	; (8009290 <__swsetup_r+0xd8>)
 8009200:	429c      	cmp	r4, r3
 8009202:	bf08      	it	eq
 8009204:	68ec      	ldreq	r4, [r5, #12]
 8009206:	e7e6      	b.n	80091d6 <__swsetup_r+0x1e>
 8009208:	0758      	lsls	r0, r3, #29
 800920a:	d512      	bpl.n	8009232 <__swsetup_r+0x7a>
 800920c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800920e:	b141      	cbz	r1, 8009222 <__swsetup_r+0x6a>
 8009210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009214:	4299      	cmp	r1, r3
 8009216:	d002      	beq.n	800921e <__swsetup_r+0x66>
 8009218:	4630      	mov	r0, r6
 800921a:	f7ff fcdf 	bl	8008bdc <_free_r>
 800921e:	2300      	movs	r3, #0
 8009220:	6363      	str	r3, [r4, #52]	; 0x34
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009228:	81a3      	strh	r3, [r4, #12]
 800922a:	2300      	movs	r3, #0
 800922c:	6063      	str	r3, [r4, #4]
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f043 0308 	orr.w	r3, r3, #8
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	b94b      	cbnz	r3, 8009252 <__swsetup_r+0x9a>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009248:	d003      	beq.n	8009252 <__swsetup_r+0x9a>
 800924a:	4621      	mov	r1, r4
 800924c:	4630      	mov	r0, r6
 800924e:	f000 f957 	bl	8009500 <__smakebuf_r>
 8009252:	89a0      	ldrh	r0, [r4, #12]
 8009254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009258:	f010 0301 	ands.w	r3, r0, #1
 800925c:	d00a      	beq.n	8009274 <__swsetup_r+0xbc>
 800925e:	2300      	movs	r3, #0
 8009260:	60a3      	str	r3, [r4, #8]
 8009262:	6963      	ldr	r3, [r4, #20]
 8009264:	425b      	negs	r3, r3
 8009266:	61a3      	str	r3, [r4, #24]
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	b943      	cbnz	r3, 800927e <__swsetup_r+0xc6>
 800926c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009270:	d1ba      	bne.n	80091e8 <__swsetup_r+0x30>
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	0781      	lsls	r1, r0, #30
 8009276:	bf58      	it	pl
 8009278:	6963      	ldrpl	r3, [r4, #20]
 800927a:	60a3      	str	r3, [r4, #8]
 800927c:	e7f4      	b.n	8009268 <__swsetup_r+0xb0>
 800927e:	2000      	movs	r0, #0
 8009280:	e7f7      	b.n	8009272 <__swsetup_r+0xba>
 8009282:	bf00      	nop
 8009284:	20000028 	.word	0x20000028
 8009288:	08009834 	.word	0x08009834
 800928c:	08009854 	.word	0x08009854
 8009290:	08009814 	.word	0x08009814

08009294 <__assert_func>:
 8009294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009296:	4614      	mov	r4, r2
 8009298:	461a      	mov	r2, r3
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <__assert_func+0x2c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4605      	mov	r5, r0
 80092a0:	68d8      	ldr	r0, [r3, #12]
 80092a2:	b14c      	cbz	r4, 80092b8 <__assert_func+0x24>
 80092a4:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <__assert_func+0x30>)
 80092a6:	9100      	str	r1, [sp, #0]
 80092a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092ac:	4906      	ldr	r1, [pc, #24]	; (80092c8 <__assert_func+0x34>)
 80092ae:	462b      	mov	r3, r5
 80092b0:	f000 f8dc 	bl	800946c <fiprintf>
 80092b4:	f000 f9a1 	bl	80095fa <abort>
 80092b8:	4b04      	ldr	r3, [pc, #16]	; (80092cc <__assert_func+0x38>)
 80092ba:	461c      	mov	r4, r3
 80092bc:	e7f3      	b.n	80092a6 <__assert_func+0x12>
 80092be:	bf00      	nop
 80092c0:	20000028 	.word	0x20000028
 80092c4:	080099dd 	.word	0x080099dd
 80092c8:	080099ea 	.word	0x080099ea
 80092cc:	08009a18 	.word	0x08009a18

080092d0 <_close_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d06      	ldr	r5, [pc, #24]	; (80092ec <_close_r+0x1c>)
 80092d4:	2300      	movs	r3, #0
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	f7f8 fff0 	bl	80022c0 <_close>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_close_r+0x1a>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_close_r+0x1a>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	200009f4 	.word	0x200009f4

080092f0 <__sflush_r>:
 80092f0:	898a      	ldrh	r2, [r1, #12]
 80092f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f4:	4605      	mov	r5, r0
 80092f6:	0710      	lsls	r0, r2, #28
 80092f8:	460c      	mov	r4, r1
 80092fa:	d457      	bmi.n	80093ac <__sflush_r+0xbc>
 80092fc:	684b      	ldr	r3, [r1, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dc04      	bgt.n	800930c <__sflush_r+0x1c>
 8009302:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	dc01      	bgt.n	800930c <__sflush_r+0x1c>
 8009308:	2000      	movs	r0, #0
 800930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800930e:	2e00      	cmp	r6, #0
 8009310:	d0fa      	beq.n	8009308 <__sflush_r+0x18>
 8009312:	2300      	movs	r3, #0
 8009314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009318:	682f      	ldr	r7, [r5, #0]
 800931a:	602b      	str	r3, [r5, #0]
 800931c:	d032      	beq.n	8009384 <__sflush_r+0x94>
 800931e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	075a      	lsls	r2, r3, #29
 8009324:	d505      	bpl.n	8009332 <__sflush_r+0x42>
 8009326:	6863      	ldr	r3, [r4, #4]
 8009328:	1ac0      	subs	r0, r0, r3
 800932a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800932c:	b10b      	cbz	r3, 8009332 <__sflush_r+0x42>
 800932e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009330:	1ac0      	subs	r0, r0, r3
 8009332:	2300      	movs	r3, #0
 8009334:	4602      	mov	r2, r0
 8009336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009338:	6a21      	ldr	r1, [r4, #32]
 800933a:	4628      	mov	r0, r5
 800933c:	47b0      	blx	r6
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	d106      	bne.n	8009352 <__sflush_r+0x62>
 8009344:	6829      	ldr	r1, [r5, #0]
 8009346:	291d      	cmp	r1, #29
 8009348:	d82c      	bhi.n	80093a4 <__sflush_r+0xb4>
 800934a:	4a29      	ldr	r2, [pc, #164]	; (80093f0 <__sflush_r+0x100>)
 800934c:	40ca      	lsrs	r2, r1
 800934e:	07d6      	lsls	r6, r2, #31
 8009350:	d528      	bpl.n	80093a4 <__sflush_r+0xb4>
 8009352:	2200      	movs	r2, #0
 8009354:	6062      	str	r2, [r4, #4]
 8009356:	04d9      	lsls	r1, r3, #19
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	6022      	str	r2, [r4, #0]
 800935c:	d504      	bpl.n	8009368 <__sflush_r+0x78>
 800935e:	1c42      	adds	r2, r0, #1
 8009360:	d101      	bne.n	8009366 <__sflush_r+0x76>
 8009362:	682b      	ldr	r3, [r5, #0]
 8009364:	b903      	cbnz	r3, 8009368 <__sflush_r+0x78>
 8009366:	6560      	str	r0, [r4, #84]	; 0x54
 8009368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800936a:	602f      	str	r7, [r5, #0]
 800936c:	2900      	cmp	r1, #0
 800936e:	d0cb      	beq.n	8009308 <__sflush_r+0x18>
 8009370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009374:	4299      	cmp	r1, r3
 8009376:	d002      	beq.n	800937e <__sflush_r+0x8e>
 8009378:	4628      	mov	r0, r5
 800937a:	f7ff fc2f 	bl	8008bdc <_free_r>
 800937e:	2000      	movs	r0, #0
 8009380:	6360      	str	r0, [r4, #52]	; 0x34
 8009382:	e7c2      	b.n	800930a <__sflush_r+0x1a>
 8009384:	6a21      	ldr	r1, [r4, #32]
 8009386:	2301      	movs	r3, #1
 8009388:	4628      	mov	r0, r5
 800938a:	47b0      	blx	r6
 800938c:	1c41      	adds	r1, r0, #1
 800938e:	d1c7      	bne.n	8009320 <__sflush_r+0x30>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0c4      	beq.n	8009320 <__sflush_r+0x30>
 8009396:	2b1d      	cmp	r3, #29
 8009398:	d001      	beq.n	800939e <__sflush_r+0xae>
 800939a:	2b16      	cmp	r3, #22
 800939c:	d101      	bne.n	80093a2 <__sflush_r+0xb2>
 800939e:	602f      	str	r7, [r5, #0]
 80093a0:	e7b2      	b.n	8009308 <__sflush_r+0x18>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	e7ae      	b.n	800930a <__sflush_r+0x1a>
 80093ac:	690f      	ldr	r7, [r1, #16]
 80093ae:	2f00      	cmp	r7, #0
 80093b0:	d0aa      	beq.n	8009308 <__sflush_r+0x18>
 80093b2:	0793      	lsls	r3, r2, #30
 80093b4:	680e      	ldr	r6, [r1, #0]
 80093b6:	bf08      	it	eq
 80093b8:	694b      	ldreq	r3, [r1, #20]
 80093ba:	600f      	str	r7, [r1, #0]
 80093bc:	bf18      	it	ne
 80093be:	2300      	movne	r3, #0
 80093c0:	1bf6      	subs	r6, r6, r7
 80093c2:	608b      	str	r3, [r1, #8]
 80093c4:	2e00      	cmp	r6, #0
 80093c6:	dd9f      	ble.n	8009308 <__sflush_r+0x18>
 80093c8:	6a21      	ldr	r1, [r4, #32]
 80093ca:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80093ce:	4633      	mov	r3, r6
 80093d0:	463a      	mov	r2, r7
 80093d2:	4628      	mov	r0, r5
 80093d4:	47e0      	blx	ip
 80093d6:	2800      	cmp	r0, #0
 80093d8:	dc06      	bgt.n	80093e8 <__sflush_r+0xf8>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	f04f 30ff 	mov.w	r0, #4294967295
 80093e6:	e790      	b.n	800930a <__sflush_r+0x1a>
 80093e8:	4407      	add	r7, r0
 80093ea:	1a36      	subs	r6, r6, r0
 80093ec:	e7ea      	b.n	80093c4 <__sflush_r+0xd4>
 80093ee:	bf00      	nop
 80093f0:	20400001 	.word	0x20400001

080093f4 <_fflush_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	690b      	ldr	r3, [r1, #16]
 80093f8:	4605      	mov	r5, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	b913      	cbnz	r3, 8009404 <_fflush_r+0x10>
 80093fe:	2500      	movs	r5, #0
 8009400:	4628      	mov	r0, r5
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	b118      	cbz	r0, 800940e <_fflush_r+0x1a>
 8009406:	6983      	ldr	r3, [r0, #24]
 8009408:	b90b      	cbnz	r3, 800940e <_fflush_r+0x1a>
 800940a:	f7fe ffa7 	bl	800835c <__sinit>
 800940e:	4b14      	ldr	r3, [pc, #80]	; (8009460 <_fflush_r+0x6c>)
 8009410:	429c      	cmp	r4, r3
 8009412:	d11b      	bne.n	800944c <_fflush_r+0x58>
 8009414:	686c      	ldr	r4, [r5, #4]
 8009416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0ef      	beq.n	80093fe <_fflush_r+0xa>
 800941e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009420:	07d0      	lsls	r0, r2, #31
 8009422:	d404      	bmi.n	800942e <_fflush_r+0x3a>
 8009424:	0599      	lsls	r1, r3, #22
 8009426:	d402      	bmi.n	800942e <_fflush_r+0x3a>
 8009428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800942a:	f7ff f83a 	bl	80084a2 <__retarget_lock_acquire_recursive>
 800942e:	4628      	mov	r0, r5
 8009430:	4621      	mov	r1, r4
 8009432:	f7ff ff5d 	bl	80092f0 <__sflush_r>
 8009436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009438:	07da      	lsls	r2, r3, #31
 800943a:	4605      	mov	r5, r0
 800943c:	d4e0      	bmi.n	8009400 <_fflush_r+0xc>
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	059b      	lsls	r3, r3, #22
 8009442:	d4dd      	bmi.n	8009400 <_fflush_r+0xc>
 8009444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009446:	f7ff f82d 	bl	80084a4 <__retarget_lock_release_recursive>
 800944a:	e7d9      	b.n	8009400 <_fflush_r+0xc>
 800944c:	4b05      	ldr	r3, [pc, #20]	; (8009464 <_fflush_r+0x70>)
 800944e:	429c      	cmp	r4, r3
 8009450:	d101      	bne.n	8009456 <_fflush_r+0x62>
 8009452:	68ac      	ldr	r4, [r5, #8]
 8009454:	e7df      	b.n	8009416 <_fflush_r+0x22>
 8009456:	4b04      	ldr	r3, [pc, #16]	; (8009468 <_fflush_r+0x74>)
 8009458:	429c      	cmp	r4, r3
 800945a:	bf08      	it	eq
 800945c:	68ec      	ldreq	r4, [r5, #12]
 800945e:	e7da      	b.n	8009416 <_fflush_r+0x22>
 8009460:	08009834 	.word	0x08009834
 8009464:	08009854 	.word	0x08009854
 8009468:	08009814 	.word	0x08009814

0800946c <fiprintf>:
 800946c:	b40e      	push	{r1, r2, r3}
 800946e:	b503      	push	{r0, r1, lr}
 8009470:	4601      	mov	r1, r0
 8009472:	ab03      	add	r3, sp, #12
 8009474:	4805      	ldr	r0, [pc, #20]	; (800948c <fiprintf+0x20>)
 8009476:	f853 2b04 	ldr.w	r2, [r3], #4
 800947a:	6800      	ldr	r0, [r0, #0]
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	f7ff fcb3 	bl	8008de8 <_vfiprintf_r>
 8009482:	b002      	add	sp, #8
 8009484:	f85d eb04 	ldr.w	lr, [sp], #4
 8009488:	b003      	add	sp, #12
 800948a:	4770      	bx	lr
 800948c:	20000028 	.word	0x20000028

08009490 <_lseek_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d07      	ldr	r5, [pc, #28]	; (80094b0 <_lseek_r+0x20>)
 8009494:	4604      	mov	r4, r0
 8009496:	4608      	mov	r0, r1
 8009498:	4611      	mov	r1, r2
 800949a:	2200      	movs	r2, #0
 800949c:	602a      	str	r2, [r5, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f7f8 ff32 	bl	8002308 <_lseek>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_lseek_r+0x1e>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_lseek_r+0x1e>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	200009f4 	.word	0x200009f4

080094b4 <__swhatbuf_r>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	460e      	mov	r6, r1
 80094b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094bc:	2900      	cmp	r1, #0
 80094be:	b096      	sub	sp, #88	; 0x58
 80094c0:	4614      	mov	r4, r2
 80094c2:	461d      	mov	r5, r3
 80094c4:	da08      	bge.n	80094d8 <__swhatbuf_r+0x24>
 80094c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	602a      	str	r2, [r5, #0]
 80094ce:	061a      	lsls	r2, r3, #24
 80094d0:	d410      	bmi.n	80094f4 <__swhatbuf_r+0x40>
 80094d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d6:	e00e      	b.n	80094f6 <__swhatbuf_r+0x42>
 80094d8:	466a      	mov	r2, sp
 80094da:	f000 f895 	bl	8009608 <_fstat_r>
 80094de:	2800      	cmp	r0, #0
 80094e0:	dbf1      	blt.n	80094c6 <__swhatbuf_r+0x12>
 80094e2:	9a01      	ldr	r2, [sp, #4]
 80094e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094ec:	425a      	negs	r2, r3
 80094ee:	415a      	adcs	r2, r3
 80094f0:	602a      	str	r2, [r5, #0]
 80094f2:	e7ee      	b.n	80094d2 <__swhatbuf_r+0x1e>
 80094f4:	2340      	movs	r3, #64	; 0x40
 80094f6:	2000      	movs	r0, #0
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	b016      	add	sp, #88	; 0x58
 80094fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009500 <__smakebuf_r>:
 8009500:	898b      	ldrh	r3, [r1, #12]
 8009502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009504:	079d      	lsls	r5, r3, #30
 8009506:	4606      	mov	r6, r0
 8009508:	460c      	mov	r4, r1
 800950a:	d507      	bpl.n	800951c <__smakebuf_r+0x1c>
 800950c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	6123      	str	r3, [r4, #16]
 8009514:	2301      	movs	r3, #1
 8009516:	6163      	str	r3, [r4, #20]
 8009518:	b002      	add	sp, #8
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	ab01      	add	r3, sp, #4
 800951e:	466a      	mov	r2, sp
 8009520:	f7ff ffc8 	bl	80094b4 <__swhatbuf_r>
 8009524:	9900      	ldr	r1, [sp, #0]
 8009526:	4605      	mov	r5, r0
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff fbc1 	bl	8008cb0 <_malloc_r>
 800952e:	b948      	cbnz	r0, 8009544 <__smakebuf_r+0x44>
 8009530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009534:	059a      	lsls	r2, r3, #22
 8009536:	d4ef      	bmi.n	8009518 <__smakebuf_r+0x18>
 8009538:	f023 0303 	bic.w	r3, r3, #3
 800953c:	f043 0302 	orr.w	r3, r3, #2
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	e7e3      	b.n	800950c <__smakebuf_r+0xc>
 8009544:	4b0d      	ldr	r3, [pc, #52]	; (800957c <__smakebuf_r+0x7c>)
 8009546:	62b3      	str	r3, [r6, #40]	; 0x28
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	6020      	str	r0, [r4, #0]
 800954c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	9b00      	ldr	r3, [sp, #0]
 8009554:	6163      	str	r3, [r4, #20]
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	6120      	str	r0, [r4, #16]
 800955a:	b15b      	cbz	r3, 8009574 <__smakebuf_r+0x74>
 800955c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009560:	4630      	mov	r0, r6
 8009562:	f000 f863 	bl	800962c <_isatty_r>
 8009566:	b128      	cbz	r0, 8009574 <__smakebuf_r+0x74>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	f023 0303 	bic.w	r3, r3, #3
 800956e:	f043 0301 	orr.w	r3, r3, #1
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	89a0      	ldrh	r0, [r4, #12]
 8009576:	4305      	orrs	r5, r0
 8009578:	81a5      	strh	r5, [r4, #12]
 800957a:	e7cd      	b.n	8009518 <__smakebuf_r+0x18>
 800957c:	080082f5 	.word	0x080082f5

08009580 <__ascii_mbtowc>:
 8009580:	b082      	sub	sp, #8
 8009582:	b901      	cbnz	r1, 8009586 <__ascii_mbtowc+0x6>
 8009584:	a901      	add	r1, sp, #4
 8009586:	b142      	cbz	r2, 800959a <__ascii_mbtowc+0x1a>
 8009588:	b14b      	cbz	r3, 800959e <__ascii_mbtowc+0x1e>
 800958a:	7813      	ldrb	r3, [r2, #0]
 800958c:	600b      	str	r3, [r1, #0]
 800958e:	7812      	ldrb	r2, [r2, #0]
 8009590:	1e10      	subs	r0, r2, #0
 8009592:	bf18      	it	ne
 8009594:	2001      	movne	r0, #1
 8009596:	b002      	add	sp, #8
 8009598:	4770      	bx	lr
 800959a:	4610      	mov	r0, r2
 800959c:	e7fb      	b.n	8009596 <__ascii_mbtowc+0x16>
 800959e:	f06f 0001 	mvn.w	r0, #1
 80095a2:	e7f8      	b.n	8009596 <__ascii_mbtowc+0x16>

080095a4 <__malloc_lock>:
 80095a4:	4801      	ldr	r0, [pc, #4]	; (80095ac <__malloc_lock+0x8>)
 80095a6:	f7fe bf7c 	b.w	80084a2 <__retarget_lock_acquire_recursive>
 80095aa:	bf00      	nop
 80095ac:	200009e8 	.word	0x200009e8

080095b0 <__malloc_unlock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <__malloc_unlock+0x8>)
 80095b2:	f7fe bf77 	b.w	80084a4 <__retarget_lock_release_recursive>
 80095b6:	bf00      	nop
 80095b8:	200009e8 	.word	0x200009e8

080095bc <_read_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d07      	ldr	r5, [pc, #28]	; (80095dc <_read_r+0x20>)
 80095c0:	4604      	mov	r4, r0
 80095c2:	4608      	mov	r0, r1
 80095c4:	4611      	mov	r1, r2
 80095c6:	2200      	movs	r2, #0
 80095c8:	602a      	str	r2, [r5, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	f7f8 fe3f 	bl	800224e <_read>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_read_r+0x1e>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_read_r+0x1e>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	200009f4 	.word	0x200009f4

080095e0 <__ascii_wctomb>:
 80095e0:	4603      	mov	r3, r0
 80095e2:	4608      	mov	r0, r1
 80095e4:	b141      	cbz	r1, 80095f8 <__ascii_wctomb+0x18>
 80095e6:	2aff      	cmp	r2, #255	; 0xff
 80095e8:	d904      	bls.n	80095f4 <__ascii_wctomb+0x14>
 80095ea:	228a      	movs	r2, #138	; 0x8a
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f04f 30ff 	mov.w	r0, #4294967295
 80095f2:	4770      	bx	lr
 80095f4:	700a      	strb	r2, [r1, #0]
 80095f6:	2001      	movs	r0, #1
 80095f8:	4770      	bx	lr

080095fa <abort>:
 80095fa:	b508      	push	{r3, lr}
 80095fc:	2006      	movs	r0, #6
 80095fe:	f000 f84d 	bl	800969c <raise>
 8009602:	2001      	movs	r0, #1
 8009604:	f7f8 fe19 	bl	800223a <_exit>

08009608 <_fstat_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d07      	ldr	r5, [pc, #28]	; (8009628 <_fstat_r+0x20>)
 800960c:	2300      	movs	r3, #0
 800960e:	4604      	mov	r4, r0
 8009610:	4608      	mov	r0, r1
 8009612:	4611      	mov	r1, r2
 8009614:	602b      	str	r3, [r5, #0]
 8009616:	f7f8 fe5e 	bl	80022d6 <_fstat>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d102      	bne.n	8009624 <_fstat_r+0x1c>
 800961e:	682b      	ldr	r3, [r5, #0]
 8009620:	b103      	cbz	r3, 8009624 <_fstat_r+0x1c>
 8009622:	6023      	str	r3, [r4, #0]
 8009624:	bd38      	pop	{r3, r4, r5, pc}
 8009626:	bf00      	nop
 8009628:	200009f4 	.word	0x200009f4

0800962c <_isatty_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d06      	ldr	r5, [pc, #24]	; (8009648 <_isatty_r+0x1c>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	602b      	str	r3, [r5, #0]
 8009638:	f7f8 fe5c 	bl	80022f4 <_isatty>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_isatty_r+0x1a>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_isatty_r+0x1a>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	200009f4 	.word	0x200009f4

0800964c <_raise_r>:
 800964c:	291f      	cmp	r1, #31
 800964e:	b538      	push	{r3, r4, r5, lr}
 8009650:	4604      	mov	r4, r0
 8009652:	460d      	mov	r5, r1
 8009654:	d904      	bls.n	8009660 <_raise_r+0x14>
 8009656:	2316      	movs	r3, #22
 8009658:	6003      	str	r3, [r0, #0]
 800965a:	f04f 30ff 	mov.w	r0, #4294967295
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009662:	b112      	cbz	r2, 800966a <_raise_r+0x1e>
 8009664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009668:	b94b      	cbnz	r3, 800967e <_raise_r+0x32>
 800966a:	4620      	mov	r0, r4
 800966c:	f000 f830 	bl	80096d0 <_getpid_r>
 8009670:	462a      	mov	r2, r5
 8009672:	4601      	mov	r1, r0
 8009674:	4620      	mov	r0, r4
 8009676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800967a:	f000 b817 	b.w	80096ac <_kill_r>
 800967e:	2b01      	cmp	r3, #1
 8009680:	d00a      	beq.n	8009698 <_raise_r+0x4c>
 8009682:	1c59      	adds	r1, r3, #1
 8009684:	d103      	bne.n	800968e <_raise_r+0x42>
 8009686:	2316      	movs	r3, #22
 8009688:	6003      	str	r3, [r0, #0]
 800968a:	2001      	movs	r0, #1
 800968c:	e7e7      	b.n	800965e <_raise_r+0x12>
 800968e:	2400      	movs	r4, #0
 8009690:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009694:	4628      	mov	r0, r5
 8009696:	4798      	blx	r3
 8009698:	2000      	movs	r0, #0
 800969a:	e7e0      	b.n	800965e <_raise_r+0x12>

0800969c <raise>:
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <raise+0xc>)
 800969e:	4601      	mov	r1, r0
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f7ff bfd3 	b.w	800964c <_raise_r>
 80096a6:	bf00      	nop
 80096a8:	20000028 	.word	0x20000028

080096ac <_kill_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	4d07      	ldr	r5, [pc, #28]	; (80096cc <_kill_r+0x20>)
 80096b0:	2300      	movs	r3, #0
 80096b2:	4604      	mov	r4, r0
 80096b4:	4608      	mov	r0, r1
 80096b6:	4611      	mov	r1, r2
 80096b8:	602b      	str	r3, [r5, #0]
 80096ba:	f7f8 fdae 	bl	800221a <_kill>
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	d102      	bne.n	80096c8 <_kill_r+0x1c>
 80096c2:	682b      	ldr	r3, [r5, #0]
 80096c4:	b103      	cbz	r3, 80096c8 <_kill_r+0x1c>
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	bd38      	pop	{r3, r4, r5, pc}
 80096ca:	bf00      	nop
 80096cc:	200009f4 	.word	0x200009f4

080096d0 <_getpid_r>:
 80096d0:	f7f8 bd9c 	b.w	800220c <_getpid>

080096d4 <_init>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	bf00      	nop
 80096d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096da:	bc08      	pop	{r3}
 80096dc:	469e      	mov	lr, r3
 80096de:	4770      	bx	lr

080096e0 <_fini>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr
