
Embedded-C-Assignment-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007480  08007480  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007488  08007488  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  20000070  08007500  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000878  08007500  00020878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0d5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003473  00000000  00000000  0003d175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  000405e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  00041fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abb7  00000000  00000000  00043890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf17  00000000  00000000  0006e447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107fc5  00000000  00000000  0008b35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193323  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000787c  00000000  00000000  00193374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007370 	.word	0x08007370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007370 	.word	0x08007370

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f001 f850 	bl	800161e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f831 	bl	80005e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000582:	f000 f891 	bl	80006a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fa9b 	bl	8000ac0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800058a:	f000 f931 	bl	80007f0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800058e:	f000 f967 	bl	8000860 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000592:	f000 f9a3 	bl	80008dc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000596:	f000 f9c7 	bl	8000928 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800059a:	f000 fa03 	bl	80009a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800059e:	f000 fa31 	bl	8000a04 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a2:	f000 fa5f 	bl	8000a64 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8ad 	bl	8000704 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start(&hadc1);
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <main+0x68>)
 80005ac:	f001 fc58 	bl	8001e60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80005b0:	2164      	movs	r1, #100	; 0x64
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x68>)
 80005b4:	f001 fd42 	bl	800203c <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <main+0x68>)
 80005ba:	f001 fe17 	bl	80021ec <HAL_ADC_GetValue>
 80005be:	6078      	str	r0, [r7, #4]

	printf("adcResult: %lu - 0x%lx\n", adcResult, adcResult);
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <main+0x6c>)
 80005c6:	f005 ff45 	bl	8006454 <iprintf>

	HAL_ADC_Stop(&hadc1);
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <main+0x68>)
 80005cc:	f001 fd02 	bl	8001fd4 <HAL_ADC_Stop>

	HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f001 f898 	bl	8001708 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 80005d8:	e7e7      	b.n	80005aa <main+0x36>
 80005da:	bf00      	nop
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	08007388 	.word	0x08007388

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	; 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	; 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 ff26 	bl	8006444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000606:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060a:	f003 faf5 	bl	8003bf8 <HAL_PWREx_ControlVoltageScaling>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000614:	f000 fbdc 	bl	8000dd0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f003 fad0 	bl	8003bbc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <SystemClock_Config+0xc0>)
 800061e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000622:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <SystemClock_Config+0xc0>)
 8000624:	f023 0318 	bic.w	r3, r3, #24
 8000628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800062c:	2314      	movs	r3, #20
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800063c:	2360      	movs	r3, #96	; 0x60
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000644:	2301      	movs	r3, #1
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800064c:	2328      	movs	r3, #40	; 0x28
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fbeb 	bl	8003e3c <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800066c:	f000 fbb0 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2303      	movs	r3, #3
 8000676:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	2104      	movs	r1, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f003 ffb3 	bl	80045f4 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000694:	f000 fb9c 	bl	8000dd0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000698:	f004 fcba 	bl	8005010 <HAL_RCCEx_EnableMSIPLLMode>
}
 800069c:	bf00      	nop
 800069e:	3758      	adds	r7, #88	; 0x58
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000

080006a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b0a2      	sub	sp, #136	; 0x88
 80006ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2288      	movs	r2, #136	; 0x88
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fec5 	bl	8006444 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006ba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006be:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006c4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006d4:	2318      	movs	r3, #24
 80006d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006d8:	2307      	movs	r3, #7
 80006da:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006e4:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80006e8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f9a5 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80006f8:	f000 fb6a 	bl	8000dd0 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3788      	adds	r7, #136	; 0x88
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000726:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000728:	4a2f      	ldr	r2, [pc, #188]	; (80007e8 <MX_ADC1_Init+0xe4>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800072c:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <MX_ADC1_Init+0xe0>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_ADC1_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000746:	2204      	movs	r2, #4
 8000748:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <MX_ADC1_Init+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000752:	2200      	movs	r2, #0
 8000754:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000758:	2201      	movs	r2, #1
 800075a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0xe0>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0xe0>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_ADC1_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000786:	4817      	ldr	r0, [pc, #92]	; (80007e4 <MX_ADC1_Init+0xe0>)
 8000788:	f001 fa14 	bl	8001bb4 <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000792:	f000 fb1d 	bl	8000dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <MX_ADC1_Init+0xe0>)
 80007a2:	f002 fae9 	bl	8002d78 <HAL_ADCEx_MultiModeConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007ac:	f000 fb10 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_ADC1_Init+0xe8>)
 80007b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b4:	2306      	movs	r3, #6
 80007b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007bc:	237f      	movs	r3, #127	; 0x7f
 80007be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c0:	2304      	movs	r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_ADC1_Init+0xe0>)
 80007ce:	f001 fd1b 	bl	8002208 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007d8:	f000 fafa 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	50040000 	.word	0x50040000
 80007ec:	3ac04000 	.word	0x3ac04000

080007f0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_DFSDM1_Init+0x68>)
 80007f6:	4a19      	ldr	r2, [pc, #100]	; (800085c <MX_DFSDM1_Init+0x6c>)
 80007f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_DFSDM1_Init+0x68>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_DFSDM1_Init+0x68>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_DFSDM1_Init+0x68>)
 8000808:	2202      	movs	r2, #2
 800080a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_DFSDM1_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_DFSDM1_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_DFSDM1_Init+0x68>)
 800081a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_DFSDM1_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_DFSDM1_Init+0x68>)
 8000828:	2204      	movs	r2, #4
 800082a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_DFSDM1_Init+0x68>)
 8000834:	2201      	movs	r2, #1
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_DFSDM1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_DFSDM1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_DFSDM1_Init+0x68>)
 8000846:	f002 fc59 	bl	80030fc <HAL_DFSDM_ChannelInit>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000850:	f000 fabe 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000f0 	.word	0x200000f0
 800085c:	40016020 	.word	0x40016020

08000860 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_I2C2_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_I2C2_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_I2C2_Init+0x74>)
 800086c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000870:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_I2C2_Init+0x74>)
 800087a:	2201      	movs	r2, #1
 800087c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_I2C2_Init+0x74>)
 800089e:	f002 ff1e 	bl	80036de <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 fa92 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_I2C2_Init+0x74>)
 80008b0:	f002 ffa4 	bl	80037fc <HAL_I2CEx_ConfigAnalogFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80008ba:	f000 fa89 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_I2C2_Init+0x74>)
 80008c2:	f002 ffe6 	bl	8003892 <HAL_I2CEx_ConfigDigitalFilter>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 fa80 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000128 	.word	0x20000128
 80008d8:	40005800 	.word	0x40005800

080008dc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_QUADSPI_Init+0x44>)
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <MX_QUADSPI_Init+0x48>)
 80008e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_QUADSPI_Init+0x44>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_QUADSPI_Init+0x44>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_QUADSPI_Init+0x44>)
 80008f4:	2210      	movs	r2, #16
 80008f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_QUADSPI_Init+0x44>)
 80008fa:	2217      	movs	r2, #23
 80008fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_QUADSPI_Init+0x44>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_QUADSPI_Init+0x44>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_QUADSPI_Init+0x44>)
 800090c:	f003 f9da 	bl	8003cc4 <HAL_QSPI_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000916:	f000 fa5b 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000017c 	.word	0x2000017c
 8000924:	a0001000 	.word	0xa0001000

08000928 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_SPI3_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_SPI3_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_SPI3_Init+0x74>)
 8000934:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI3_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI3_Init+0x74>)
 8000942:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000946:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI3_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SPI3_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI3_Init+0x74>)
 8000956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI3_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI3_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI3_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI3_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI3_Init+0x74>)
 8000976:	2207      	movs	r2, #7
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI3_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI3_Init+0x74>)
 8000982:	2208      	movs	r2, #8
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_SPI3_Init+0x74>)
 8000988:	f004 fd24 	bl	80053d4 <HAL_SPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 fa1d 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200001c0 	.word	0x200001c0
 80009a0:	40003c00 	.word	0x40003c00

080009a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_USART1_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART1_UART_Init+0x58>)
 80009e8:	f004 fd97 	bl	800551a <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f9ed 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000224 	.word	0x20000224
 8000a00:	40013800 	.word	0x40013800

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <MX_USART3_UART_Init+0x5c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a48:	f004 fd67 	bl	800551a <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 f9bd 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200002a8 	.word	0x200002a8
 8000a60:	40004800 	.word	0x40004800

08000a64 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2206      	movs	r2, #6
 8000a74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	f002 ff3f 	bl	800392a <HAL_PCD_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 f98d 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000032c 	.word	0x2000032c

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	4bb9      	ldr	r3, [pc, #740]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4ab8      	ldr	r2, [pc, #736]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4bb6      	ldr	r3, [pc, #728]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4bb3      	ldr	r3, [pc, #716]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4ab2      	ldr	r2, [pc, #712]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4bb0      	ldr	r3, [pc, #704]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4bad      	ldr	r3, [pc, #692]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4aac      	ldr	r2, [pc, #688]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4baa      	ldr	r3, [pc, #680]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4ba7      	ldr	r3, [pc, #668]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4aa6      	ldr	r2, [pc, #664]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4ba4      	ldr	r3, [pc, #656]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	4ba1      	ldr	r3, [pc, #644]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4aa0      	ldr	r2, [pc, #640]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b9e      	ldr	r3, [pc, #632]	; (8000dbc <MX_GPIO_Init+0x2fc>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b54:	489a      	ldr	r0, [pc, #616]	; (8000dc0 <MX_GPIO_Init+0x300>)
 8000b56:	f002 fd87 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f002 fd80 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b6e:	4895      	ldr	r0, [pc, #596]	; (8000dc4 <MX_GPIO_Init+0x304>)
 8000b70:	f002 fd7a 	bl	8003668 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b7a:	4893      	ldr	r0, [pc, #588]	; (8000dc8 <MX_GPIO_Init+0x308>)
 8000b7c:	f002 fd74 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	4890      	ldr	r0, [pc, #576]	; (8000dc8 <MX_GPIO_Init+0x308>)
 8000b88:	f002 fd6e 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b92:	488e      	ldr	r0, [pc, #568]	; (8000dcc <MX_GPIO_Init+0x30c>)
 8000b94:	f002 fd68 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	4889      	ldr	r0, [pc, #548]	; (8000dc4 <MX_GPIO_Init+0x304>)
 8000b9e:	f002 fd63 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4886      	ldr	r0, [pc, #536]	; (8000dc0 <MX_GPIO_Init+0x300>)
 8000ba8:	f002 fd5e 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000bac:	f240 1315 	movw	r3, #277	; 0x115
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	487e      	ldr	r0, [pc, #504]	; (8000dc0 <MX_GPIO_Init+0x300>)
 8000bc6:	f002 fba5 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000bca:	236a      	movs	r3, #106	; 0x6a
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4878      	ldr	r0, [pc, #480]	; (8000dc0 <MX_GPIO_Init+0x300>)
 8000be0:	f002 fb98 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4874      	ldr	r0, [pc, #464]	; (8000dcc <MX_GPIO_Init+0x30c>)
 8000bfc:	f002 fb8a 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c00:	2303      	movs	r3, #3
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c10:	2308      	movs	r3, #8
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f002 fb79 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c22:	f248 1304 	movw	r3, #33028	; 0x8104
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3e:	f002 fb69 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c42:	2308      	movs	r3, #8
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c52:	2301      	movs	r3, #1
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f002 fb58 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c64:	23e0      	movs	r3, #224	; 0xe0
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c74:	2305      	movs	r3, #5
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f002 fb47 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <MX_GPIO_Init+0x304>)
 8000c9c:	f002 fb3a 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ca0:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ca4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4842      	ldr	r0, [pc, #264]	; (8000dc4 <MX_GPIO_Init+0x304>)
 8000cba:	f002 fb2b 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000cbe:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000cc2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	483c      	ldr	r0, [pc, #240]	; (8000dc8 <MX_GPIO_Init+0x308>)
 8000cd6:	f002 fb1d 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000cda:	f243 0381 	movw	r3, #12417	; 0x3081
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4835      	ldr	r0, [pc, #212]	; (8000dc8 <MX_GPIO_Init+0x308>)
 8000cf4:	f002 fb0e 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000cf8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	482e      	ldr	r0, [pc, #184]	; (8000dcc <MX_GPIO_Init+0x30c>)
 8000d12:	f002 faff 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4827      	ldr	r0, [pc, #156]	; (8000dcc <MX_GPIO_Init+0x30c>)
 8000d2e:	f002 faf1 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d42:	2305      	movs	r3, #5
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <MX_GPIO_Init+0x308>)
 8000d4e:	f002 fae1 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d52:	2378      	movs	r3, #120	; 0x78
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d62:	2307      	movs	r3, #7
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <MX_GPIO_Init+0x308>)
 8000d6e:	f002 fad1 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_GPIO_Init+0x304>)
 8000d90:	f002 fac0 	bl	8003314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2017      	movs	r0, #23
 8000d9a:	f002 f978 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d9e:	2017      	movs	r0, #23
 8000da0:	f002 f991 	bl	80030c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f002 f970 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dae:	2028      	movs	r0, #40	; 0x28
 8000db0:	f002 f989 	bl	80030c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48001000 	.word	0x48001000
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	48000c00 	.word	0x48000c00
 8000dcc:	48000800 	.word	0x48000800

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>
	...

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_MspInit+0x44>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_MspInit+0x44>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_MspInit+0x44>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x44>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a2d      	ldr	r2, [pc, #180]	; (8000ef8 <HAL_ADC_MspInit+0xd4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d154      	bne.n	8000ef0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a26      	ldr	r2, [pc, #152]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a20      	ldr	r2, [pc, #128]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_ADC_MspInit+0xd8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ea6:	233f      	movs	r3, #63	; 0x3f
 8000ea8:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <HAL_ADC_MspInit+0xdc>)
 8000eba:	f002 fa2b 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ec2:	230b      	movs	r3, #11
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f002 fa1e 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000edc:	230b      	movs	r3, #11
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <HAL_ADC_MspInit+0xe0>)
 8000eec:	f002 fa12 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	50040000 	.word	0x50040000
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000800 	.word	0x48000800
 8000f04:	48000400 	.word	0x48000400

08000f08 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ac      	sub	sp, #176	; 0xb0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2288      	movs	r2, #136	; 0x88
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 fa8b 	bl	8006444 <memset>
  if(DFSDM1_Init == 0)
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d142      	bne.n	8000fbc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fd78 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f52:	f7ff ff3d 	bl	8000dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f60:	6613      	str	r3, [r2, #96]	; 0x60
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f86:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000fae:	f002 f9b1 	bl	8003314 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a02      	ldr	r2, [pc, #8]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fba:	6013      	str	r3, [r2, #0]
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	37b0      	adds	r7, #176	; 0xb0
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000838 	.word	0x20000838
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48001000 	.word	0x48001000

08000fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ac      	sub	sp, #176	; 0xb0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2288      	movs	r2, #136	; 0x88
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f005 fa27 	bl	8006444 <memset>
  if(hi2c->Instance==I2C2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a21      	ldr	r2, [pc, #132]	; (8001080 <HAL_I2C_MspInit+0xb0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d13b      	bne.n	8001078 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fd15 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff feda 	bl	8000dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_I2C_MspInit+0xb4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <HAL_I2C_MspInit+0xb4>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_I2C_MspInit+0xb4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001034:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800104e:	2304      	movs	r3, #4
 8001050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001058:	4619      	mov	r1, r3
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <HAL_I2C_MspInit+0xb8>)
 800105c:	f002 f95a 	bl	8003314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_I2C_MspInit+0xb4>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_I2C_MspInit+0xb4>)
 8001066:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800106a:	6593      	str	r3, [r2, #88]	; 0x58
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_I2C_MspInit+0xb4>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	37b0      	adds	r7, #176	; 0xb0
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005800 	.word	0x40005800
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_QSPI_MspInit+0x7c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d128      	bne.n	8001100 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010b2:	4a16      	ldr	r2, [pc, #88]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6513      	str	r3, [r2, #80]	; 0x50
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_QSPI_MspInit+0x80>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010de:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010e2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010f0:	230a      	movs	r3, #10
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_QSPI_MspInit+0x84>)
 80010fc:	f002 f90a 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	a0001000 	.word	0xa0001000
 800110c:	40021000 	.word	0x40021000
 8001110:	48001000 	.word	0x48001000

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_SPI_MspInit+0x7c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d128      	bne.n	8001188 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_SPI_MspInit+0x80>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	4a16      	ldr	r2, [pc, #88]	; (8001194 <HAL_SPI_MspInit+0x80>)
 800113c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001140:	6593      	str	r3, [r2, #88]	; 0x58
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_SPI_MspInit+0x80>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_SPI_MspInit+0x80>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_SPI_MspInit+0x80>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_SPI_MspInit+0x80>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001166:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001178:	2306      	movs	r3, #6
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_SPI_MspInit+0x84>)
 8001184:	f002 f8c6 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40003c00 	.word	0x40003c00
 8001194:	40021000 	.word	0x40021000
 8001198:	48000800 	.word	0x48000800

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0ae      	sub	sp, #184	; 0xb8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2288      	movs	r2, #136	; 0x88
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 f941 	bl	8006444 <memset>
  if(huart->Instance==USART1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a42      	ldr	r2, [pc, #264]	; (80012d0 <HAL_UART_MspInit+0x134>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d13b      	bne.n	8001244 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011d0:	2300      	movs	r3, #0
 80011d2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 fc2f 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011e4:	f7ff fdf4 	bl	8000dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e8:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <HAL_UART_MspInit+0x138>)
 80011ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ec:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <HAL_UART_MspInit+0x138>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f2:	6613      	str	r3, [r2, #96]	; 0x60
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_UART_MspInit+0x138>)
 80011f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HAL_UART_MspInit+0x138>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001218:	23c0      	movs	r3, #192	; 0xc0
 800121a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001230:	2307      	movs	r3, #7
 8001232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800123a:	4619      	mov	r1, r3
 800123c:	4826      	ldr	r0, [pc, #152]	; (80012d8 <HAL_UART_MspInit+0x13c>)
 800123e:	f002 f869 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001242:	e040      	b.n	80012c6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a24      	ldr	r2, [pc, #144]	; (80012dc <HAL_UART_MspInit+0x140>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d13b      	bne.n	80012c6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800124e:	2304      	movs	r3, #4
 8001250:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001252:	2300      	movs	r3, #0
 8001254:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fbee 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001266:	f7ff fdb3 	bl	8000dd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_UART_MspInit+0x138>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_UART_MspInit+0x138>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800129a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b4:	2307      	movs	r3, #7
 80012b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012be:	4619      	mov	r1, r3
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <HAL_UART_MspInit+0x144>)
 80012c2:	f002 f827 	bl	8003314 <HAL_GPIO_Init>
}
 80012c6:	bf00      	nop
 80012c8:	37b8      	adds	r7, #184	; 0xb8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	40004800 	.word	0x40004800
 80012e0:	48000c00 	.word	0x48000c00

080012e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001304:	d154      	bne.n	80013b0 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800131e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f001 ffed 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800133a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800134c:	230a      	movs	r3, #10
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f001 ffdb 	bl	8003314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 8001364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d114      	bne.n	80013ac <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6593      	str	r3, [r2, #88]	; 0x58
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800139a:	f002 fc83 	bl	8003ca4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <HAL_PCD_MspInit+0xd4>)
 80013a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013aa:	e001      	b.n	80013b0 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80013ac:	f002 fc7a 	bl	8003ca4 <HAL_PWREx_EnableVddUSB>
}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f95e 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001414:	2020      	movs	r0, #32
 8001416:	f002 f93f 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800141a:	2040      	movs	r0, #64	; 0x40
 800141c:	f002 f93c 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001420:	2080      	movs	r0, #128	; 0x80
 8001422:	f002 f939 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001426:	f44f 7080 	mov.w	r0, #256	; 0x100
 800142a:	f002 f935 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}

08001432 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001436:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800143a:	f002 f92d 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800143e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001442:	f002 f929 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001446:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800144a:	f002 f925 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800144e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001452:	f002 f921 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001456:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800145a:	f002 f91d 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}

08001462 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e00a      	b.n	800148a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001474:	f3af 8000 	nop.w
 8001478:	4601      	mov	r1, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	60ba      	str	r2, [r7, #8]
 8001480:	b2ca      	uxtb	r2, r1
 8001482:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	dbf0      	blt.n	8001474 <_read+0x12>
  }

  return len;
 8001492:	687b      	ldr	r3, [r7, #4]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e009      	b.n	80014c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbf1      	blt.n	80014ae <_write+0x12>
  }
  return len;
 80014ca:	687b      	ldr	r3, [r7, #4]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_close>:

int _close(int file)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	605a      	str	r2, [r3, #4]
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_isatty>:

int _isatty(int file)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f004 ff40 	bl	80063f0 <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20018000 	.word	0x20018000
 800159c:	00000400 	.word	0x00000400
 80015a0:	2000083c 	.word	0x2000083c
 80015a4:	20000878 	.word	0x20000878

080015a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <SystemInit+0x20>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <SystemInit+0x20>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d0:	f7ff ffea 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <LoopForever+0x6>)
  ldr r1, =_edata
 80015d6:	490d      	ldr	r1, [pc, #52]	; (800160c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <LoopForever+0xe>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015ec:	4c0a      	ldr	r4, [pc, #40]	; (8001618 <LoopForever+0x16>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fa:	f004 feff 	bl	80063fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015fe:	f7fe ffb9 	bl	8000574 <main>

08001602 <LoopForever>:

LoopForever:
    b LoopForever
 8001602:	e7fe      	b.n	8001602 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001604:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001610:	08007490 	.word	0x08007490
  ldr r2, =_sbss
 8001614:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001618:	20000878 	.word	0x20000878

0800161c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_2_IRQHandler>

0800161e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f001 fd25 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f80e 	bl	8001650 <HAL_InitTick>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	e001      	b.n	8001644 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001640:	f7ff fbcc 	bl	8000ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001644:	79fb      	ldrb	r3, [r7, #7]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_InitTick+0x6c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d023      	beq.n	80016ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_InitTick+0x70>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_InitTick+0x6c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fd31 	bl	80030e2 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10f      	bne.n	80016a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d809      	bhi.n	80016a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f001 fcfb 	bl	800308e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_InitTick+0x74>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e007      	b.n	80016b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e004      	b.n	80016b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	e001      	b.n	80016b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000840 	.word	0x20000840

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000840 	.word	0x20000840

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008

08001750 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	609a      	str	r2, [r3, #8]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3360      	adds	r3, #96	; 0x60
 80017ca:	461a      	mov	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <LL_ADC_SetOffset+0x44>)
 80017da:	4013      	ands	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	4313      	orrs	r3, r2
 80017e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017f0:	bf00      	nop
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	03fff000 	.word	0x03fff000

08001800 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3360      	adds	r3, #96	; 0x60
 800180e:	461a      	mov	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3360      	adds	r3, #96	; 0x60
 800183c:	461a      	mov	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001856:	bf00      	nop
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3330      	adds	r3, #48	; 0x30
 8001898:	461a      	mov	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	211f      	movs	r1, #31
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	f003 011f 	and.w	r1, r3, #31
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3314      	adds	r3, #20
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	0e5b      	lsrs	r3, r3, #25
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	0d1b      	lsrs	r3, r3, #20
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2107      	movs	r1, #7
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	401a      	ands	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	0d1b      	lsrs	r3, r3, #20
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0318 	and.w	r3, r3, #24
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <LL_ADC_SetChannelSingleDiff+0x44>)
 800195c:	40d9      	lsrs	r1, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	400b      	ands	r3, r1
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	431a      	orrs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	0007ffff 	.word	0x0007ffff

08001980 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 031f 	and.w	r3, r3, #31
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6093      	str	r3, [r2, #8]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a90:	f043 0202 	orr.w	r2, r3, #2
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <LL_ADC_IsEnabled+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_ADC_IsEnabled+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_IsDisableOngoing+0x18>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b2c:	f043 0210 	orr.w	r2, r3, #16
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b7a:	f043 0220 	orr.w	r2, r3, #32
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e136      	b.n	8001e3c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff f921 	bl	8000e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fef1 	bl	80019dc <LL_ADC_IsDeepPowerDownEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fed7 	bl	80019b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff0c 	bl	8001a2c <LL_ADC_IsInternalRegulatorEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d115      	bne.n	8001c46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fef0 	bl	8001a04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c24:	4b87      	ldr	r3, [pc, #540]	; (8001e44 <HAL_ADC_Init+0x290>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <HAL_ADC_Init+0x294>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c38:	e002      	b.n	8001c40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f9      	bne.n	8001c3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff feee 	bl	8001a2c <LL_ADC_IsInternalRegulatorEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff62 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 8001c7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 80cf 	bne.w	8001e2a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f040 80cb 	bne.w	8001e2a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c9c:	f043 0202 	orr.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fefb 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d115      	bne.n	8001ce0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb4:	4865      	ldr	r0, [pc, #404]	; (8001e4c <HAL_ADC_Init+0x298>)
 8001cb6:	f7ff fef5 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4864      	ldr	r0, [pc, #400]	; (8001e50 <HAL_ADC_Init+0x29c>)
 8001cbe:	f7ff fef1 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	431c      	orrs	r4, r3
 8001cc6:	4863      	ldr	r0, [pc, #396]	; (8001e54 <HAL_ADC_Init+0x2a0>)
 8001cc8:	f7ff feec 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4323      	orrs	r3, r4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	485f      	ldr	r0, [pc, #380]	; (8001e58 <HAL_ADC_Init+0x2a4>)
 8001cdc:	f7ff fd38 	bl	8001750 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7e5b      	ldrb	r3, [r3, #25]
 8001ce4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001cf0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cf6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d106      	bne.n	8001d1c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	3b01      	subs	r3, #1
 8001d14:	045b      	lsls	r3, r3, #17
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_ADC_Init+0x2a8>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fef5 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 8001d56:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff16 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 8001d62:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d13d      	bne.n	8001de6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d13a      	bne.n	8001de6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d74:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d7c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d8c:	f023 0302 	bic.w	r3, r3, #2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	69b9      	ldr	r1, [r7, #24]
 8001d96:	430b      	orrs	r3, r1
 8001d98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d118      	bne.n	8001dd6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	e007      	b.n	8001de6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10c      	bne.n	8001e08 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f023 010f 	bic.w	r1, r3, #15
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
 8001e06:	e007      	b.n	8001e18 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 020f 	bic.w	r2, r2, #15
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f023 0303 	bic.w	r3, r3, #3
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
 8001e28:	e007      	b.n	8001e3a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	f043 0210 	orr.w	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	053e2d63 	.word	0x053e2d63
 8001e4c:	50040000 	.word	0x50040000
 8001e50:	50040100 	.word	0x50040100
 8001e54:	50040200 	.word	0x50040200
 8001e58:	50040300 	.word	0x50040300
 8001e5c:	fff0c007 	.word	0xfff0c007

08001e60 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e68:	4857      	ldr	r0, [pc, #348]	; (8001fc8 <HAL_ADC_Start+0x168>)
 8001e6a:	f7ff fd89 	bl	8001980 <LL_ADC_GetMultimode>
 8001e6e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fe63 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 809c 	bne.w	8001fba <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_Start+0x30>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e097      	b.n	8001fc0 <HAL_ADC_Start+0x160>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fe61 	bl	8002b60 <ADC_Enable>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 8083 	bne.w	8001fb0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a42      	ldr	r2, [pc, #264]	; (8001fcc <HAL_ADC_Start+0x16c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d002      	beq.n	8001ece <HAL_ADC_Start+0x6e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e000      	b.n	8001ed0 <HAL_ADC_Start+0x70>
 8001ece:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <HAL_ADC_Start+0x170>)
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d002      	beq.n	8001ede <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef6:	d106      	bne.n	8001f06 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f023 0206 	bic.w	r2, r3, #6
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	221c      	movs	r2, #28
 8001f12:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2a      	ldr	r2, [pc, #168]	; (8001fcc <HAL_ADC_Start+0x16c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d002      	beq.n	8001f2c <HAL_ADC_Start+0xcc>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e000      	b.n	8001f2e <HAL_ADC_Start+0xce>
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_ADC_Start+0x170>)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d008      	beq.n	8001f48 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d002      	beq.n	8001f48 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b09      	cmp	r3, #9
 8001f46:	d114      	bne.n	8001f72 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fdc0 	bl	8001af0 <LL_ADC_REG_StartConversion>
 8001f70:	e025      	b.n	8001fbe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_ADC_Start+0x16c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d002      	beq.n	8001f8e <HAL_ADC_Start+0x12e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	e000      	b.n	8001f90 <HAL_ADC_Start+0x130>
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_ADC_Start+0x170>)
 8001f90:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00f      	beq.n	8001fbe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
 8001fae:	e006      	b.n	8001fbe <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fb8:	e001      	b.n	8001fbe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	50040300 	.word	0x50040300
 8001fcc:	50040100 	.word	0x50040100
 8001fd0:	50040000 	.word	0x50040000

08001fd4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Stop+0x16>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e023      	b.n	8002032 <HAL_ADC_Stop+0x5e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fcf7 	bl	80029e8 <ADC_ConversionStop>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d111      	bne.n	8002028 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fe31 	bl	8002c6c <ADC_Disable>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002046:	4866      	ldr	r0, [pc, #408]	; (80021e0 <HAL_ADC_PollForConversion+0x1a4>)
 8002048:	f7ff fc9a 	bl	8001980 <LL_ADC_GetMultimode>
 800204c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b08      	cmp	r3, #8
 8002054:	d102      	bne.n	800205c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002056:	2308      	movs	r3, #8
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e02a      	b.n	80020b2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d002      	beq.n	800206e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b09      	cmp	r3, #9
 800206c:	d111      	bne.n	8002092 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0a4      	b.n	80021d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800208c:	2304      	movs	r3, #4
 800208e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002090:	e00f      	b.n	80020b2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002092:	4853      	ldr	r0, [pc, #332]	; (80021e0 <HAL_ADC_PollForConversion+0x1a4>)
 8002094:	f7ff fc82 	bl	800199c <LL_ADC_GetMultiDMATransfer>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e093      	b.n	80021d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020ae:	2304      	movs	r3, #4
 80020b0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80020b2:	f7ff fb1d 	bl	80016f0 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020b8:	e021      	b.n	80020fe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d01d      	beq.n	80020fe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020c2:	f7ff fb15 	bl	80016f0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <HAL_ADC_PollForConversion+0x9c>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d112      	bne.n	80020fe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10b      	bne.n	80020fe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f043 0204 	orr.w	r2, r3, #4
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e06b      	b.n	80021d6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0d6      	beq.n	80020ba <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fba0 	bl	8001862 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01c      	beq.n	8002162 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7e5b      	ldrb	r3, [r3, #25]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d118      	bne.n	8002162 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b08      	cmp	r3, #8
 800213c:	d111      	bne.n	8002162 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_ADC_PollForConversion+0x1a8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d002      	beq.n	8002172 <HAL_ADC_PollForConversion+0x136>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	e000      	b.n	8002174 <HAL_ADC_PollForConversion+0x138>
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_ADC_PollForConversion+0x1ac>)
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	4293      	cmp	r3, r2
 800217a:	d008      	beq.n	800218e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d002      	beq.n	800218e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b09      	cmp	r3, #9
 800218c:	d104      	bne.n	8002198 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	e00c      	b.n	80021b2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_ADC_PollForConversion+0x1a8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d002      	beq.n	80021a8 <HAL_ADC_PollForConversion+0x16c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	e000      	b.n	80021aa <HAL_ADC_PollForConversion+0x16e>
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_ADC_PollForConversion+0x1ac>)
 80021aa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d104      	bne.n	80021c2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2208      	movs	r2, #8
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e008      	b.n	80021d4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d103      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	220c      	movs	r2, #12
 80021d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	50040300 	.word	0x50040300
 80021e4:	50040100 	.word	0x50040100
 80021e8:	50040000 	.word	0x50040000

080021ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0b6      	sub	sp, #216	; 0xd8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x22>
 8002226:	2302      	movs	r3, #2
 8002228:	e3c7      	b.n	80029ba <HAL_ADC_ConfigChannel+0x7b2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fc82 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 83a8 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d824      	bhi.n	8002296 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	3b02      	subs	r3, #2
 8002252:	2b03      	cmp	r3, #3
 8002254:	d81b      	bhi.n	800228e <HAL_ADC_ConfigChannel+0x86>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_ADC_ConfigChannel+0x54>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800226d 	.word	0x0800226d
 8002260:	08002275 	.word	0x08002275
 8002264:	0800227d 	.word	0x0800227d
 8002268:	08002285 	.word	0x08002285
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	220c      	movs	r2, #12
 8002270:	605a      	str	r2, [r3, #4]
          break;
 8002272:	e011      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2212      	movs	r2, #18
 8002278:	605a      	str	r2, [r3, #4]
          break;
 800227a:	e00d      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2218      	movs	r2, #24
 8002280:	605a      	str	r2, [r3, #4]
          break;
 8002282:	e009      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228a:	605a      	str	r2, [r3, #4]
          break;
 800228c:	e004      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2206      	movs	r2, #6
 8002292:	605a      	str	r2, [r3, #4]
          break;
 8002294:	e000      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002296:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	f7ff faef 	bl	8001888 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fc46 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 80022b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fc66 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 80022c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 81a6 	bne.w	800261c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 81a1 	bne.w	800261c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f7ff fafa 	bl	80018e0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	08db      	lsrs	r3, r3, #3
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d00a      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800231e:	f7ff fa4b 	bl	80017b8 <LL_ADC_SetOffset>
 8002322:	e17b      	b.n	800261c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fa68 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x148>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fa5d 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	e01e      	b.n	800238e <HAL_ADC_ConfigChannel+0x186>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fa52 	bl	8001800 <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800236e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e004      	b.n	800238c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x19e>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0e9b      	lsrs	r3, r3, #26
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	e018      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1d0>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e004      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80023ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023d8:	429a      	cmp	r2, r3
 80023da:	d106      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fa21 	bl	800182c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2101      	movs	r1, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fa05 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x20e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f9fa 	bl	8001800 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	e01e      	b.n	8002454 <HAL_ADC_ConfigChannel+0x24c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f9ef 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002434:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800243c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e004      	b.n	8002452 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADC_ConfigChannel+0x264>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	e018      	b.n	800249e <HAL_ADC_ConfigChannel+0x296>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002480:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e004      	b.n	800249e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f9be 	bl	800182c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2102      	movs	r1, #2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f9a2 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10a      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x2d4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff f997 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	f003 021f 	and.w	r2, r3, #31
 80024da:	e01e      	b.n	800251a <HAL_ADC_ConfigChannel+0x312>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f98c 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e004      	b.n	8002518 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800250e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x32a>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	e016      	b.n	8002560 <HAL_ADC_ConfigChannel+0x358>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800254a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e004      	b.n	8002560 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f95d 	bl	800182c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2103      	movs	r1, #3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f941 	bl	8001800 <LL_ADC_GetOffsetChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x396>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2103      	movs	r1, #3
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff f936 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	e017      	b.n	80025ce <HAL_ADC_ConfigChannel+0x3c6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2103      	movs	r1, #3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff f92b 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80025c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x3de>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	e011      	b.n	800260a <HAL_ADC_ConfigChannel+0x402>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800260a:	429a      	cmp	r2, r3
 800260c:	d106      	bne.n	800261c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	2103      	movs	r1, #3
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f908 	bl	800182c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fa3f 	bl	8001aa4 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 813f 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	f7ff f97c 	bl	8001938 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a8e      	ldr	r2, [pc, #568]	; (8002880 <HAL_ADC_ConfigChannel+0x678>)
 8002646:	4293      	cmp	r3, r2
 8002648:	f040 8130 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x46c>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2b09      	cmp	r3, #9
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e019      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x4a0>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002684:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2b09      	cmp	r3, #9
 80026a0:	bf94      	ite	ls
 80026a2:	2301      	movls	r3, #1
 80026a4:	2300      	movhi	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d079      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x4c0>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c6:	e015      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x4ec>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80026e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x50c>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	e017      	b.n	8002744 <HAL_ADC_ConfigChannel+0x53c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002724:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_ADC_ConfigChannel+0x562>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	051b      	lsls	r3, r3, #20
 8002768:	e018      	b.n	800279c <HAL_ADC_ConfigChannel+0x594>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800277c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002782:	2320      	movs	r3, #32
 8002784:	e003      	b.n	800278e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279c:	430b      	orrs	r3, r1
 800279e:	e080      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x5b4>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	3301      	adds	r3, #1
 80027b4:	069b      	lsls	r3, r3, #26
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ba:	e015      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x5e0>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x600>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	e017      	b.n	8002838 <HAL_ADC_ConfigChannel+0x630>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	61fb      	str	r3, [r7, #28]
  return result;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e003      	b.n	800282c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	ea42 0103 	orr.w	r1, r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x65c>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	3b1e      	subs	r3, #30
 800285c:	051b      	lsls	r3, r3, #20
 800285e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002862:	e01d      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x698>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	613b      	str	r3, [r7, #16]
  return result;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e005      	b.n	800288c <HAL_ADC_ConfigChannel+0x684>
 8002880:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	3b1e      	subs	r3, #30
 800289a:	051b      	lsls	r3, r3, #20
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a0:	430b      	orrs	r3, r1
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	6892      	ldr	r2, [r2, #8]
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7ff f81a 	bl	80018e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <HAL_ADC_ConfigChannel+0x7bc>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d07a      	beq.n	80029ae <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b8:	4843      	ldr	r0, [pc, #268]	; (80029c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80028ba:	f7fe ff6f 	bl	800179c <LL_ADC_GetCommonPathInternalCh>
 80028be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a41      	ldr	r2, [pc, #260]	; (80029cc <HAL_ADC_ConfigChannel+0x7c4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d12c      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d126      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x6e4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3b      	ldr	r2, [pc, #236]	; (80029d4 <HAL_ADC_ConfigChannel+0x7cc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d15d      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028f4:	4619      	mov	r1, r3
 80028f6:	4834      	ldr	r0, [pc, #208]	; (80029c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80028f8:	f7fe ff3d 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <HAL_ADC_ConfigChannel+0x7d0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	4a36      	ldr	r2, [pc, #216]	; (80029dc <HAL_ADC_ConfigChannel+0x7d4>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002916:	e002      	b.n	800291e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3b01      	subs	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f9      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002924:	e040      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2d      	ldr	r2, [pc, #180]	; (80029e0 <HAL_ADC_ConfigChannel+0x7d8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d118      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x75a>
 8002930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d112      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_ADC_ConfigChannel+0x748>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_ADC_ConfigChannel+0x7cc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d12d      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002958:	4619      	mov	r1, r3
 800295a:	481b      	ldr	r0, [pc, #108]	; (80029c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800295c:	f7fe ff0b 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002960:	e024      	b.n	80029ac <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d120      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800296c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11a      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_ADC_ConfigChannel+0x7c8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d115      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800298a:	4619      	mov	r1, r3
 800298c:	480e      	ldr	r0, [pc, #56]	; (80029c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800298e:	f7fe fef2 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
 8002992:	e00c      	b.n	80029ae <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	f043 0220 	orr.w	r2, r3, #32
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80029a6:	e002      	b.n	80029ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a8:	bf00      	nop
 80029aa:	e000      	b.n	80029ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	37d8      	adds	r7, #216	; 0xd8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	80080000 	.word	0x80080000
 80029c8:	50040300 	.word	0x50040300
 80029cc:	c7520000 	.word	0xc7520000
 80029d0:	50040000 	.word	0x50040000
 80029d4:	50040200 	.word	0x50040200
 80029d8:	20000000 	.word	0x20000000
 80029dc:	053e2d63 	.word	0x053e2d63
 80029e0:	cb840000 	.word	0xcb840000
 80029e4:	80000001 	.word	0x80000001

080029e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f89e 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 8002a04:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f8bf 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 8002a10:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8098 	beq.w	8002b50 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02a      	beq.n	8002a84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7e5b      	ldrb	r3, [r3, #25]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d126      	bne.n	8002a84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	7e1b      	ldrb	r3, [r3, #24]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d122      	bne.n	8002a84 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a42:	e014      	b.n	8002a6e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4a45      	ldr	r2, [pc, #276]	; (8002b5c <ADC_ConversionStop+0x174>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d90d      	bls.n	8002a68 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	f043 0210 	orr.w	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e074      	b.n	8002b52 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d1e3      	bne.n	8002a44 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2240      	movs	r2, #64	; 0x40
 8002a82:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d014      	beq.n	8002ab4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f856 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f813 	bl	8001aca <LL_ADC_IsDisableOngoing>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f832 	bl	8001b18 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d014      	beq.n	8002ae4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f865 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fffb 	bl	8001aca <LL_ADC_IsDisableOngoing>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f841 	bl	8001b66 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d005      	beq.n	8002af6 <ADC_ConversionStop+0x10e>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d105      	bne.n	8002afc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002af0:	230c      	movs	r3, #12
 8002af2:	617b      	str	r3, [r7, #20]
        break;
 8002af4:	e005      	b.n	8002b02 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002af6:	2308      	movs	r3, #8
 8002af8:	617b      	str	r3, [r7, #20]
        break;
 8002afa:	e002      	b.n	8002b02 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002afc:	2304      	movs	r3, #4
 8002afe:	617b      	str	r3, [r7, #20]
        break;
 8002b00:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b02:	f7fe fdf5 	bl	80016f0 <HAL_GetTick>
 8002b06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b08:	e01b      	b.n	8002b42 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b0a:	f7fe fdf1 	bl	80016f0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d914      	bls.n	8002b42 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f043 0210 	orr.w	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e007      	b.n	8002b52 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1dc      	bne.n	8002b0a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	a33fffff 	.word	0xa33fffff

08002b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe ff97 	bl	8001aa4 <LL_ADC_IsEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d169      	bne.n	8002c50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <ADC_Enable+0xfc>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e055      	b.n	8002c52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe ff52 	bl	8001a54 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bb0:	482b      	ldr	r0, [pc, #172]	; (8002c60 <ADC_Enable+0x100>)
 8002bb2:	f7fe fdf3 	bl	800179c <LL_ADC_GetCommonPathInternalCh>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <ADC_Enable+0x104>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	4a28      	ldr	r2, [pc, #160]	; (8002c68 <ADC_Enable+0x108>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002bda:	e002      	b.n	8002be2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f9      	bne.n	8002bdc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fd82 	bl	80016f0 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bee:	e028      	b.n	8002c42 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff55 	bl	8001aa4 <LL_ADC_IsEnabled>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe ff25 	bl	8001a54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c0a:	f7fe fd71 	bl	80016f0 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d914      	bls.n	8002c42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00d      	beq.n	8002c42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f043 0210 	orr.w	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e007      	b.n	8002c52 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d1cf      	bne.n	8002bf0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	8000003f 	.word	0x8000003f
 8002c60:	50040300 	.word	0x50040300
 8002c64:	20000000 	.word	0x20000000
 8002c68:	053e2d63 	.word	0x053e2d63

08002c6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe ff26 	bl	8001aca <LL_ADC_IsDisableOngoing>
 8002c7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe ff0d 	bl	8001aa4 <LL_ADC_IsEnabled>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d047      	beq.n	8002d20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d144      	bne.n	8002d20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030d 	and.w	r3, r3, #13
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10c      	bne.n	8002cbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fee7 	bl	8001a7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe fd1b 	bl	80016f0 <HAL_GetTick>
 8002cba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cbc:	e029      	b.n	8002d12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e023      	b.n	8002d22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cda:	f7fe fd09 	bl	80016f0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d914      	bls.n	8002d12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e007      	b.n	8002d22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1dc      	bne.n	8002cda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <LL_ADC_IsEnabled>:
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_IsEnabled+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_IsEnabled+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d101      	bne.n	8002d68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b09f      	sub	sp, #124	; 0x7c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e093      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002da2:	2300      	movs	r3, #0
 8002da4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a47      	ldr	r2, [pc, #284]	; (8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d102      	bne.n	8002db6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	e001      	b.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e072      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ffb8 	bl	8002d50 <LL_ADC_REG_IsConversionOngoing>
 8002de0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ffb2 	bl	8002d50 <LL_ADC_REG_IsConversionOngoing>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d154      	bne.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d151      	bne.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002dfa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d02c      	beq.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e16:	035b      	lsls	r3, r3, #13
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e20:	4829      	ldr	r0, [pc, #164]	; (8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e22:	f7ff ff82 	bl	8002d2a <LL_ADC_IsEnabled>
 8002e26:	4604      	mov	r4, r0
 8002e28:	4828      	ldr	r0, [pc, #160]	; (8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e2a:	f7ff ff7e 	bl	8002d2a <LL_ADC_IsEnabled>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	431c      	orrs	r4, r3
 8002e32:	4828      	ldr	r0, [pc, #160]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e34:	f7ff ff79 	bl	8002d2a <LL_ADC_IsEnabled>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4323      	orrs	r3, r4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d137      	bne.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e48:	f023 030f 	bic.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	6811      	ldr	r1, [r2, #0]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5c:	e028      	b.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e6a:	4817      	ldr	r0, [pc, #92]	; (8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e6c:	f7ff ff5d 	bl	8002d2a <LL_ADC_IsEnabled>
 8002e70:	4604      	mov	r4, r0
 8002e72:	4816      	ldr	r0, [pc, #88]	; (8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e74:	f7ff ff59 	bl	8002d2a <LL_ADC_IsEnabled>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	431c      	orrs	r4, r3
 8002e7c:	4815      	ldr	r0, [pc, #84]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e7e:	f7ff ff54 	bl	8002d2a <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4323      	orrs	r3, r4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d112      	bne.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e92:	f023 030f 	bic.w	r3, r3, #15
 8002e96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e98:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e9a:	e009      	b.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	f043 0220 	orr.w	r2, r3, #32
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002eae:	e000      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	377c      	adds	r7, #124	; 0x7c
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	50040000 	.word	0x50040000
 8002ecc:	50040100 	.word	0x50040100
 8002ed0:	50040300 	.word	0x50040300
 8002ed4:	50040200 	.word	0x50040200

08002ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0a:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	60d3      	str	r3, [r2, #12]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <__NVIC_GetPriorityGrouping+0x18>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 0307 	and.w	r3, r3, #7
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	db0b      	blt.n	8002f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4907      	ldr	r1, [pc, #28]	; (8002f74 <__NVIC_EnableIRQ+0x38>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000e100 	.word	0xe000e100

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db0a      	blt.n	8002fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	490c      	ldr	r1, [pc, #48]	; (8002fc4 <__NVIC_SetPriority+0x4c>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa0:	e00a      	b.n	8002fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4908      	ldr	r1, [pc, #32]	; (8002fc8 <__NVIC_SetPriority+0x50>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	761a      	strb	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2304      	movcs	r3, #4
 8002fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d902      	bls.n	8002ffc <NVIC_EncodePriority+0x30>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3b03      	subs	r3, #3
 8002ffa:	e000      	b.n	8002ffe <NVIC_EncodePriority+0x32>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	401a      	ands	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003014:	f04f 31ff 	mov.w	r1, #4294967295
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	4313      	orrs	r3, r2
         );
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003044:	d301      	bcc.n	800304a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003046:	2301      	movs	r3, #1
 8003048:	e00f      	b.n	800306a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <SysTick_Config+0x40>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003052:	210f      	movs	r1, #15
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	f7ff ff8e 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <SysTick_Config+0x40>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <SysTick_Config+0x40>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000e010 	.word	0xe000e010

08003078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff29 	bl	8002ed8 <__NVIC_SetPriorityGrouping>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030a0:	f7ff ff3e 	bl	8002f20 <__NVIC_GetPriorityGrouping>
 80030a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff8e 	bl	8002fcc <NVIC_EncodePriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff5d 	bl	8002f78 <__NVIC_SetPriority>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff31 	bl	8002f3c <__NVIC_EnableIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffa2 	bl	8003034 <SysTick_Config>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0ac      	b.n	8003268 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f8b2 	bl	800327c <DFSDM_GetChannelFromInstance>
 8003118:	4603      	mov	r3, r0
 800311a:	4a55      	ldr	r2, [pc, #340]	; (8003270 <HAL_DFSDM_ChannelInit+0x174>)
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e09f      	b.n	8003268 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd feed 	bl	8000f08 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800312e:	4b51      	ldr	r3, [pc, #324]	; (8003274 <HAL_DFSDM_ChannelInit+0x178>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	4a4f      	ldr	r2, [pc, #316]	; (8003274 <HAL_DFSDM_ChannelInit+0x178>)
 8003136:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003138:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <HAL_DFSDM_ChannelInit+0x178>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d125      	bne.n	800318c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 8003146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800314a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800314c:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4948      	ldr	r1, [pc, #288]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a46      	ldr	r2, [pc, #280]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 8003160:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003164:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	791b      	ldrb	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d108      	bne.n	8003180 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800316e:	4b42      	ldr	r3, [pc, #264]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	3b01      	subs	r3, #1
 8003178:	041b      	lsls	r3, r3, #16
 800317a:	493f      	ldr	r1, [pc, #252]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003180:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a3c      	ldr	r2, [pc, #240]	; (8003278 <HAL_DFSDM_ChannelInit+0x17c>)
 8003186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800318a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800319a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80031aa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80031b0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 020f 	bic.w	r2, r2, #15
 80031c8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80031f0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 0207 	and.w	r2, r2, #7
 800321c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003248:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f810 	bl	800327c <DFSDM_GetChannelFromInstance>
 800325c:	4602      	mov	r2, r0
 800325e:	4904      	ldr	r1, [pc, #16]	; (8003270 <HAL_DFSDM_ChannelInit+0x174>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000848 	.word	0x20000848
 8003274:	20000844 	.word	0x20000844
 8003278:	40016000 	.word	0x40016000

0800327c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d102      	bne.n	8003292 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e02b      	b.n	80032ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <DFSDM_GetChannelFromInstance+0x80>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d102      	bne.n	80032a0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800329a:	2301      	movs	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e024      	b.n	80032ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a17      	ldr	r2, [pc, #92]	; (8003300 <DFSDM_GetChannelFromInstance+0x84>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d102      	bne.n	80032ae <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80032a8:	2302      	movs	r3, #2
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e01d      	b.n	80032ea <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <DFSDM_GetChannelFromInstance+0x88>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d102      	bne.n	80032bc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80032b6:	2304      	movs	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e016      	b.n	80032ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <DFSDM_GetChannelFromInstance+0x8c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d102      	bne.n	80032ca <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80032c4:	2305      	movs	r3, #5
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e00f      	b.n	80032ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a0f      	ldr	r2, [pc, #60]	; (800330c <DFSDM_GetChannelFromInstance+0x90>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d102      	bne.n	80032d8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80032d2:	2306      	movs	r3, #6
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e008      	b.n	80032ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <DFSDM_GetChannelFromInstance+0x94>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80032e0:	2307      	movs	r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e001      	b.n	80032ea <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80032e6:	2303      	movs	r3, #3
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40016000 	.word	0x40016000
 80032fc:	40016020 	.word	0x40016020
 8003300:	40016040 	.word	0x40016040
 8003304:	40016080 	.word	0x40016080
 8003308:	400160a0 	.word	0x400160a0
 800330c:	400160c0 	.word	0x400160c0
 8003310:	400160e0 	.word	0x400160e0

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003322:	e17f      	b.n	8003624 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	4013      	ands	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8171 	beq.w	800361e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d005      	beq.n	8003354 <HAL_GPIO_Init+0x40>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d130      	bne.n	80033b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800338a:	2201      	movs	r2, #1
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	f003 0201 	and.w	r2, r3, #1
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d118      	bne.n	80033f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033c8:	2201      	movs	r2, #1
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	08db      	lsrs	r3, r3, #3
 80033de:	f003 0201 	and.w	r2, r3, #1
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d017      	beq.n	8003430 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d123      	bne.n	8003484 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	08da      	lsrs	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3208      	adds	r2, #8
 8003444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	220f      	movs	r2, #15
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	08da      	lsrs	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3208      	adds	r2, #8
 800347e:	6939      	ldr	r1, [r7, #16]
 8003480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2203      	movs	r2, #3
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0203 	and.w	r2, r3, #3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80ac 	beq.w	800361e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c6:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <HAL_GPIO_Init+0x330>)
 80034c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ca:	4a5e      	ldr	r2, [pc, #376]	; (8003644 <HAL_GPIO_Init+0x330>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6613      	str	r3, [r2, #96]	; 0x60
 80034d2:	4b5c      	ldr	r3, [pc, #368]	; (8003644 <HAL_GPIO_Init+0x330>)
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034de:	4a5a      	ldr	r2, [pc, #360]	; (8003648 <HAL_GPIO_Init+0x334>)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	3302      	adds	r3, #2
 80034e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003508:	d025      	beq.n	8003556 <HAL_GPIO_Init+0x242>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4f      	ldr	r2, [pc, #316]	; (800364c <HAL_GPIO_Init+0x338>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01f      	beq.n	8003552 <HAL_GPIO_Init+0x23e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4e      	ldr	r2, [pc, #312]	; (8003650 <HAL_GPIO_Init+0x33c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d019      	beq.n	800354e <HAL_GPIO_Init+0x23a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4d      	ldr	r2, [pc, #308]	; (8003654 <HAL_GPIO_Init+0x340>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_Init+0x236>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4c      	ldr	r2, [pc, #304]	; (8003658 <HAL_GPIO_Init+0x344>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00d      	beq.n	8003546 <HAL_GPIO_Init+0x232>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4b      	ldr	r2, [pc, #300]	; (800365c <HAL_GPIO_Init+0x348>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_GPIO_Init+0x22e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4a      	ldr	r2, [pc, #296]	; (8003660 <HAL_GPIO_Init+0x34c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_GPIO_Init+0x22a>
 800353a:	2306      	movs	r3, #6
 800353c:	e00c      	b.n	8003558 <HAL_GPIO_Init+0x244>
 800353e:	2307      	movs	r3, #7
 8003540:	e00a      	b.n	8003558 <HAL_GPIO_Init+0x244>
 8003542:	2305      	movs	r3, #5
 8003544:	e008      	b.n	8003558 <HAL_GPIO_Init+0x244>
 8003546:	2304      	movs	r3, #4
 8003548:	e006      	b.n	8003558 <HAL_GPIO_Init+0x244>
 800354a:	2303      	movs	r3, #3
 800354c:	e004      	b.n	8003558 <HAL_GPIO_Init+0x244>
 800354e:	2302      	movs	r3, #2
 8003550:	e002      	b.n	8003558 <HAL_GPIO_Init+0x244>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_GPIO_Init+0x244>
 8003556:	2300      	movs	r3, #0
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	f002 0203 	and.w	r2, r2, #3
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	4093      	lsls	r3, r2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003568:	4937      	ldr	r1, [pc, #220]	; (8003648 <HAL_GPIO_Init+0x334>)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003576:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_GPIO_Init+0x350>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	43db      	mvns	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800359a:	4a32      	ldr	r2, [pc, #200]	; (8003664 <HAL_GPIO_Init+0x350>)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035a0:	4b30      	ldr	r3, [pc, #192]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035c4:	4a27      	ldr	r2, [pc, #156]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035ca:	4b26      	ldr	r3, [pc, #152]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035ee:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003618:	4a12      	ldr	r2, [pc, #72]	; (8003664 <HAL_GPIO_Init+0x350>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3301      	adds	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	f47f ae78 	bne.w	8003324 <HAL_GPIO_Init+0x10>
  }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	40010000 	.word	0x40010000
 800364c:	48000400 	.word	0x48000400
 8003650:	48000800 	.word	0x48000800
 8003654:	48000c00 	.word	0x48000c00
 8003658:	48001000 	.word	0x48001000
 800365c:	48001400 	.word	0x48001400
 8003660:	48001800 	.word	0x48001800
 8003664:	40010400 	.word	0x40010400

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003684:	e002      	b.n	800368c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ae:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f806 	bl	80036c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40010400 	.word	0x40010400

080036c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e081      	b.n	80037f4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fd fc63 	bl	8000fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2224      	movs	r2, #36	; 0x24
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800372e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d107      	bne.n	8003758 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	e006      	b.n	8003766 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003764:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d104      	bne.n	8003778 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003776:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69d9      	ldr	r1, [r3, #28]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	d138      	bne.n	8003884 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800381c:	2302      	movs	r3, #2
 800381e:	e032      	b.n	8003886 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800384e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d139      	bne.n	800391c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e033      	b.n	800391e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2224      	movs	r2, #36	; 0x24
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800392a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392c:	b08f      	sub	sp, #60	; 0x3c
 800392e:	af0a      	add	r7, sp, #40	; 0x28
 8003930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e116      	b.n	8003b6a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fcc4 	bl	80012e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2203      	movs	r2, #3
 8003960:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f002 faaf 	bl	8005ede <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	687e      	ldr	r6, [r7, #4]
 8003988:	466d      	mov	r5, sp
 800398a:	f106 0410 	add.w	r4, r6, #16
 800398e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003996:	e894 0003 	ldmia.w	r4, {r0, r1}
 800399a:	e885 0003 	stmia.w	r5, {r0, r1}
 800399e:	1d33      	adds	r3, r6, #4
 80039a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a2:	6838      	ldr	r0, [r7, #0]
 80039a4:	f002 fa6f 	bl	8005e86 <USB_CoreInit>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0d7      	b.n	8003b6a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 fa9d 	bl	8005f00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	e04a      	b.n	8003a62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039cc:	7bfa      	ldrb	r2, [r7, #15]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	333d      	adds	r3, #61	; 0x3d
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	333c      	adds	r3, #60	; 0x3c
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	b298      	uxth	r0, r3
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3344      	adds	r3, #68	; 0x44
 8003a08:	4602      	mov	r2, r0
 8003a0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3340      	adds	r3, #64	; 0x40
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3348      	adds	r3, #72	; 0x48
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	334c      	adds	r3, #76	; 0x4c
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3354      	adds	r3, #84	; 0x54
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3af      	bcc.n	80039cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e044      	b.n	8003afc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	3301      	adds	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d3b5      	bcc.n	8003a72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	687e      	ldr	r6, [r7, #4]
 8003b0e:	466d      	mov	r5, sp
 8003b10:	f106 0410 	add.w	r4, r6, #16
 8003b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b20:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b24:	1d33      	adds	r3, r6, #4
 8003b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b28:	6838      	ldr	r0, [r7, #0]
 8003b2a:	f002 fa35 	bl	8005f98 <USB_DevInit>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e014      	b.n	8003b6a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f80a 	bl	8003b72 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 fbe1 	bl	800632a <USB_DevDisconnect>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	f043 0303 	orr.w	r3, r3, #3
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40007000 	.word	0x40007000

08003bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40007000 	.word	0x40007000

08003bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c06:	d130      	bne.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c14:	d038      	beq.n	8003c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c1e:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2232      	movs	r2, #50	; 0x32
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0c9b      	lsrs	r3, r3, #18
 8003c38:	3301      	adds	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c3c:	e002      	b.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c50:	d102      	bne.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f2      	bne.n	8003c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c64:	d110      	bne.n	8003c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e00f      	b.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	d007      	beq.n	8003c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c78:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c80:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	20000000 	.word	0x20000000
 8003ca0:	431bde83 	.word	0x431bde83

08003ca4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb2:	6053      	str	r3, [r2, #4]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40007000 	.word	0x40007000

08003cc4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7fd fd10 	bl	80016f0 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e063      	b.n	8003da4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fd f9cb 	bl	800108c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003cf6:	f241 3188 	movw	r1, #5000	; 0x1388
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f858 	bl	8003db0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	021a      	lsls	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2120      	movs	r1, #32
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f850 	bl	8003dcc <QSPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003d30:	7afb      	ldrb	r3, [r7, #11]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d131      	bne.n	8003d9a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6852      	ldr	r2, [r2, #4]
 8003d48:	0611      	lsls	r1, r2, #24
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68d2      	ldr	r2, [r2, #12]
 8003d4e:	4311      	orrs	r1, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <HAL_QSPI_Init+0xe8>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6912      	ldr	r2, [r2, #16]
 8003d66:	0411      	lsls	r1, r2, #16
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6952      	ldr	r2, [r2, #20]
 8003d6c:	4311      	orrs	r1, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6992      	ldr	r2, [r2, #24]
 8003d72:	4311      	orrs	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003da2:	7afb      	ldrb	r3, [r7, #11]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	ffe0f8fe 	.word	0xffe0f8fe

08003db0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ddc:	e01a      	b.n	8003e14 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d016      	beq.n	8003e14 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fd fc83 	bl	80016f0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	f043 0201 	orr.w	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e00e      	b.n	8003e32 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1d6      	bne.n	8003dde <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e3ca      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e4e:	4b97      	ldr	r3, [pc, #604]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e58:	4b94      	ldr	r3, [pc, #592]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80e4 	beq.w	8004038 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_RCC_OscConfig+0x4a>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b0c      	cmp	r3, #12
 8003e7a:	f040 808b 	bne.w	8003f94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	f040 8087 	bne.w	8003f94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e86:	4b89      	ldr	r3, [pc, #548]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_RCC_OscConfig+0x62>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e3a2      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
 8003ea2:	4b82      	ldr	r3, [pc, #520]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x7c>
 8003eae:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb6:	e005      	b.n	8003ec4 <HAL_RCC_OscConfig+0x88>
 8003eb8:	4b7c      	ldr	r3, [pc, #496]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d223      	bcs.n	8003f10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fd55 	bl	800497c <RCC_SetFlashLatencyFromMSIRange>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e383      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003edc:	4b73      	ldr	r3, [pc, #460]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a72      	ldr	r2, [pc, #456]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003ee2:	f043 0308 	orr.w	r3, r3, #8
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b70      	ldr	r3, [pc, #448]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	496d      	ldr	r1, [pc, #436]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003efa:	4b6c      	ldr	r3, [pc, #432]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	4968      	ldr	r1, [pc, #416]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]
 8003f0e:	e025      	b.n	8003f5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f10:	4b66      	ldr	r3, [pc, #408]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a65      	ldr	r2, [pc, #404]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f16:	f043 0308 	orr.w	r3, r3, #8
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b63      	ldr	r3, [pc, #396]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4960      	ldr	r1, [pc, #384]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f2e:	4b5f      	ldr	r3, [pc, #380]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	495b      	ldr	r1, [pc, #364]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fd15 	bl	800497c <RCC_SetFlashLatencyFromMSIRange>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e343      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f5c:	f000 fc4a 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b52      	ldr	r3, [pc, #328]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	4950      	ldr	r1, [pc, #320]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
 8003f78:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <HAL_RCC_OscConfig+0x278>)
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f7c:	4b4e      	ldr	r3, [pc, #312]	; (80040b8 <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fd fb65 	bl	8001650 <HAL_InitTick>
 8003f86:	4603      	mov	r3, r0
 8003f88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d052      	beq.n	8004036 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	e327      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d032      	beq.n	8004002 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f9c:	4b43      	ldr	r3, [pc, #268]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a42      	ldr	r2, [pc, #264]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fba2 	bl	80016f0 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fb0:	f7fd fb9e 	bl	80016f0 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e310      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc2:	4b3a      	ldr	r3, [pc, #232]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a36      	ldr	r2, [pc, #216]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fd4:	f043 0308 	orr.w	r3, r3, #8
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b34      	ldr	r3, [pc, #208]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4931      	ldr	r1, [pc, #196]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fec:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	492c      	ldr	r1, [pc, #176]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	e01a      	b.n	8004038 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004002:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a29      	ldr	r2, [pc, #164]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800400e:	f7fd fb6f 	bl	80016f0 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004016:	f7fd fb6b 	bl	80016f0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e2dd      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x1da>
 8004034:	e000      	b.n	8004038 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004036:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d074      	beq.n	800412e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b08      	cmp	r3, #8
 8004048:	d005      	beq.n	8004056 <HAL_RCC_OscConfig+0x21a>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b0c      	cmp	r3, #12
 800404e:	d10e      	bne.n	800406e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d10b      	bne.n	800406e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d064      	beq.n	800412c <HAL_RCC_OscConfig+0x2f0>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d160      	bne.n	800412c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e2ba      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x24a>
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0b      	ldr	r2, [pc, #44]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 800407e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	e026      	b.n	80040d4 <HAL_RCC_OscConfig+0x298>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800408e:	d115      	bne.n	80040bc <HAL_RCC_OscConfig+0x280>
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a05      	ldr	r2, [pc, #20]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a02      	ldr	r2, [pc, #8]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e014      	b.n	80040d4 <HAL_RCC_OscConfig+0x298>
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	080073a0 	.word	0x080073a0
 80040b4:	20000000 	.word	0x20000000
 80040b8:	20000004 	.word	0x20000004
 80040bc:	4ba0      	ldr	r3, [pc, #640]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a9f      	ldr	r2, [pc, #636]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b9d      	ldr	r3, [pc, #628]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a9c      	ldr	r2, [pc, #624]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fb08 	bl	80016f0 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd fb04 	bl	80016f0 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e276      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f6:	4b92      	ldr	r3, [pc, #584]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x2a8>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd faf4 	bl	80016f0 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd faf0 	bl	80016f0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e262      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800411e:	4b88      	ldr	r3, [pc, #544]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x2d0>
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d060      	beq.n	80041fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d005      	beq.n	800414c <HAL_RCC_OscConfig+0x310>
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d119      	bne.n	800417a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d116      	bne.n	800417a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414c:	4b7c      	ldr	r3, [pc, #496]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_OscConfig+0x328>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e23f      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b76      	ldr	r3, [pc, #472]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	4973      	ldr	r1, [pc, #460]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004178:	e040      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d023      	beq.n	80041ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004182:	4b6f      	ldr	r3, [pc, #444]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6e      	ldr	r2, [pc, #440]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fd faaf 	bl	80016f0 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004196:	f7fd faab 	bl	80016f0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e21d      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a8:	4b65      	ldr	r3, [pc, #404]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b4:	4b62      	ldr	r3, [pc, #392]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	495f      	ldr	r1, [pc, #380]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
 80041c8:	e018      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ca:	4b5d      	ldr	r3, [pc, #372]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a5c      	ldr	r2, [pc, #368]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80041d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d6:	f7fd fa8b 	bl	80016f0 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041de:	f7fd fa87 	bl	80016f0 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1f9      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041f0:	4b53      	ldr	r3, [pc, #332]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d03c      	beq.n	8004282 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01c      	beq.n	800424a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004210:	4b4b      	ldr	r3, [pc, #300]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	4a4a      	ldr	r2, [pc, #296]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fd fa66 	bl	80016f0 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004228:	f7fd fa62 	bl	80016f0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e1d4      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800423a:	4b41      	ldr	r3, [pc, #260]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 800423c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ef      	beq.n	8004228 <HAL_RCC_OscConfig+0x3ec>
 8004248:	e01b      	b.n	8004282 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424a:	4b3d      	ldr	r3, [pc, #244]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 800424c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004250:	4a3b      	ldr	r2, [pc, #236]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fd fa49 	bl	80016f0 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004262:	f7fd fa45 	bl	80016f0 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e1b7      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004274:	4b32      	ldr	r3, [pc, #200]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1ef      	bne.n	8004262 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80a6 	beq.w	80043dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10d      	bne.n	80042bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	4a26      	ldr	r2, [pc, #152]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042aa:	6593      	str	r3, [r2, #88]	; 0x58
 80042ac:	4b24      	ldr	r3, [pc, #144]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b8:	2301      	movs	r3, #1
 80042ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <HAL_RCC_OscConfig+0x508>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d118      	bne.n	80042fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <HAL_RCC_OscConfig+0x508>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_RCC_OscConfig+0x508>)
 80042ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d4:	f7fd fa0c 	bl	80016f0 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042dc:	f7fd fa08 	bl	80016f0 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e17a      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <HAL_RCC_OscConfig+0x508>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d108      	bne.n	8004314 <HAL_RCC_OscConfig+0x4d8>
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004312:	e029      	b.n	8004368 <HAL_RCC_OscConfig+0x52c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b05      	cmp	r3, #5
 800431a:	d115      	bne.n	8004348 <HAL_RCC_OscConfig+0x50c>
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	4a07      	ldr	r2, [pc, #28]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	4a03      	ldr	r2, [pc, #12]	; (8004340 <HAL_RCC_OscConfig+0x504>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800433c:	e014      	b.n	8004368 <HAL_RCC_OscConfig+0x52c>
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	40007000 	.word	0x40007000
 8004348:	4b9c      	ldr	r3, [pc, #624]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	4a9b      	ldr	r2, [pc, #620]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004350:	f023 0301 	bic.w	r3, r3, #1
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004358:	4b98      	ldr	r3, [pc, #608]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	4a97      	ldr	r2, [pc, #604]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d016      	beq.n	800439e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fd f9be 	bl	80016f0 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fd f9ba 	bl	80016f0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	; 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e12a      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438e:	4b8b      	ldr	r3, [pc, #556]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ed      	beq.n	8004378 <HAL_RCC_OscConfig+0x53c>
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fd f9a7 	bl	80016f0 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fd f9a3 	bl	80016f0 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e113      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043bc:	4b7f      	ldr	r3, [pc, #508]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ed      	bne.n	80043a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d0:	4b7a      	ldr	r3, [pc, #488]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	4a79      	ldr	r2, [pc, #484]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 80043d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80fe 	beq.w	80045e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	f040 80d0 	bne.w	8004590 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043f0:	4b72      	ldr	r3, [pc, #456]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 0203 	and.w	r2, r3, #3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	429a      	cmp	r2, r3
 8004402:	d130      	bne.n	8004466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	3b01      	subs	r3, #1
 8004410:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d127      	bne.n	8004466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004420:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d11f      	bne.n	8004466 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004430:	2a07      	cmp	r2, #7
 8004432:	bf14      	ite	ne
 8004434:	2201      	movne	r2, #1
 8004436:	2200      	moveq	r2, #0
 8004438:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800443a:	4293      	cmp	r3, r2
 800443c:	d113      	bne.n	8004466 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	3b01      	subs	r3, #1
 800444c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d109      	bne.n	8004466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	3b01      	subs	r3, #1
 8004460:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d06e      	beq.n	8004544 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b0c      	cmp	r3, #12
 800446a:	d069      	beq.n	8004540 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800446c:	4b53      	ldr	r3, [pc, #332]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004478:	4b50      	ldr	r3, [pc, #320]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0ad      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004488:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a4b      	ldr	r2, [pc, #300]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800448e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004492:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004494:	f7fd f92c 	bl	80016f0 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fd f928 	bl	80016f0 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e09a      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ba:	4b40      	ldr	r3, [pc, #256]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	4b40      	ldr	r3, [pc, #256]	; (80045c0 <HAL_RCC_OscConfig+0x784>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044ca:	3a01      	subs	r2, #1
 80044cc:	0112      	lsls	r2, r2, #4
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044d4:	0212      	lsls	r2, r2, #8
 80044d6:	4311      	orrs	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044dc:	0852      	lsrs	r2, r2, #1
 80044de:	3a01      	subs	r2, #1
 80044e0:	0552      	lsls	r2, r2, #21
 80044e2:	4311      	orrs	r1, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044e8:	0852      	lsrs	r2, r2, #1
 80044ea:	3a01      	subs	r2, #1
 80044ec:	0652      	lsls	r2, r2, #25
 80044ee:	4311      	orrs	r1, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f4:	0912      	lsrs	r2, r2, #4
 80044f6:	0452      	lsls	r2, r2, #17
 80044f8:	430a      	orrs	r2, r1
 80044fa:	4930      	ldr	r1, [pc, #192]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004500:	4b2e      	ldr	r3, [pc, #184]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004516:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004518:	f7fd f8ea 	bl	80016f0 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004520:	f7fd f8e6 	bl	80016f0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e058      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	4b22      	ldr	r3, [pc, #136]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800453e:	e050      	b.n	80045e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e04f      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004544:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d148      	bne.n	80045e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a19      	ldr	r2, [pc, #100]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a16      	ldr	r2, [pc, #88]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004566:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004568:	f7fd f8c2 	bl	80016f0 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd f8be 	bl	80016f0 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e030      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x734>
 800458e:	e028      	b.n	80045e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d023      	beq.n	80045de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a08      	ldr	r2, [pc, #32]	; (80045bc <HAL_RCC_OscConfig+0x780>)
 800459c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd f8a5 	bl	80016f0 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a8:	e00c      	b.n	80045c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fd f8a1 	bl	80016f0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d905      	bls.n	80045c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e013      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
 80045bc:	40021000 	.word	0x40021000
 80045c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_OscConfig+0x7b0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1ec      	bne.n	80045aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_OscConfig+0x7b0>)
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	4905      	ldr	r1, [pc, #20]	; (80045ec <HAL_RCC_OscConfig+0x7b0>)
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_RCC_OscConfig+0x7b4>)
 80045d8:	4013      	ands	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
 80045dc:	e001      	b.n	80045e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40021000 	.word	0x40021000
 80045f0:	feeefffc 	.word	0xfeeefffc

080045f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0e7      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b75      	ldr	r3, [pc, #468]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d910      	bls.n	8004638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b72      	ldr	r3, [pc, #456]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 0207 	bic.w	r2, r3, #7
 800461e:	4970      	ldr	r1, [pc, #448]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b6e      	ldr	r3, [pc, #440]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0cf      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	4b66      	ldr	r3, [pc, #408]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004650:	429a      	cmp	r2, r3
 8004652:	d908      	bls.n	8004666 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004654:	4b63      	ldr	r3, [pc, #396]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4960      	ldr	r1, [pc, #384]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04c      	beq.n	800470c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467a:	4b5a      	ldr	r3, [pc, #360]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d121      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e0a6      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004692:	4b54      	ldr	r3, [pc, #336]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d115      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e09a      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046aa:	4b4e      	ldr	r3, [pc, #312]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e08e      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ba:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e086      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046ca:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 0203 	bic.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4943      	ldr	r1, [pc, #268]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046dc:	f7fd f808 	bl	80016f0 <HAL_GetTick>
 80046e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e4:	f7fd f804 	bl	80016f0 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e06e      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	4b3a      	ldr	r3, [pc, #232]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 020c 	and.w	r2, r3, #12
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	429a      	cmp	r2, r3
 800470a:	d1eb      	bne.n	80046e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d010      	beq.n	800473a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004724:	429a      	cmp	r2, r3
 8004726:	d208      	bcs.n	800473a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	492b      	ldr	r1, [pc, #172]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800473a:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d210      	bcs.n	800476a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004748:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 0207 	bic.w	r2, r3, #7
 8004750:	4923      	ldr	r1, [pc, #140]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004758:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <HAL_RCC_ClockConfig+0x1ec>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d001      	beq.n	800476a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e036      	b.n	80047d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004776:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4918      	ldr	r1, [pc, #96]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4910      	ldr	r1, [pc, #64]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047a8:	f000 f824 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <HAL_RCC_ClockConfig+0x1f0>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	490b      	ldr	r1, [pc, #44]	; (80047e8 <HAL_RCC_ClockConfig+0x1f4>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
 80047c4:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1f8>)
 80047c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCC_ClockConfig+0x1fc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fc ff3f 	bl	8001650 <HAL_InitTick>
 80047d2:	4603      	mov	r3, r0
 80047d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80047d6:	7afb      	ldrb	r3, [r7, #11]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40021000 	.word	0x40021000
 80047e8:	080073a0 	.word	0x080073a0
 80047ec:	20000000 	.word	0x20000000
 80047f0:	20000004 	.word	0x20000004

080047f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004802:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800480c:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0x34>
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d121      	bne.n	8004866 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d11e      	bne.n	8004866 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004828:	4b34      	ldr	r3, [pc, #208]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d107      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004834:	4b31      	ldr	r3, [pc, #196]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e005      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004844:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004850:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004858:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10d      	bne.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004864:	e00a      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b04      	cmp	r3, #4
 800486a:	d102      	bne.n	8004872 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_GetSysClockFreq+0x110>)
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e004      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d101      	bne.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004878:	4b23      	ldr	r3, [pc, #140]	; (8004908 <HAL_RCC_GetSysClockFreq+0x114>)
 800487a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d134      	bne.n	80048ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d003      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0xa6>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d003      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004898:	e005      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800489a:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_RCC_GetSysClockFreq+0x110>)
 800489c:	617b      	str	r3, [r7, #20]
      break;
 800489e:	e005      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_RCC_GetSysClockFreq+0x114>)
 80048a2:	617b      	str	r3, [r7, #20]
      break;
 80048a4:	e002      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	617b      	str	r3, [r7, #20]
      break;
 80048aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048ac:	4b13      	ldr	r3, [pc, #76]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	fb03 f202 	mul.w	r2, r3, r2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <HAL_RCC_GetSysClockFreq+0x108>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	0e5b      	lsrs	r3, r3, #25
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	3301      	adds	r3, #1
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048ec:	69bb      	ldr	r3, [r7, #24]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3724      	adds	r7, #36	; 0x24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	080073b8 	.word	0x080073b8
 8004904:	00f42400 	.word	0x00f42400
 8004908:	007a1200 	.word	0x007a1200

0800490c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_RCC_GetHCLKFreq+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000000 	.word	0x20000000

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004928:	f7ff fff0 	bl	800490c <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4904      	ldr	r1, [pc, #16]	; (800494c <HAL_RCC_GetPCLK1Freq+0x28>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	080073b0 	.word	0x080073b0

08004950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004954:	f7ff ffda 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0adb      	lsrs	r3, r3, #11
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4904      	ldr	r1, [pc, #16]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40021000 	.word	0x40021000
 8004978:	080073b0 	.word	0x080073b0

0800497c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004994:	f7ff f922 	bl	8003bdc <HAL_PWREx_GetVoltageRange>
 8004998:	6178      	str	r0, [r7, #20]
 800499a:	e014      	b.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6593      	str	r3, [r2, #88]	; 0x58
 80049a8:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049b4:	f7ff f912 	bl	8003bdc <HAL_PWREx_GetVoltageRange>
 80049b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049cc:	d10b      	bne.n	80049e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d919      	bls.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2ba0      	cmp	r3, #160	; 0xa0
 80049d8:	d902      	bls.n	80049e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049da:	2302      	movs	r3, #2
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e013      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049e0:	2301      	movs	r3, #1
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	e010      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d902      	bls.n	80049f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049ec:	2303      	movs	r3, #3
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	e00a      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d102      	bne.n	80049fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049f8:	2302      	movs	r3, #2
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e004      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d101      	bne.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a04:	2301      	movs	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 0207 	bic.w	r2, r3, #7
 8004a10:	4909      	ldr	r1, [pc, #36]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d001      	beq.n	8004a2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40022000 	.word	0x40022000

08004a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a44:	2300      	movs	r3, #0
 8004a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a48:	2300      	movs	r3, #0
 8004a4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d041      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a60:	d02a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a66:	d824      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a6c:	d008      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a72:	d81e      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7c:	d010      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a7e:	e018      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a80:	4b86      	ldr	r3, [pc, #536]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a85      	ldr	r2, [pc, #532]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a8c:	e015      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2100      	movs	r1, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 facb 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a9e:	e00c      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3320      	adds	r3, #32
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fbb6 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ab0:	e003      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aba:	7cfb      	ldrb	r3, [r7, #19]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10b      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ac0:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ace:	4973      	ldr	r1, [pc, #460]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ad6:	e001      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d041      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004af0:	d02a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004af2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004af6:	d824      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004afc:	d008      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b02:	d81e      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b0e:	e018      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b10:	4b62      	ldr	r3, [pc, #392]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a61      	ldr	r2, [pc, #388]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b1c:	e015      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fa83 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b2e:	e00c      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3320      	adds	r3, #32
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fb6e 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	74fb      	strb	r3, [r7, #19]
      break;
 8004b46:	e000      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b4a:	7cfb      	ldrb	r3, [r7, #19]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b50:	4b52      	ldr	r3, [pc, #328]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b5e:	494f      	ldr	r1, [pc, #316]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b66:	e001      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b68:	7cfb      	ldrb	r3, [r7, #19]
 8004b6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80a0 	beq.w	8004cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00d      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b94:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	4a40      	ldr	r2, [pc, #256]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba0:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bac:	2301      	movs	r3, #1
 8004bae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bb0:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3a      	ldr	r2, [pc, #232]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bbc:	f7fc fd98 	bl	80016f0 <HAL_GetTick>
 8004bc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bc2:	e009      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc4:	f7fc fd94 	bl	80016f0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d902      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	74fb      	strb	r3, [r7, #19]
        break;
 8004bd6:	e005      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bd8:	4b31      	ldr	r3, [pc, #196]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0ef      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d15c      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bea:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01f      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d019      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c14:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fc fd53 	bl	80016f0 <HAL_GetTick>
 8004c4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4c:	e00b      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7fc fd4f 	bl	80016f0 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d902      	bls.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	74fb      	strb	r3, [r7, #19]
            break;
 8004c64:	e006      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ec      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7a:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8a:	4904      	ldr	r1, [pc, #16]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c92:	e009      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	74bb      	strb	r3, [r7, #18]
 8004c98:	e006      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca8:	7c7b      	ldrb	r3, [r7, #17]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d105      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cae:	4b9e      	ldr	r3, [pc, #632]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	4a9d      	ldr	r2, [pc, #628]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc6:	4b98      	ldr	r3, [pc, #608]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f023 0203 	bic.w	r2, r3, #3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	4994      	ldr	r1, [pc, #592]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce8:	4b8f      	ldr	r3, [pc, #572]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f023 020c 	bic.w	r2, r3, #12
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	498c      	ldr	r1, [pc, #560]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d0a:	4b87      	ldr	r3, [pc, #540]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	4983      	ldr	r1, [pc, #524]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d2c:	4b7e      	ldr	r3, [pc, #504]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	497b      	ldr	r1, [pc, #492]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d4e:	4b76      	ldr	r3, [pc, #472]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5c:	4972      	ldr	r1, [pc, #456]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d70:	4b6d      	ldr	r3, [pc, #436]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	496a      	ldr	r1, [pc, #424]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d92:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	4961      	ldr	r1, [pc, #388]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004db4:	4b5c      	ldr	r3, [pc, #368]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	4959      	ldr	r1, [pc, #356]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd6:	4b54      	ldr	r3, [pc, #336]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	4950      	ldr	r1, [pc, #320]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004df8:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	4948      	ldr	r1, [pc, #288]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	493f      	ldr	r1, [pc, #252]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d028      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e3c:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4a:	4937      	ldr	r1, [pc, #220]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5c:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a31      	ldr	r2, [pc, #196]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e66:	60d3      	str	r3, [r2, #12]
 8004e68:	e011      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e72:	d10c      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3304      	adds	r3, #4
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f8d8 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d028      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	491f      	ldr	r1, [pc, #124]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eba:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4a1a      	ldr	r2, [pc, #104]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec4:	60d3      	str	r3, [r2, #12]
 8004ec6:	e011      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f8a9 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02b      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	4908      	ldr	r1, [pc, #32]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f16:	d109      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f18:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a02      	ldr	r2, [pc, #8]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f22:	60d3      	str	r3, [r2, #12]
 8004f24:	e014      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 f877 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02f      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6a:	4928      	ldr	r1, [pc, #160]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7a:	d10d      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	2102      	movs	r1, #2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f854 	bl	8005030 <RCCEx_PLLSAI1_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d014      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	74bb      	strb	r3, [r7, #18]
 8004f96:	e011      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3320      	adds	r3, #32
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 f935 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd6:	490d      	ldr	r1, [pc, #52]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fea:	4b08      	ldr	r3, [pc, #32]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffa:	4904      	ldr	r1, [pc, #16]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005002:	7cbb      	ldrb	r3, [r7, #18]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000

08005010 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a04      	ldr	r2, [pc, #16]	; (800502c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800501a:	f043 0304 	orr.w	r3, r3, #4
 800501e:	6013      	str	r3, [r2, #0]
}
 8005020:	bf00      	nop
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000

08005030 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800503e:	4b75      	ldr	r3, [pc, #468]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800504a:	4b72      	ldr	r3, [pc, #456]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0203 	and.w	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d10d      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
       ||
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005062:	4b6c      	ldr	r3, [pc, #432]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
       ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d047      	beq.n	8005106 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	e044      	b.n	8005106 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d018      	beq.n	80050b6 <RCCEx_PLLSAI1_Config+0x86>
 8005084:	2b03      	cmp	r3, #3
 8005086:	d825      	bhi.n	80050d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005088:	2b01      	cmp	r3, #1
 800508a:	d002      	beq.n	8005092 <RCCEx_PLLSAI1_Config+0x62>
 800508c:	2b02      	cmp	r3, #2
 800508e:	d009      	beq.n	80050a4 <RCCEx_PLLSAI1_Config+0x74>
 8005090:	e020      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005092:	4b60      	ldr	r3, [pc, #384]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11d      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a2:	e01a      	b.n	80050da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050a4:	4b5b      	ldr	r3, [pc, #364]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d116      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b4:	e013      	b.n	80050de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050b6:	4b57      	ldr	r3, [pc, #348]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10f      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050c2:	4b54      	ldr	r3, [pc, #336]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050d2:	e006      	b.n	80050e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
      break;
 80050d8:	e004      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ea:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6819      	ldr	r1, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	430b      	orrs	r3, r1
 8005100:	4944      	ldr	r1, [pc, #272]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005102:	4313      	orrs	r3, r2
 8005104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d17d      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800510c:	4b41      	ldr	r3, [pc, #260]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a40      	ldr	r2, [pc, #256]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005118:	f7fc faea 	bl	80016f0 <HAL_GetTick>
 800511c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800511e:	e009      	b.n	8005134 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005120:	f7fc fae6 	bl	80016f0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d902      	bls.n	8005134 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	73fb      	strb	r3, [r7, #15]
        break;
 8005132:	e005      	b.n	8005140 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005134:	4b37      	ldr	r3, [pc, #220]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ef      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d160      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d111      	bne.n	8005170 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6892      	ldr	r2, [r2, #8]
 800515c:	0211      	lsls	r1, r2, #8
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68d2      	ldr	r2, [r2, #12]
 8005162:	0912      	lsrs	r2, r2, #4
 8005164:	0452      	lsls	r2, r2, #17
 8005166:	430a      	orrs	r2, r1
 8005168:	492a      	ldr	r1, [pc, #168]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	610b      	str	r3, [r1, #16]
 800516e:	e027      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d112      	bne.n	800519c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005176:	4b27      	ldr	r3, [pc, #156]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800517e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6892      	ldr	r2, [r2, #8]
 8005186:	0211      	lsls	r1, r2, #8
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6912      	ldr	r2, [r2, #16]
 800518c:	0852      	lsrs	r2, r2, #1
 800518e:	3a01      	subs	r2, #1
 8005190:	0552      	lsls	r2, r2, #21
 8005192:	430a      	orrs	r2, r1
 8005194:	491f      	ldr	r1, [pc, #124]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	610b      	str	r3, [r1, #16]
 800519a:	e011      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800519c:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6892      	ldr	r2, [r2, #8]
 80051ac:	0211      	lsls	r1, r2, #8
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6952      	ldr	r2, [r2, #20]
 80051b2:	0852      	lsrs	r2, r2, #1
 80051b4:	3a01      	subs	r2, #1
 80051b6:	0652      	lsls	r2, r2, #25
 80051b8:	430a      	orrs	r2, r1
 80051ba:	4916      	ldr	r1, [pc, #88]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051c0:	4b14      	ldr	r3, [pc, #80]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a13      	ldr	r2, [pc, #76]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051cc:	f7fc fa90 	bl	80016f0 <HAL_GetTick>
 80051d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051d2:	e009      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d4:	f7fc fa8c 	bl	80016f0 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d902      	bls.n	80051e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	73fb      	strb	r3, [r7, #15]
          break;
 80051e6:	e005      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ef      	beq.n	80051d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	4904      	ldr	r1, [pc, #16]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000

08005218 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005226:	4b6a      	ldr	r3, [pc, #424]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005232:	4b67      	ldr	r3, [pc, #412]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0203 	and.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d10d      	bne.n	800525e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
       ||
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800524a:	4b61      	ldr	r3, [pc, #388]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
       ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d047      	beq.n	80052ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
 8005262:	e044      	b.n	80052ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d018      	beq.n	800529e <RCCEx_PLLSAI2_Config+0x86>
 800526c:	2b03      	cmp	r3, #3
 800526e:	d825      	bhi.n	80052bc <RCCEx_PLLSAI2_Config+0xa4>
 8005270:	2b01      	cmp	r3, #1
 8005272:	d002      	beq.n	800527a <RCCEx_PLLSAI2_Config+0x62>
 8005274:	2b02      	cmp	r3, #2
 8005276:	d009      	beq.n	800528c <RCCEx_PLLSAI2_Config+0x74>
 8005278:	e020      	b.n	80052bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800527a:	4b55      	ldr	r3, [pc, #340]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11d      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528a:	e01a      	b.n	80052c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800528c:	4b50      	ldr	r3, [pc, #320]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005294:	2b00      	cmp	r3, #0
 8005296:	d116      	bne.n	80052c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529c:	e013      	b.n	80052c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800529e:	4b4c      	ldr	r3, [pc, #304]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10f      	bne.n	80052ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052aa:	4b49      	ldr	r3, [pc, #292]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ba:	e006      	b.n	80052ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
      break;
 80052c0:	e004      	b.n	80052cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052d2:	4b3f      	ldr	r3, [pc, #252]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	430b      	orrs	r3, r1
 80052e8:	4939      	ldr	r1, [pc, #228]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d167      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052f4:	4b36      	ldr	r3, [pc, #216]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a35      	ldr	r2, [pc, #212]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005300:	f7fc f9f6 	bl	80016f0 <HAL_GetTick>
 8005304:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005306:	e009      	b.n	800531c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005308:	f7fc f9f2 	bl	80016f0 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d902      	bls.n	800531c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	73fb      	strb	r3, [r7, #15]
        break;
 800531a:	e005      	b.n	8005328 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800531c:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ef      	bne.n	8005308 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d14a      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d111      	bne.n	8005358 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005334:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	0211      	lsls	r1, r2, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68d2      	ldr	r2, [r2, #12]
 800534a:	0912      	lsrs	r2, r2, #4
 800534c:	0452      	lsls	r2, r2, #17
 800534e:	430a      	orrs	r2, r1
 8005350:	491f      	ldr	r1, [pc, #124]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005352:	4313      	orrs	r3, r2
 8005354:	614b      	str	r3, [r1, #20]
 8005356:	e011      	b.n	800537c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005358:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6892      	ldr	r2, [r2, #8]
 8005368:	0211      	lsls	r1, r2, #8
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6912      	ldr	r2, [r2, #16]
 800536e:	0852      	lsrs	r2, r2, #1
 8005370:	3a01      	subs	r2, #1
 8005372:	0652      	lsls	r2, r2, #25
 8005374:	430a      	orrs	r2, r1
 8005376:	4916      	ldr	r1, [pc, #88]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005378:	4313      	orrs	r3, r2
 800537a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800537c:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fc f9b2 	bl	80016f0 <HAL_GetTick>
 800538c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800538e:	e009      	b.n	80053a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005390:	f7fc f9ae 	bl	80016f0 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d902      	bls.n	80053a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	73fb      	strb	r3, [r7, #15]
          break;
 80053a2:	e005      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053a4:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ef      	beq.n	8005390 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4904      	ldr	r1, [pc, #16]	; (80053d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000

080053d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e095      	b.n	8005512 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d108      	bne.n	8005400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f6:	d009      	beq.n	800540c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	61da      	str	r2, [r3, #28]
 80053fe:	e005      	b.n	800540c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fb fe74 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005442:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800544c:	d902      	bls.n	8005454 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e002      	b.n	800545a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005458:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005462:	d007      	beq.n	8005474 <HAL_SPI_Init+0xa0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800546c:	d002      	beq.n	8005474 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	ea42 0103 	orr.w	r1, r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	0c1b      	lsrs	r3, r3, #16
 80054d0:	f003 0204 	and.w	r2, r3, #4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054f0:	ea42 0103 	orr.w	r1, r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e040      	b.n	80055ae <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fb fe2d 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2224      	movs	r2, #36	; 0x24
 8005546:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f82d 	bl	80055b8 <UART_SetConfig>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e022      	b.n	80055ae <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fad9 	bl	8005b28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005584:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005594:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fb60 	bl	8005c6c <UART_CheckIdleState>
 80055ac:	4603      	mov	r3, r0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b08a      	sub	sp, #40	; 0x28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4313      	orrs	r3, r2
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4ba4      	ldr	r3, [pc, #656]	; (8005878 <UART_SetConfig+0x2c0>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a99      	ldr	r2, [pc, #612]	; (800587c <UART_SetConfig+0x2c4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	4313      	orrs	r3, r2
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a90      	ldr	r2, [pc, #576]	; (8005880 <UART_SetConfig+0x2c8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d126      	bne.n	8005690 <UART_SetConfig+0xd8>
 8005642:	4b90      	ldr	r3, [pc, #576]	; (8005884 <UART_SetConfig+0x2cc>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b03      	cmp	r3, #3
 800564e:	d81b      	bhi.n	8005688 <UART_SetConfig+0xd0>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0xa0>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	08005669 	.word	0x08005669
 800565c:	08005679 	.word	0x08005679
 8005660:	08005671 	.word	0x08005671
 8005664:	08005681 	.word	0x08005681
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e116      	b.n	800589e <UART_SetConfig+0x2e6>
 8005670:	2302      	movs	r3, #2
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e112      	b.n	800589e <UART_SetConfig+0x2e6>
 8005678:	2304      	movs	r3, #4
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e10e      	b.n	800589e <UART_SetConfig+0x2e6>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e10a      	b.n	800589e <UART_SetConfig+0x2e6>
 8005688:	2310      	movs	r3, #16
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568e:	e106      	b.n	800589e <UART_SetConfig+0x2e6>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a7c      	ldr	r2, [pc, #496]	; (8005888 <UART_SetConfig+0x2d0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d138      	bne.n	800570c <UART_SetConfig+0x154>
 800569a:	4b7a      	ldr	r3, [pc, #488]	; (8005884 <UART_SetConfig+0x2cc>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d82d      	bhi.n	8005704 <UART_SetConfig+0x14c>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0xf8>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056e5 	.word	0x080056e5
 80056b4:	08005705 	.word	0x08005705
 80056b8:	08005705 	.word	0x08005705
 80056bc:	08005705 	.word	0x08005705
 80056c0:	080056f5 	.word	0x080056f5
 80056c4:	08005705 	.word	0x08005705
 80056c8:	08005705 	.word	0x08005705
 80056cc:	08005705 	.word	0x08005705
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	08005705 	.word	0x08005705
 80056d8:	08005705 	.word	0x08005705
 80056dc:	08005705 	.word	0x08005705
 80056e0:	080056fd 	.word	0x080056fd
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ea:	e0d8      	b.n	800589e <UART_SetConfig+0x2e6>
 80056ec:	2302      	movs	r3, #2
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f2:	e0d4      	b.n	800589e <UART_SetConfig+0x2e6>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fa:	e0d0      	b.n	800589e <UART_SetConfig+0x2e6>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005702:	e0cc      	b.n	800589e <UART_SetConfig+0x2e6>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800570a:	e0c8      	b.n	800589e <UART_SetConfig+0x2e6>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a5e      	ldr	r2, [pc, #376]	; (800588c <UART_SetConfig+0x2d4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d125      	bne.n	8005762 <UART_SetConfig+0x1aa>
 8005716:	4b5b      	ldr	r3, [pc, #364]	; (8005884 <UART_SetConfig+0x2cc>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005720:	2b30      	cmp	r3, #48	; 0x30
 8005722:	d016      	beq.n	8005752 <UART_SetConfig+0x19a>
 8005724:	2b30      	cmp	r3, #48	; 0x30
 8005726:	d818      	bhi.n	800575a <UART_SetConfig+0x1a2>
 8005728:	2b20      	cmp	r3, #32
 800572a:	d00a      	beq.n	8005742 <UART_SetConfig+0x18a>
 800572c:	2b20      	cmp	r3, #32
 800572e:	d814      	bhi.n	800575a <UART_SetConfig+0x1a2>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <UART_SetConfig+0x182>
 8005734:	2b10      	cmp	r3, #16
 8005736:	d008      	beq.n	800574a <UART_SetConfig+0x192>
 8005738:	e00f      	b.n	800575a <UART_SetConfig+0x1a2>
 800573a:	2300      	movs	r3, #0
 800573c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005740:	e0ad      	b.n	800589e <UART_SetConfig+0x2e6>
 8005742:	2302      	movs	r3, #2
 8005744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005748:	e0a9      	b.n	800589e <UART_SetConfig+0x2e6>
 800574a:	2304      	movs	r3, #4
 800574c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005750:	e0a5      	b.n	800589e <UART_SetConfig+0x2e6>
 8005752:	2308      	movs	r3, #8
 8005754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005758:	e0a1      	b.n	800589e <UART_SetConfig+0x2e6>
 800575a:	2310      	movs	r3, #16
 800575c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005760:	e09d      	b.n	800589e <UART_SetConfig+0x2e6>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a4a      	ldr	r2, [pc, #296]	; (8005890 <UART_SetConfig+0x2d8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d125      	bne.n	80057b8 <UART_SetConfig+0x200>
 800576c:	4b45      	ldr	r3, [pc, #276]	; (8005884 <UART_SetConfig+0x2cc>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005776:	2bc0      	cmp	r3, #192	; 0xc0
 8005778:	d016      	beq.n	80057a8 <UART_SetConfig+0x1f0>
 800577a:	2bc0      	cmp	r3, #192	; 0xc0
 800577c:	d818      	bhi.n	80057b0 <UART_SetConfig+0x1f8>
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d00a      	beq.n	8005798 <UART_SetConfig+0x1e0>
 8005782:	2b80      	cmp	r3, #128	; 0x80
 8005784:	d814      	bhi.n	80057b0 <UART_SetConfig+0x1f8>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <UART_SetConfig+0x1d8>
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d008      	beq.n	80057a0 <UART_SetConfig+0x1e8>
 800578e:	e00f      	b.n	80057b0 <UART_SetConfig+0x1f8>
 8005790:	2300      	movs	r3, #0
 8005792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005796:	e082      	b.n	800589e <UART_SetConfig+0x2e6>
 8005798:	2302      	movs	r3, #2
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579e:	e07e      	b.n	800589e <UART_SetConfig+0x2e6>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a6:	e07a      	b.n	800589e <UART_SetConfig+0x2e6>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ae:	e076      	b.n	800589e <UART_SetConfig+0x2e6>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e072      	b.n	800589e <UART_SetConfig+0x2e6>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a35      	ldr	r2, [pc, #212]	; (8005894 <UART_SetConfig+0x2dc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d12a      	bne.n	8005818 <UART_SetConfig+0x260>
 80057c2:	4b30      	ldr	r3, [pc, #192]	; (8005884 <UART_SetConfig+0x2cc>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d0:	d01a      	beq.n	8005808 <UART_SetConfig+0x250>
 80057d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d6:	d81b      	bhi.n	8005810 <UART_SetConfig+0x258>
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	d00c      	beq.n	80057f8 <UART_SetConfig+0x240>
 80057de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e2:	d815      	bhi.n	8005810 <UART_SetConfig+0x258>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <UART_SetConfig+0x238>
 80057e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ec:	d008      	beq.n	8005800 <UART_SetConfig+0x248>
 80057ee:	e00f      	b.n	8005810 <UART_SetConfig+0x258>
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f6:	e052      	b.n	800589e <UART_SetConfig+0x2e6>
 80057f8:	2302      	movs	r3, #2
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fe:	e04e      	b.n	800589e <UART_SetConfig+0x2e6>
 8005800:	2304      	movs	r3, #4
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005806:	e04a      	b.n	800589e <UART_SetConfig+0x2e6>
 8005808:	2308      	movs	r3, #8
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580e:	e046      	b.n	800589e <UART_SetConfig+0x2e6>
 8005810:	2310      	movs	r3, #16
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005816:	e042      	b.n	800589e <UART_SetConfig+0x2e6>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a17      	ldr	r2, [pc, #92]	; (800587c <UART_SetConfig+0x2c4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d13a      	bne.n	8005898 <UART_SetConfig+0x2e0>
 8005822:	4b18      	ldr	r3, [pc, #96]	; (8005884 <UART_SetConfig+0x2cc>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800582c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005830:	d01a      	beq.n	8005868 <UART_SetConfig+0x2b0>
 8005832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005836:	d81b      	bhi.n	8005870 <UART_SetConfig+0x2b8>
 8005838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583c:	d00c      	beq.n	8005858 <UART_SetConfig+0x2a0>
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d815      	bhi.n	8005870 <UART_SetConfig+0x2b8>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <UART_SetConfig+0x298>
 8005848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584c:	d008      	beq.n	8005860 <UART_SetConfig+0x2a8>
 800584e:	e00f      	b.n	8005870 <UART_SetConfig+0x2b8>
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e022      	b.n	800589e <UART_SetConfig+0x2e6>
 8005858:	2302      	movs	r3, #2
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e01e      	b.n	800589e <UART_SetConfig+0x2e6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e01a      	b.n	800589e <UART_SetConfig+0x2e6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586e:	e016      	b.n	800589e <UART_SetConfig+0x2e6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005876:	e012      	b.n	800589e <UART_SetConfig+0x2e6>
 8005878:	efff69f3 	.word	0xefff69f3
 800587c:	40008000 	.word	0x40008000
 8005880:	40013800 	.word	0x40013800
 8005884:	40021000 	.word	0x40021000
 8005888:	40004400 	.word	0x40004400
 800588c:	40004800 	.word	0x40004800
 8005890:	40004c00 	.word	0x40004c00
 8005894:	40005000 	.word	0x40005000
 8005898:	2310      	movs	r3, #16
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a9f      	ldr	r2, [pc, #636]	; (8005b20 <UART_SetConfig+0x568>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d17a      	bne.n	800599e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d824      	bhi.n	80058fa <UART_SetConfig+0x342>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <UART_SetConfig+0x300>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058fb 	.word	0x080058fb
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058fb 	.word	0x080058fb
 80058c8:	080058eb 	.word	0x080058eb
 80058cc:	080058fb 	.word	0x080058fb
 80058d0:	080058fb 	.word	0x080058fb
 80058d4:	080058fb 	.word	0x080058fb
 80058d8:	080058f3 	.word	0x080058f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7ff f822 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 80058e0:	61f8      	str	r0, [r7, #28]
        break;
 80058e2:	e010      	b.n	8005906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e4:	4b8f      	ldr	r3, [pc, #572]	; (8005b24 <UART_SetConfig+0x56c>)
 80058e6:	61fb      	str	r3, [r7, #28]
        break;
 80058e8:	e00d      	b.n	8005906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ea:	f7fe ff83 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80058ee:	61f8      	str	r0, [r7, #28]
        break;
 80058f0:	e009      	b.n	8005906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f6:	61fb      	str	r3, [r7, #28]
        break;
 80058f8:	e005      	b.n	8005906 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80fb 	beq.w	8005b04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	429a      	cmp	r2, r3
 800591c:	d305      	bcc.n	800592a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005930:	e0e8      	b.n	8005b04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2200      	movs	r2, #0
 8005936:	461c      	mov	r4, r3
 8005938:	4615      	mov	r5, r2
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	022b      	lsls	r3, r5, #8
 8005944:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005948:	0222      	lsls	r2, r4, #8
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	6849      	ldr	r1, [r1, #4]
 800594e:	0849      	lsrs	r1, r1, #1
 8005950:	2000      	movs	r0, #0
 8005952:	4688      	mov	r8, r1
 8005954:	4681      	mov	r9, r0
 8005956:	eb12 0a08 	adds.w	sl, r2, r8
 800595a:	eb43 0b09 	adc.w	fp, r3, r9
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800596c:	4650      	mov	r0, sl
 800596e:	4659      	mov	r1, fp
 8005970:	f7fa fc7e 	bl	8000270 <__aeabi_uldivmod>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4613      	mov	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005982:	d308      	bcc.n	8005996 <UART_SetConfig+0x3de>
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598a:	d204      	bcs.n	8005996 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	e0b6      	b.n	8005b04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800599c:	e0b2      	b.n	8005b04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a6:	d15e      	bne.n	8005a66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d828      	bhi.n	8005a02 <UART_SetConfig+0x44a>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x400>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	080059e5 	.word	0x080059e5
 80059c0:	080059ed 	.word	0x080059ed
 80059c4:	08005a03 	.word	0x08005a03
 80059c8:	080059f3 	.word	0x080059f3
 80059cc:	08005a03 	.word	0x08005a03
 80059d0:	08005a03 	.word	0x08005a03
 80059d4:	08005a03 	.word	0x08005a03
 80059d8:	080059fb 	.word	0x080059fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059dc:	f7fe ffa2 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 80059e0:	61f8      	str	r0, [r7, #28]
        break;
 80059e2:	e014      	b.n	8005a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e4:	f7fe ffb4 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 80059e8:	61f8      	str	r0, [r7, #28]
        break;
 80059ea:	e010      	b.n	8005a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ec:	4b4d      	ldr	r3, [pc, #308]	; (8005b24 <UART_SetConfig+0x56c>)
 80059ee:	61fb      	str	r3, [r7, #28]
        break;
 80059f0:	e00d      	b.n	8005a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f2:	f7fe feff 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80059f6:	61f8      	str	r0, [r7, #28]
        break;
 80059f8:	e009      	b.n	8005a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fe:	61fb      	str	r3, [r7, #28]
        break;
 8005a00:	e005      	b.n	8005a0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d077      	beq.n	8005b04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005a      	lsls	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	441a      	add	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d916      	bls.n	8005a5e <UART_SetConfig+0x4a6>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a36:	d212      	bcs.n	8005a5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f023 030f 	bic.w	r3, r3, #15
 8005a40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	8afb      	ldrh	r3, [r7, #22]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	8afa      	ldrh	r2, [r7, #22]
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	e052      	b.n	8005b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a64:	e04e      	b.n	8005b04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d827      	bhi.n	8005abe <UART_SetConfig+0x506>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <UART_SetConfig+0x4bc>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	08005abf 	.word	0x08005abf
 8005a84:	08005aaf 	.word	0x08005aaf
 8005a88:	08005abf 	.word	0x08005abf
 8005a8c:	08005abf 	.word	0x08005abf
 8005a90:	08005abf 	.word	0x08005abf
 8005a94:	08005ab7 	.word	0x08005ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a98:	f7fe ff44 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8005a9c:	61f8      	str	r0, [r7, #28]
        break;
 8005a9e:	e014      	b.n	8005aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7fe ff56 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	61f8      	str	r0, [r7, #28]
        break;
 8005aa6:	e010      	b.n	8005aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <UART_SetConfig+0x56c>)
 8005aaa:	61fb      	str	r3, [r7, #28]
        break;
 8005aac:	e00d      	b.n	8005aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aae:	f7fe fea1 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8005ab2:	61f8      	str	r0, [r7, #28]
        break;
 8005ab4:	e009      	b.n	8005aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aba:	61fb      	str	r3, [r7, #28]
        break;
 8005abc:	e005      	b.n	8005aca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d019      	beq.n	8005b04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	085a      	lsrs	r2, r3, #1
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	441a      	add	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	d909      	bls.n	8005afe <UART_SetConfig+0x546>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af0:	d205      	bcs.n	8005afe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	e002      	b.n	8005b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3728      	adds	r7, #40	; 0x28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1e:	bf00      	nop
 8005b20:	40008000 	.word	0x40008000
 8005b24:	00f42400 	.word	0x00f42400

08005b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c26:	d10a      	bne.n	8005c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c7c:	f7fb fd38 	bl	80016f0 <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d10e      	bne.n	8005cae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f82d 	bl	8005cfe <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e023      	b.n	8005cf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d10e      	bne.n	8005cda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f817 	bl	8005cfe <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e00d      	b.n	8005cf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b09c      	sub	sp, #112	; 0x70
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0e:	e0a5      	b.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	f000 80a1 	beq.w	8005e5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fb fce9 	bl	80016f0 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d13e      	bne.n	8005dae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d44:	667b      	str	r3, [r7, #100]	; 0x64
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e6      	bne.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	663b      	str	r3, [r7, #96]	; 0x60
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3308      	adds	r3, #8
 8005d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d82:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e5      	bne.n	8005d62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e067      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d04f      	beq.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dca:	d147      	bne.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
 8005df6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e6      	bne.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	613b      	str	r3, [r7, #16]
   return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e28:	623a      	str	r2, [r7, #32]
 8005e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	69f9      	ldr	r1, [r7, #28]
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e010      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69da      	ldr	r2, [r3, #28]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4013      	ands	r3, r2
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2301      	moveq	r3, #1
 8005e6e:	2300      	movne	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	f43f af4a 	beq.w	8005d10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3770      	adds	r7, #112	; 0x70
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e86:	b084      	sub	sp, #16
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	f107 001c 	add.w	r0, r7, #28
 8005e94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa6f 	bl	8006388 <USB_CoreReset>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8005ec0:	e005      	b.n	8005ece <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eda:	b004      	add	sp, #16
 8005edc:	4770      	bx	lr

08005ede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f023 0201 	bic.w	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d115      	bne.n	8005f4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f2e:	2001      	movs	r0, #1
 8005f30:	f7fb fbea 	bl	8001708 <HAL_Delay>
      ms++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3301      	adds	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa16 	bl	800636c <USB_GetMode>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d01e      	beq.n	8005f84 <USB_SetCurrentMode+0x84>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b31      	cmp	r3, #49	; 0x31
 8005f4a:	d9f0      	bls.n	8005f2e <USB_SetCurrentMode+0x2e>
 8005f4c:	e01a      	b.n	8005f84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f4e:	78fb      	ldrb	r3, [r7, #3]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d115      	bne.n	8005f80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f60:	2001      	movs	r0, #1
 8005f62:	f7fb fbd1 	bl	8001708 <HAL_Delay>
      ms++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f9fd 	bl	800636c <USB_GetMode>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <USB_SetCurrentMode+0x84>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b31      	cmp	r3, #49	; 0x31
 8005f7c:	d9f0      	bls.n	8005f60 <USB_SetCurrentMode+0x60>
 8005f7e:	e001      	b.n	8005f84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e005      	b.n	8005f90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b32      	cmp	r3, #50	; 0x32
 8005f88:	d101      	bne.n	8005f8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f98:	b084      	sub	sp, #16
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b086      	sub	sp, #24
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	e009      	b.n	8005fcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	3340      	adds	r3, #64	; 0x40
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b0e      	cmp	r3, #14
 8005fd0:	d9f2      	bls.n	8005fb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11c      	bne.n	8006012 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e005      	b.n	800601e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006024:	461a      	mov	r2, r3
 8006026:	2300      	movs	r3, #0
 8006028:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006030:	4619      	mov	r1, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006038:	461a      	mov	r2, r3
 800603a:	680b      	ldr	r3, [r1, #0]
 800603c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800603e:	2103      	movs	r1, #3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f959 	bl	80062f8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006046:	2110      	movs	r1, #16
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f8f1 	bl	8006230 <USB_FlushTxFifo>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f91d 	bl	8006298 <USB_FlushRxFifo>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	461a      	mov	r2, r3
 8006070:	2300      	movs	r3, #0
 8006072:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607a:	461a      	mov	r2, r3
 800607c:	2300      	movs	r3, #0
 800607e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006086:	461a      	mov	r2, r3
 8006088:	2300      	movs	r3, #0
 800608a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	e043      	b.n	800611a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a8:	d118      	bne.n	80060dc <USB_DevInit+0x144>
    {
      if (i == 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060bc:	461a      	mov	r2, r3
 80060be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e013      	b.n	80060ee <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	461a      	mov	r2, r3
 80060d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	e008      	b.n	80060ee <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	461a      	mov	r2, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fa:	461a      	mov	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	461a      	mov	r2, r3
 800610e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3301      	adds	r3, #1
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	429a      	cmp	r2, r3
 8006120:	d3b7      	bcc.n	8006092 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	e043      	b.n	80061b0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800613a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613e:	d118      	bne.n	8006172 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	461a      	mov	r2, r3
 8006154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e013      	b.n	8006184 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	461a      	mov	r2, r3
 800616a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e008      	b.n	8006184 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617e:	461a      	mov	r2, r3
 8006180:	2300      	movs	r3, #0
 8006182:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006190:	461a      	mov	r2, r3
 8006192:	2300      	movs	r3, #0
 8006194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	461a      	mov	r2, r3
 80061a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3301      	adds	r3, #1
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d3b7      	bcc.n	8006128 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f043 0210 	orr.w	r2, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <USB_DevInit+0x294>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f043 0208 	orr.w	r2, r3, #8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d107      	bne.n	800621a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006212:	f043 0304 	orr.w	r3, r3, #4
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800621a:	7dfb      	ldrb	r3, [r7, #23]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006226:	b004      	add	sp, #16
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	803c3800 	.word	0x803c3800

08006230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3301      	adds	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <USB_FlushTxFifo+0x64>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d901      	bls.n	8006250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e01b      	b.n	8006288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	daf2      	bge.n	800623e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	019b      	lsls	r3, r3, #6
 8006260:	f043 0220 	orr.w	r2, r3, #32
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4a08      	ldr	r2, [pc, #32]	; (8006294 <USB_FlushTxFifo+0x64>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e006      	b.n	8006288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b20      	cmp	r3, #32
 8006284:	d0f0      	beq.n	8006268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	00030d40 	.word	0x00030d40

08006298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a11      	ldr	r2, [pc, #68]	; (80062f4 <USB_FlushRxFifo+0x5c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e018      	b.n	80062e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	daf2      	bge.n	80062a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2210      	movs	r2, #16
 80062c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4a08      	ldr	r2, [pc, #32]	; (80062f4 <USB_FlushRxFifo+0x5c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e006      	b.n	80062e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d0f0      	beq.n	80062c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	00030d40 	.word	0x00030d40

080062f8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006318:	4313      	orrs	r3, r2
 800631a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006344:	f023 0303 	bic.w	r3, r3, #3
 8006348:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f003 0301 	and.w	r3, r3, #1
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3301      	adds	r3, #1
 8006398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a13      	ldr	r2, [pc, #76]	; (80063ec <USB_CoreReset+0x64>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d901      	bls.n	80063a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e01b      	b.n	80063de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	daf2      	bge.n	8006394 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f043 0201 	orr.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a09      	ldr	r2, [pc, #36]	; (80063ec <USB_CoreReset+0x64>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e006      	b.n	80063de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d0f0      	beq.n	80063be <USB_CoreReset+0x36>

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	00030d40 	.word	0x00030d40

080063f0 <__errno>:
 80063f0:	4b01      	ldr	r3, [pc, #4]	; (80063f8 <__errno+0x8>)
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	2000000c 	.word	0x2000000c

080063fc <__libc_init_array>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	4d0d      	ldr	r5, [pc, #52]	; (8006434 <__libc_init_array+0x38>)
 8006400:	4c0d      	ldr	r4, [pc, #52]	; (8006438 <__libc_init_array+0x3c>)
 8006402:	1b64      	subs	r4, r4, r5
 8006404:	10a4      	asrs	r4, r4, #2
 8006406:	2600      	movs	r6, #0
 8006408:	42a6      	cmp	r6, r4
 800640a:	d109      	bne.n	8006420 <__libc_init_array+0x24>
 800640c:	4d0b      	ldr	r5, [pc, #44]	; (800643c <__libc_init_array+0x40>)
 800640e:	4c0c      	ldr	r4, [pc, #48]	; (8006440 <__libc_init_array+0x44>)
 8006410:	f000 ffae 	bl	8007370 <_init>
 8006414:	1b64      	subs	r4, r4, r5
 8006416:	10a4      	asrs	r4, r4, #2
 8006418:	2600      	movs	r6, #0
 800641a:	42a6      	cmp	r6, r4
 800641c:	d105      	bne.n	800642a <__libc_init_array+0x2e>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	f855 3b04 	ldr.w	r3, [r5], #4
 8006424:	4798      	blx	r3
 8006426:	3601      	adds	r6, #1
 8006428:	e7ee      	b.n	8006408 <__libc_init_array+0xc>
 800642a:	f855 3b04 	ldr.w	r3, [r5], #4
 800642e:	4798      	blx	r3
 8006430:	3601      	adds	r6, #1
 8006432:	e7f2      	b.n	800641a <__libc_init_array+0x1e>
 8006434:	08007488 	.word	0x08007488
 8006438:	08007488 	.word	0x08007488
 800643c:	08007488 	.word	0x08007488
 8006440:	0800748c 	.word	0x0800748c

08006444 <memset>:
 8006444:	4402      	add	r2, r0
 8006446:	4603      	mov	r3, r0
 8006448:	4293      	cmp	r3, r2
 800644a:	d100      	bne.n	800644e <memset+0xa>
 800644c:	4770      	bx	lr
 800644e:	f803 1b01 	strb.w	r1, [r3], #1
 8006452:	e7f9      	b.n	8006448 <memset+0x4>

08006454 <iprintf>:
 8006454:	b40f      	push	{r0, r1, r2, r3}
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <iprintf+0x2c>)
 8006458:	b513      	push	{r0, r1, r4, lr}
 800645a:	681c      	ldr	r4, [r3, #0]
 800645c:	b124      	cbz	r4, 8006468 <iprintf+0x14>
 800645e:	69a3      	ldr	r3, [r4, #24]
 8006460:	b913      	cbnz	r3, 8006468 <iprintf+0x14>
 8006462:	4620      	mov	r0, r4
 8006464:	f000 f866 	bl	8006534 <__sinit>
 8006468:	ab05      	add	r3, sp, #20
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	68a1      	ldr	r1, [r4, #8]
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	4620      	mov	r0, r4
 8006472:	f000 f9bd 	bl	80067f0 <_vfiprintf_r>
 8006476:	b002      	add	sp, #8
 8006478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800647c:	b004      	add	sp, #16
 800647e:	4770      	bx	lr
 8006480:	2000000c 	.word	0x2000000c

08006484 <std>:
 8006484:	2300      	movs	r3, #0
 8006486:	b510      	push	{r4, lr}
 8006488:	4604      	mov	r4, r0
 800648a:	e9c0 3300 	strd	r3, r3, [r0]
 800648e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006492:	6083      	str	r3, [r0, #8]
 8006494:	8181      	strh	r1, [r0, #12]
 8006496:	6643      	str	r3, [r0, #100]	; 0x64
 8006498:	81c2      	strh	r2, [r0, #14]
 800649a:	6183      	str	r3, [r0, #24]
 800649c:	4619      	mov	r1, r3
 800649e:	2208      	movs	r2, #8
 80064a0:	305c      	adds	r0, #92	; 0x5c
 80064a2:	f7ff ffcf 	bl	8006444 <memset>
 80064a6:	4b05      	ldr	r3, [pc, #20]	; (80064bc <std+0x38>)
 80064a8:	6263      	str	r3, [r4, #36]	; 0x24
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <std+0x3c>)
 80064ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <std+0x40>)
 80064b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <std+0x44>)
 80064b4:	6224      	str	r4, [r4, #32]
 80064b6:	6323      	str	r3, [r4, #48]	; 0x30
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	bf00      	nop
 80064bc:	08006d99 	.word	0x08006d99
 80064c0:	08006dbb 	.word	0x08006dbb
 80064c4:	08006df3 	.word	0x08006df3
 80064c8:	08006e17 	.word	0x08006e17

080064cc <_cleanup_r>:
 80064cc:	4901      	ldr	r1, [pc, #4]	; (80064d4 <_cleanup_r+0x8>)
 80064ce:	f000 b8af 	b.w	8006630 <_fwalk_reent>
 80064d2:	bf00      	nop
 80064d4:	080070f1 	.word	0x080070f1

080064d8 <__sfmoreglue>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	2268      	movs	r2, #104	; 0x68
 80064dc:	1e4d      	subs	r5, r1, #1
 80064de:	4355      	muls	r5, r2
 80064e0:	460e      	mov	r6, r1
 80064e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064e6:	f000 f8e5 	bl	80066b4 <_malloc_r>
 80064ea:	4604      	mov	r4, r0
 80064ec:	b140      	cbz	r0, 8006500 <__sfmoreglue+0x28>
 80064ee:	2100      	movs	r1, #0
 80064f0:	e9c0 1600 	strd	r1, r6, [r0]
 80064f4:	300c      	adds	r0, #12
 80064f6:	60a0      	str	r0, [r4, #8]
 80064f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064fc:	f7ff ffa2 	bl	8006444 <memset>
 8006500:	4620      	mov	r0, r4
 8006502:	bd70      	pop	{r4, r5, r6, pc}

08006504 <__sfp_lock_acquire>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__sfp_lock_acquire+0x8>)
 8006506:	f000 b8b3 	b.w	8006670 <__retarget_lock_acquire_recursive>
 800650a:	bf00      	nop
 800650c:	20000869 	.word	0x20000869

08006510 <__sfp_lock_release>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__sfp_lock_release+0x8>)
 8006512:	f000 b8ae 	b.w	8006672 <__retarget_lock_release_recursive>
 8006516:	bf00      	nop
 8006518:	20000869 	.word	0x20000869

0800651c <__sinit_lock_acquire>:
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__sinit_lock_acquire+0x8>)
 800651e:	f000 b8a7 	b.w	8006670 <__retarget_lock_acquire_recursive>
 8006522:	bf00      	nop
 8006524:	2000086a 	.word	0x2000086a

08006528 <__sinit_lock_release>:
 8006528:	4801      	ldr	r0, [pc, #4]	; (8006530 <__sinit_lock_release+0x8>)
 800652a:	f000 b8a2 	b.w	8006672 <__retarget_lock_release_recursive>
 800652e:	bf00      	nop
 8006530:	2000086a 	.word	0x2000086a

08006534 <__sinit>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4604      	mov	r4, r0
 8006538:	f7ff fff0 	bl	800651c <__sinit_lock_acquire>
 800653c:	69a3      	ldr	r3, [r4, #24]
 800653e:	b11b      	cbz	r3, 8006548 <__sinit+0x14>
 8006540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006544:	f7ff bff0 	b.w	8006528 <__sinit_lock_release>
 8006548:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800654c:	6523      	str	r3, [r4, #80]	; 0x50
 800654e:	4b13      	ldr	r3, [pc, #76]	; (800659c <__sinit+0x68>)
 8006550:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <__sinit+0x6c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	62a2      	str	r2, [r4, #40]	; 0x28
 8006556:	42a3      	cmp	r3, r4
 8006558:	bf04      	itt	eq
 800655a:	2301      	moveq	r3, #1
 800655c:	61a3      	streq	r3, [r4, #24]
 800655e:	4620      	mov	r0, r4
 8006560:	f000 f820 	bl	80065a4 <__sfp>
 8006564:	6060      	str	r0, [r4, #4]
 8006566:	4620      	mov	r0, r4
 8006568:	f000 f81c 	bl	80065a4 <__sfp>
 800656c:	60a0      	str	r0, [r4, #8]
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f818 	bl	80065a4 <__sfp>
 8006574:	2200      	movs	r2, #0
 8006576:	60e0      	str	r0, [r4, #12]
 8006578:	2104      	movs	r1, #4
 800657a:	6860      	ldr	r0, [r4, #4]
 800657c:	f7ff ff82 	bl	8006484 <std>
 8006580:	68a0      	ldr	r0, [r4, #8]
 8006582:	2201      	movs	r2, #1
 8006584:	2109      	movs	r1, #9
 8006586:	f7ff ff7d 	bl	8006484 <std>
 800658a:	68e0      	ldr	r0, [r4, #12]
 800658c:	2202      	movs	r2, #2
 800658e:	2112      	movs	r1, #18
 8006590:	f7ff ff78 	bl	8006484 <std>
 8006594:	2301      	movs	r3, #1
 8006596:	61a3      	str	r3, [r4, #24]
 8006598:	e7d2      	b.n	8006540 <__sinit+0xc>
 800659a:	bf00      	nop
 800659c:	080073e8 	.word	0x080073e8
 80065a0:	080064cd 	.word	0x080064cd

080065a4 <__sfp>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	4607      	mov	r7, r0
 80065a8:	f7ff ffac 	bl	8006504 <__sfp_lock_acquire>
 80065ac:	4b1e      	ldr	r3, [pc, #120]	; (8006628 <__sfp+0x84>)
 80065ae:	681e      	ldr	r6, [r3, #0]
 80065b0:	69b3      	ldr	r3, [r6, #24]
 80065b2:	b913      	cbnz	r3, 80065ba <__sfp+0x16>
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7ff ffbd 	bl	8006534 <__sinit>
 80065ba:	3648      	adds	r6, #72	; 0x48
 80065bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	d503      	bpl.n	80065cc <__sfp+0x28>
 80065c4:	6833      	ldr	r3, [r6, #0]
 80065c6:	b30b      	cbz	r3, 800660c <__sfp+0x68>
 80065c8:	6836      	ldr	r6, [r6, #0]
 80065ca:	e7f7      	b.n	80065bc <__sfp+0x18>
 80065cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065d0:	b9d5      	cbnz	r5, 8006608 <__sfp+0x64>
 80065d2:	4b16      	ldr	r3, [pc, #88]	; (800662c <__sfp+0x88>)
 80065d4:	60e3      	str	r3, [r4, #12]
 80065d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065da:	6665      	str	r5, [r4, #100]	; 0x64
 80065dc:	f000 f847 	bl	800666e <__retarget_lock_init_recursive>
 80065e0:	f7ff ff96 	bl	8006510 <__sfp_lock_release>
 80065e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065ec:	6025      	str	r5, [r4, #0]
 80065ee:	61a5      	str	r5, [r4, #24]
 80065f0:	2208      	movs	r2, #8
 80065f2:	4629      	mov	r1, r5
 80065f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065f8:	f7ff ff24 	bl	8006444 <memset>
 80065fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006604:	4620      	mov	r0, r4
 8006606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006608:	3468      	adds	r4, #104	; 0x68
 800660a:	e7d9      	b.n	80065c0 <__sfp+0x1c>
 800660c:	2104      	movs	r1, #4
 800660e:	4638      	mov	r0, r7
 8006610:	f7ff ff62 	bl	80064d8 <__sfmoreglue>
 8006614:	4604      	mov	r4, r0
 8006616:	6030      	str	r0, [r6, #0]
 8006618:	2800      	cmp	r0, #0
 800661a:	d1d5      	bne.n	80065c8 <__sfp+0x24>
 800661c:	f7ff ff78 	bl	8006510 <__sfp_lock_release>
 8006620:	230c      	movs	r3, #12
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	e7ee      	b.n	8006604 <__sfp+0x60>
 8006626:	bf00      	nop
 8006628:	080073e8 	.word	0x080073e8
 800662c:	ffff0001 	.word	0xffff0001

08006630 <_fwalk_reent>:
 8006630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006634:	4606      	mov	r6, r0
 8006636:	4688      	mov	r8, r1
 8006638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800663c:	2700      	movs	r7, #0
 800663e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006642:	f1b9 0901 	subs.w	r9, r9, #1
 8006646:	d505      	bpl.n	8006654 <_fwalk_reent+0x24>
 8006648:	6824      	ldr	r4, [r4, #0]
 800664a:	2c00      	cmp	r4, #0
 800664c:	d1f7      	bne.n	800663e <_fwalk_reent+0xe>
 800664e:	4638      	mov	r0, r7
 8006650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006654:	89ab      	ldrh	r3, [r5, #12]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d907      	bls.n	800666a <_fwalk_reent+0x3a>
 800665a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800665e:	3301      	adds	r3, #1
 8006660:	d003      	beq.n	800666a <_fwalk_reent+0x3a>
 8006662:	4629      	mov	r1, r5
 8006664:	4630      	mov	r0, r6
 8006666:	47c0      	blx	r8
 8006668:	4307      	orrs	r7, r0
 800666a:	3568      	adds	r5, #104	; 0x68
 800666c:	e7e9      	b.n	8006642 <_fwalk_reent+0x12>

0800666e <__retarget_lock_init_recursive>:
 800666e:	4770      	bx	lr

08006670 <__retarget_lock_acquire_recursive>:
 8006670:	4770      	bx	lr

08006672 <__retarget_lock_release_recursive>:
 8006672:	4770      	bx	lr

08006674 <sbrk_aligned>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4e0e      	ldr	r6, [pc, #56]	; (80066b0 <sbrk_aligned+0x3c>)
 8006678:	460c      	mov	r4, r1
 800667a:	6831      	ldr	r1, [r6, #0]
 800667c:	4605      	mov	r5, r0
 800667e:	b911      	cbnz	r1, 8006686 <sbrk_aligned+0x12>
 8006680:	f000 fb7a 	bl	8006d78 <_sbrk_r>
 8006684:	6030      	str	r0, [r6, #0]
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 fb75 	bl	8006d78 <_sbrk_r>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d00a      	beq.n	80066a8 <sbrk_aligned+0x34>
 8006692:	1cc4      	adds	r4, r0, #3
 8006694:	f024 0403 	bic.w	r4, r4, #3
 8006698:	42a0      	cmp	r0, r4
 800669a:	d007      	beq.n	80066ac <sbrk_aligned+0x38>
 800669c:	1a21      	subs	r1, r4, r0
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fb6a 	bl	8006d78 <_sbrk_r>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d101      	bne.n	80066ac <sbrk_aligned+0x38>
 80066a8:	f04f 34ff 	mov.w	r4, #4294967295
 80066ac:	4620      	mov	r0, r4
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	20000870 	.word	0x20000870

080066b4 <_malloc_r>:
 80066b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b8:	1ccd      	adds	r5, r1, #3
 80066ba:	f025 0503 	bic.w	r5, r5, #3
 80066be:	3508      	adds	r5, #8
 80066c0:	2d0c      	cmp	r5, #12
 80066c2:	bf38      	it	cc
 80066c4:	250c      	movcc	r5, #12
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	4607      	mov	r7, r0
 80066ca:	db01      	blt.n	80066d0 <_malloc_r+0x1c>
 80066cc:	42a9      	cmp	r1, r5
 80066ce:	d905      	bls.n	80066dc <_malloc_r+0x28>
 80066d0:	230c      	movs	r3, #12
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	2600      	movs	r6, #0
 80066d6:	4630      	mov	r0, r6
 80066d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066dc:	4e2e      	ldr	r6, [pc, #184]	; (8006798 <_malloc_r+0xe4>)
 80066de:	f000 fdbb 	bl	8007258 <__malloc_lock>
 80066e2:	6833      	ldr	r3, [r6, #0]
 80066e4:	461c      	mov	r4, r3
 80066e6:	bb34      	cbnz	r4, 8006736 <_malloc_r+0x82>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4638      	mov	r0, r7
 80066ec:	f7ff ffc2 	bl	8006674 <sbrk_aligned>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	4604      	mov	r4, r0
 80066f4:	d14d      	bne.n	8006792 <_malloc_r+0xde>
 80066f6:	6834      	ldr	r4, [r6, #0]
 80066f8:	4626      	mov	r6, r4
 80066fa:	2e00      	cmp	r6, #0
 80066fc:	d140      	bne.n	8006780 <_malloc_r+0xcc>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	4631      	mov	r1, r6
 8006702:	4638      	mov	r0, r7
 8006704:	eb04 0803 	add.w	r8, r4, r3
 8006708:	f000 fb36 	bl	8006d78 <_sbrk_r>
 800670c:	4580      	cmp	r8, r0
 800670e:	d13a      	bne.n	8006786 <_malloc_r+0xd2>
 8006710:	6821      	ldr	r1, [r4, #0]
 8006712:	3503      	adds	r5, #3
 8006714:	1a6d      	subs	r5, r5, r1
 8006716:	f025 0503 	bic.w	r5, r5, #3
 800671a:	3508      	adds	r5, #8
 800671c:	2d0c      	cmp	r5, #12
 800671e:	bf38      	it	cc
 8006720:	250c      	movcc	r5, #12
 8006722:	4629      	mov	r1, r5
 8006724:	4638      	mov	r0, r7
 8006726:	f7ff ffa5 	bl	8006674 <sbrk_aligned>
 800672a:	3001      	adds	r0, #1
 800672c:	d02b      	beq.n	8006786 <_malloc_r+0xd2>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	442b      	add	r3, r5
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	e00e      	b.n	8006754 <_malloc_r+0xa0>
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	1b52      	subs	r2, r2, r5
 800673a:	d41e      	bmi.n	800677a <_malloc_r+0xc6>
 800673c:	2a0b      	cmp	r2, #11
 800673e:	d916      	bls.n	800676e <_malloc_r+0xba>
 8006740:	1961      	adds	r1, r4, r5
 8006742:	42a3      	cmp	r3, r4
 8006744:	6025      	str	r5, [r4, #0]
 8006746:	bf18      	it	ne
 8006748:	6059      	strne	r1, [r3, #4]
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	bf08      	it	eq
 800674e:	6031      	streq	r1, [r6, #0]
 8006750:	5162      	str	r2, [r4, r5]
 8006752:	604b      	str	r3, [r1, #4]
 8006754:	4638      	mov	r0, r7
 8006756:	f104 060b 	add.w	r6, r4, #11
 800675a:	f000 fd83 	bl	8007264 <__malloc_unlock>
 800675e:	f026 0607 	bic.w	r6, r6, #7
 8006762:	1d23      	adds	r3, r4, #4
 8006764:	1af2      	subs	r2, r6, r3
 8006766:	d0b6      	beq.n	80066d6 <_malloc_r+0x22>
 8006768:	1b9b      	subs	r3, r3, r6
 800676a:	50a3      	str	r3, [r4, r2]
 800676c:	e7b3      	b.n	80066d6 <_malloc_r+0x22>
 800676e:	6862      	ldr	r2, [r4, #4]
 8006770:	42a3      	cmp	r3, r4
 8006772:	bf0c      	ite	eq
 8006774:	6032      	streq	r2, [r6, #0]
 8006776:	605a      	strne	r2, [r3, #4]
 8006778:	e7ec      	b.n	8006754 <_malloc_r+0xa0>
 800677a:	4623      	mov	r3, r4
 800677c:	6864      	ldr	r4, [r4, #4]
 800677e:	e7b2      	b.n	80066e6 <_malloc_r+0x32>
 8006780:	4634      	mov	r4, r6
 8006782:	6876      	ldr	r6, [r6, #4]
 8006784:	e7b9      	b.n	80066fa <_malloc_r+0x46>
 8006786:	230c      	movs	r3, #12
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	4638      	mov	r0, r7
 800678c:	f000 fd6a 	bl	8007264 <__malloc_unlock>
 8006790:	e7a1      	b.n	80066d6 <_malloc_r+0x22>
 8006792:	6025      	str	r5, [r4, #0]
 8006794:	e7de      	b.n	8006754 <_malloc_r+0xa0>
 8006796:	bf00      	nop
 8006798:	2000086c 	.word	0x2000086c

0800679c <__sfputc_r>:
 800679c:	6893      	ldr	r3, [r2, #8]
 800679e:	3b01      	subs	r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	b410      	push	{r4}
 80067a4:	6093      	str	r3, [r2, #8]
 80067a6:	da08      	bge.n	80067ba <__sfputc_r+0x1e>
 80067a8:	6994      	ldr	r4, [r2, #24]
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	db01      	blt.n	80067b2 <__sfputc_r+0x16>
 80067ae:	290a      	cmp	r1, #10
 80067b0:	d103      	bne.n	80067ba <__sfputc_r+0x1e>
 80067b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b6:	f000 bb33 	b.w	8006e20 <__swbuf_r>
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	1c58      	adds	r0, r3, #1
 80067be:	6010      	str	r0, [r2, #0]
 80067c0:	7019      	strb	r1, [r3, #0]
 80067c2:	4608      	mov	r0, r1
 80067c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <__sfputs_r>:
 80067ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	18d5      	adds	r5, r2, r3
 80067d4:	42ac      	cmp	r4, r5
 80067d6:	d101      	bne.n	80067dc <__sfputs_r+0x12>
 80067d8:	2000      	movs	r0, #0
 80067da:	e007      	b.n	80067ec <__sfputs_r+0x22>
 80067dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e0:	463a      	mov	r2, r7
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff ffda 	bl	800679c <__sfputc_r>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d1f3      	bne.n	80067d4 <__sfputs_r+0xa>
 80067ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067f0 <_vfiprintf_r>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	460d      	mov	r5, r1
 80067f6:	b09d      	sub	sp, #116	; 0x74
 80067f8:	4614      	mov	r4, r2
 80067fa:	4698      	mov	r8, r3
 80067fc:	4606      	mov	r6, r0
 80067fe:	b118      	cbz	r0, 8006808 <_vfiprintf_r+0x18>
 8006800:	6983      	ldr	r3, [r0, #24]
 8006802:	b90b      	cbnz	r3, 8006808 <_vfiprintf_r+0x18>
 8006804:	f7ff fe96 	bl	8006534 <__sinit>
 8006808:	4b89      	ldr	r3, [pc, #548]	; (8006a30 <_vfiprintf_r+0x240>)
 800680a:	429d      	cmp	r5, r3
 800680c:	d11b      	bne.n	8006846 <_vfiprintf_r+0x56>
 800680e:	6875      	ldr	r5, [r6, #4]
 8006810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006812:	07d9      	lsls	r1, r3, #31
 8006814:	d405      	bmi.n	8006822 <_vfiprintf_r+0x32>
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	059a      	lsls	r2, r3, #22
 800681a:	d402      	bmi.n	8006822 <_vfiprintf_r+0x32>
 800681c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800681e:	f7ff ff27 	bl	8006670 <__retarget_lock_acquire_recursive>
 8006822:	89ab      	ldrh	r3, [r5, #12]
 8006824:	071b      	lsls	r3, r3, #28
 8006826:	d501      	bpl.n	800682c <_vfiprintf_r+0x3c>
 8006828:	692b      	ldr	r3, [r5, #16]
 800682a:	b9eb      	cbnz	r3, 8006868 <_vfiprintf_r+0x78>
 800682c:	4629      	mov	r1, r5
 800682e:	4630      	mov	r0, r6
 8006830:	f000 fb5a 	bl	8006ee8 <__swsetup_r>
 8006834:	b1c0      	cbz	r0, 8006868 <_vfiprintf_r+0x78>
 8006836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006838:	07dc      	lsls	r4, r3, #31
 800683a:	d50e      	bpl.n	800685a <_vfiprintf_r+0x6a>
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	b01d      	add	sp, #116	; 0x74
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	4b7b      	ldr	r3, [pc, #492]	; (8006a34 <_vfiprintf_r+0x244>)
 8006848:	429d      	cmp	r5, r3
 800684a:	d101      	bne.n	8006850 <_vfiprintf_r+0x60>
 800684c:	68b5      	ldr	r5, [r6, #8]
 800684e:	e7df      	b.n	8006810 <_vfiprintf_r+0x20>
 8006850:	4b79      	ldr	r3, [pc, #484]	; (8006a38 <_vfiprintf_r+0x248>)
 8006852:	429d      	cmp	r5, r3
 8006854:	bf08      	it	eq
 8006856:	68f5      	ldreq	r5, [r6, #12]
 8006858:	e7da      	b.n	8006810 <_vfiprintf_r+0x20>
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	0598      	lsls	r0, r3, #22
 800685e:	d4ed      	bmi.n	800683c <_vfiprintf_r+0x4c>
 8006860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006862:	f7ff ff06 	bl	8006672 <__retarget_lock_release_recursive>
 8006866:	e7e9      	b.n	800683c <_vfiprintf_r+0x4c>
 8006868:	2300      	movs	r3, #0
 800686a:	9309      	str	r3, [sp, #36]	; 0x24
 800686c:	2320      	movs	r3, #32
 800686e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006872:	f8cd 800c 	str.w	r8, [sp, #12]
 8006876:	2330      	movs	r3, #48	; 0x30
 8006878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a3c <_vfiprintf_r+0x24c>
 800687c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006880:	f04f 0901 	mov.w	r9, #1
 8006884:	4623      	mov	r3, r4
 8006886:	469a      	mov	sl, r3
 8006888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688c:	b10a      	cbz	r2, 8006892 <_vfiprintf_r+0xa2>
 800688e:	2a25      	cmp	r2, #37	; 0x25
 8006890:	d1f9      	bne.n	8006886 <_vfiprintf_r+0x96>
 8006892:	ebba 0b04 	subs.w	fp, sl, r4
 8006896:	d00b      	beq.n	80068b0 <_vfiprintf_r+0xc0>
 8006898:	465b      	mov	r3, fp
 800689a:	4622      	mov	r2, r4
 800689c:	4629      	mov	r1, r5
 800689e:	4630      	mov	r0, r6
 80068a0:	f7ff ff93 	bl	80067ca <__sfputs_r>
 80068a4:	3001      	adds	r0, #1
 80068a6:	f000 80aa 	beq.w	80069fe <_vfiprintf_r+0x20e>
 80068aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ac:	445a      	add	r2, fp
 80068ae:	9209      	str	r2, [sp, #36]	; 0x24
 80068b0:	f89a 3000 	ldrb.w	r3, [sl]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80a2 	beq.w	80069fe <_vfiprintf_r+0x20e>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c4:	f10a 0a01 	add.w	sl, sl, #1
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	9307      	str	r3, [sp, #28]
 80068cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068d0:	931a      	str	r3, [sp, #104]	; 0x68
 80068d2:	4654      	mov	r4, sl
 80068d4:	2205      	movs	r2, #5
 80068d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068da:	4858      	ldr	r0, [pc, #352]	; (8006a3c <_vfiprintf_r+0x24c>)
 80068dc:	f7f9 fc78 	bl	80001d0 <memchr>
 80068e0:	9a04      	ldr	r2, [sp, #16]
 80068e2:	b9d8      	cbnz	r0, 800691c <_vfiprintf_r+0x12c>
 80068e4:	06d1      	lsls	r1, r2, #27
 80068e6:	bf44      	itt	mi
 80068e8:	2320      	movmi	r3, #32
 80068ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068ee:	0713      	lsls	r3, r2, #28
 80068f0:	bf44      	itt	mi
 80068f2:	232b      	movmi	r3, #43	; 0x2b
 80068f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f8:	f89a 3000 	ldrb.w	r3, [sl]
 80068fc:	2b2a      	cmp	r3, #42	; 0x2a
 80068fe:	d015      	beq.n	800692c <_vfiprintf_r+0x13c>
 8006900:	9a07      	ldr	r2, [sp, #28]
 8006902:	4654      	mov	r4, sl
 8006904:	2000      	movs	r0, #0
 8006906:	f04f 0c0a 	mov.w	ip, #10
 800690a:	4621      	mov	r1, r4
 800690c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006910:	3b30      	subs	r3, #48	; 0x30
 8006912:	2b09      	cmp	r3, #9
 8006914:	d94e      	bls.n	80069b4 <_vfiprintf_r+0x1c4>
 8006916:	b1b0      	cbz	r0, 8006946 <_vfiprintf_r+0x156>
 8006918:	9207      	str	r2, [sp, #28]
 800691a:	e014      	b.n	8006946 <_vfiprintf_r+0x156>
 800691c:	eba0 0308 	sub.w	r3, r0, r8
 8006920:	fa09 f303 	lsl.w	r3, r9, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	46a2      	mov	sl, r4
 800692a:	e7d2      	b.n	80068d2 <_vfiprintf_r+0xe2>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	1d19      	adds	r1, r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	9103      	str	r1, [sp, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	bfbb      	ittet	lt
 8006938:	425b      	neglt	r3, r3
 800693a:	f042 0202 	orrlt.w	r2, r2, #2
 800693e:	9307      	strge	r3, [sp, #28]
 8006940:	9307      	strlt	r3, [sp, #28]
 8006942:	bfb8      	it	lt
 8006944:	9204      	strlt	r2, [sp, #16]
 8006946:	7823      	ldrb	r3, [r4, #0]
 8006948:	2b2e      	cmp	r3, #46	; 0x2e
 800694a:	d10c      	bne.n	8006966 <_vfiprintf_r+0x176>
 800694c:	7863      	ldrb	r3, [r4, #1]
 800694e:	2b2a      	cmp	r3, #42	; 0x2a
 8006950:	d135      	bne.n	80069be <_vfiprintf_r+0x1ce>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	1d1a      	adds	r2, r3, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	9203      	str	r2, [sp, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	bfb8      	it	lt
 800695e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006962:	3402      	adds	r4, #2
 8006964:	9305      	str	r3, [sp, #20]
 8006966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a4c <_vfiprintf_r+0x25c>
 800696a:	7821      	ldrb	r1, [r4, #0]
 800696c:	2203      	movs	r2, #3
 800696e:	4650      	mov	r0, sl
 8006970:	f7f9 fc2e 	bl	80001d0 <memchr>
 8006974:	b140      	cbz	r0, 8006988 <_vfiprintf_r+0x198>
 8006976:	2340      	movs	r3, #64	; 0x40
 8006978:	eba0 000a 	sub.w	r0, r0, sl
 800697c:	fa03 f000 	lsl.w	r0, r3, r0
 8006980:	9b04      	ldr	r3, [sp, #16]
 8006982:	4303      	orrs	r3, r0
 8006984:	3401      	adds	r4, #1
 8006986:	9304      	str	r3, [sp, #16]
 8006988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698c:	482c      	ldr	r0, [pc, #176]	; (8006a40 <_vfiprintf_r+0x250>)
 800698e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006992:	2206      	movs	r2, #6
 8006994:	f7f9 fc1c 	bl	80001d0 <memchr>
 8006998:	2800      	cmp	r0, #0
 800699a:	d03f      	beq.n	8006a1c <_vfiprintf_r+0x22c>
 800699c:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <_vfiprintf_r+0x254>)
 800699e:	bb1b      	cbnz	r3, 80069e8 <_vfiprintf_r+0x1f8>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	3307      	adds	r3, #7
 80069a4:	f023 0307 	bic.w	r3, r3, #7
 80069a8:	3308      	adds	r3, #8
 80069aa:	9303      	str	r3, [sp, #12]
 80069ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ae:	443b      	add	r3, r7
 80069b0:	9309      	str	r3, [sp, #36]	; 0x24
 80069b2:	e767      	b.n	8006884 <_vfiprintf_r+0x94>
 80069b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b8:	460c      	mov	r4, r1
 80069ba:	2001      	movs	r0, #1
 80069bc:	e7a5      	b.n	800690a <_vfiprintf_r+0x11a>
 80069be:	2300      	movs	r3, #0
 80069c0:	3401      	adds	r4, #1
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	4619      	mov	r1, r3
 80069c6:	f04f 0c0a 	mov.w	ip, #10
 80069ca:	4620      	mov	r0, r4
 80069cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069d0:	3a30      	subs	r2, #48	; 0x30
 80069d2:	2a09      	cmp	r2, #9
 80069d4:	d903      	bls.n	80069de <_vfiprintf_r+0x1ee>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0c5      	beq.n	8006966 <_vfiprintf_r+0x176>
 80069da:	9105      	str	r1, [sp, #20]
 80069dc:	e7c3      	b.n	8006966 <_vfiprintf_r+0x176>
 80069de:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e2:	4604      	mov	r4, r0
 80069e4:	2301      	movs	r3, #1
 80069e6:	e7f0      	b.n	80069ca <_vfiprintf_r+0x1da>
 80069e8:	ab03      	add	r3, sp, #12
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	462a      	mov	r2, r5
 80069ee:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <_vfiprintf_r+0x258>)
 80069f0:	a904      	add	r1, sp, #16
 80069f2:	4630      	mov	r0, r6
 80069f4:	f3af 8000 	nop.w
 80069f8:	4607      	mov	r7, r0
 80069fa:	1c78      	adds	r0, r7, #1
 80069fc:	d1d6      	bne.n	80069ac <_vfiprintf_r+0x1bc>
 80069fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a00:	07d9      	lsls	r1, r3, #31
 8006a02:	d405      	bmi.n	8006a10 <_vfiprintf_r+0x220>
 8006a04:	89ab      	ldrh	r3, [r5, #12]
 8006a06:	059a      	lsls	r2, r3, #22
 8006a08:	d402      	bmi.n	8006a10 <_vfiprintf_r+0x220>
 8006a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a0c:	f7ff fe31 	bl	8006672 <__retarget_lock_release_recursive>
 8006a10:	89ab      	ldrh	r3, [r5, #12]
 8006a12:	065b      	lsls	r3, r3, #25
 8006a14:	f53f af12 	bmi.w	800683c <_vfiprintf_r+0x4c>
 8006a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a1a:	e711      	b.n	8006840 <_vfiprintf_r+0x50>
 8006a1c:	ab03      	add	r3, sp, #12
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	462a      	mov	r2, r5
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <_vfiprintf_r+0x258>)
 8006a24:	a904      	add	r1, sp, #16
 8006a26:	4630      	mov	r0, r6
 8006a28:	f000 f880 	bl	8006b2c <_printf_i>
 8006a2c:	e7e4      	b.n	80069f8 <_vfiprintf_r+0x208>
 8006a2e:	bf00      	nop
 8006a30:	0800740c 	.word	0x0800740c
 8006a34:	0800742c 	.word	0x0800742c
 8006a38:	080073ec 	.word	0x080073ec
 8006a3c:	0800744c 	.word	0x0800744c
 8006a40:	08007456 	.word	0x08007456
 8006a44:	00000000 	.word	0x00000000
 8006a48:	080067cb 	.word	0x080067cb
 8006a4c:	08007452 	.word	0x08007452

08006a50 <_printf_common>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	4616      	mov	r6, r2
 8006a56:	4699      	mov	r9, r3
 8006a58:	688a      	ldr	r2, [r1, #8]
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bfb8      	it	lt
 8006a64:	4613      	movlt	r3, r2
 8006a66:	6033      	str	r3, [r6, #0]
 8006a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	b10a      	cbz	r2, 8006a76 <_printf_common+0x26>
 8006a72:	3301      	adds	r3, #1
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	0699      	lsls	r1, r3, #26
 8006a7a:	bf42      	ittt	mi
 8006a7c:	6833      	ldrmi	r3, [r6, #0]
 8006a7e:	3302      	addmi	r3, #2
 8006a80:	6033      	strmi	r3, [r6, #0]
 8006a82:	6825      	ldr	r5, [r4, #0]
 8006a84:	f015 0506 	ands.w	r5, r5, #6
 8006a88:	d106      	bne.n	8006a98 <_printf_common+0x48>
 8006a8a:	f104 0a19 	add.w	sl, r4, #25
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	6832      	ldr	r2, [r6, #0]
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	dc26      	bgt.n	8006ae6 <_printf_common+0x96>
 8006a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a9c:	1e13      	subs	r3, r2, #0
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	bf18      	it	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	0692      	lsls	r2, r2, #26
 8006aa6:	d42b      	bmi.n	8006b00 <_printf_common+0xb0>
 8006aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aac:	4649      	mov	r1, r9
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d01e      	beq.n	8006af4 <_printf_common+0xa4>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	68e5      	ldr	r5, [r4, #12]
 8006aba:	6832      	ldr	r2, [r6, #0]
 8006abc:	f003 0306 	and.w	r3, r3, #6
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	bf08      	it	eq
 8006ac4:	1aad      	subeq	r5, r5, r2
 8006ac6:	68a3      	ldr	r3, [r4, #8]
 8006ac8:	6922      	ldr	r2, [r4, #16]
 8006aca:	bf0c      	ite	eq
 8006acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad0:	2500      	movne	r5, #0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bfc4      	itt	gt
 8006ad6:	1a9b      	subgt	r3, r3, r2
 8006ad8:	18ed      	addgt	r5, r5, r3
 8006ada:	2600      	movs	r6, #0
 8006adc:	341a      	adds	r4, #26
 8006ade:	42b5      	cmp	r5, r6
 8006ae0:	d11a      	bne.n	8006b18 <_printf_common+0xc8>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e008      	b.n	8006af8 <_printf_common+0xa8>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4652      	mov	r2, sl
 8006aea:	4649      	mov	r1, r9
 8006aec:	4638      	mov	r0, r7
 8006aee:	47c0      	blx	r8
 8006af0:	3001      	adds	r0, #1
 8006af2:	d103      	bne.n	8006afc <_printf_common+0xac>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afc:	3501      	adds	r5, #1
 8006afe:	e7c6      	b.n	8006a8e <_printf_common+0x3e>
 8006b00:	18e1      	adds	r1, r4, r3
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	2030      	movs	r0, #48	; 0x30
 8006b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b0a:	4422      	add	r2, r4
 8006b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b14:	3302      	adds	r3, #2
 8006b16:	e7c7      	b.n	8006aa8 <_printf_common+0x58>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4638      	mov	r0, r7
 8006b20:	47c0      	blx	r8
 8006b22:	3001      	adds	r0, #1
 8006b24:	d0e6      	beq.n	8006af4 <_printf_common+0xa4>
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7d9      	b.n	8006ade <_printf_common+0x8e>
	...

08006b2c <_printf_i>:
 8006b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	7e0f      	ldrb	r7, [r1, #24]
 8006b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b34:	2f78      	cmp	r7, #120	; 0x78
 8006b36:	4691      	mov	r9, r2
 8006b38:	4680      	mov	r8, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	469a      	mov	sl, r3
 8006b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b42:	d807      	bhi.n	8006b54 <_printf_i+0x28>
 8006b44:	2f62      	cmp	r7, #98	; 0x62
 8006b46:	d80a      	bhi.n	8006b5e <_printf_i+0x32>
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	f000 80d8 	beq.w	8006cfe <_printf_i+0x1d2>
 8006b4e:	2f58      	cmp	r7, #88	; 0x58
 8006b50:	f000 80a3 	beq.w	8006c9a <_printf_i+0x16e>
 8006b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b5c:	e03a      	b.n	8006bd4 <_printf_i+0xa8>
 8006b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b62:	2b15      	cmp	r3, #21
 8006b64:	d8f6      	bhi.n	8006b54 <_printf_i+0x28>
 8006b66:	a101      	add	r1, pc, #4	; (adr r1, 8006b6c <_printf_i+0x40>)
 8006b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b6c:	08006bc5 	.word	0x08006bc5
 8006b70:	08006bd9 	.word	0x08006bd9
 8006b74:	08006b55 	.word	0x08006b55
 8006b78:	08006b55 	.word	0x08006b55
 8006b7c:	08006b55 	.word	0x08006b55
 8006b80:	08006b55 	.word	0x08006b55
 8006b84:	08006bd9 	.word	0x08006bd9
 8006b88:	08006b55 	.word	0x08006b55
 8006b8c:	08006b55 	.word	0x08006b55
 8006b90:	08006b55 	.word	0x08006b55
 8006b94:	08006b55 	.word	0x08006b55
 8006b98:	08006ce5 	.word	0x08006ce5
 8006b9c:	08006c09 	.word	0x08006c09
 8006ba0:	08006cc7 	.word	0x08006cc7
 8006ba4:	08006b55 	.word	0x08006b55
 8006ba8:	08006b55 	.word	0x08006b55
 8006bac:	08006d07 	.word	0x08006d07
 8006bb0:	08006b55 	.word	0x08006b55
 8006bb4:	08006c09 	.word	0x08006c09
 8006bb8:	08006b55 	.word	0x08006b55
 8006bbc:	08006b55 	.word	0x08006b55
 8006bc0:	08006ccf 	.word	0x08006ccf
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	602a      	str	r2, [r5, #0]
 8006bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0a3      	b.n	8006d20 <_printf_i+0x1f4>
 8006bd8:	6820      	ldr	r0, [r4, #0]
 8006bda:	6829      	ldr	r1, [r5, #0]
 8006bdc:	0606      	lsls	r6, r0, #24
 8006bde:	f101 0304 	add.w	r3, r1, #4
 8006be2:	d50a      	bpl.n	8006bfa <_printf_i+0xce>
 8006be4:	680e      	ldr	r6, [r1, #0]
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	2e00      	cmp	r6, #0
 8006bea:	da03      	bge.n	8006bf4 <_printf_i+0xc8>
 8006bec:	232d      	movs	r3, #45	; 0x2d
 8006bee:	4276      	negs	r6, r6
 8006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf4:	485e      	ldr	r0, [pc, #376]	; (8006d70 <_printf_i+0x244>)
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	e019      	b.n	8006c2e <_printf_i+0x102>
 8006bfa:	680e      	ldr	r6, [r1, #0]
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c02:	bf18      	it	ne
 8006c04:	b236      	sxthne	r6, r6
 8006c06:	e7ef      	b.n	8006be8 <_printf_i+0xbc>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	1d19      	adds	r1, r3, #4
 8006c0e:	6029      	str	r1, [r5, #0]
 8006c10:	0601      	lsls	r1, r0, #24
 8006c12:	d501      	bpl.n	8006c18 <_printf_i+0xec>
 8006c14:	681e      	ldr	r6, [r3, #0]
 8006c16:	e002      	b.n	8006c1e <_printf_i+0xf2>
 8006c18:	0646      	lsls	r6, r0, #25
 8006c1a:	d5fb      	bpl.n	8006c14 <_printf_i+0xe8>
 8006c1c:	881e      	ldrh	r6, [r3, #0]
 8006c1e:	4854      	ldr	r0, [pc, #336]	; (8006d70 <_printf_i+0x244>)
 8006c20:	2f6f      	cmp	r7, #111	; 0x6f
 8006c22:	bf0c      	ite	eq
 8006c24:	2308      	moveq	r3, #8
 8006c26:	230a      	movne	r3, #10
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c2e:	6865      	ldr	r5, [r4, #4]
 8006c30:	60a5      	str	r5, [r4, #8]
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	bfa2      	ittt	ge
 8006c36:	6821      	ldrge	r1, [r4, #0]
 8006c38:	f021 0104 	bicge.w	r1, r1, #4
 8006c3c:	6021      	strge	r1, [r4, #0]
 8006c3e:	b90e      	cbnz	r6, 8006c44 <_printf_i+0x118>
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	d04d      	beq.n	8006ce0 <_printf_i+0x1b4>
 8006c44:	4615      	mov	r5, r2
 8006c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c4e:	5dc7      	ldrb	r7, [r0, r7]
 8006c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c54:	4637      	mov	r7, r6
 8006c56:	42bb      	cmp	r3, r7
 8006c58:	460e      	mov	r6, r1
 8006c5a:	d9f4      	bls.n	8006c46 <_printf_i+0x11a>
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d10b      	bne.n	8006c78 <_printf_i+0x14c>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	07de      	lsls	r6, r3, #31
 8006c64:	d508      	bpl.n	8006c78 <_printf_i+0x14c>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	6861      	ldr	r1, [r4, #4]
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	bfde      	ittt	le
 8006c6e:	2330      	movle	r3, #48	; 0x30
 8006c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c78:	1b52      	subs	r2, r2, r5
 8006c7a:	6122      	str	r2, [r4, #16]
 8006c7c:	f8cd a000 	str.w	sl, [sp]
 8006c80:	464b      	mov	r3, r9
 8006c82:	aa03      	add	r2, sp, #12
 8006c84:	4621      	mov	r1, r4
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff fee2 	bl	8006a50 <_printf_common>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d14c      	bne.n	8006d2a <_printf_i+0x1fe>
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	b004      	add	sp, #16
 8006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9a:	4835      	ldr	r0, [pc, #212]	; (8006d70 <_printf_i+0x244>)
 8006c9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ca0:	6829      	ldr	r1, [r5, #0]
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ca8:	6029      	str	r1, [r5, #0]
 8006caa:	061d      	lsls	r5, r3, #24
 8006cac:	d514      	bpl.n	8006cd8 <_printf_i+0x1ac>
 8006cae:	07df      	lsls	r7, r3, #31
 8006cb0:	bf44      	itt	mi
 8006cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cb6:	6023      	strmi	r3, [r4, #0]
 8006cb8:	b91e      	cbnz	r6, 8006cc2 <_printf_i+0x196>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	f023 0320 	bic.w	r3, r3, #32
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	2310      	movs	r3, #16
 8006cc4:	e7b0      	b.n	8006c28 <_printf_i+0xfc>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f043 0320 	orr.w	r3, r3, #32
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	2378      	movs	r3, #120	; 0x78
 8006cd0:	4828      	ldr	r0, [pc, #160]	; (8006d74 <_printf_i+0x248>)
 8006cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cd6:	e7e3      	b.n	8006ca0 <_printf_i+0x174>
 8006cd8:	0659      	lsls	r1, r3, #25
 8006cda:	bf48      	it	mi
 8006cdc:	b2b6      	uxthmi	r6, r6
 8006cde:	e7e6      	b.n	8006cae <_printf_i+0x182>
 8006ce0:	4615      	mov	r5, r2
 8006ce2:	e7bb      	b.n	8006c5c <_printf_i+0x130>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	6826      	ldr	r6, [r4, #0]
 8006ce8:	6961      	ldr	r1, [r4, #20]
 8006cea:	1d18      	adds	r0, r3, #4
 8006cec:	6028      	str	r0, [r5, #0]
 8006cee:	0635      	lsls	r5, r6, #24
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	d501      	bpl.n	8006cf8 <_printf_i+0x1cc>
 8006cf4:	6019      	str	r1, [r3, #0]
 8006cf6:	e002      	b.n	8006cfe <_printf_i+0x1d2>
 8006cf8:	0670      	lsls	r0, r6, #25
 8006cfa:	d5fb      	bpl.n	8006cf4 <_printf_i+0x1c8>
 8006cfc:	8019      	strh	r1, [r3, #0]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6123      	str	r3, [r4, #16]
 8006d02:	4615      	mov	r5, r2
 8006d04:	e7ba      	b.n	8006c7c <_printf_i+0x150>
 8006d06:	682b      	ldr	r3, [r5, #0]
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	602a      	str	r2, [r5, #0]
 8006d0c:	681d      	ldr	r5, [r3, #0]
 8006d0e:	6862      	ldr	r2, [r4, #4]
 8006d10:	2100      	movs	r1, #0
 8006d12:	4628      	mov	r0, r5
 8006d14:	f7f9 fa5c 	bl	80001d0 <memchr>
 8006d18:	b108      	cbz	r0, 8006d1e <_printf_i+0x1f2>
 8006d1a:	1b40      	subs	r0, r0, r5
 8006d1c:	6060      	str	r0, [r4, #4]
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	2300      	movs	r3, #0
 8006d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d28:	e7a8      	b.n	8006c7c <_printf_i+0x150>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4649      	mov	r1, r9
 8006d30:	4640      	mov	r0, r8
 8006d32:	47d0      	blx	sl
 8006d34:	3001      	adds	r0, #1
 8006d36:	d0ab      	beq.n	8006c90 <_printf_i+0x164>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	079b      	lsls	r3, r3, #30
 8006d3c:	d413      	bmi.n	8006d66 <_printf_i+0x23a>
 8006d3e:	68e0      	ldr	r0, [r4, #12]
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	4298      	cmp	r0, r3
 8006d44:	bfb8      	it	lt
 8006d46:	4618      	movlt	r0, r3
 8006d48:	e7a4      	b.n	8006c94 <_printf_i+0x168>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4640      	mov	r0, r8
 8006d52:	47d0      	blx	sl
 8006d54:	3001      	adds	r0, #1
 8006d56:	d09b      	beq.n	8006c90 <_printf_i+0x164>
 8006d58:	3501      	adds	r5, #1
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	9903      	ldr	r1, [sp, #12]
 8006d5e:	1a5b      	subs	r3, r3, r1
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dcf2      	bgt.n	8006d4a <_printf_i+0x21e>
 8006d64:	e7eb      	b.n	8006d3e <_printf_i+0x212>
 8006d66:	2500      	movs	r5, #0
 8006d68:	f104 0619 	add.w	r6, r4, #25
 8006d6c:	e7f5      	b.n	8006d5a <_printf_i+0x22e>
 8006d6e:	bf00      	nop
 8006d70:	0800745d 	.word	0x0800745d
 8006d74:	0800746e 	.word	0x0800746e

08006d78 <_sbrk_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	; (8006d94 <_sbrk_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fa fbda 	bl	800153c <_sbrk>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_sbrk_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_sbrk_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20000874 	.word	0x20000874

08006d98 <__sread>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da0:	f000 fab2 	bl	8007308 <_read_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	bfab      	itete	ge
 8006da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006daa:	89a3      	ldrhlt	r3, [r4, #12]
 8006dac:	181b      	addge	r3, r3, r0
 8006dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006db2:	bfac      	ite	ge
 8006db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006db6:	81a3      	strhlt	r3, [r4, #12]
 8006db8:	bd10      	pop	{r4, pc}

08006dba <__swrite>:
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	898b      	ldrh	r3, [r1, #12]
 8006dc2:	05db      	lsls	r3, r3, #23
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4616      	mov	r6, r2
 8006dca:	d505      	bpl.n	8006dd8 <__swrite+0x1e>
 8006dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f000 f9c8 	bl	8007168 <_lseek_r>
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de2:	81a3      	strh	r3, [r4, #12]
 8006de4:	4632      	mov	r2, r6
 8006de6:	463b      	mov	r3, r7
 8006de8:	4628      	mov	r0, r5
 8006dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dee:	f000 b869 	b.w	8006ec4 <_write_r>

08006df2 <__sseek>:
 8006df2:	b510      	push	{r4, lr}
 8006df4:	460c      	mov	r4, r1
 8006df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfa:	f000 f9b5 	bl	8007168 <_lseek_r>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	bf15      	itete	ne
 8006e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e0e:	81a3      	strheq	r3, [r4, #12]
 8006e10:	bf18      	it	ne
 8006e12:	81a3      	strhne	r3, [r4, #12]
 8006e14:	bd10      	pop	{r4, pc}

08006e16 <__sclose>:
 8006e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1a:	f000 b8d3 	b.w	8006fc4 <_close_r>
	...

08006e20 <__swbuf_r>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	460e      	mov	r6, r1
 8006e24:	4614      	mov	r4, r2
 8006e26:	4605      	mov	r5, r0
 8006e28:	b118      	cbz	r0, 8006e32 <__swbuf_r+0x12>
 8006e2a:	6983      	ldr	r3, [r0, #24]
 8006e2c:	b90b      	cbnz	r3, 8006e32 <__swbuf_r+0x12>
 8006e2e:	f7ff fb81 	bl	8006534 <__sinit>
 8006e32:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <__swbuf_r+0x98>)
 8006e34:	429c      	cmp	r4, r3
 8006e36:	d12b      	bne.n	8006e90 <__swbuf_r+0x70>
 8006e38:	686c      	ldr	r4, [r5, #4]
 8006e3a:	69a3      	ldr	r3, [r4, #24]
 8006e3c:	60a3      	str	r3, [r4, #8]
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	071a      	lsls	r2, r3, #28
 8006e42:	d52f      	bpl.n	8006ea4 <__swbuf_r+0x84>
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	b36b      	cbz	r3, 8006ea4 <__swbuf_r+0x84>
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	1ac0      	subs	r0, r0, r3
 8006e4e:	6963      	ldr	r3, [r4, #20]
 8006e50:	b2f6      	uxtb	r6, r6
 8006e52:	4283      	cmp	r3, r0
 8006e54:	4637      	mov	r7, r6
 8006e56:	dc04      	bgt.n	8006e62 <__swbuf_r+0x42>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 f948 	bl	80070f0 <_fflush_r>
 8006e60:	bb30      	cbnz	r0, 8006eb0 <__swbuf_r+0x90>
 8006e62:	68a3      	ldr	r3, [r4, #8]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	60a3      	str	r3, [r4, #8]
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	6022      	str	r2, [r4, #0]
 8006e6e:	701e      	strb	r6, [r3, #0]
 8006e70:	6963      	ldr	r3, [r4, #20]
 8006e72:	3001      	adds	r0, #1
 8006e74:	4283      	cmp	r3, r0
 8006e76:	d004      	beq.n	8006e82 <__swbuf_r+0x62>
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	07db      	lsls	r3, r3, #31
 8006e7c:	d506      	bpl.n	8006e8c <__swbuf_r+0x6c>
 8006e7e:	2e0a      	cmp	r6, #10
 8006e80:	d104      	bne.n	8006e8c <__swbuf_r+0x6c>
 8006e82:	4621      	mov	r1, r4
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 f933 	bl	80070f0 <_fflush_r>
 8006e8a:	b988      	cbnz	r0, 8006eb0 <__swbuf_r+0x90>
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <__swbuf_r+0x9c>)
 8006e92:	429c      	cmp	r4, r3
 8006e94:	d101      	bne.n	8006e9a <__swbuf_r+0x7a>
 8006e96:	68ac      	ldr	r4, [r5, #8]
 8006e98:	e7cf      	b.n	8006e3a <__swbuf_r+0x1a>
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <__swbuf_r+0xa0>)
 8006e9c:	429c      	cmp	r4, r3
 8006e9e:	bf08      	it	eq
 8006ea0:	68ec      	ldreq	r4, [r5, #12]
 8006ea2:	e7ca      	b.n	8006e3a <__swbuf_r+0x1a>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f000 f81e 	bl	8006ee8 <__swsetup_r>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d0cb      	beq.n	8006e48 <__swbuf_r+0x28>
 8006eb0:	f04f 37ff 	mov.w	r7, #4294967295
 8006eb4:	e7ea      	b.n	8006e8c <__swbuf_r+0x6c>
 8006eb6:	bf00      	nop
 8006eb8:	0800740c 	.word	0x0800740c
 8006ebc:	0800742c 	.word	0x0800742c
 8006ec0:	080073ec 	.word	0x080073ec

08006ec4 <_write_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	; (8006ee4 <_write_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fa fae2 	bl	800149c <_write>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_write_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_write_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000874 	.word	0x20000874

08006ee8 <__swsetup_r>:
 8006ee8:	4b32      	ldr	r3, [pc, #200]	; (8006fb4 <__swsetup_r+0xcc>)
 8006eea:	b570      	push	{r4, r5, r6, lr}
 8006eec:	681d      	ldr	r5, [r3, #0]
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	b125      	cbz	r5, 8006efe <__swsetup_r+0x16>
 8006ef4:	69ab      	ldr	r3, [r5, #24]
 8006ef6:	b913      	cbnz	r3, 8006efe <__swsetup_r+0x16>
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff fb1b 	bl	8006534 <__sinit>
 8006efe:	4b2e      	ldr	r3, [pc, #184]	; (8006fb8 <__swsetup_r+0xd0>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	d10f      	bne.n	8006f24 <__swsetup_r+0x3c>
 8006f04:	686c      	ldr	r4, [r5, #4]
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f0c:	0719      	lsls	r1, r3, #28
 8006f0e:	d42c      	bmi.n	8006f6a <__swsetup_r+0x82>
 8006f10:	06dd      	lsls	r5, r3, #27
 8006f12:	d411      	bmi.n	8006f38 <__swsetup_r+0x50>
 8006f14:	2309      	movs	r3, #9
 8006f16:	6033      	str	r3, [r6, #0]
 8006f18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f22:	e03e      	b.n	8006fa2 <__swsetup_r+0xba>
 8006f24:	4b25      	ldr	r3, [pc, #148]	; (8006fbc <__swsetup_r+0xd4>)
 8006f26:	429c      	cmp	r4, r3
 8006f28:	d101      	bne.n	8006f2e <__swsetup_r+0x46>
 8006f2a:	68ac      	ldr	r4, [r5, #8]
 8006f2c:	e7eb      	b.n	8006f06 <__swsetup_r+0x1e>
 8006f2e:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <__swsetup_r+0xd8>)
 8006f30:	429c      	cmp	r4, r3
 8006f32:	bf08      	it	eq
 8006f34:	68ec      	ldreq	r4, [r5, #12]
 8006f36:	e7e6      	b.n	8006f06 <__swsetup_r+0x1e>
 8006f38:	0758      	lsls	r0, r3, #29
 8006f3a:	d512      	bpl.n	8006f62 <__swsetup_r+0x7a>
 8006f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f3e:	b141      	cbz	r1, 8006f52 <__swsetup_r+0x6a>
 8006f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f44:	4299      	cmp	r1, r3
 8006f46:	d002      	beq.n	8006f4e <__swsetup_r+0x66>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f000 f991 	bl	8007270 <_free_r>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6363      	str	r3, [r4, #52]	; 0x34
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f043 0308 	orr.w	r3, r3, #8
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	b94b      	cbnz	r3, 8006f82 <__swsetup_r+0x9a>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f78:	d003      	beq.n	8006f82 <__swsetup_r+0x9a>
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 f92b 	bl	80071d8 <__smakebuf_r>
 8006f82:	89a0      	ldrh	r0, [r4, #12]
 8006f84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f88:	f010 0301 	ands.w	r3, r0, #1
 8006f8c:	d00a      	beq.n	8006fa4 <__swsetup_r+0xbc>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60a3      	str	r3, [r4, #8]
 8006f92:	6963      	ldr	r3, [r4, #20]
 8006f94:	425b      	negs	r3, r3
 8006f96:	61a3      	str	r3, [r4, #24]
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	b943      	cbnz	r3, 8006fae <__swsetup_r+0xc6>
 8006f9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fa0:	d1ba      	bne.n	8006f18 <__swsetup_r+0x30>
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	0781      	lsls	r1, r0, #30
 8006fa6:	bf58      	it	pl
 8006fa8:	6963      	ldrpl	r3, [r4, #20]
 8006faa:	60a3      	str	r3, [r4, #8]
 8006fac:	e7f4      	b.n	8006f98 <__swsetup_r+0xb0>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	e7f7      	b.n	8006fa2 <__swsetup_r+0xba>
 8006fb2:	bf00      	nop
 8006fb4:	2000000c 	.word	0x2000000c
 8006fb8:	0800740c 	.word	0x0800740c
 8006fbc:	0800742c 	.word	0x0800742c
 8006fc0:	080073ec 	.word	0x080073ec

08006fc4 <_close_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d06      	ldr	r5, [pc, #24]	; (8006fe0 <_close_r+0x1c>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7fa fa80 	bl	80014d4 <_close>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_close_r+0x1a>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_close_r+0x1a>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20000874 	.word	0x20000874

08006fe4 <__sflush_r>:
 8006fe4:	898a      	ldrh	r2, [r1, #12]
 8006fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fea:	4605      	mov	r5, r0
 8006fec:	0710      	lsls	r0, r2, #28
 8006fee:	460c      	mov	r4, r1
 8006ff0:	d458      	bmi.n	80070a4 <__sflush_r+0xc0>
 8006ff2:	684b      	ldr	r3, [r1, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dc05      	bgt.n	8007004 <__sflush_r+0x20>
 8006ff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	dc02      	bgt.n	8007004 <__sflush_r+0x20>
 8006ffe:	2000      	movs	r0, #0
 8007000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007006:	2e00      	cmp	r6, #0
 8007008:	d0f9      	beq.n	8006ffe <__sflush_r+0x1a>
 800700a:	2300      	movs	r3, #0
 800700c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007010:	682f      	ldr	r7, [r5, #0]
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	d032      	beq.n	800707c <__sflush_r+0x98>
 8007016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	075a      	lsls	r2, r3, #29
 800701c:	d505      	bpl.n	800702a <__sflush_r+0x46>
 800701e:	6863      	ldr	r3, [r4, #4]
 8007020:	1ac0      	subs	r0, r0, r3
 8007022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007024:	b10b      	cbz	r3, 800702a <__sflush_r+0x46>
 8007026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007028:	1ac0      	subs	r0, r0, r3
 800702a:	2300      	movs	r3, #0
 800702c:	4602      	mov	r2, r0
 800702e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007030:	6a21      	ldr	r1, [r4, #32]
 8007032:	4628      	mov	r0, r5
 8007034:	47b0      	blx	r6
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	d106      	bne.n	800704a <__sflush_r+0x66>
 800703c:	6829      	ldr	r1, [r5, #0]
 800703e:	291d      	cmp	r1, #29
 8007040:	d82c      	bhi.n	800709c <__sflush_r+0xb8>
 8007042:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <__sflush_r+0x108>)
 8007044:	40ca      	lsrs	r2, r1
 8007046:	07d6      	lsls	r6, r2, #31
 8007048:	d528      	bpl.n	800709c <__sflush_r+0xb8>
 800704a:	2200      	movs	r2, #0
 800704c:	6062      	str	r2, [r4, #4]
 800704e:	04d9      	lsls	r1, r3, #19
 8007050:	6922      	ldr	r2, [r4, #16]
 8007052:	6022      	str	r2, [r4, #0]
 8007054:	d504      	bpl.n	8007060 <__sflush_r+0x7c>
 8007056:	1c42      	adds	r2, r0, #1
 8007058:	d101      	bne.n	800705e <__sflush_r+0x7a>
 800705a:	682b      	ldr	r3, [r5, #0]
 800705c:	b903      	cbnz	r3, 8007060 <__sflush_r+0x7c>
 800705e:	6560      	str	r0, [r4, #84]	; 0x54
 8007060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007062:	602f      	str	r7, [r5, #0]
 8007064:	2900      	cmp	r1, #0
 8007066:	d0ca      	beq.n	8006ffe <__sflush_r+0x1a>
 8007068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800706c:	4299      	cmp	r1, r3
 800706e:	d002      	beq.n	8007076 <__sflush_r+0x92>
 8007070:	4628      	mov	r0, r5
 8007072:	f000 f8fd 	bl	8007270 <_free_r>
 8007076:	2000      	movs	r0, #0
 8007078:	6360      	str	r0, [r4, #52]	; 0x34
 800707a:	e7c1      	b.n	8007000 <__sflush_r+0x1c>
 800707c:	6a21      	ldr	r1, [r4, #32]
 800707e:	2301      	movs	r3, #1
 8007080:	4628      	mov	r0, r5
 8007082:	47b0      	blx	r6
 8007084:	1c41      	adds	r1, r0, #1
 8007086:	d1c7      	bne.n	8007018 <__sflush_r+0x34>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0c4      	beq.n	8007018 <__sflush_r+0x34>
 800708e:	2b1d      	cmp	r3, #29
 8007090:	d001      	beq.n	8007096 <__sflush_r+0xb2>
 8007092:	2b16      	cmp	r3, #22
 8007094:	d101      	bne.n	800709a <__sflush_r+0xb6>
 8007096:	602f      	str	r7, [r5, #0]
 8007098:	e7b1      	b.n	8006ffe <__sflush_r+0x1a>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	e7ad      	b.n	8007000 <__sflush_r+0x1c>
 80070a4:	690f      	ldr	r7, [r1, #16]
 80070a6:	2f00      	cmp	r7, #0
 80070a8:	d0a9      	beq.n	8006ffe <__sflush_r+0x1a>
 80070aa:	0793      	lsls	r3, r2, #30
 80070ac:	680e      	ldr	r6, [r1, #0]
 80070ae:	bf08      	it	eq
 80070b0:	694b      	ldreq	r3, [r1, #20]
 80070b2:	600f      	str	r7, [r1, #0]
 80070b4:	bf18      	it	ne
 80070b6:	2300      	movne	r3, #0
 80070b8:	eba6 0807 	sub.w	r8, r6, r7
 80070bc:	608b      	str	r3, [r1, #8]
 80070be:	f1b8 0f00 	cmp.w	r8, #0
 80070c2:	dd9c      	ble.n	8006ffe <__sflush_r+0x1a>
 80070c4:	6a21      	ldr	r1, [r4, #32]
 80070c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070c8:	4643      	mov	r3, r8
 80070ca:	463a      	mov	r2, r7
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b0      	blx	r6
 80070d0:	2800      	cmp	r0, #0
 80070d2:	dc06      	bgt.n	80070e2 <__sflush_r+0xfe>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295
 80070e0:	e78e      	b.n	8007000 <__sflush_r+0x1c>
 80070e2:	4407      	add	r7, r0
 80070e4:	eba8 0800 	sub.w	r8, r8, r0
 80070e8:	e7e9      	b.n	80070be <__sflush_r+0xda>
 80070ea:	bf00      	nop
 80070ec:	20400001 	.word	0x20400001

080070f0 <_fflush_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	690b      	ldr	r3, [r1, #16]
 80070f4:	4605      	mov	r5, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	b913      	cbnz	r3, 8007100 <_fflush_r+0x10>
 80070fa:	2500      	movs	r5, #0
 80070fc:	4628      	mov	r0, r5
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	b118      	cbz	r0, 800710a <_fflush_r+0x1a>
 8007102:	6983      	ldr	r3, [r0, #24]
 8007104:	b90b      	cbnz	r3, 800710a <_fflush_r+0x1a>
 8007106:	f7ff fa15 	bl	8006534 <__sinit>
 800710a:	4b14      	ldr	r3, [pc, #80]	; (800715c <_fflush_r+0x6c>)
 800710c:	429c      	cmp	r4, r3
 800710e:	d11b      	bne.n	8007148 <_fflush_r+0x58>
 8007110:	686c      	ldr	r4, [r5, #4]
 8007112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0ef      	beq.n	80070fa <_fflush_r+0xa>
 800711a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800711c:	07d0      	lsls	r0, r2, #31
 800711e:	d404      	bmi.n	800712a <_fflush_r+0x3a>
 8007120:	0599      	lsls	r1, r3, #22
 8007122:	d402      	bmi.n	800712a <_fflush_r+0x3a>
 8007124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007126:	f7ff faa3 	bl	8006670 <__retarget_lock_acquire_recursive>
 800712a:	4628      	mov	r0, r5
 800712c:	4621      	mov	r1, r4
 800712e:	f7ff ff59 	bl	8006fe4 <__sflush_r>
 8007132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007134:	07da      	lsls	r2, r3, #31
 8007136:	4605      	mov	r5, r0
 8007138:	d4e0      	bmi.n	80070fc <_fflush_r+0xc>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	059b      	lsls	r3, r3, #22
 800713e:	d4dd      	bmi.n	80070fc <_fflush_r+0xc>
 8007140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007142:	f7ff fa96 	bl	8006672 <__retarget_lock_release_recursive>
 8007146:	e7d9      	b.n	80070fc <_fflush_r+0xc>
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <_fflush_r+0x70>)
 800714a:	429c      	cmp	r4, r3
 800714c:	d101      	bne.n	8007152 <_fflush_r+0x62>
 800714e:	68ac      	ldr	r4, [r5, #8]
 8007150:	e7df      	b.n	8007112 <_fflush_r+0x22>
 8007152:	4b04      	ldr	r3, [pc, #16]	; (8007164 <_fflush_r+0x74>)
 8007154:	429c      	cmp	r4, r3
 8007156:	bf08      	it	eq
 8007158:	68ec      	ldreq	r4, [r5, #12]
 800715a:	e7da      	b.n	8007112 <_fflush_r+0x22>
 800715c:	0800740c 	.word	0x0800740c
 8007160:	0800742c 	.word	0x0800742c
 8007164:	080073ec 	.word	0x080073ec

08007168 <_lseek_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4d07      	ldr	r5, [pc, #28]	; (8007188 <_lseek_r+0x20>)
 800716c:	4604      	mov	r4, r0
 800716e:	4608      	mov	r0, r1
 8007170:	4611      	mov	r1, r2
 8007172:	2200      	movs	r2, #0
 8007174:	602a      	str	r2, [r5, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	f7fa f9d3 	bl	8001522 <_lseek>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_lseek_r+0x1e>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_lseek_r+0x1e>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	20000874 	.word	0x20000874

0800718c <__swhatbuf_r>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	460e      	mov	r6, r1
 8007190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007194:	2900      	cmp	r1, #0
 8007196:	b096      	sub	sp, #88	; 0x58
 8007198:	4614      	mov	r4, r2
 800719a:	461d      	mov	r5, r3
 800719c:	da08      	bge.n	80071b0 <__swhatbuf_r+0x24>
 800719e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	602a      	str	r2, [r5, #0]
 80071a6:	061a      	lsls	r2, r3, #24
 80071a8:	d410      	bmi.n	80071cc <__swhatbuf_r+0x40>
 80071aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ae:	e00e      	b.n	80071ce <__swhatbuf_r+0x42>
 80071b0:	466a      	mov	r2, sp
 80071b2:	f000 f8bb 	bl	800732c <_fstat_r>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	dbf1      	blt.n	800719e <__swhatbuf_r+0x12>
 80071ba:	9a01      	ldr	r2, [sp, #4]
 80071bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071c4:	425a      	negs	r2, r3
 80071c6:	415a      	adcs	r2, r3
 80071c8:	602a      	str	r2, [r5, #0]
 80071ca:	e7ee      	b.n	80071aa <__swhatbuf_r+0x1e>
 80071cc:	2340      	movs	r3, #64	; 0x40
 80071ce:	2000      	movs	r0, #0
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	b016      	add	sp, #88	; 0x58
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080071d8 <__smakebuf_r>:
 80071d8:	898b      	ldrh	r3, [r1, #12]
 80071da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071dc:	079d      	lsls	r5, r3, #30
 80071de:	4606      	mov	r6, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	d507      	bpl.n	80071f4 <__smakebuf_r+0x1c>
 80071e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	2301      	movs	r3, #1
 80071ee:	6163      	str	r3, [r4, #20]
 80071f0:	b002      	add	sp, #8
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	ab01      	add	r3, sp, #4
 80071f6:	466a      	mov	r2, sp
 80071f8:	f7ff ffc8 	bl	800718c <__swhatbuf_r>
 80071fc:	9900      	ldr	r1, [sp, #0]
 80071fe:	4605      	mov	r5, r0
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff fa57 	bl	80066b4 <_malloc_r>
 8007206:	b948      	cbnz	r0, 800721c <__smakebuf_r+0x44>
 8007208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720c:	059a      	lsls	r2, r3, #22
 800720e:	d4ef      	bmi.n	80071f0 <__smakebuf_r+0x18>
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	f043 0302 	orr.w	r3, r3, #2
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	e7e3      	b.n	80071e4 <__smakebuf_r+0xc>
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <__smakebuf_r+0x7c>)
 800721e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	6020      	str	r0, [r4, #0]
 8007224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	9b00      	ldr	r3, [sp, #0]
 800722c:	6163      	str	r3, [r4, #20]
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	6120      	str	r0, [r4, #16]
 8007232:	b15b      	cbz	r3, 800724c <__smakebuf_r+0x74>
 8007234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007238:	4630      	mov	r0, r6
 800723a:	f000 f889 	bl	8007350 <_isatty_r>
 800723e:	b128      	cbz	r0, 800724c <__smakebuf_r+0x74>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	f023 0303 	bic.w	r3, r3, #3
 8007246:	f043 0301 	orr.w	r3, r3, #1
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	89a0      	ldrh	r0, [r4, #12]
 800724e:	4305      	orrs	r5, r0
 8007250:	81a5      	strh	r5, [r4, #12]
 8007252:	e7cd      	b.n	80071f0 <__smakebuf_r+0x18>
 8007254:	080064cd 	.word	0x080064cd

08007258 <__malloc_lock>:
 8007258:	4801      	ldr	r0, [pc, #4]	; (8007260 <__malloc_lock+0x8>)
 800725a:	f7ff ba09 	b.w	8006670 <__retarget_lock_acquire_recursive>
 800725e:	bf00      	nop
 8007260:	20000868 	.word	0x20000868

08007264 <__malloc_unlock>:
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__malloc_unlock+0x8>)
 8007266:	f7ff ba04 	b.w	8006672 <__retarget_lock_release_recursive>
 800726a:	bf00      	nop
 800726c:	20000868 	.word	0x20000868

08007270 <_free_r>:
 8007270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007272:	2900      	cmp	r1, #0
 8007274:	d044      	beq.n	8007300 <_free_r+0x90>
 8007276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800727a:	9001      	str	r0, [sp, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f1a1 0404 	sub.w	r4, r1, #4
 8007282:	bfb8      	it	lt
 8007284:	18e4      	addlt	r4, r4, r3
 8007286:	f7ff ffe7 	bl	8007258 <__malloc_lock>
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <_free_r+0x94>)
 800728c:	9801      	ldr	r0, [sp, #4]
 800728e:	6813      	ldr	r3, [r2, #0]
 8007290:	b933      	cbnz	r3, 80072a0 <_free_r+0x30>
 8007292:	6063      	str	r3, [r4, #4]
 8007294:	6014      	str	r4, [r2, #0]
 8007296:	b003      	add	sp, #12
 8007298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800729c:	f7ff bfe2 	b.w	8007264 <__malloc_unlock>
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	d908      	bls.n	80072b6 <_free_r+0x46>
 80072a4:	6825      	ldr	r5, [r4, #0]
 80072a6:	1961      	adds	r1, r4, r5
 80072a8:	428b      	cmp	r3, r1
 80072aa:	bf01      	itttt	eq
 80072ac:	6819      	ldreq	r1, [r3, #0]
 80072ae:	685b      	ldreq	r3, [r3, #4]
 80072b0:	1949      	addeq	r1, r1, r5
 80072b2:	6021      	streq	r1, [r4, #0]
 80072b4:	e7ed      	b.n	8007292 <_free_r+0x22>
 80072b6:	461a      	mov	r2, r3
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	b10b      	cbz	r3, 80072c0 <_free_r+0x50>
 80072bc:	42a3      	cmp	r3, r4
 80072be:	d9fa      	bls.n	80072b6 <_free_r+0x46>
 80072c0:	6811      	ldr	r1, [r2, #0]
 80072c2:	1855      	adds	r5, r2, r1
 80072c4:	42a5      	cmp	r5, r4
 80072c6:	d10b      	bne.n	80072e0 <_free_r+0x70>
 80072c8:	6824      	ldr	r4, [r4, #0]
 80072ca:	4421      	add	r1, r4
 80072cc:	1854      	adds	r4, r2, r1
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	6011      	str	r1, [r2, #0]
 80072d2:	d1e0      	bne.n	8007296 <_free_r+0x26>
 80072d4:	681c      	ldr	r4, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	6053      	str	r3, [r2, #4]
 80072da:	4421      	add	r1, r4
 80072dc:	6011      	str	r1, [r2, #0]
 80072de:	e7da      	b.n	8007296 <_free_r+0x26>
 80072e0:	d902      	bls.n	80072e8 <_free_r+0x78>
 80072e2:	230c      	movs	r3, #12
 80072e4:	6003      	str	r3, [r0, #0]
 80072e6:	e7d6      	b.n	8007296 <_free_r+0x26>
 80072e8:	6825      	ldr	r5, [r4, #0]
 80072ea:	1961      	adds	r1, r4, r5
 80072ec:	428b      	cmp	r3, r1
 80072ee:	bf04      	itt	eq
 80072f0:	6819      	ldreq	r1, [r3, #0]
 80072f2:	685b      	ldreq	r3, [r3, #4]
 80072f4:	6063      	str	r3, [r4, #4]
 80072f6:	bf04      	itt	eq
 80072f8:	1949      	addeq	r1, r1, r5
 80072fa:	6021      	streq	r1, [r4, #0]
 80072fc:	6054      	str	r4, [r2, #4]
 80072fe:	e7ca      	b.n	8007296 <_free_r+0x26>
 8007300:	b003      	add	sp, #12
 8007302:	bd30      	pop	{r4, r5, pc}
 8007304:	2000086c 	.word	0x2000086c

08007308 <_read_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d07      	ldr	r5, [pc, #28]	; (8007328 <_read_r+0x20>)
 800730c:	4604      	mov	r4, r0
 800730e:	4608      	mov	r0, r1
 8007310:	4611      	mov	r1, r2
 8007312:	2200      	movs	r2, #0
 8007314:	602a      	str	r2, [r5, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	f7fa f8a3 	bl	8001462 <_read>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_read_r+0x1e>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_read_r+0x1e>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	20000874 	.word	0x20000874

0800732c <_fstat_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d07      	ldr	r5, [pc, #28]	; (800734c <_fstat_r+0x20>)
 8007330:	2300      	movs	r3, #0
 8007332:	4604      	mov	r4, r0
 8007334:	4608      	mov	r0, r1
 8007336:	4611      	mov	r1, r2
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	f7fa f8d7 	bl	80014ec <_fstat>
 800733e:	1c43      	adds	r3, r0, #1
 8007340:	d102      	bne.n	8007348 <_fstat_r+0x1c>
 8007342:	682b      	ldr	r3, [r5, #0]
 8007344:	b103      	cbz	r3, 8007348 <_fstat_r+0x1c>
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	bd38      	pop	{r3, r4, r5, pc}
 800734a:	bf00      	nop
 800734c:	20000874 	.word	0x20000874

08007350 <_isatty_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d06      	ldr	r5, [pc, #24]	; (800736c <_isatty_r+0x1c>)
 8007354:	2300      	movs	r3, #0
 8007356:	4604      	mov	r4, r0
 8007358:	4608      	mov	r0, r1
 800735a:	602b      	str	r3, [r5, #0]
 800735c:	f7fa f8d6 	bl	800150c <_isatty>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_isatty_r+0x1a>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_isatty_r+0x1a>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20000874 	.word	0x20000874

08007370 <_init>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr

0800737c <_fini>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr
