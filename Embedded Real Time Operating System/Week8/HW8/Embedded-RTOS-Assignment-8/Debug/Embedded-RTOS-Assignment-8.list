
Embedded-RTOS-Assignment-8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008270  08008270  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008278  08008278  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc8  20000074  080082f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e3c  080082f4  00021e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028cd9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6c  00000000  00000000  00048d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002220  00000000  00000000  0004daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002048  00000000  00000000  0004fd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b218  00000000  00000000  00051d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002698a  00000000  00000000  0007cf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010714c  00000000  00000000  000a38fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aaa46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095b8  00000000  00000000  001aaa98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008148 	.word	0x08008148

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008148 	.word	0x08008148

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetTimerTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetTimerTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000526:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	20000344 	.word	0x20000344
 8000538:	200003f8 	.word	0x200003f8

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b08e      	sub	sp, #56	; 0x38
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fff2 	bl	800152a <HAL_Init>

  /* USER CODE BEGIN Init */
  xEventGroup = xEventGroupCreate();
 8000546:	f004 fe2a 	bl	800519e <xEventGroupCreate>
 800054a:	4603      	mov	r3, r0
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <main+0x88>)
 800054e:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f842 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 fa0a 	bl	800096c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000558:	f000 f8a0 	bl	800069c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800055c:	f000 f8d6 	bl	800070c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000560:	f000 f912 	bl	8000788 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000564:	f000 f936 	bl	80007d4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000568:	f000 f972 	bl	8000850 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800056c:	f000 f9a0 	bl	80008b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000570:	f000 f9ce 	bl	8000910 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <main+0x8c>)
 8000576:	f107 041c 	add.w	r4, r7, #28
 800057a:	461d      	mov	r5, r3
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000588:	f107 031c 	add.w	r3, r7, #28
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fda5 	bl	80050de <osThreadCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <main+0x90>)
 8000598:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <main+0x94>)
 800059c:	463c      	mov	r4, r7
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005ac:	463b      	mov	r3, r7
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fd94 	bl	80050de <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <main+0x98>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f004 fd88 	bl	80050d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x84>
 80005c2:	bf00      	nop
 80005c4:	20000f48 	.word	0x20000f48
 80005c8:	08008178 	.word	0x08008178
 80005cc:	20000f40 	.word	0x20000f40
 80005d0:	08008194 	.word	0x08008194
 80005d4:	20000f44 	.word	0x20000f44

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fce4 	bl	8007fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f001 fe51 	bl	80022a4 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 fbc2 	bl	8000d90 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f001 fe2c 	bl	8002268 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <SystemClock_Config+0xc0>)
 8000612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000616:	4a20      	ldr	r2, [pc, #128]	; (8000698 <SystemClock_Config+0xc0>)
 8000618:	f023 0318 	bic.w	r3, r3, #24
 800061c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000620:	2314      	movs	r3, #20
 8000622:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000638:	2301      	movs	r3, #1
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000640:	2328      	movs	r3, #40	; 0x28
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f001 ff47 	bl	80024e8 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000660:	f000 fb96 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2104      	movs	r1, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fb0f 	bl	8002ca0 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000688:	f000 fb82 	bl	8000d90 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800068c:	f003 f848 	bl	8003720 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000690:	bf00      	nop
 8000692:	3758      	adds	r7, #88	; 0x58
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006a2:	4a19      	ldr	r2, [pc, #100]	; (8000708 <MX_DFSDM1_Init+0x6c>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_DFSDM1_Init+0x68>)
 80006f2:	f001 f859 	bl	80017a8 <HAL_DFSDM_ChannelInit>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006fc:	f000 fb48 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200007f8 	.word	0x200007f8
 8000708:	40016020 	.word	0x40016020

0800070c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_I2C2_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_I2C2_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_I2C2_Init+0x74>)
 8000718:	f640 6214 	movw	r2, #3604	; 0xe14
 800071c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_I2C2_Init+0x74>)
 8000726:	2201      	movs	r2, #1
 8000728:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_I2C2_Init+0x74>)
 800074a:	f001 fb1e 	bl	8001d8a <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fb1c 	bl	8000d90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000758:	2100      	movs	r1, #0
 800075a:	4809      	ldr	r0, [pc, #36]	; (8000780 <MX_I2C2_Init+0x74>)
 800075c:	f001 fba4 	bl	8001ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000766:	f000 fb13 	bl	8000d90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_I2C2_Init+0x74>)
 800076e:	f001 fbe6 	bl	8001f3e <HAL_I2CEx_ConfigDigitalFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 fb0a 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000830 	.word	0x20000830
 8000784:	40005800 	.word	0x40005800

08000788 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_QUADSPI_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_QUADSPI_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_QUADSPI_Init+0x44>)
 8000794:	2202      	movs	r2, #2
 8000796:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_QUADSPI_Init+0x44>)
 800079a:	2204      	movs	r2, #4
 800079c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_QUADSPI_Init+0x44>)
 80007a0:	2210      	movs	r2, #16
 80007a2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_QUADSPI_Init+0x44>)
 80007a6:	2217      	movs	r2, #23
 80007a8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_QUADSPI_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_QUADSPI_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_QUADSPI_Init+0x44>)
 80007b8:	f001 fdda 	bl	8002370 <HAL_QSPI_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007c2:	f000 fae5 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000884 	.word	0x20000884
 80007d0:	a0001000 	.word	0xa0001000

080007d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_SPI3_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_SPI3_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_SPI3_Init+0x74>)
 80007e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_SPI3_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI3_Init+0x74>)
 80007ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_SPI3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI3_Init+0x74>)
 8000802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000806:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_SPI3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_SPI3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI3_Init+0x74>)
 8000822:	2207      	movs	r2, #7
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI3_Init+0x74>)
 800082e:	2208      	movs	r2, #8
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_SPI3_Init+0x74>)
 8000834:	f003 f956 	bl	8003ae4 <HAL_SPI_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 faa7 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200008c8 	.word	0x200008c8
 800084c:	40003c00 	.word	0x40003c00

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_USART1_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000894:	f003 fc9a 	bl	80041cc <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 fa77 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000092c 	.word	0x2000092c
 80008ac:	40013800 	.word	0x40013800

080008b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_USART3_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008f4:	f003 fc6a 	bl	80041cc <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 fa47 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200009b0 	.word	0x200009b0
 800090c:	40004800 	.word	0x40004800

08000910 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800091a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2206      	movs	r2, #6
 8000920:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2202      	movs	r2, #2
 8000926:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2202      	movs	r2, #2
 800092c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	f001 fb3f 	bl	8001fd6 <HAL_PCD_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 fa17 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000a34 	.word	0x20000a34

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	4bbd      	ldr	r3, [pc, #756]	; (8000c78 <MX_GPIO_Init+0x30c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4abc      	ldr	r2, [pc, #752]	; (8000c78 <MX_GPIO_Init+0x30c>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4bba      	ldr	r3, [pc, #744]	; (8000c78 <MX_GPIO_Init+0x30c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0310 	and.w	r3, r3, #16
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4bb7      	ldr	r3, [pc, #732]	; (8000c78 <MX_GPIO_Init+0x30c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4ab6      	ldr	r2, [pc, #728]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4bb4      	ldr	r3, [pc, #720]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4bb1      	ldr	r3, [pc, #708]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4ab0      	ldr	r2, [pc, #704]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4bae      	ldr	r3, [pc, #696]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4bab      	ldr	r3, [pc, #684]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4aaa      	ldr	r2, [pc, #680]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4ba8      	ldr	r3, [pc, #672]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	4ba5      	ldr	r3, [pc, #660]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4aa4      	ldr	r2, [pc, #656]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4ba2      	ldr	r3, [pc, #648]	; (8000c78 <MX_GPIO_Init+0x30c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a00:	489e      	ldr	r0, [pc, #632]	; (8000c7c <MX_GPIO_Init+0x310>)
 8000a02:	f001 f987 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f001 f980 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a14:	2200      	movs	r2, #0
 8000a16:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a1a:	4899      	ldr	r0, [pc, #612]	; (8000c80 <MX_GPIO_Init+0x314>)
 8000a1c:	f001 f97a 	bl	8001d14 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a26:	4897      	ldr	r0, [pc, #604]	; (8000c84 <MX_GPIO_Init+0x318>)
 8000a28:	f001 f974 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	4894      	ldr	r0, [pc, #592]	; (8000c84 <MX_GPIO_Init+0x318>)
 8000a34:	f001 f96e 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a3e:	4892      	ldr	r0, [pc, #584]	; (8000c88 <MX_GPIO_Init+0x31c>)
 8000a40:	f001 f968 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2120      	movs	r1, #32
 8000a48:	488d      	ldr	r0, [pc, #564]	; (8000c80 <MX_GPIO_Init+0x314>)
 8000a4a:	f001 f963 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2101      	movs	r1, #1
 8000a52:	488a      	ldr	r0, [pc, #552]	; (8000c7c <MX_GPIO_Init+0x310>)
 8000a54:	f001 f95e 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a58:	f240 1315 	movw	r3, #277	; 0x115
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4882      	ldr	r0, [pc, #520]	; (8000c7c <MX_GPIO_Init+0x310>)
 8000a72:	f000 ffa5 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a76:	236a      	movs	r3, #106	; 0x6a
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	487c      	ldr	r0, [pc, #496]	; (8000c7c <MX_GPIO_Init+0x310>)
 8000a8c:	f000 ff98 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4878      	ldr	r0, [pc, #480]	; (8000c88 <MX_GPIO_Init+0x31c>)
 8000aa8:	f000 ff8a 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000aac:	233f      	movs	r3, #63	; 0x3f
 8000aae:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4872      	ldr	r0, [pc, #456]	; (8000c88 <MX_GPIO_Init+0x31c>)
 8000ac0:	f000 ff7e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 ff6d 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ae6:	f248 1304 	movw	r3, #33028	; 0x8104
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 ff5d 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b06:	2308      	movs	r3, #8
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b16:	2301      	movs	r3, #1
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 ff4c 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 ff3f 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b42:	23e0      	movs	r3, #224	; 0xe0
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b52:	2305      	movs	r3, #5
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f000 ff2e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4841      	ldr	r0, [pc, #260]	; (8000c80 <MX_GPIO_Init+0x314>)
 8000b7a:	f000 ff21 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b82:	230b      	movs	r3, #11
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	483b      	ldr	r0, [pc, #236]	; (8000c80 <MX_GPIO_Init+0x314>)
 8000b92:	f000 ff15 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b96:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b9a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4834      	ldr	r0, [pc, #208]	; (8000c80 <MX_GPIO_Init+0x314>)
 8000bb0:	f000 ff06 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000bb4:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000bb8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	482e      	ldr	r0, [pc, #184]	; (8000c84 <MX_GPIO_Init+0x318>)
 8000bcc:	f000 fef8 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bd0:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4826      	ldr	r0, [pc, #152]	; (8000c84 <MX_GPIO_Init+0x318>)
 8000bea:	f000 fee9 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000bee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4820      	ldr	r0, [pc, #128]	; (8000c88 <MX_GPIO_Init+0x31c>)
 8000c08:	f000 feda 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4819      	ldr	r0, [pc, #100]	; (8000c88 <MX_GPIO_Init+0x31c>)
 8000c24:	f000 fecc 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4810      	ldr	r0, [pc, #64]	; (8000c84 <MX_GPIO_Init+0x318>)
 8000c44:	f000 febc 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c48:	2378      	movs	r3, #120	; 0x78
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_GPIO_Init+0x318>)
 8000c64:	f000 feac 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e00a      	b.n	8000c8c <MX_GPIO_Init+0x320>
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48001000 	.word	0x48001000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c92:	2304      	movs	r3, #4
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_GPIO_Init+0x360>)
 8000c9e:	f000 fe8f 	bl	80019c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	2017      	movs	r0, #23
 8000ca8:	f000 fd54 	bl	8001754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cac:	2017      	movs	r0, #23
 8000cae:	f000 fd6d 	bl	800178c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	2028      	movs	r0, #40	; 0x28
 8000cb8:	f000 fd4c 	bl	8001754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cbc:	2028      	movs	r0, #40	; 0x28
 8000cbe:	f000 fd65 	bl	800178c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	48000400 	.word	0x48000400

08000cd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	xEventGroupWaitBits(xEventGroup, mainISR_BIT, pdFALSE, pdTRUE, portMAX_DELAY);
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <StartDefaultTask+0x48>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	f004 fa74 	bl	80051d4 <xEventGroupWaitBits>
    osDelay(1000);
 8000cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf0:	f004 fa41 	bl	8005176 <osDelay>
    xEventGroupSetBits(xEventGroup, mainTASK_BIT_1);
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <StartDefaultTask+0x48>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 fb38 	bl	8005370 <xEventGroupSetBits>
    osDelay(1000);
 8000d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d04:	f004 fa37 	bl	8005176 <osDelay>
    xEventGroupSetBits(xEventGroup, mainTASK_BIT_2);
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <StartDefaultTask+0x48>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 fb2e 	bl	8005370 <xEventGroupSetBits>
	xEventGroupWaitBits(xEventGroup, mainISR_BIT, pdFALSE, pdTRUE, portMAX_DELAY);
 8000d14:	e7e0      	b.n	8000cd8 <StartDefaultTask+0x8>
 8000d16:	bf00      	nop
 8000d18:	20000f48 	.word	0x20000f48

08000d1c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	xEventGroupWaitBits(xEventGroup, mainISR_BIT | mainTASK_BIT_1 | mainTASK_BIT_2, pdTRUE, pdTRUE, portMAX_DELAY);
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <StartTask02+0x48>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	2201      	movs	r2, #1
 8000d32:	2107      	movs	r1, #7
 8000d34:	f004 fa4e 	bl	80051d4 <xEventGroupWaitBits>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <StartTask02+0x4c>)
 8000d40:	f000 ffe8 	bl	8001d14 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000d44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d48:	f004 fa15 	bl	8005176 <osDelay>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <StartTask02+0x4c>)
 8000d54:	f000 ffde 	bl	8001d14 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f004 fa0b 	bl	8005176 <osDelay>
	xEventGroupWaitBits(xEventGroup, mainISR_BIT | mainTASK_BIT_1 | mainTASK_BIT_2, pdTRUE, pdTRUE, portMAX_DELAY);
 8000d60:	e7e0      	b.n	8000d24 <StartTask02+0x8>
 8000d62:	bf00      	nop
 8000d64:	20000f48 	.word	0x20000f48
 8000d68:	48000400 	.word	0x48000400

08000d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7e:	f000 fbed 	bl	800155c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40012c00 	.word	0x40012c00

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_MspInit+0x4c>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6613      	str	r3, [r2, #96]	; 0x60
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_MspInit+0x4c>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	f06f 0001 	mvn.w	r0, #1
 8000dda:	f000 fcbb 	bl	8001754 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ac      	sub	sp, #176	; 0xb0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2288      	movs	r2, #136	; 0x88
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 f8d1 	bl	8007fb4 <memset>
  if(DFSDM1_Init == 0)
 8000e12:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d142      	bne.n	8000ea0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 f98e 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000e36:	f7ff ffab 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3e:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e44:	6613      	str	r3, [r2, #96]	; 0x60
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e6a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e84:	2306      	movs	r3, #6
 8000e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e92:	f000 fd95 	bl	80019c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a02      	ldr	r2, [pc, #8]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e9e:	6013      	str	r3, [r2, #0]
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	37b0      	adds	r7, #176	; 0xb0
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000f4c 	.word	0x20000f4c
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48001000 	.word	0x48001000

08000eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ac      	sub	sp, #176	; 0xb0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2288      	movs	r2, #136	; 0x88
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f007 f86d 	bl	8007fb4 <memset>
  if(hi2c->Instance==I2C2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_I2C_MspInit+0xb0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d13b      	bne.n	8000f5c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 f92b 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff ff48 	bl	8000d90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f32:	2304      	movs	r3, #4
 8000f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480b      	ldr	r0, [pc, #44]	; (8000f6c <HAL_I2C_MspInit+0xb8>)
 8000f40:	f000 fd3e 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	37b0      	adds	r7, #176	; 0xb0
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40005800 	.word	0x40005800
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000400 	.word	0x48000400

08000f70 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_QSPI_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d128      	bne.n	8000fe4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_QSPI_MspInit+0x80>)
 8000f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_QSPI_MspInit+0x80>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9c:	6513      	str	r3, [r2, #80]	; 0x50
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_QSPI_MspInit+0x80>)
 8000fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_QSPI_MspInit+0x80>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_QSPI_MspInit+0x80>)
 8000fb0:	f043 0310 	orr.w	r3, r3, #16
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_QSPI_MspInit+0x80>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000fc2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000fc6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_QSPI_MspInit+0x84>)
 8000fe0:	f000 fcee 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	a0001000 	.word	0xa0001000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48001000 	.word	0x48001000

08000ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_SPI_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d128      	bne.n	800106c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_SPI_MspInit+0x80>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001024:	6593      	str	r3, [r2, #88]	; 0x58
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_SPI_MspInit+0x80>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800104a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800105c:	2306      	movs	r3, #6
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_SPI_MspInit+0x84>)
 8001068:	f000 fcaa 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40003c00 	.word	0x40003c00
 8001078:	40021000 	.word	0x40021000
 800107c:	48000800 	.word	0x48000800

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0ae      	sub	sp, #184	; 0xb8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2288      	movs	r2, #136	; 0x88
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 ff87 	bl	8007fb4 <memset>
  if(huart->Instance==USART1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <HAL_UART_MspInit+0x134>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d13b      	bne.n	8001128 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010b4:	2300      	movs	r3, #0
 80010b6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 f845 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010c8:	f7ff fe62 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010cc:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_UART_MspInit+0x138>)
 80010ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d0:	4a39      	ldr	r2, [pc, #228]	; (80011b8 <HAL_UART_MspInit+0x138>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d6:	6613      	str	r3, [r2, #96]	; 0x60
 80010d8:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <HAL_UART_MspInit+0x138>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_UART_MspInit+0x138>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	4a33      	ldr	r2, [pc, #204]	; (80011b8 <HAL_UART_MspInit+0x138>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_UART_MspInit+0x138>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80010fc:	23c0      	movs	r3, #192	; 0xc0
 80010fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001114:	2307      	movs	r3, #7
 8001116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800111e:	4619      	mov	r1, r3
 8001120:	4826      	ldr	r0, [pc, #152]	; (80011bc <HAL_UART_MspInit+0x13c>)
 8001122:	f000 fc4d 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001126:	e040      	b.n	80011aa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_UART_MspInit+0x140>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d13b      	bne.n	80011aa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001132:	2304      	movs	r3, #4
 8001134:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001136:	2300      	movs	r3, #0
 8001138:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4618      	mov	r0, r3
 8001140:	f002 f804 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800114a:	f7ff fe21 	bl	8000d90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_UART_MspInit+0x138>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_UART_MspInit+0x138>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x138>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_UART_MspInit+0x138>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <HAL_UART_MspInit+0x138>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_UART_MspInit+0x138>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800117e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001198:	2307      	movs	r3, #7
 800119a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <HAL_UART_MspInit+0x144>)
 80011a6:	f000 fc0b 	bl	80019c0 <HAL_GPIO_Init>
}
 80011aa:	bf00      	nop
 80011ac:	37b8      	adds	r7, #184	; 0xb8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400
 80011c0:	40004800 	.word	0x40004800
 80011c4:	48000c00 	.word	0x48000c00

080011c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0ac      	sub	sp, #176	; 0xb0
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2288      	movs	r2, #136	; 0x88
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fee3 	bl	8007fb4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f6:	d17c      	bne.n	80012f2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001202:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001206:	2301      	movs	r3, #1
 8001208:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800120e:	2318      	movs	r3, #24
 8001210:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001212:	2307      	movs	r3, #7
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800121e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4618      	mov	r0, r3
 800122a:	f001 ff8f 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001234:	f7ff fdac 	bl	8000d90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_PCD_MspInit+0x134>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <HAL_PCD_MspInit+0x134>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_PCD_MspInit+0x134>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f000 fba7 	bl	80019c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001272:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800128c:	230a      	movs	r3, #10
 800128e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f000 fb90 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	4a15      	ldr	r2, [pc, #84]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d114      	bne.n	80012ee <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ce:	6593      	str	r3, [r2, #88]	; 0x58
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80012dc:	f001 f838 	bl	8002350 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_PCD_MspInit+0x134>)
 80012e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ea:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012ec:	e001      	b.n	80012f2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80012ee:	f001 f82f 	bl	8002350 <HAL_PWREx_EnableVddUSB>
}
 80012f2:	bf00      	nop
 80012f4:	37b0      	adds	r7, #176	; 0xb0
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_InitTick+0xc8>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <HAL_InitTick+0xc8>)
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	6613      	str	r3, [r2, #96]	; 0x60
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HAL_InitTick+0xc8>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001326:	f107 020c 	add.w	r2, r7, #12
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fe79 	bl	8003028 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001336:	f001 fe61 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 800133a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133e:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_InitTick+0xcc>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	0c9b      	lsrs	r3, r3, #18
 8001346:	3b01      	subs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_InitTick+0xd0>)
 800134c:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <HAL_InitTick+0xd4>)
 800134e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_InitTick+0xd0>)
 8001352:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001356:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_InitTick+0xd0>)
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_InitTick+0xd0>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_InitTick+0xd0>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_InitTick+0xd0>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001370:	4817      	ldr	r0, [pc, #92]	; (80013d0 <HAL_InitTick+0xd0>)
 8001372:	f002 fc5a 	bl	8003c2a <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800137c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001380:	2b00      	cmp	r3, #0
 8001382:	d11b      	bne.n	80013bc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <HAL_InitTick+0xd0>)
 8001386:	f002 fcb1 	bl	8003cec <HAL_TIM_Base_Start_IT>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001394:	2b00      	cmp	r3, #0
 8001396:	d111      	bne.n	80013bc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001398:	2019      	movs	r0, #25
 800139a:	f000 f9f7 	bl	800178c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d808      	bhi.n	80013b6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	2019      	movs	r0, #25
 80013aa:	f000 f9d3 	bl	8001754 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_InitTick+0xd8>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e002      	b.n	80013bc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3730      	adds	r7, #48	; 0x30
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	20000f50 	.word	0x20000f50
 80013d4:	40012c00 	.word	0x40012c00
 80013d8:	20000004 	.word	0x20000004

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800140c:	2020      	movs	r0, #32
 800140e:	f000 fc99 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001412:	2040      	movs	r0, #64	; 0x40
 8001414:	f000 fc96 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001418:	2080      	movs	r0, #128	; 0x80
 800141a:	f000 fc93 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800141e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001422:	f000 fc8f 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001432:	f002 fccb 	bl	8003dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000f50 	.word	0x20000f50

08001440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001446:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800144a:	f000 fc7b 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800144e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001452:	f000 fc77 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001456:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800145a:	f000 fc73 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800145e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001462:	f000 fc6f 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001466:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800146a:	f000 fc6b 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
  BaseType_t xResult = xEventGroupSetBitsFromISR(xEventGroup, mainISR_BIT, &xHigherPriorityTaskWoken);
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <EXTI15_10_IRQHandler+0x68>)
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	463b      	mov	r3, r7
 8001478:	2201      	movs	r2, #1
 800147a:	480c      	ldr	r0, [pc, #48]	; (80014ac <EXTI15_10_IRQHandler+0x6c>)
 800147c:	f006 f90e 	bl	800769c <xTimerPendFunctionCallFromISR>
 8001480:	6078      	str	r0, [r7, #4]
  if(xResult == pdTRUE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10a      	bne.n	800149e <EXTI15_10_IRQHandler+0x5e>
  {
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <EXTI15_10_IRQHandler+0x5e>
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <EXTI15_10_IRQHandler+0x70>)
 8001490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000f48 	.word	0x20000f48
 80014ac:	08005487 	.word	0x08005487
 80014b0:	e000ed04 	.word	0xe000ed04

080014b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <SystemInit+0x20>)
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <SystemInit+0x20>)
 80014c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014dc:	f7ff ffea 	bl	80014b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <LoopForever+0xe>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	; (8001524 <LoopForever+0x16>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001506:	f006 fd21 	bl	8007f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150a:	f7ff f817 	bl	800053c <main>

0800150e <LoopForever>:

LoopForever:
    b LoopForever
 800150e:	e7fe      	b.n	800150e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001510:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800151c:	08008280 	.word	0x08008280
  ldr r2, =_sbss
 8001520:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001524:	20001e3c 	.word	0x20001e3c

08001528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC1_2_IRQHandler>

0800152a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 f902 	bl	800173e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153a:	200f      	movs	r0, #15
 800153c:	f7ff fee0 	bl	8001300 <HAL_InitTick>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	e001      	b.n	8001550 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800154c:	f7ff fc26 	bl	8000d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	20000f9c 	.word	0x20000f9c

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000f9c 	.word	0x20000f9c

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff4c 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001766:	f7ff ff61 	bl	800162c <__NVIC_GetPriorityGrouping>
 800176a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	6978      	ldr	r0, [r7, #20]
 8001772:	f7ff ffb1 	bl	80016d8 <NVIC_EncodePriority>
 8001776:	4602      	mov	r2, r0
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff80 	bl	8001684 <__NVIC_SetPriority>
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff54 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0ac      	b.n	8001914 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f8b2 	bl	8001928 <DFSDM_GetChannelFromInstance>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a55      	ldr	r2, [pc, #340]	; (800191c <HAL_DFSDM_ChannelInit+0x174>)
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e09f      	b.n	8001914 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fb09 	bl	8000dec <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80017da:	4b51      	ldr	r3, [pc, #324]	; (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a4f      	ldr	r2, [pc, #316]	; (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80017e4:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d125      	bne.n	8001838 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80017f6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4948      	ldr	r1, [pc, #288]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a46      	ldr	r2, [pc, #280]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800180c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001810:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	791b      	ldrb	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800181a:	4b42      	ldr	r3, [pc, #264]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	493f      	ldr	r1, [pc, #252]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800182c:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3c      	ldr	r2, [pc, #240]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001836:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001846:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001856:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800185c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 020f 	bic.w	r2, r2, #15
 8001874:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800189c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f002 0207 	and.w	r2, r2, #7
 80018c8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f810 	bl	8001928 <DFSDM_GetChannelFromInstance>
 8001908:	4602      	mov	r2, r0
 800190a:	4904      	ldr	r1, [pc, #16]	; (800191c <HAL_DFSDM_ChannelInit+0x174>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000fa4 	.word	0x20000fa4
 8001920:	20000fa0 	.word	0x20000fa0
 8001924:	40016000 	.word	0x40016000

08001928 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d102      	bne.n	800193e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e02b      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <DFSDM_GetChannelFromInstance+0x80>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d102      	bne.n	800194c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e024      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <DFSDM_GetChannelFromInstance+0x84>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d102      	bne.n	800195a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e01d      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <DFSDM_GetChannelFromInstance+0x88>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d102      	bne.n	8001968 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001962:	2304      	movs	r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e016      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <DFSDM_GetChannelFromInstance+0x8c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d102      	bne.n	8001976 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001970:	2305      	movs	r3, #5
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e00f      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <DFSDM_GetChannelFromInstance+0x90>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d102      	bne.n	8001984 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800197e:	2306      	movs	r3, #6
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e008      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <DFSDM_GetChannelFromInstance+0x94>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d102      	bne.n	8001992 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800198c:	2307      	movs	r3, #7
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e001      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001992:	2303      	movs	r3, #3
 8001994:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40016000 	.word	0x40016000
 80019a8:	40016020 	.word	0x40016020
 80019ac:	40016040 	.word	0x40016040
 80019b0:	40016080 	.word	0x40016080
 80019b4:	400160a0 	.word	0x400160a0
 80019b8:	400160c0 	.word	0x400160c0
 80019bc:	400160e0 	.word	0x400160e0

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e17f      	b.n	8001cd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8171 	beq.w	8001cca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x40>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d118      	bne.n	8001aa0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a74:	2201      	movs	r2, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	f003 0201 	and.w	r2, r3, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d017      	beq.n	8001adc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	6939      	ldr	r1, [r7, #16]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ac 	beq.w	8001cca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	4a5e      	ldr	r2, [pc, #376]	; (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b8a:	4a5a      	ldr	r2, [pc, #360]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x242>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	; (8001cf8 <HAL_GPIO_Init+0x338>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x23e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	; (8001cfc <HAL_GPIO_Init+0x33c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x23a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	; (8001d00 <HAL_GPIO_Init+0x340>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x236>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	; (8001d04 <HAL_GPIO_Init+0x344>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x232>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	; (8001d08 <HAL_GPIO_Init+0x348>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x22e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4a      	ldr	r2, [pc, #296]	; (8001d0c <HAL_GPIO_Init+0x34c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x22a>
 8001be6:	2306      	movs	r3, #6
 8001be8:	e00c      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e00a      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001c02:	2300      	movs	r3, #0
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c14:	4937      	ldr	r1, [pc, #220]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c46:	4a32      	ldr	r2, [pc, #200]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc4:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f47f ae78 	bne.w	80019d0 <HAL_GPIO_Init+0x10>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	371c      	adds	r7, #28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	48000800 	.word	0x48000800
 8001d00:	48000c00 	.word	0x48000c00
 8001d04:	48001000 	.word	0x48001000
 8001d08:	48001400 	.word	0x48001400
 8001d0c:	48001800 	.word	0x48001800
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f806 	bl	8001d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e081      	b.n	8001ea0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff f87f 	bl	8000eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2224      	movs	r2, #36	; 0x24
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e006      	b.n	8001e12 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d104      	bne.n	8001e24 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e36:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69d9      	ldr	r1, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d138      	bne.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e032      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d139      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e033      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2224      	movs	r2, #36	; 0x24
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd8:	b08f      	sub	sp, #60	; 0x3c
 8001fda:	af0a      	add	r7, sp, #40	; 0x28
 8001fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e116      	b.n	8002216 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff f8e0 	bl	80011c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2203      	movs	r2, #3
 800200c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fdb1 	bl	8004b8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	687e      	ldr	r6, [r7, #4]
 8002034:	466d      	mov	r5, sp
 8002036:	f106 0410 	add.w	r4, r6, #16
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002046:	e885 0003 	stmia.w	r5, {r0, r1}
 800204a:	1d33      	adds	r3, r6, #4
 800204c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204e:	6838      	ldr	r0, [r7, #0]
 8002050:	f002 fd71 	bl	8004b36 <USB_CoreInit>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0d7      	b.n	8002216 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f002 fd9f 	bl	8004bb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e04a      	b.n	800210e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	333d      	adds	r3, #61	; 0x3d
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	333c      	adds	r3, #60	; 0x3c
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	b298      	uxth	r0, r3
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3344      	adds	r3, #68	; 0x44
 80020b4:	4602      	mov	r2, r0
 80020b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	3340      	adds	r3, #64	; 0x40
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3348      	adds	r3, #72	; 0x48
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	334c      	adds	r3, #76	; 0x4c
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3354      	adds	r3, #84	; 0x54
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	3301      	adds	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	d3af      	bcc.n	8002078 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e044      	b.n	80021a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	3301      	adds	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d3b5      	bcc.n	800211e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	687e      	ldr	r6, [r7, #4]
 80021ba:	466d      	mov	r5, sp
 80021bc:	f106 0410 	add.w	r4, r6, #16
 80021c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80021d0:	1d33      	adds	r3, r6, #4
 80021d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d4:	6838      	ldr	r0, [r7, #0]
 80021d6:	f002 fd37 	bl	8004c48 <USB_DevInit>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e014      	b.n	8002216 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	2b01      	cmp	r3, #1
 8002202:	d102      	bne.n	800220a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f80a 	bl	800221e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f002 fee3 	bl	8004fda <USB_DevDisconnect>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800221e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	f043 0303 	orr.w	r3, r3, #3
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000

080022a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b2:	d130      	bne.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c0:	d038      	beq.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ca:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2232      	movs	r2, #50	; 0x32
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	3301      	adds	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e8:	e002      	b.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fc:	d102      	bne.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f2      	bne.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002310:	d110      	bne.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e00f      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d007      	beq.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800232c:	4a05      	ldr	r2, [pc, #20]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002332:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000
 8002348:	20000000 	.word	0x20000000
 800234c:	431bde83 	.word	0x431bde83

08002350 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_PWREx_EnableVddUSB+0x1c>)
 800235a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235e:	6053      	str	r3, [r2, #4]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40007000 	.word	0x40007000

08002370 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af02      	add	r7, sp, #8
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff f904 	bl	8001584 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e063      	b.n	8002450 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7fe fde7 	bl	8000f70 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80023a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f858 	bl	800245c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	021a      	lsls	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	2120      	movs	r1, #32
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f850 	bl	8002478 <QSPI_WaitFlagStateUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80023dc:	7afb      	ldrb	r3, [r7, #11]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d131      	bne.n	8002446 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023ec:	f023 0310 	bic.w	r3, r3, #16
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6852      	ldr	r2, [r2, #4]
 80023f4:	0611      	lsls	r1, r2, #24
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68d2      	ldr	r2, [r2, #12]
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	430b      	orrs	r3, r1
 8002402:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_QSPI_Init+0xe8>)
 800240c:	4013      	ands	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6912      	ldr	r2, [r2, #16]
 8002412:	0411      	lsls	r1, r2, #16
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6952      	ldr	r2, [r2, #20]
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6992      	ldr	r2, [r2, #24]
 800241e:	4311      	orrs	r1, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800244e:	7afb      	ldrb	r3, [r7, #11]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	ffe0f8fe 	.word	0xffe0f8fe

0800245c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002488:	e01a      	b.n	80024c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d016      	beq.n	80024c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002492:	f7ff f877 	bl	8001584 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d302      	bcc.n	80024a8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10b      	bne.n	80024c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2204      	movs	r2, #4
 80024ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e00e      	b.n	80024de <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf14      	ite	ne
 80024ce:	2301      	movne	r3, #1
 80024d0:	2300      	moveq	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1d6      	bne.n	800248a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e3ca      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fa:	4b97      	ldr	r3, [pc, #604]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002504:	4b94      	ldr	r3, [pc, #592]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80e4 	beq.w	80026e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_RCC_OscConfig+0x4a>
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	f040 808b 	bne.w	8002640 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b01      	cmp	r3, #1
 800252e:	f040 8087 	bne.w	8002640 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002532:	4b89      	ldr	r3, [pc, #548]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e3a2      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	4b82      	ldr	r3, [pc, #520]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_RCC_OscConfig+0x7c>
 800255a:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002562:	e005      	b.n	8002570 <HAL_RCC_OscConfig+0x88>
 8002564:	4b7c      	ldr	r3, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002570:	4293      	cmp	r3, r2
 8002572:	d223      	bcs.n	80025bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fd87 	bl	800308c <RCC_SetFlashLatencyFromMSIRange>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e383      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002588:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b70      	ldr	r3, [pc, #448]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	496d      	ldr	r1, [pc, #436]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a6:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	4968      	ldr	r1, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
 80025ba:	e025      	b.n	8002608 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025bc:	4b66      	ldr	r3, [pc, #408]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a65      	ldr	r2, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b63      	ldr	r3, [pc, #396]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4960      	ldr	r1, [pc, #384]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025da:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	495b      	ldr	r1, [pc, #364]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fd47 	bl	800308c <RCC_SetFlashLatencyFromMSIRange>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e343      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002608:	f000 fc4a 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b52      	ldr	r3, [pc, #328]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	4950      	ldr	r1, [pc, #320]	; (800275c <HAL_RCC_OscConfig+0x274>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
 8002624:	4a4e      	ldr	r2, [pc, #312]	; (8002760 <HAL_RCC_OscConfig+0x278>)
 8002626:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002628:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <HAL_RCC_OscConfig+0x27c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fe67 	bl	8001300 <HAL_InitTick>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d052      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	e327      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d032      	beq.n	80026ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002648:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a42      	ldr	r2, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002654:	f7fe ff96 	bl	8001584 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800265c:	f7fe ff92 	bl	8001584 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e310      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800266e:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267a:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a36      	ldr	r2, [pc, #216]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002680:	f043 0308 	orr.w	r3, r3, #8
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4931      	ldr	r1, [pc, #196]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002698:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	492c      	ldr	r1, [pc, #176]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	e01a      	b.n	80026e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a29      	ldr	r2, [pc, #164]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ba:	f7fe ff63 	bl	8001584 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c2:	f7fe ff5f 	bl	8001584 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e2dd      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x1da>
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d074      	beq.n	80027da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x21a>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b0c      	cmp	r3, #12
 80026fa:	d10e      	bne.n	800271a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d10b      	bne.n	800271a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d064      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d160      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e2ba      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x24a>
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e026      	b.n	8002780 <HAL_RCC_OscConfig+0x298>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273a:	d115      	bne.n	8002768 <HAL_RCC_OscConfig+0x280>
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a05      	ldr	r2, [pc, #20]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 8002742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a02      	ldr	r2, [pc, #8]	; (8002758 <HAL_RCC_OscConfig+0x270>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e014      	b.n	8002780 <HAL_RCC_OscConfig+0x298>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	080081c8 	.word	0x080081c8
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004
 8002768:	4ba0      	ldr	r3, [pc, #640]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a9f      	ldr	r2, [pc, #636]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b9d      	ldr	r3, [pc, #628]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a9c      	ldr	r2, [pc, #624]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fefc 	bl	8001584 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7fe fef8 	bl	8001584 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e276      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a2:	4b92      	ldr	r3, [pc, #584]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x2a8>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe fee8 	bl	8001584 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe fee4 	bl	8001584 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e262      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ca:	4b88      	ldr	r3, [pc, #544]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2d0>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d060      	beq.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x310>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d116      	bne.n	8002826 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	4b7c      	ldr	r3, [pc, #496]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x328>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e23f      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b76      	ldr	r3, [pc, #472]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	4973      	ldr	r1, [pc, #460]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	e040      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282e:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fea3 	bl	8001584 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe fe9f 	bl	8001584 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e21d      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002854:	4b65      	ldr	r3, [pc, #404]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b62      	ldr	r3, [pc, #392]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	495f      	ldr	r1, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e018      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a5c      	ldr	r2, [pc, #368]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800287c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fe7f 	bl	8001584 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fe7b 	bl	8001584 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1f9      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d03c      	beq.n	800292e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028bc:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c2:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fe5a 	bl	8001584 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe fe56 	bl	8001584 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1d4      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e6:	4b41      	ldr	r3, [pc, #260]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ef      	beq.n	80028d4 <HAL_RCC_OscConfig+0x3ec>
 80028f4:	e01b      	b.n	800292e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fc:	4a3b      	ldr	r2, [pc, #236]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7fe fe3d 	bl	8001584 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe fe39 	bl	8001584 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e1b7      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002920:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ef      	bne.n	800290e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80a6 	beq.w	8002a88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	6593      	str	r3, [r2, #88]	; 0x58
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002964:	2301      	movs	r3, #1
 8002966:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCC_OscConfig+0x508>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d118      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002974:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_RCC_OscConfig+0x508>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x508>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002980:	f7fe fe00 	bl	8001584 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002988:	f7fe fdfc 	bl	8001584 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e17a      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCC_OscConfig+0x508>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d108      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4d8>
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029be:	e029      	b.n	8002a14 <HAL_RCC_OscConfig+0x52c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d115      	bne.n	80029f4 <HAL_RCC_OscConfig+0x50c>
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	4a03      	ldr	r2, [pc, #12]	; (80029ec <HAL_RCC_OscConfig+0x504>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e8:	e014      	b.n	8002a14 <HAL_RCC_OscConfig+0x52c>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40007000 	.word	0x40007000
 80029f4:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	4a9b      	ldr	r2, [pc, #620]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a04:	4b98      	ldr	r3, [pc, #608]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a97      	ldr	r2, [pc, #604]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d016      	beq.n	8002a4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fdb2 	bl	8001584 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fdae 	bl	8001584 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e12a      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	4b8b      	ldr	r3, [pc, #556]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ed      	beq.n	8002a24 <HAL_RCC_OscConfig+0x53c>
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fd9b 	bl	8001584 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fd97 	bl	8001584 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e113      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	4b7f      	ldr	r3, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ed      	bne.n	8002a52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b7a      	ldr	r3, [pc, #488]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	4a79      	ldr	r2, [pc, #484]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80fe 	beq.w	8002c8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	f040 80d0 	bne.w	8002c3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a9c:	4b72      	ldr	r3, [pc, #456]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d130      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	3b01      	subs	r3, #1
 8002abc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d127      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d11f      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002adc:	2a07      	cmp	r2, #7
 8002ade:	bf14      	ite	ne
 8002ae0:	2201      	movne	r2, #1
 8002ae2:	2200      	moveq	r2, #0
 8002ae4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d113      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d06e      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d069      	beq.n	8002bec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0ad      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a4b      	ldr	r2, [pc, #300]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b40:	f7fe fd20 	bl	8001584 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fd1c 	bl	8001584 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e09a      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5a:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b66:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	4b40      	ldr	r3, [pc, #256]	; (8002c6c <HAL_RCC_OscConfig+0x784>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b76:	3a01      	subs	r2, #1
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b80:	0212      	lsls	r2, r2, #8
 8002b82:	4311      	orrs	r1, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b88:	0852      	lsrs	r2, r2, #1
 8002b8a:	3a01      	subs	r2, #1
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0652      	lsls	r2, r2, #25
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ba0:	0912      	lsrs	r2, r2, #4
 8002ba2:	0452      	lsls	r2, r2, #17
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	4930      	ldr	r1, [pc, #192]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bc4:	f7fe fcde 	bl	8001584 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fcda 	bl	8001584 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e058      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bea:	e050      	b.n	8002c8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e04f      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d148      	bne.n	8002c8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c14:	f7fe fcb6 	bl	8001584 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fcb2 	bl	8001584 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e030      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x734>
 8002c3a:	e028      	b.n	8002c8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d023      	beq.n	8002c8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <HAL_RCC_OscConfig+0x780>)
 8002c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fc99 	bl	8001584 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c54:	e00c      	b.n	8002c70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe fc95 	bl	8001584 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d905      	bls.n	8002c70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e013      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x7b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ec      	bne.n	8002c56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4905      	ldr	r1, [pc, #20]	; (8002c98 <HAL_RCC_OscConfig+0x7b0>)
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_RCC_OscConfig+0x7b4>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e001      	b.n	8002c8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	feeefffc 	.word	0xfeeefffc

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0e7      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b75      	ldr	r3, [pc, #468]	; (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d910      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 0207 	bic.w	r2, r3, #7
 8002cca:	4970      	ldr	r1, [pc, #448]	; (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b6e      	ldr	r3, [pc, #440]	; (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0cf      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	4b66      	ldr	r3, [pc, #408]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b63      	ldr	r3, [pc, #396]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4960      	ldr	r1, [pc, #384]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04c      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d26:	4b5a      	ldr	r3, [pc, #360]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d121      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0a6      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3e:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d115      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e09a      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d56:	4b4e      	ldr	r3, [pc, #312]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e08e      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e086      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4943      	ldr	r1, [pc, #268]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe fbfc 	bl	8001584 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe fbf8 	bl	8001584 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e06e      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d208      	bcs.n	8002de6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	492b      	ldr	r1, [pc, #172]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de6:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d210      	bcs.n	8002e16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 0207 	bic.w	r2, r3, #7
 8002dfc:	4923      	ldr	r1, [pc, #140]	; (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCC_ClockConfig+0x1ec>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e036      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4918      	ldr	r1, [pc, #96]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4910      	ldr	r1, [pc, #64]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e54:	f000 f824 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	490b      	ldr	r1, [pc, #44]	; (8002e94 <HAL_RCC_ClockConfig+0x1f4>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1f8>)
 8002e72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_ClockConfig+0x1fc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fa41 	bl	8001300 <HAL_InitTick>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	40021000 	.word	0x40021000
 8002e94:	080081c8 	.word	0x080081c8
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eae:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d121      	bne.n	8002f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d11e      	bne.n	8002f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ed4:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ee0:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	e005      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002efc:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10d      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d102      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	e004      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d134      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d003      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0xac>
 8002f44:	e005      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f48:	617b      	str	r3, [r7, #20]
      break;
 8002f4a:	e005      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f4e:	617b      	str	r3, [r7, #20]
      break;
 8002f50:	e002      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	617b      	str	r3, [r7, #20]
      break;
 8002f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	3301      	adds	r3, #1
 8002f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	fb03 f202 	mul.w	r2, r3, r2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	0e5b      	lsrs	r3, r3, #25
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f98:	69bb      	ldr	r3, [r7, #24]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	080081e0 	.word	0x080081e0
 8002fb0:	00f42400 	.word	0x00f42400
 8002fb4:	007a1200 	.word	0x007a1200

08002fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fd4:	f7ff fff0 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4904      	ldr	r1, [pc, #16]	; (8002ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	080081d8 	.word	0x080081d8

08002ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003000:	f7ff ffda 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	0adb      	lsrs	r3, r3, #11
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	080081d8 	.word	0x080081d8

08003028 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	220f      	movs	r2, #15
 8003036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_RCC_GetClockConfig+0x60>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0207 	and.w	r2, r3, #7
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	40022000 	.word	0x40022000

0800308c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003098:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030a4:	f7ff f8f0 	bl	8002288 <HAL_PWREx_GetVoltageRange>
 80030a8:	6178      	str	r0, [r7, #20]
 80030aa:	e014      	b.n	80030d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6593      	str	r3, [r2, #88]	; 0x58
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030c4:	f7ff f8e0 	bl	8002288 <HAL_PWREx_GetVoltageRange>
 80030c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030dc:	d10b      	bne.n	80030f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b80      	cmp	r3, #128	; 0x80
 80030e2:	d919      	bls.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2ba0      	cmp	r3, #160	; 0xa0
 80030e8:	d902      	bls.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ea:	2302      	movs	r3, #2
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e013      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	e010      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b80      	cmp	r3, #128	; 0x80
 80030fa:	d902      	bls.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030fc:	2303      	movs	r3, #3
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	e00a      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d102      	bne.n	800310e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003108:	2302      	movs	r3, #2
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	e004      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b70      	cmp	r3, #112	; 0x70
 8003112:	d101      	bne.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003114:	2301      	movs	r3, #1
 8003116:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 0207 	bic.w	r2, r3, #7
 8003120:	4909      	ldr	r1, [pc, #36]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	40022000 	.word	0x40022000

0800314c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003154:	2300      	movs	r3, #0
 8003156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003158:	2300      	movs	r3, #0
 800315a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003164:	2b00      	cmp	r3, #0
 8003166:	d041      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003170:	d02a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003172:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003176:	d824      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003178:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800317c:	d008      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800317e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003182:	d81e      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800318c:	d010      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800318e:	e018      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003190:	4b86      	ldr	r3, [pc, #536]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a85      	ldr	r2, [pc, #532]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800319c:	e015      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 facb 	bl	8003740 <RCCEx_PLLSAI1_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031ae:	e00c      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3320      	adds	r3, #32
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fbb6 	bl	8003928 <RCCEx_PLLSAI2_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031c0:	e003      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	74fb      	strb	r3, [r7, #19]
      break;
 80031c6:	e000      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d0:	4b76      	ldr	r3, [pc, #472]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031de:	4973      	ldr	r1, [pc, #460]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031e6:	e001      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d041      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003200:	d02a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003202:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003206:	d824      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003208:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800320e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003212:	d81e      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800321c:	d010      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800321e:	e018      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003220:	4b62      	ldr	r3, [pc, #392]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a61      	ldr	r2, [pc, #388]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800322c:	e015      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fa83 	bl	8003740 <RCCEx_PLLSAI1_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800323e:	e00c      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3320      	adds	r3, #32
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fb6e 	bl	8003928 <RCCEx_PLLSAI2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	74fb      	strb	r3, [r7, #19]
      break;
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003260:	4b52      	ldr	r3, [pc, #328]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800326e:	494f      	ldr	r1, [pc, #316]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003276:	e001      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a0 	beq.w	80033ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800328e:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	4a40      	ldr	r2, [pc, #256]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6593      	str	r3, [r2, #88]	; 0x58
 80032b0:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3a      	ldr	r2, [pc, #232]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032cc:	f7fe f95a 	bl	8001584 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032d2:	e009      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d4:	f7fe f956 	bl	8001584 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d902      	bls.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	74fb      	strb	r3, [r7, #19]
        break;
 80032e6:	e005      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ef      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d15c      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003304:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01f      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	d019      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	4a20      	ldr	r2, [pc, #128]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe f915 	bl	8001584 <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335c:	e00b      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fe f911 	bl	8001584 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	; 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d902      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	74fb      	strb	r3, [r7, #19]
            break;
 8003374:	e006      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ec      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339a:	4904      	ldr	r1, [pc, #16]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033a2:	e009      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	74bb      	strb	r3, [r7, #18]
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b8:	7c7b      	ldrb	r3, [r7, #17]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d105      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033be:	4b9e      	ldr	r3, [pc, #632]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	4a9d      	ldr	r2, [pc, #628]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033d6:	4b98      	ldr	r3, [pc, #608]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f023 0203 	bic.w	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	4994      	ldr	r1, [pc, #592]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f8:	4b8f      	ldr	r3, [pc, #572]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 020c 	bic.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	498c      	ldr	r1, [pc, #560]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800341a:	4b87      	ldr	r3, [pc, #540]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4983      	ldr	r1, [pc, #524]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800343c:	4b7e      	ldr	r3, [pc, #504]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	497b      	ldr	r1, [pc, #492]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800345e:	4b76      	ldr	r3, [pc, #472]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	4972      	ldr	r1, [pc, #456]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003480:	4b6d      	ldr	r3, [pc, #436]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	496a      	ldr	r1, [pc, #424]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a2:	4b65      	ldr	r3, [pc, #404]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	4961      	ldr	r1, [pc, #388]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034c4:	4b5c      	ldr	r3, [pc, #368]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d2:	4959      	ldr	r1, [pc, #356]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e6:	4b54      	ldr	r3, [pc, #336]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f4:	4950      	ldr	r1, [pc, #320]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003508:	4b4b      	ldr	r3, [pc, #300]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	4948      	ldr	r1, [pc, #288]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800352a:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	493f      	ldr	r1, [pc, #252]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d028      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800354c:	4b3a      	ldr	r3, [pc, #232]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355a:	4937      	ldr	r1, [pc, #220]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356a:	d106      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a31      	ldr	r2, [pc, #196]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003576:	60d3      	str	r3, [r2, #12]
 8003578:	e011      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003582:	d10c      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	2101      	movs	r1, #1
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f8d8 	bl	8003740 <RCCEx_PLLSAI1_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d028      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035aa:	4b23      	ldr	r3, [pc, #140]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	491f      	ldr	r1, [pc, #124]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c8:	d106      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ca:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035d4:	60d3      	str	r3, [r2, #12]
 80035d6:	e011      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e0:	d10c      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2101      	movs	r1, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f8a9 	bl	8003740 <RCCEx_PLLSAI1_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d02b      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	4908      	ldr	r1, [pc, #32]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003626:	d109      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a02      	ldr	r2, [pc, #8]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003632:	60d3      	str	r3, [r2, #12]
 8003634:	e014      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003644:	d10c      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f877 	bl	8003740 <RCCEx_PLLSAI1_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d02f      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367a:	4928      	ldr	r1, [pc, #160]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800368a:	d10d      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2102      	movs	r1, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f854 	bl	8003740 <RCCEx_PLLSAI1_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d014      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	74bb      	strb	r3, [r7, #18]
 80036a6:	e011      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b0:	d10c      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3320      	adds	r3, #32
 80036b6:	2102      	movs	r1, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f935 	bl	8003928 <RCCEx_PLLSAI2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036d8:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e6:	490d      	ldr	r1, [pc, #52]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370a:	4904      	ldr	r1, [pc, #16]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003712:	7cbb      	ldrb	r3, [r7, #18]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000

08003740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800374e:	4b75      	ldr	r3, [pc, #468]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d018      	beq.n	800378c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800375a:	4b72      	ldr	r3, [pc, #456]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0203 	and.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d10d      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
       ||
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003772:	4b6c      	ldr	r3, [pc, #432]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
       ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d047      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
 800378a:	e044      	b.n	8003816 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d018      	beq.n	80037c6 <RCCEx_PLLSAI1_Config+0x86>
 8003794:	2b03      	cmp	r3, #3
 8003796:	d825      	bhi.n	80037e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003798:	2b01      	cmp	r3, #1
 800379a:	d002      	beq.n	80037a2 <RCCEx_PLLSAI1_Config+0x62>
 800379c:	2b02      	cmp	r3, #2
 800379e:	d009      	beq.n	80037b4 <RCCEx_PLLSAI1_Config+0x74>
 80037a0:	e020      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037a2:	4b60      	ldr	r3, [pc, #384]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11d      	bne.n	80037ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b2:	e01a      	b.n	80037ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b4:	4b5b      	ldr	r3, [pc, #364]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d116      	bne.n	80037ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c4:	e013      	b.n	80037ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037c6:	4b57      	ldr	r3, [pc, #348]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037d2:	4b54      	ldr	r3, [pc, #336]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037e2:	e006      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      break;
 80037e8:	e004      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10d      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037fa:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	3b01      	subs	r3, #1
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	430b      	orrs	r3, r1
 8003810:	4944      	ldr	r1, [pc, #272]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d17d      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800381c:	4b41      	ldr	r3, [pc, #260]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a40      	ldr	r2, [pc, #256]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fd feac 	bl	8001584 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800382e:	e009      	b.n	8003844 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003830:	f7fd fea8 	bl	8001584 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d902      	bls.n	8003844 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	73fb      	strb	r3, [r7, #15]
        break;
 8003842:	e005      	b.n	8003850 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003844:	4b37      	ldr	r3, [pc, #220]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ef      	bne.n	8003830 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d160      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d111      	bne.n	8003880 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6892      	ldr	r2, [r2, #8]
 800386c:	0211      	lsls	r1, r2, #8
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68d2      	ldr	r2, [r2, #12]
 8003872:	0912      	lsrs	r2, r2, #4
 8003874:	0452      	lsls	r2, r2, #17
 8003876:	430a      	orrs	r2, r1
 8003878:	492a      	ldr	r1, [pc, #168]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	610b      	str	r3, [r1, #16]
 800387e:	e027      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d112      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003886:	4b27      	ldr	r3, [pc, #156]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800388e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	0211      	lsls	r1, r2, #8
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6912      	ldr	r2, [r2, #16]
 800389c:	0852      	lsrs	r2, r2, #1
 800389e:	3a01      	subs	r2, #1
 80038a0:	0552      	lsls	r2, r2, #21
 80038a2:	430a      	orrs	r2, r1
 80038a4:	491f      	ldr	r1, [pc, #124]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	610b      	str	r3, [r1, #16]
 80038aa:	e011      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	0211      	lsls	r1, r2, #8
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6952      	ldr	r2, [r2, #20]
 80038c2:	0852      	lsrs	r2, r2, #1
 80038c4:	3a01      	subs	r2, #1
 80038c6:	0652      	lsls	r2, r2, #25
 80038c8:	430a      	orrs	r2, r1
 80038ca:	4916      	ldr	r1, [pc, #88]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038d0:	4b14      	ldr	r3, [pc, #80]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a13      	ldr	r2, [pc, #76]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fd fe52 	bl	8001584 <HAL_GetTick>
 80038e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038e2:	e009      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e4:	f7fd fe4e 	bl	8001584 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d902      	bls.n	80038f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	73fb      	strb	r3, [r7, #15]
          break;
 80038f6:	e005      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ef      	beq.n	80038e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	4904      	ldr	r1, [pc, #16]	; (8003924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000

08003928 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003936:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003942:	4b67      	ldr	r3, [pc, #412]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0203 	and.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d10d      	bne.n	800396e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
       ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800395a:	4b61      	ldr	r3, [pc, #388]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
       ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d047      	beq.n	80039fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	e044      	b.n	80039fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d018      	beq.n	80039ae <RCCEx_PLLSAI2_Config+0x86>
 800397c:	2b03      	cmp	r3, #3
 800397e:	d825      	bhi.n	80039cc <RCCEx_PLLSAI2_Config+0xa4>
 8003980:	2b01      	cmp	r3, #1
 8003982:	d002      	beq.n	800398a <RCCEx_PLLSAI2_Config+0x62>
 8003984:	2b02      	cmp	r3, #2
 8003986:	d009      	beq.n	800399c <RCCEx_PLLSAI2_Config+0x74>
 8003988:	e020      	b.n	80039cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800398a:	4b55      	ldr	r3, [pc, #340]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11d      	bne.n	80039d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399a:	e01a      	b.n	80039d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800399c:	4b50      	ldr	r3, [pc, #320]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ac:	e013      	b.n	80039d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ae:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ba:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ca:	e006      	b.n	80039da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	e004      	b.n	80039dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039da:	bf00      	nop
    }

    if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10d      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039e2:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	430b      	orrs	r3, r1
 80039f8:	4939      	ldr	r1, [pc, #228]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d167      	bne.n	8003ad4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a04:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a35      	ldr	r2, [pc, #212]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7fd fdb8 	bl	8001584 <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a16:	e009      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a18:	f7fd fdb4 	bl	8001584 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d902      	bls.n	8003a2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	73fb      	strb	r3, [r7, #15]
        break;
 8003a2a:	e005      	b.n	8003a38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ef      	bne.n	8003a18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d14a      	bne.n	8003ad4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d111      	bne.n	8003a68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a44:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	0211      	lsls	r1, r2, #8
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	0912      	lsrs	r2, r2, #4
 8003a5c:	0452      	lsls	r2, r2, #17
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	491f      	ldr	r1, [pc, #124]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	614b      	str	r3, [r1, #20]
 8003a66:	e011      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	0211      	lsls	r1, r2, #8
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6912      	ldr	r2, [r2, #16]
 8003a7e:	0852      	lsrs	r2, r2, #1
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0652      	lsls	r2, r2, #25
 8003a84:	430a      	orrs	r2, r1
 8003a86:	4916      	ldr	r1, [pc, #88]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fd fd74 	bl	8001584 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a9e:	e009      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa0:	f7fd fd70 	bl	8001584 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ab2:	e005      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ef      	beq.n	8003aa0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e095      	b.n	8003c22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b06:	d009      	beq.n	8003b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]
 8003b0e:	e005      	b.n	8003b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fa5e 	bl	8000ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b5c:	d902      	bls.n	8003b64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e002      	b.n	8003b6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b72:	d007      	beq.n	8003b84 <HAL_SPI_Init+0xa0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b7c:	d002      	beq.n	8003b84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	ea42 0103 	orr.w	r1, r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	f003 0204 	and.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c00:	ea42 0103 	orr.w	r1, r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e049      	b.n	8003cd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f841 	bl	8003cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 f9f7 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d001      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e04f      	b.n	8003da4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d018      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x76>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d115      	bne.n	8003d8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b06      	cmp	r3, #6
 8003d72:	d015      	beq.n	8003da0 <HAL_TIM_Base_Start_IT+0xb4>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7a:	d011      	beq.n	8003da0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	e008      	b.n	8003da0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e000      	b.n	8003da2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	00010007 	.word	0x00010007

08003dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d122      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d11b      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0202 	mvn.w	r2, #2
 8003df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f905 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8f7 	bl	800400a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f908 	bl	8004032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d122      	bne.n	8003e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d11b      	bne.n	8003e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0204 	mvn.w	r2, #4
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f8db 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8cd 	bl	800400a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8de 	bl	8004032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0208 	mvn.w	r2, #8
 8003ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8b1 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8a3 	bl	800400a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f8b4 	bl	8004032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0210 	mvn.w	r2, #16
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2208      	movs	r2, #8
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f887 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f879 	bl	800400a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f88a 	bl	8004032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d107      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0201 	mvn.w	r2, #1
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fc ff0e 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d10e      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f68:	2b80      	cmp	r3, #128	; 0x80
 8003f6a:	d107      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f914 	bl	80041a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8a:	d10e      	bne.n	8003faa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d107      	bne.n	8003faa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f907 	bl	80041b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc2:	2b40      	cmp	r3, #64	; 0x40
 8003fc4:	d107      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f838 	bl	8004046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d10e      	bne.n	8004002 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d107      	bne.n	8004002 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f06f 0220 	mvn.w	r2, #32
 8003ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f8c7 	bl	8004190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a40      	ldr	r2, [pc, #256]	; (8004170 <TIM_Base_SetConfig+0x114>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407a:	d00f      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3d      	ldr	r2, [pc, #244]	; (8004174 <TIM_Base_SetConfig+0x118>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3c      	ldr	r2, [pc, #240]	; (8004178 <TIM_Base_SetConfig+0x11c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3b      	ldr	r2, [pc, #236]	; (800417c <TIM_Base_SetConfig+0x120>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a3a      	ldr	r2, [pc, #232]	; (8004180 <TIM_Base_SetConfig+0x124>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d108      	bne.n	80040ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a2f      	ldr	r2, [pc, #188]	; (8004170 <TIM_Base_SetConfig+0x114>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01f      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d01b      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2c      	ldr	r2, [pc, #176]	; (8004174 <TIM_Base_SetConfig+0x118>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d017      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2b      	ldr	r2, [pc, #172]	; (8004178 <TIM_Base_SetConfig+0x11c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2a      	ldr	r2, [pc, #168]	; (800417c <TIM_Base_SetConfig+0x120>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00f      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a29      	ldr	r2, [pc, #164]	; (8004180 <TIM_Base_SetConfig+0x124>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00b      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a28      	ldr	r2, [pc, #160]	; (8004184 <TIM_Base_SetConfig+0x128>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a27      	ldr	r2, [pc, #156]	; (8004188 <TIM_Base_SetConfig+0x12c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a26      	ldr	r2, [pc, #152]	; (800418c <TIM_Base_SetConfig+0x130>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d108      	bne.n	8004108 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a10      	ldr	r2, [pc, #64]	; (8004170 <TIM_Base_SetConfig+0x114>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00f      	beq.n	8004154 <TIM_Base_SetConfig+0xf8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <TIM_Base_SetConfig+0x124>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00b      	beq.n	8004154 <TIM_Base_SetConfig+0xf8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a11      	ldr	r2, [pc, #68]	; (8004184 <TIM_Base_SetConfig+0x128>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a10      	ldr	r2, [pc, #64]	; (8004188 <TIM_Base_SetConfig+0x12c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_Base_SetConfig+0xf8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a0f      	ldr	r2, [pc, #60]	; (800418c <TIM_Base_SetConfig+0x130>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d103      	bne.n	800415c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	615a      	str	r2, [r3, #20]
}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800
 800417c:	40000c00 	.word	0x40000c00
 8004180:	40013400 	.word	0x40013400
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e040      	b.n	8004260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc ff46 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	; 0x24
 80041f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f82c 	bl	8004268 <UART_SetConfig>
 8004210:	4603      	mov	r3, r0
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e022      	b.n	8004260 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fad8 	bl	80047d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fb5f 	bl	800491c <UART_CheckIdleState>
 800425e:	4603      	mov	r3, r0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800426c:	b08a      	sub	sp, #40	; 0x28
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	431a      	orrs	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	4313      	orrs	r3, r2
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4ba4      	ldr	r3, [pc, #656]	; (8004528 <UART_SetConfig+0x2c0>)
 8004298:	4013      	ands	r3, r2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a99      	ldr	r2, [pc, #612]	; (800452c <UART_SetConfig+0x2c4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d0:	4313      	orrs	r3, r2
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	430a      	orrs	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a90      	ldr	r2, [pc, #576]	; (8004530 <UART_SetConfig+0x2c8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d126      	bne.n	8004340 <UART_SetConfig+0xd8>
 80042f2:	4b90      	ldr	r3, [pc, #576]	; (8004534 <UART_SetConfig+0x2cc>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d81b      	bhi.n	8004338 <UART_SetConfig+0xd0>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <UART_SetConfig+0xa0>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	08004319 	.word	0x08004319
 800430c:	08004329 	.word	0x08004329
 8004310:	08004321 	.word	0x08004321
 8004314:	08004331 	.word	0x08004331
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e116      	b.n	800454e <UART_SetConfig+0x2e6>
 8004320:	2302      	movs	r3, #2
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e112      	b.n	800454e <UART_SetConfig+0x2e6>
 8004328:	2304      	movs	r3, #4
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e10e      	b.n	800454e <UART_SetConfig+0x2e6>
 8004330:	2308      	movs	r3, #8
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e10a      	b.n	800454e <UART_SetConfig+0x2e6>
 8004338:	2310      	movs	r3, #16
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e106      	b.n	800454e <UART_SetConfig+0x2e6>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7c      	ldr	r2, [pc, #496]	; (8004538 <UART_SetConfig+0x2d0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d138      	bne.n	80043bc <UART_SetConfig+0x154>
 800434a:	4b7a      	ldr	r3, [pc, #488]	; (8004534 <UART_SetConfig+0x2cc>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d82d      	bhi.n	80043b4 <UART_SetConfig+0x14c>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <UART_SetConfig+0xf8>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004395 	.word	0x08004395
 8004364:	080043b5 	.word	0x080043b5
 8004368:	080043b5 	.word	0x080043b5
 800436c:	080043b5 	.word	0x080043b5
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043b5 	.word	0x080043b5
 8004378:	080043b5 	.word	0x080043b5
 800437c:	080043b5 	.word	0x080043b5
 8004380:	0800439d 	.word	0x0800439d
 8004384:	080043b5 	.word	0x080043b5
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043ad 	.word	0x080043ad
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e0d8      	b.n	800454e <UART_SetConfig+0x2e6>
 800439c:	2302      	movs	r3, #2
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e0d4      	b.n	800454e <UART_SetConfig+0x2e6>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e0d0      	b.n	800454e <UART_SetConfig+0x2e6>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e0cc      	b.n	800454e <UART_SetConfig+0x2e6>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e0c8      	b.n	800454e <UART_SetConfig+0x2e6>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a5e      	ldr	r2, [pc, #376]	; (800453c <UART_SetConfig+0x2d4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d125      	bne.n	8004412 <UART_SetConfig+0x1aa>
 80043c6:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <UART_SetConfig+0x2cc>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d016      	beq.n	8004402 <UART_SetConfig+0x19a>
 80043d4:	2b30      	cmp	r3, #48	; 0x30
 80043d6:	d818      	bhi.n	800440a <UART_SetConfig+0x1a2>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d00a      	beq.n	80043f2 <UART_SetConfig+0x18a>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d814      	bhi.n	800440a <UART_SetConfig+0x1a2>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <UART_SetConfig+0x182>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d008      	beq.n	80043fa <UART_SetConfig+0x192>
 80043e8:	e00f      	b.n	800440a <UART_SetConfig+0x1a2>
 80043ea:	2300      	movs	r3, #0
 80043ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f0:	e0ad      	b.n	800454e <UART_SetConfig+0x2e6>
 80043f2:	2302      	movs	r3, #2
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f8:	e0a9      	b.n	800454e <UART_SetConfig+0x2e6>
 80043fa:	2304      	movs	r3, #4
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004400:	e0a5      	b.n	800454e <UART_SetConfig+0x2e6>
 8004402:	2308      	movs	r3, #8
 8004404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004408:	e0a1      	b.n	800454e <UART_SetConfig+0x2e6>
 800440a:	2310      	movs	r3, #16
 800440c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004410:	e09d      	b.n	800454e <UART_SetConfig+0x2e6>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a4a      	ldr	r2, [pc, #296]	; (8004540 <UART_SetConfig+0x2d8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d125      	bne.n	8004468 <UART_SetConfig+0x200>
 800441c:	4b45      	ldr	r3, [pc, #276]	; (8004534 <UART_SetConfig+0x2cc>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004426:	2bc0      	cmp	r3, #192	; 0xc0
 8004428:	d016      	beq.n	8004458 <UART_SetConfig+0x1f0>
 800442a:	2bc0      	cmp	r3, #192	; 0xc0
 800442c:	d818      	bhi.n	8004460 <UART_SetConfig+0x1f8>
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d00a      	beq.n	8004448 <UART_SetConfig+0x1e0>
 8004432:	2b80      	cmp	r3, #128	; 0x80
 8004434:	d814      	bhi.n	8004460 <UART_SetConfig+0x1f8>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <UART_SetConfig+0x1d8>
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d008      	beq.n	8004450 <UART_SetConfig+0x1e8>
 800443e:	e00f      	b.n	8004460 <UART_SetConfig+0x1f8>
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e082      	b.n	800454e <UART_SetConfig+0x2e6>
 8004448:	2302      	movs	r3, #2
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e07e      	b.n	800454e <UART_SetConfig+0x2e6>
 8004450:	2304      	movs	r3, #4
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e07a      	b.n	800454e <UART_SetConfig+0x2e6>
 8004458:	2308      	movs	r3, #8
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e076      	b.n	800454e <UART_SetConfig+0x2e6>
 8004460:	2310      	movs	r3, #16
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004466:	e072      	b.n	800454e <UART_SetConfig+0x2e6>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a35      	ldr	r2, [pc, #212]	; (8004544 <UART_SetConfig+0x2dc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d12a      	bne.n	80044c8 <UART_SetConfig+0x260>
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <UART_SetConfig+0x2cc>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004480:	d01a      	beq.n	80044b8 <UART_SetConfig+0x250>
 8004482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004486:	d81b      	bhi.n	80044c0 <UART_SetConfig+0x258>
 8004488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448c:	d00c      	beq.n	80044a8 <UART_SetConfig+0x240>
 800448e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004492:	d815      	bhi.n	80044c0 <UART_SetConfig+0x258>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <UART_SetConfig+0x238>
 8004498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449c:	d008      	beq.n	80044b0 <UART_SetConfig+0x248>
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x258>
 80044a0:	2300      	movs	r3, #0
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e052      	b.n	800454e <UART_SetConfig+0x2e6>
 80044a8:	2302      	movs	r3, #2
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e04e      	b.n	800454e <UART_SetConfig+0x2e6>
 80044b0:	2304      	movs	r3, #4
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e04a      	b.n	800454e <UART_SetConfig+0x2e6>
 80044b8:	2308      	movs	r3, #8
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	e046      	b.n	800454e <UART_SetConfig+0x2e6>
 80044c0:	2310      	movs	r3, #16
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c6:	e042      	b.n	800454e <UART_SetConfig+0x2e6>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a17      	ldr	r2, [pc, #92]	; (800452c <UART_SetConfig+0x2c4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d13a      	bne.n	8004548 <UART_SetConfig+0x2e0>
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <UART_SetConfig+0x2cc>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044e0:	d01a      	beq.n	8004518 <UART_SetConfig+0x2b0>
 80044e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044e6:	d81b      	bhi.n	8004520 <UART_SetConfig+0x2b8>
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ec:	d00c      	beq.n	8004508 <UART_SetConfig+0x2a0>
 80044ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f2:	d815      	bhi.n	8004520 <UART_SetConfig+0x2b8>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <UART_SetConfig+0x298>
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fc:	d008      	beq.n	8004510 <UART_SetConfig+0x2a8>
 80044fe:	e00f      	b.n	8004520 <UART_SetConfig+0x2b8>
 8004500:	2300      	movs	r3, #0
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e022      	b.n	800454e <UART_SetConfig+0x2e6>
 8004508:	2302      	movs	r3, #2
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e01e      	b.n	800454e <UART_SetConfig+0x2e6>
 8004510:	2304      	movs	r3, #4
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e01a      	b.n	800454e <UART_SetConfig+0x2e6>
 8004518:	2308      	movs	r3, #8
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e016      	b.n	800454e <UART_SetConfig+0x2e6>
 8004520:	2310      	movs	r3, #16
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004526:	e012      	b.n	800454e <UART_SetConfig+0x2e6>
 8004528:	efff69f3 	.word	0xefff69f3
 800452c:	40008000 	.word	0x40008000
 8004530:	40013800 	.word	0x40013800
 8004534:	40021000 	.word	0x40021000
 8004538:	40004400 	.word	0x40004400
 800453c:	40004800 	.word	0x40004800
 8004540:	40004c00 	.word	0x40004c00
 8004544:	40005000 	.word	0x40005000
 8004548:	2310      	movs	r3, #16
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a9f      	ldr	r2, [pc, #636]	; (80047d0 <UART_SetConfig+0x568>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d17a      	bne.n	800464e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800455c:	2b08      	cmp	r3, #8
 800455e:	d824      	bhi.n	80045aa <UART_SetConfig+0x342>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0x300>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800458d 	.word	0x0800458d
 800456c:	080045ab 	.word	0x080045ab
 8004570:	08004595 	.word	0x08004595
 8004574:	080045ab 	.word	0x080045ab
 8004578:	0800459b 	.word	0x0800459b
 800457c:	080045ab 	.word	0x080045ab
 8004580:	080045ab 	.word	0x080045ab
 8004584:	080045ab 	.word	0x080045ab
 8004588:	080045a3 	.word	0x080045a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe fd20 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8004590:	61f8      	str	r0, [r7, #28]
        break;
 8004592:	e010      	b.n	80045b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004594:	4b8f      	ldr	r3, [pc, #572]	; (80047d4 <UART_SetConfig+0x56c>)
 8004596:	61fb      	str	r3, [r7, #28]
        break;
 8004598:	e00d      	b.n	80045b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe fc81 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 800459e:	61f8      	str	r0, [r7, #28]
        break;
 80045a0:	e009      	b.n	80045b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a6:	61fb      	str	r3, [r7, #28]
        break;
 80045a8:	e005      	b.n	80045b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80fb 	beq.w	80047b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4413      	add	r3, r2
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d305      	bcc.n	80045da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d903      	bls.n	80045e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045e0:	e0e8      	b.n	80047b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2200      	movs	r2, #0
 80045e6:	461c      	mov	r4, r3
 80045e8:	4615      	mov	r5, r2
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	022b      	lsls	r3, r5, #8
 80045f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045f8:	0222      	lsls	r2, r4, #8
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	6849      	ldr	r1, [r1, #4]
 80045fe:	0849      	lsrs	r1, r1, #1
 8004600:	2000      	movs	r0, #0
 8004602:	4688      	mov	r8, r1
 8004604:	4681      	mov	r9, r0
 8004606:	eb12 0a08 	adds.w	sl, r2, r8
 800460a:	eb43 0b09 	adc.w	fp, r3, r9
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461c:	4650      	mov	r0, sl
 800461e:	4659      	mov	r1, fp
 8004620:	f7fb fdd6 	bl	80001d0 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004632:	d308      	bcc.n	8004646 <UART_SetConfig+0x3de>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463a:	d204      	bcs.n	8004646 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	e0b6      	b.n	80047b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800464c:	e0b2      	b.n	80047b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004656:	d15e      	bne.n	8004716 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004658:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800465c:	2b08      	cmp	r3, #8
 800465e:	d828      	bhi.n	80046b2 <UART_SetConfig+0x44a>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <UART_SetConfig+0x400>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe fca0 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8004690:	61f8      	str	r0, [r7, #28]
        break;
 8004692:	e014      	b.n	80046be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fcb2 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 8004698:	61f8      	str	r0, [r7, #28]
        break;
 800469a:	e010      	b.n	80046be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b4d      	ldr	r3, [pc, #308]	; (80047d4 <UART_SetConfig+0x56c>)
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e00d      	b.n	80046be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe fbfd 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 80046a6:	61f8      	str	r0, [r7, #28]
        break;
 80046a8:	e009      	b.n	80046be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ae:	61fb      	str	r3, [r7, #28]
        break;
 80046b0:	e005      	b.n	80046be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d077      	beq.n	80047b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005a      	lsls	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	441a      	add	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b0f      	cmp	r3, #15
 80046de:	d916      	bls.n	800470e <UART_SetConfig+0x4a6>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e6:	d212      	bcs.n	800470e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f023 030f 	bic.w	r3, r3, #15
 80046f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	8afb      	ldrh	r3, [r7, #22]
 8004700:	4313      	orrs	r3, r2
 8004702:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	8afa      	ldrh	r2, [r7, #22]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	e052      	b.n	80047b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004714:	e04e      	b.n	80047b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800471a:	2b08      	cmp	r3, #8
 800471c:	d827      	bhi.n	800476e <UART_SetConfig+0x506>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x4bc>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004749 	.word	0x08004749
 8004728:	08004751 	.word	0x08004751
 800472c:	08004759 	.word	0x08004759
 8004730:	0800476f 	.word	0x0800476f
 8004734:	0800475f 	.word	0x0800475f
 8004738:	0800476f 	.word	0x0800476f
 800473c:	0800476f 	.word	0x0800476f
 8004740:	0800476f 	.word	0x0800476f
 8004744:	08004767 	.word	0x08004767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004748:	f7fe fc42 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 800474c:	61f8      	str	r0, [r7, #28]
        break;
 800474e:	e014      	b.n	800477a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004750:	f7fe fc54 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 8004754:	61f8      	str	r0, [r7, #28]
        break;
 8004756:	e010      	b.n	800477a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <UART_SetConfig+0x56c>)
 800475a:	61fb      	str	r3, [r7, #28]
        break;
 800475c:	e00d      	b.n	800477a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475e:	f7fe fb9f 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8004762:	61f8      	str	r0, [r7, #28]
        break;
 8004764:	e009      	b.n	800477a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800476a:	61fb      	str	r3, [r7, #28]
        break;
 800476c:	e005      	b.n	800477a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004778:	bf00      	nop
    }

    if (pclk != 0U)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	085a      	lsrs	r2, r3, #1
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	d909      	bls.n	80047ae <UART_SetConfig+0x546>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d205      	bcs.n	80047ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e002      	b.n	80047b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ce:	bf00      	nop
 80047d0:	40008000 	.word	0x40008000
 80047d4:	00f42400 	.word	0x00f42400

080047d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01a      	beq.n	80048ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d6:	d10a      	bne.n	80048ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
  }
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af02      	add	r7, sp, #8
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800492c:	f7fc fe2a 	bl	8001584 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b08      	cmp	r3, #8
 800493e:	d10e      	bne.n	800495e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f82d 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e023      	b.n	80049a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d10e      	bne.n	800498a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800496c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f817 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00d      	b.n	80049a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b09c      	sub	sp, #112	; 0x70
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	e0a5      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	f000 80a1 	beq.w	8004b0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fc fddb 	bl	8001584 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80049da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d13e      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049f4:	667b      	str	r3, [r7, #100]	; 0x64
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e6      	bne.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	663b      	str	r3, [r7, #96]	; 0x60
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e067      	b.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d04f      	beq.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7a:	d147      	bne.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a84:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e6      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ad8:	623a      	str	r2, [r7, #32]
 8004ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	69f9      	ldr	r1, [r7, #28]
 8004ade:	6a3a      	ldr	r2, [r7, #32]
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e5      	bne.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e010      	b.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	f43f af4a 	beq.w	80049c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3770      	adds	r7, #112	; 0x70
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b36:	b084      	sub	sp, #16
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	f107 001c 	add.w	r0, r7, #28
 8004b44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fa6f 	bl	8005038 <USB_CoreReset>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b70:	e005      	b.n	8004b7e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b8a:	b004      	add	sp, #16
 8004b8c:	4770      	bx	lr

08004b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d115      	bne.n	8004bfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bde:	2001      	movs	r0, #1
 8004be0:	f7fc fcdc 	bl	800159c <HAL_Delay>
      ms++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa16 	bl	800501c <USB_GetMode>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d01e      	beq.n	8004c34 <USB_SetCurrentMode+0x84>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b31      	cmp	r3, #49	; 0x31
 8004bfa:	d9f0      	bls.n	8004bde <USB_SetCurrentMode+0x2e>
 8004bfc:	e01a      	b.n	8004c34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d115      	bne.n	8004c30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c10:	2001      	movs	r0, #1
 8004c12:	f7fc fcc3 	bl	800159c <HAL_Delay>
      ms++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f9fd 	bl	800501c <USB_GetMode>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <USB_SetCurrentMode+0x84>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b31      	cmp	r3, #49	; 0x31
 8004c2c:	d9f0      	bls.n	8004c10 <USB_SetCurrentMode+0x60>
 8004c2e:	e001      	b.n	8004c34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e005      	b.n	8004c40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b32      	cmp	r3, #50	; 0x32
 8004c38:	d101      	bne.n	8004c3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c48:	b084      	sub	sp, #16
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e009      	b.n	8004c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3340      	adds	r3, #64	; 0x40
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	2200      	movs	r2, #0
 8004c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b0e      	cmp	r3, #14
 8004c80:	d9f2      	bls.n	8004c68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d11c      	bne.n	8004cc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c96:	f043 0302 	orr.w	r3, r3, #2
 8004c9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e005      	b.n	8004cce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	461a      	mov	r2, r3
 8004cea:	680b      	ldr	r3, [r1, #0]
 8004cec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cee:	2103      	movs	r1, #3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f959 	bl	8004fa8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f8f1 	bl	8004ee0 <USB_FlushTxFifo>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f91d 	bl	8004f48 <USB_FlushRxFifo>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2300      	movs	r3, #0
 8004d22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	461a      	mov	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	e043      	b.n	8004dca <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d58:	d118      	bne.n	8004d8c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e013      	b.n	8004d9e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	461a      	mov	r2, r3
 8004d84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e008      	b.n	8004d9e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004daa:	461a      	mov	r2, r3
 8004dac:	2300      	movs	r3, #0
 8004dae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3b7      	bcc.n	8004d42 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	e043      	b.n	8004e60 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dee:	d118      	bne.n	8004e22 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	461a      	mov	r2, r3
 8004e04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e013      	b.n	8004e34 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e008      	b.n	8004e34 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	461a      	mov	r2, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	461a      	mov	r2, r3
 8004e54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d3b7      	bcc.n	8004dd8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f043 0210 	orr.w	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <USB_DevInit+0x294>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f043 0208 	orr.w	r2, r3, #8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d107      	bne.n	8004eca <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ed6:	b004      	add	sp, #16
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	803c3800 	.word	0x803c3800

08004ee0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <USB_FlushTxFifo+0x64>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e01b      	b.n	8004f38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	daf2      	bge.n	8004eee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	019b      	lsls	r3, r3, #6
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <USB_FlushTxFifo+0x64>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e006      	b.n	8004f38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d0f0      	beq.n	8004f18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	00030d40 	.word	0x00030d40

08004f48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3301      	adds	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <USB_FlushRxFifo+0x5c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e018      	b.n	8004f98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	daf2      	bge.n	8004f54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2210      	movs	r2, #16
 8004f76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <USB_FlushRxFifo+0x5c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e006      	b.n	8004f98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d0f0      	beq.n	8004f78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	00030d40 	.word	0x00030d40

08004fa8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ff4:	f023 0303 	bic.w	r3, r3, #3
 8004ff8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005008:	f043 0302 	orr.w	r3, r3, #2
 800500c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f003 0301 	and.w	r3, r3, #1
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3301      	adds	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a13      	ldr	r2, [pc, #76]	; (800509c <USB_CoreReset+0x64>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e01b      	b.n	800508e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	daf2      	bge.n	8005044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f043 0201 	orr.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <USB_CoreReset+0x64>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e006      	b.n	800508e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b01      	cmp	r3, #1
 800508a:	d0f0      	beq.n	800506e <USB_CoreReset+0x36>

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	00030d40 	.word	0x00030d40

080050a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b2:	2b84      	cmp	r3, #132	; 0x84
 80050b4:	d005      	beq.n	80050c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	3303      	adds	r3, #3
 80050c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050c2:	68fb      	ldr	r3, [r7, #12]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050d4:	f001 f980 	bl	80063d8 <vTaskStartScheduler>
  
  return osOK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	bd80      	pop	{r7, pc}

080050de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e0:	b089      	sub	sp, #36	; 0x24
 80050e2:	af04      	add	r7, sp, #16
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <osThreadCreate+0x54>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01c      	beq.n	8005132 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685c      	ldr	r4, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681d      	ldr	r5, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691e      	ldr	r6, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ffc8 	bl	80050a0 <makeFreeRtosPriority>
 8005110:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800511a:	9202      	str	r2, [sp, #8]
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	9100      	str	r1, [sp, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4632      	mov	r2, r6
 8005124:	4629      	mov	r1, r5
 8005126:	4620      	mov	r0, r4
 8005128:	f000 ff78 	bl	800601c <xTaskCreateStatic>
 800512c:	4603      	mov	r3, r0
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e01c      	b.n	800516c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685c      	ldr	r4, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800513e:	b29e      	uxth	r6, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ffaa 	bl	80050a0 <makeFreeRtosPriority>
 800514c:	4602      	mov	r2, r0
 800514e:	f107 030c 	add.w	r3, r7, #12
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	9200      	str	r2, [sp, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	4632      	mov	r2, r6
 800515a:	4629      	mov	r1, r5
 800515c:	4620      	mov	r0, r4
 800515e:	f000 ffba 	bl	80060d6 <xTaskCreate>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005168:	2300      	movs	r3, #0
 800516a:	e000      	b.n	800516e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800516c:	68fb      	ldr	r3, [r7, #12]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005176 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <osDelay+0x16>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	e000      	b.n	800518e <osDelay+0x18>
 800518c:	2301      	movs	r3, #1
 800518e:	4618      	mov	r0, r3
 8005190:	f001 f8ee 	bl	8006370 <vTaskDelay>
  
  return osOK;
 8005194:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80051a4:	201c      	movs	r0, #28
 80051a6:	f002 fce7 	bl	8007b78 <pvPortMalloc>
 80051aa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 f991 	bl	80054e4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80051c8:	687b      	ldr	r3, [r7, #4]
	}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b090      	sub	sp, #64	; 0x40
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <xEventGroupWaitBits+0x56>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	61fb      	str	r3, [r7, #28]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xEventGroupWaitBits+0x72>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61bb      	str	r3, [r7, #24]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005246:	f001 fdb9 	bl	8006dbc <xTaskGetSchedulerState>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <xEventGroupWaitBits+0x82>
 8005250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <xEventGroupWaitBits+0x86>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <xEventGroupWaitBits+0x88>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	617b      	str	r3, [r7, #20]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005276:	f001 f91f 	bl	80064b8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005286:	f000 f90b 	bl	80054a0 <prvTestWaitCondition>
 800528a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00e      	beq.n	80052b0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005296:	2300      	movs	r3, #0
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d028      	beq.n	80052f2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	43db      	mvns	r3, r3
 80052a8:	401a      	ands	r2, r3
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e020      	b.n	80052f2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80052b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d104      	bne.n	80052c0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	633b      	str	r3, [r7, #48]	; 0x30
 80052be:	e018      	b.n	80052f2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80052dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052de:	1d18      	adds	r0, r3, #4
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	4313      	orrs	r3, r2
 80052e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e8:	4619      	mov	r1, r3
 80052ea:	f001 fadd 	bl	80068a8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80052f2:	f001 f8ef 	bl	80064d4 <xTaskResumeAll>
 80052f6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80052f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d031      	beq.n	8005362 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <xEventGroupWaitBits+0x198>)
 8005306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005314:	f001 fdf6 	bl	8006f04 <uxTaskResetEventItemValue>
 8005318:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d11a      	bne.n	800535a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005324:	f002 fb06 	bl	8007934 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005334:	f000 f8b4 	bl	80054a0 <prvTestWaitCondition>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d006      	beq.n	8005352 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	43db      	mvns	r3, r3
 800534c:	401a      	ands	r2, r3
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005356:	f002 fb1d 	bl	8007994 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005364:	4618      	mov	r0, r3
 8005366:	3740      	adds	r7, #64	; 0x40
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	e000ed04 	.word	0xe000ed04

08005370 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800537a:	2300      	movs	r3, #0
 800537c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005382:	2300      	movs	r3, #0
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xEventGroupSetBits+0x32>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	613b      	str	r3, [r7, #16]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <xEventGroupSetBits+0x52>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60fb      	str	r3, [r7, #12]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	3304      	adds	r3, #4
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	3308      	adds	r3, #8
 80053cc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80053ce:	f001 f873 	bl	80064b8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	431a      	orrs	r2, r3
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80053e4:	e03c      	b.n	8005460 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80053e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053fc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005404:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d108      	bne.n	8005422 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800541c:	2301      	movs	r3, #1
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005420:	e008      	b.n	8005434 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	4013      	ands	r3, r2
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d101      	bne.n	8005434 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d010      	beq.n	800545c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	4313      	orrs	r3, r2
 800544a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005454:	4619      	mov	r1, r3
 8005456:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005458:	f001 faf0 	bl	8006a3c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	429a      	cmp	r2, r3
 8005466:	d1be      	bne.n	80053e6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	43db      	mvns	r3, r3
 8005470:	401a      	ands	r2, r3
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005476:	f001 f82d 	bl	80064d4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	681b      	ldr	r3, [r3, #0]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3738      	adds	r7, #56	; 0x38
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff ff6c 	bl	8005370 <xEventGroupSetBits>
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e007      	b.n	80054d6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d101      	bne.n	80054d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80054d2:	2301      	movs	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80054d6:	697b      	ldr	r3, [r7, #20]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f103 0208 	add.w	r2, r3, #8
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f04f 32ff 	mov.w	r2, #4294967295
 80054fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f103 0208 	add.w	r2, r3, #8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f103 0208 	add.w	r2, r3, #8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	601a      	str	r2, [r3, #0]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d103      	bne.n	80055a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e00c      	b.n	80055c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3308      	adds	r3, #8
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e002      	b.n	80055b4 <vListInsert+0x2e>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d2f6      	bcs.n	80055ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6892      	ldr	r2, [r2, #8]
 800560e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6852      	ldr	r2, [r2, #4]
 8005618:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d103      	bne.n	800562c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	1e5a      	subs	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xQueueGenericReset+0x2a>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60bb      	str	r3, [r7, #8]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005676:	f002 f95d 	bl	8007934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005686:	fb01 f303 	mul.w	r3, r1, r3
 800568a:	441a      	add	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a6:	3b01      	subs	r3, #1
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	441a      	add	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	22ff      	movs	r2, #255	; 0xff
 80056ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	22ff      	movs	r2, #255	; 0xff
 80056c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d114      	bne.n	80056f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01a      	beq.n	800570a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3310      	adds	r3, #16
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 f94d 	bl	8006978 <xTaskRemoveFromEventList>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d012      	beq.n	800570a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <xQueueGenericReset+0xcc>)
 80056e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	e009      	b.n	800570a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3310      	adds	r3, #16
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fef2 	bl	80054e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3324      	adds	r3, #36	; 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff feed 	bl	80054e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800570a:	f002 f943 	bl	8007994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800570e:	2301      	movs	r3, #1
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <xQueueGenericCreateStatic+0x52>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <xQueueGenericCreateStatic+0x56>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <xQueueGenericCreateStatic+0x58>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	623b      	str	r3, [r7, #32]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <xQueueGenericCreateStatic+0x7e>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xQueueGenericCreateStatic+0x82>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueGenericCreateStatic+0x84>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61fb      	str	r3, [r7, #28]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057ba:	2348      	movs	r3, #72	; 0x48
 80057bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b48      	cmp	r3, #72	; 0x48
 80057c2:	d00a      	beq.n	80057da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	61bb      	str	r3, [r7, #24]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	4613      	mov	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f805 	bl	800580c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005804:	4618      	mov	r0, r3
 8005806:	3730      	adds	r7, #48	; 0x30
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e002      	b.n	800582e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800583a:	2101      	movs	r1, #1
 800583c:	69b8      	ldr	r0, [r7, #24]
 800583e:	f7ff ff05 	bl	800564c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005842:	bf00      	nop
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <xQueueGenericSend+0x32>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <xQueueGenericSend+0x40>
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <xQueueGenericSend+0x44>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <xQueueGenericSend+0x46>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <xQueueGenericSend+0x60>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d103      	bne.n	80058ba <xQueueGenericSend+0x6e>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <xQueueGenericSend+0x72>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericSend+0x74>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueGenericSend+0x8e>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	623b      	str	r3, [r7, #32]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058da:	f001 fa6f 	bl	8006dbc <xTaskGetSchedulerState>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <xQueueGenericSend+0x9e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <xQueueGenericSend+0xa2>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueGenericSend+0xa4>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <xQueueGenericSend+0xbe>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	61fb      	str	r3, [r7, #28]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800590a:	f002 f813 	bl	8007934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <xQueueGenericSend+0xd4>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d129      	bne.n	8005974 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005926:	f000 fa0b 	bl	8005d40 <prvCopyDataToQueue>
 800592a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	3324      	adds	r3, #36	; 0x24
 8005938:	4618      	mov	r0, r3
 800593a:	f001 f81d 	bl	8006978 <xTaskRemoveFromEventList>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d013      	beq.n	800596c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005944:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <xQueueGenericSend+0x1f8>)
 8005946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	e00a      	b.n	800596c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800595c:	4b39      	ldr	r3, [pc, #228]	; (8005a44 <xQueueGenericSend+0x1f8>)
 800595e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800596c:	f002 f812 	bl	8007994 <vPortExitCritical>
				return pdPASS;
 8005970:	2301      	movs	r3, #1
 8005972:	e063      	b.n	8005a3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800597a:	f002 f80b 	bl	8007994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800597e:	2300      	movs	r3, #0
 8005980:	e05c      	b.n	8005a3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	4618      	mov	r0, r3
 800598e:	f001 f8b7 	bl	8006b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005992:	2301      	movs	r3, #1
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005996:	f001 fffd 	bl	8007994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800599a:	f000 fd8d 	bl	80064b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800599e:	f001 ffc9 	bl	8007934 <vPortEnterCritical>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a8:	b25b      	sxtb	r3, r3
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d103      	bne.n	80059b8 <xQueueGenericSend+0x16c>
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059be:	b25b      	sxtb	r3, r3
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d103      	bne.n	80059ce <xQueueGenericSend+0x182>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ce:	f001 ffe1 	bl	8007994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059d2:	1d3a      	adds	r2, r7, #4
 80059d4:	f107 0314 	add.w	r3, r7, #20
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f8a6 	bl	8006b2c <xTaskCheckForTimeOut>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d124      	bne.n	8005a30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e8:	f000 faa2 	bl	8005f30 <prvIsQueueFull>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d018      	beq.n	8005a24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	3310      	adds	r3, #16
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 ff30 	bl	8006860 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a02:	f000 fa2d 	bl	8005e60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a06:	f000 fd65 	bl	80064d4 <xTaskResumeAll>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f47f af7c 	bne.w	800590a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a12:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <xQueueGenericSend+0x1f8>)
 8005a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	e772      	b.n	800590a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a26:	f000 fa1b 	bl	8005e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a2a:	f000 fd53 	bl	80064d4 <xTaskResumeAll>
 8005a2e:	e76c      	b.n	800590a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a32:	f000 fa15 	bl	8005e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a36:	f000 fd4d 	bl	80064d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3738      	adds	r7, #56	; 0x38
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	e000ed04 	.word	0xe000ed04

08005a48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b090      	sub	sp, #64	; 0x40
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d103      	bne.n	8005a84 <xQueueGenericSendFromISR+0x3c>
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <xQueueGenericSendFromISR+0x40>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <xQueueGenericSendFromISR+0x42>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aa0:	bf00      	nop
 8005aa2:	e7fe      	b.n	8005aa2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d103      	bne.n	8005ab2 <xQueueGenericSendFromISR+0x6a>
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <xQueueGenericSendFromISR+0x6e>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <xQueueGenericSendFromISR+0x70>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	623b      	str	r3, [r7, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ad2:	f002 f811 	bl	8007af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ad6:	f3ef 8211 	mrs	r2, BASEPRI
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	61fa      	str	r2, [r7, #28]
 8005aec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005aee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d302      	bcc.n	8005b04 <xQueueGenericSendFromISR+0xbc>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d12f      	bne.n	8005b64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b1a:	f000 f911 	bl	8005d40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	d112      	bne.n	8005b4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d016      	beq.n	8005b5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	3324      	adds	r3, #36	; 0x24
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 ff1f 	bl	8006978 <xTaskRemoveFromEventList>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e007      	b.n	8005b5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b52:	3301      	adds	r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	b25a      	sxtb	r2, r3
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005b62:	e001      	b.n	8005b68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3740      	adds	r7, #64	; 0x40
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	; 0x30
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <xQueueReceive+0x30>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	623b      	str	r3, [r7, #32]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <xQueueReceive+0x3e>
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <xQueueReceive+0x42>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <xQueueReceive+0x44>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <xQueueReceive+0x5e>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	61fb      	str	r3, [r7, #28]
}
 8005bda:	bf00      	nop
 8005bdc:	e7fe      	b.n	8005bdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bde:	f001 f8ed 	bl	8006dbc <xTaskGetSchedulerState>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <xQueueReceive+0x6e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <xQueueReceive+0x72>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <xQueueReceive+0x74>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xQueueReceive+0x8e>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	61bb      	str	r3, [r7, #24]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c0e:	f001 fe91 	bl	8007934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01f      	beq.n	8005c5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c22:	f000 f8f7 	bl	8005e14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	1e5a      	subs	r2, r3, #1
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00f      	beq.n	8005c56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	3310      	adds	r3, #16
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fe9c 	bl	8006978 <xTaskRemoveFromEventList>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c46:	4b3d      	ldr	r3, [pc, #244]	; (8005d3c <xQueueReceive+0x1bc>)
 8005c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c56:	f001 fe9d 	bl	8007994 <vPortExitCritical>
				return pdPASS;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e069      	b.n	8005d32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c64:	f001 fe96 	bl	8007994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e062      	b.n	8005d32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c72:	f107 0310 	add.w	r3, r7, #16
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 ff42 	bl	8006b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c80:	f001 fe88 	bl	8007994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c84:	f000 fc18 	bl	80064b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c88:	f001 fe54 	bl	8007934 <vPortEnterCritical>
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c92:	b25b      	sxtb	r3, r3
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d103      	bne.n	8005ca2 <xQueueReceive+0x122>
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d103      	bne.n	8005cb8 <xQueueReceive+0x138>
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb8:	f001 fe6c 	bl	8007994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cbc:	1d3a      	adds	r2, r7, #4
 8005cbe:	f107 0310 	add.w	r3, r7, #16
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 ff31 	bl	8006b2c <xTaskCheckForTimeOut>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d123      	bne.n	8005d18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd2:	f000 f917 	bl	8005f04 <prvIsQueueEmpty>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d017      	beq.n	8005d0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	3324      	adds	r3, #36	; 0x24
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fdbb 	bl	8006860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cec:	f000 f8b8 	bl	8005e60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cf0:	f000 fbf0 	bl	80064d4 <xTaskResumeAll>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d189      	bne.n	8005c0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <xQueueReceive+0x1bc>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	e780      	b.n	8005c0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0e:	f000 f8a7 	bl	8005e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d12:	f000 fbdf 	bl	80064d4 <xTaskResumeAll>
 8005d16:	e77a      	b.n	8005c0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d1a:	f000 f8a1 	bl	8005e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d1e:	f000 fbd9 	bl	80064d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d24:	f000 f8ee 	bl	8005f04 <prvIsQueueEmpty>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f43f af6f 	beq.w	8005c0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3730      	adds	r7, #48	; 0x30
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10d      	bne.n	8005d7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d14d      	bne.n	8005e02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 f844 	bl	8006df8 <xTaskPriorityDisinherit>
 8005d70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	609a      	str	r2, [r3, #8]
 8005d78:	e043      	b.n	8005e02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d119      	bne.n	8005db4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6858      	ldr	r0, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	461a      	mov	r2, r3
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	f002 f904 	bl	8007f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	441a      	add	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d32b      	bcc.n	8005e02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	e026      	b.n	8005e02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68d8      	ldr	r0, [r3, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	f002 f8ea 	bl	8007f98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	425b      	negs	r3, r3
 8005dce:	441a      	add	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d207      	bcs.n	8005df0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	425b      	negs	r3, r3
 8005dea:	441a      	add	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d105      	bne.n	8005e02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e0a:	697b      	ldr	r3, [r7, #20]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d018      	beq.n	8005e58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	441a      	add	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d303      	bcc.n	8005e48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68d9      	ldr	r1, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	461a      	mov	r2, r3
 8005e52:	6838      	ldr	r0, [r7, #0]
 8005e54:	f002 f8a0 	bl	8007f98 <memcpy>
	}
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e68:	f001 fd64 	bl	8007934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e74:	e011      	b.n	8005e9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d012      	beq.n	8005ea4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3324      	adds	r3, #36	; 0x24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fd78 	bl	8006978 <xTaskRemoveFromEventList>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e8e:	f000 feaf 	bl	8006bf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	dce9      	bgt.n	8005e76 <prvUnlockQueue+0x16>
 8005ea2:	e000      	b.n	8005ea6 <prvUnlockQueue+0x46>
					break;
 8005ea4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	22ff      	movs	r2, #255	; 0xff
 8005eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005eae:	f001 fd71 	bl	8007994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eb2:	f001 fd3f 	bl	8007934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ebc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ebe:	e011      	b.n	8005ee4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d012      	beq.n	8005eee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3310      	adds	r3, #16
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fd53 	bl	8006978 <xTaskRemoveFromEventList>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ed8:	f000 fe8a 	bl	8006bf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	dce9      	bgt.n	8005ec0 <prvUnlockQueue+0x60>
 8005eec:	e000      	b.n	8005ef0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005eee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	22ff      	movs	r2, #255	; 0xff
 8005ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ef8:	f001 fd4c 	bl	8007994 <vPortExitCritical>
}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f0c:	f001 fd12 	bl	8007934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e001      	b.n	8005f22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f22:	f001 fd37 	bl	8007994 <vPortExitCritical>

	return xReturn;
 8005f26:	68fb      	ldr	r3, [r7, #12]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f38:	f001 fcfc 	bl	8007934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d102      	bne.n	8005f4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e001      	b.n	8005f52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f52:	f001 fd1f 	bl	8007994 <vPortExitCritical>

	return xReturn;
 8005f56:	68fb      	ldr	r3, [r7, #12]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e014      	b.n	8005f9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f70:	4a0f      	ldr	r2, [pc, #60]	; (8005fb0 <vQueueAddToRegistry+0x50>)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10b      	bne.n	8005f94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f7c:	490c      	ldr	r1, [pc, #48]	; (8005fb0 <vQueueAddToRegistry+0x50>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f86:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <vQueueAddToRegistry+0x50>)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f92:	e006      	b.n	8005fa2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b07      	cmp	r3, #7
 8005f9e:	d9e7      	bls.n	8005f70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fa0:	bf00      	nop
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000fc4 	.word	0x20000fc4

08005fb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005fc4:	f001 fcb6 	bl	8007934 <vPortEnterCritical>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d103      	bne.n	8005fde <vQueueWaitForMessageRestricted+0x2a>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe4:	b25b      	sxtb	r3, r3
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d103      	bne.n	8005ff4 <vQueueWaitForMessageRestricted+0x40>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff4:	f001 fcce 	bl	8007994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fc89 	bl	8006920 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800600e:	6978      	ldr	r0, [r7, #20]
 8006010:	f7ff ff26 	bl	8005e60 <prvUnlockQueue>
	}
 8006014:	bf00      	nop
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08e      	sub	sp, #56	; 0x38
 8006020:	af04      	add	r7, sp, #16
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	623b      	str	r3, [r7, #32]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xTaskCreateStatic+0x46>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	61fb      	str	r3, [r7, #28]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006062:	23b4      	movs	r3, #180	; 0xb4
 8006064:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2bb4      	cmp	r3, #180	; 0xb4
 800606a:	d00a      	beq.n	8006082 <xTaskCreateStatic+0x66>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	61bb      	str	r3, [r7, #24]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006082:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01e      	beq.n	80060c8 <xTaskCreateStatic+0xac>
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01b      	beq.n	80060c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006098:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	2202      	movs	r2, #2
 800609e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060a2:	2300      	movs	r3, #0
 80060a4:	9303      	str	r3, [sp, #12]
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	9302      	str	r3, [sp, #8]
 80060aa:	f107 0314 	add.w	r3, r7, #20
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f850 	bl	8006160 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060c2:	f000 f8eb 	bl	800629c <prvAddNewTaskToReadyList>
 80060c6:	e001      	b.n	80060cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060cc:	697b      	ldr	r3, [r7, #20]
	}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3728      	adds	r7, #40	; 0x28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b08c      	sub	sp, #48	; 0x30
 80060da:	af04      	add	r7, sp, #16
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	603b      	str	r3, [r7, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fd44 	bl	8007b78 <pvPortMalloc>
 80060f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00e      	beq.n	8006116 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060f8:	20b4      	movs	r0, #180	; 0xb4
 80060fa:	f001 fd3d 	bl	8007b78 <pvPortMalloc>
 80060fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
 800610c:	e005      	b.n	800611a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800610e:	6978      	ldr	r0, [r7, #20]
 8006110:	f001 fdfe 	bl	8007d10 <vPortFree>
 8006114:	e001      	b.n	800611a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d017      	beq.n	8006150 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006128:	88fa      	ldrh	r2, [r7, #6]
 800612a:	2300      	movs	r3, #0
 800612c:	9303      	str	r3, [sp, #12]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	9302      	str	r3, [sp, #8]
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f80e 	bl	8006160 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006144:	69f8      	ldr	r0, [r7, #28]
 8006146:	f000 f8a9 	bl	800629c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800614a:	2301      	movs	r3, #1
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	e002      	b.n	8006156 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006150:	f04f 33ff 	mov.w	r3, #4294967295
 8006154:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006156:	69bb      	ldr	r3, [r7, #24]
	}
 8006158:	4618      	mov	r0, r3
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006178:	3b01      	subs	r3, #1
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	f023 0307 	bic.w	r3, r3, #7
 8006186:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	617b      	str	r3, [r7, #20]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01f      	beq.n	80061ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e012      	b.n	80061da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	7819      	ldrb	r1, [r3, #0]
 80061bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	3334      	adds	r3, #52	; 0x34
 80061c4:	460a      	mov	r2, r1
 80061c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b0f      	cmp	r3, #15
 80061de:	d9e9      	bls.n	80061b4 <prvInitialiseNewTask+0x54>
 80061e0:	e000      	b.n	80061e4 <prvInitialiseNewTask+0x84>
			{
				break;
 80061e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061ec:	e003      	b.n	80061f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d901      	bls.n	8006200 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061fc:	2306      	movs	r3, #6
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800620a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	2200      	movs	r2, #0
 8006210:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	3304      	adds	r3, #4
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff f984 	bl	8005524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	3318      	adds	r3, #24
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff f97f 	bl	8005524 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	f1c3 0207 	rsb	r2, r3, #7
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	2200      	movs	r2, #0
 8006248:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	334c      	adds	r3, #76	; 0x4c
 8006250:	2260      	movs	r2, #96	; 0x60
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f001 fead 	bl	8007fb4 <memset>
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <prvInitialiseNewTask+0x130>)
 800625e:	651a      	str	r2, [r3, #80]	; 0x50
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	4a0c      	ldr	r2, [pc, #48]	; (8006294 <prvInitialiseNewTask+0x134>)
 8006264:	655a      	str	r2, [r3, #84]	; 0x54
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	4a0b      	ldr	r2, [pc, #44]	; (8006298 <prvInitialiseNewTask+0x138>)
 800626a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	69b8      	ldr	r0, [r7, #24]
 8006272:	f001 fa33 	bl	80076dc <pxPortInitialiseStack>
 8006276:	4602      	mov	r2, r0
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006286:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006288:	bf00      	nop
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	08008230 	.word	0x08008230
 8006294:	08008250 	.word	0x08008250
 8006298:	08008210 	.word	0x08008210

0800629c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062a4:	f001 fb46 	bl	8007934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062a8:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <prvAddNewTaskToReadyList+0xb8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3301      	adds	r3, #1
 80062ae:	4a29      	ldr	r2, [pc, #164]	; (8006354 <prvAddNewTaskToReadyList+0xb8>)
 80062b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062b2:	4b29      	ldr	r3, [pc, #164]	; (8006358 <prvAddNewTaskToReadyList+0xbc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062ba:	4a27      	ldr	r2, [pc, #156]	; (8006358 <prvAddNewTaskToReadyList+0xbc>)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062c0:	4b24      	ldr	r3, [pc, #144]	; (8006354 <prvAddNewTaskToReadyList+0xb8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d110      	bne.n	80062ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062c8:	f000 fcb6 	bl	8006c38 <prvInitialiseTaskLists>
 80062cc:	e00d      	b.n	80062ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062ce:	4b23      	ldr	r3, [pc, #140]	; (800635c <prvAddNewTaskToReadyList+0xc0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062d6:	4b20      	ldr	r3, [pc, #128]	; (8006358 <prvAddNewTaskToReadyList+0xbc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d802      	bhi.n	80062ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062e4:	4a1c      	ldr	r2, [pc, #112]	; (8006358 <prvAddNewTaskToReadyList+0xbc>)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062ea:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <prvAddNewTaskToReadyList+0xc4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3301      	adds	r3, #1
 80062f0:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <prvAddNewTaskToReadyList+0xc4>)
 80062f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	2201      	movs	r2, #1
 80062fa:	409a      	lsls	r2, r3
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <prvAddNewTaskToReadyList+0xc8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4313      	orrs	r3, r2
 8006302:	4a18      	ldr	r2, [pc, #96]	; (8006364 <prvAddNewTaskToReadyList+0xc8>)
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a15      	ldr	r2, [pc, #84]	; (8006368 <prvAddNewTaskToReadyList+0xcc>)
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7ff f90e 	bl	800553e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006322:	f001 fb37 	bl	8007994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006326:	4b0d      	ldr	r3, [pc, #52]	; (800635c <prvAddNewTaskToReadyList+0xc0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00e      	beq.n	800634c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800632e:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <prvAddNewTaskToReadyList+0xbc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	429a      	cmp	r2, r3
 800633a:	d207      	bcs.n	800634c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <prvAddNewTaskToReadyList+0xd0>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20001104 	.word	0x20001104
 8006358:	20001004 	.word	0x20001004
 800635c:	20001110 	.word	0x20001110
 8006360:	20001120 	.word	0x20001120
 8006364:	2000110c 	.word	0x2000110c
 8006368:	20001008 	.word	0x20001008
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d017      	beq.n	80063b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <vTaskDelay+0x60>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <vTaskDelay+0x30>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	60bb      	str	r3, [r7, #8]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063a0:	f000 f88a 	bl	80064b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fdc4 	bl	8006f34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063ac:	f000 f892 	bl	80064d4 <xTaskResumeAll>
 80063b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d107      	bne.n	80063c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <vTaskDelay+0x64>)
 80063ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	2000112c 	.word	0x2000112c
 80063d4:	e000ed04 	.word	0xe000ed04

080063d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063e6:	463a      	mov	r2, r7
 80063e8:	1d39      	adds	r1, r7, #4
 80063ea:	f107 0308 	add.w	r3, r7, #8
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fa f870 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	9202      	str	r2, [sp, #8]
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	2300      	movs	r3, #0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	460a      	mov	r2, r1
 8006406:	4924      	ldr	r1, [pc, #144]	; (8006498 <vTaskStartScheduler+0xc0>)
 8006408:	4824      	ldr	r0, [pc, #144]	; (800649c <vTaskStartScheduler+0xc4>)
 800640a:	f7ff fe07 	bl	800601c <xTaskCreateStatic>
 800640e:	4603      	mov	r3, r0
 8006410:	4a23      	ldr	r2, [pc, #140]	; (80064a0 <vTaskStartScheduler+0xc8>)
 8006412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006414:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <vTaskStartScheduler+0xc8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e001      	b.n	8006426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d102      	bne.n	8006432 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800642c:	f000 fde8 	bl	8007000 <xTimerCreateTimerTask>
 8006430:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d11b      	bne.n	8006470 <vTaskStartScheduler+0x98>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	613b      	str	r3, [r7, #16]
}
 800644a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <vTaskStartScheduler+0xcc>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	334c      	adds	r3, #76	; 0x4c
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <vTaskStartScheduler+0xd0>)
 8006454:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006456:	4b15      	ldr	r3, [pc, #84]	; (80064ac <vTaskStartScheduler+0xd4>)
 8006458:	f04f 32ff 	mov.w	r2, #4294967295
 800645c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800645e:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <vTaskStartScheduler+0xd8>)
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006464:	4b13      	ldr	r3, [pc, #76]	; (80064b4 <vTaskStartScheduler+0xdc>)
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800646a:	f001 f9c1 	bl	80077f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800646e:	e00e      	b.n	800648e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d10a      	bne.n	800648e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	60fb      	str	r3, [r7, #12]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <vTaskStartScheduler+0xb4>
}
 800648e:	bf00      	nop
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	080081b0 	.word	0x080081b0
 800649c:	08006c09 	.word	0x08006c09
 80064a0:	20001128 	.word	0x20001128
 80064a4:	20001004 	.word	0x20001004
 80064a8:	20000010 	.word	0x20000010
 80064ac:	20001124 	.word	0x20001124
 80064b0:	20001110 	.word	0x20001110
 80064b4:	20001108 	.word	0x20001108

080064b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <vTaskSuspendAll+0x18>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	4a03      	ldr	r2, [pc, #12]	; (80064d0 <vTaskSuspendAll+0x18>)
 80064c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064c6:	bf00      	nop
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	2000112c 	.word	0x2000112c

080064d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064e2:	4b41      	ldr	r3, [pc, #260]	; (80065e8 <xTaskResumeAll+0x114>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <xTaskResumeAll+0x2c>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	603b      	str	r3, [r7, #0]
}
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006500:	f001 fa18 	bl	8007934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006504:	4b38      	ldr	r3, [pc, #224]	; (80065e8 <xTaskResumeAll+0x114>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3b01      	subs	r3, #1
 800650a:	4a37      	ldr	r2, [pc, #220]	; (80065e8 <xTaskResumeAll+0x114>)
 800650c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800650e:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <xTaskResumeAll+0x114>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d161      	bne.n	80065da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006516:	4b35      	ldr	r3, [pc, #212]	; (80065ec <xTaskResumeAll+0x118>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d05d      	beq.n	80065da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800651e:	e02e      	b.n	800657e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006520:	4b33      	ldr	r3, [pc, #204]	; (80065f0 <xTaskResumeAll+0x11c>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3318      	adds	r3, #24
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff f863 	bl	80055f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3304      	adds	r3, #4
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff f85e 	bl	80055f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	2201      	movs	r2, #1
 8006542:	409a      	lsls	r2, r3
 8006544:	4b2b      	ldr	r3, [pc, #172]	; (80065f4 <xTaskResumeAll+0x120>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4313      	orrs	r3, r2
 800654a:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <xTaskResumeAll+0x120>)
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4a27      	ldr	r2, [pc, #156]	; (80065f8 <xTaskResumeAll+0x124>)
 800655c:	441a      	add	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3304      	adds	r3, #4
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f7fe ffea 	bl	800553e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	4b23      	ldr	r3, [pc, #140]	; (80065fc <xTaskResumeAll+0x128>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	429a      	cmp	r2, r3
 8006576:	d302      	bcc.n	800657e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006578:	4b21      	ldr	r3, [pc, #132]	; (8006600 <xTaskResumeAll+0x12c>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800657e:	4b1c      	ldr	r3, [pc, #112]	; (80065f0 <xTaskResumeAll+0x11c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1cc      	bne.n	8006520 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800658c:	f000 fbf6 	bl	8006d7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006590:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <xTaskResumeAll+0x130>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d010      	beq.n	80065be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800659c:	f000 f846 	bl	800662c <xTaskIncrementTick>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80065a6:	4b16      	ldr	r3, [pc, #88]	; (8006600 <xTaskResumeAll+0x12c>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f1      	bne.n	800659c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80065b8:	4b12      	ldr	r3, [pc, #72]	; (8006604 <xTaskResumeAll+0x130>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065be:	4b10      	ldr	r3, [pc, #64]	; (8006600 <xTaskResumeAll+0x12c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065c6:	2301      	movs	r3, #1
 80065c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <xTaskResumeAll+0x134>)
 80065cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065da:	f001 f9db 	bl	8007994 <vPortExitCritical>

	return xAlreadyYielded;
 80065de:	68bb      	ldr	r3, [r7, #8]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	2000112c 	.word	0x2000112c
 80065ec:	20001104 	.word	0x20001104
 80065f0:	200010c4 	.word	0x200010c4
 80065f4:	2000110c 	.word	0x2000110c
 80065f8:	20001008 	.word	0x20001008
 80065fc:	20001004 	.word	0x20001004
 8006600:	20001118 	.word	0x20001118
 8006604:	20001114 	.word	0x20001114
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <xTaskGetTickCount+0x1c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006618:	687b      	ldr	r3, [r7, #4]
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20001108 	.word	0x20001108

0800662c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006636:	4b4e      	ldr	r3, [pc, #312]	; (8006770 <xTaskIncrementTick+0x144>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 808e 	bne.w	800675c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006640:	4b4c      	ldr	r3, [pc, #304]	; (8006774 <xTaskIncrementTick+0x148>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006648:	4a4a      	ldr	r2, [pc, #296]	; (8006774 <xTaskIncrementTick+0x148>)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d120      	bne.n	8006696 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006654:	4b48      	ldr	r3, [pc, #288]	; (8006778 <xTaskIncrementTick+0x14c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <xTaskIncrementTick+0x48>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	603b      	str	r3, [r7, #0]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <xTaskIncrementTick+0x46>
 8006674:	4b40      	ldr	r3, [pc, #256]	; (8006778 <xTaskIncrementTick+0x14c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	4b40      	ldr	r3, [pc, #256]	; (800677c <xTaskIncrementTick+0x150>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a3e      	ldr	r2, [pc, #248]	; (8006778 <xTaskIncrementTick+0x14c>)
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	4a3e      	ldr	r2, [pc, #248]	; (800677c <xTaskIncrementTick+0x150>)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	4b3d      	ldr	r3, [pc, #244]	; (8006780 <xTaskIncrementTick+0x154>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3301      	adds	r3, #1
 800668e:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <xTaskIncrementTick+0x154>)
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	f000 fb73 	bl	8006d7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006696:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <xTaskIncrementTick+0x158>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	429a      	cmp	r2, r3
 800669e:	d348      	bcc.n	8006732 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a0:	4b35      	ldr	r3, [pc, #212]	; (8006778 <xTaskIncrementTick+0x14c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066aa:	4b36      	ldr	r3, [pc, #216]	; (8006784 <xTaskIncrementTick+0x158>)
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295
 80066b0:	601a      	str	r2, [r3, #0]
					break;
 80066b2:	e03e      	b.n	8006732 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b4:	4b30      	ldr	r3, [pc, #192]	; (8006778 <xTaskIncrementTick+0x14c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d203      	bcs.n	80066d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066cc:	4a2d      	ldr	r2, [pc, #180]	; (8006784 <xTaskIncrementTick+0x158>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066d2:	e02e      	b.n	8006732 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe ff8d 	bl	80055f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d004      	beq.n	80066f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3318      	adds	r3, #24
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe ff84 	bl	80055f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	2201      	movs	r2, #1
 80066f6:	409a      	lsls	r2, r3
 80066f8:	4b23      	ldr	r3, [pc, #140]	; (8006788 <xTaskIncrementTick+0x15c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	4a22      	ldr	r2, [pc, #136]	; (8006788 <xTaskIncrementTick+0x15c>)
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4a1f      	ldr	r2, [pc, #124]	; (800678c <xTaskIncrementTick+0x160>)
 8006710:	441a      	add	r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	3304      	adds	r3, #4
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f7fe ff10 	bl	800553e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4b1b      	ldr	r3, [pc, #108]	; (8006790 <xTaskIncrementTick+0x164>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	429a      	cmp	r2, r3
 800672a:	d3b9      	bcc.n	80066a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006730:	e7b6      	b.n	80066a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006732:	4b17      	ldr	r3, [pc, #92]	; (8006790 <xTaskIncrementTick+0x164>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006738:	4914      	ldr	r1, [pc, #80]	; (800678c <xTaskIncrementTick+0x160>)
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d901      	bls.n	800674e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800674e:	4b11      	ldr	r3, [pc, #68]	; (8006794 <xTaskIncrementTick+0x168>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006756:	2301      	movs	r3, #1
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	e004      	b.n	8006766 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800675c:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <xTaskIncrementTick+0x16c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	4a0d      	ldr	r2, [pc, #52]	; (8006798 <xTaskIncrementTick+0x16c>)
 8006764:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006766:	697b      	ldr	r3, [r7, #20]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	2000112c 	.word	0x2000112c
 8006774:	20001108 	.word	0x20001108
 8006778:	200010bc 	.word	0x200010bc
 800677c:	200010c0 	.word	0x200010c0
 8006780:	2000111c 	.word	0x2000111c
 8006784:	20001124 	.word	0x20001124
 8006788:	2000110c 	.word	0x2000110c
 800678c:	20001008 	.word	0x20001008
 8006790:	20001004 	.word	0x20001004
 8006794:	20001118 	.word	0x20001118
 8006798:	20001114 	.word	0x20001114

0800679c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067a2:	4b29      	ldr	r3, [pc, #164]	; (8006848 <vTaskSwitchContext+0xac>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067aa:	4b28      	ldr	r3, [pc, #160]	; (800684c <vTaskSwitchContext+0xb0>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067b0:	e044      	b.n	800683c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80067b2:	4b26      	ldr	r3, [pc, #152]	; (800684c <vTaskSwitchContext+0xb0>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <vTaskSwitchContext+0xb4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	fab3 f383 	clz	r3, r3
 80067c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067c6:	7afb      	ldrb	r3, [r7, #11]
 80067c8:	f1c3 031f 	rsb	r3, r3, #31
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	4921      	ldr	r1, [pc, #132]	; (8006854 <vTaskSwitchContext+0xb8>)
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	607b      	str	r3, [r7, #4]
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <vTaskSwitchContext+0x5a>
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4a14      	ldr	r2, [pc, #80]	; (8006854 <vTaskSwitchContext+0xb8>)
 8006804:	4413      	add	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	3308      	adds	r3, #8
 800681a:	429a      	cmp	r2, r3
 800681c:	d104      	bne.n	8006828 <vTaskSwitchContext+0x8c>
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	605a      	str	r2, [r3, #4]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <vTaskSwitchContext+0xbc>)
 8006830:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <vTaskSwitchContext+0xbc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	334c      	adds	r3, #76	; 0x4c
 8006838:	4a08      	ldr	r2, [pc, #32]	; (800685c <vTaskSwitchContext+0xc0>)
 800683a:	6013      	str	r3, [r2, #0]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	2000112c 	.word	0x2000112c
 800684c:	20001118 	.word	0x20001118
 8006850:	2000110c 	.word	0x2000110c
 8006854:	20001008 	.word	0x20001008
 8006858:	20001004 	.word	0x20001004
 800685c:	20000010 	.word	0x20000010

08006860 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <vTaskPlaceOnEventList+0x44>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3318      	adds	r3, #24
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fe fe79 	bl	8005586 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006894:	2101      	movs	r1, #1
 8006896:	6838      	ldr	r0, [r7, #0]
 8006898:	f000 fb4c 	bl	8006f34 <prvAddCurrentTaskToDelayedList>
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20001004 	.word	0x20001004

080068a8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	617b      	str	r3, [r7, #20]
}
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80068d0:	4b11      	ldr	r3, [pc, #68]	; (8006918 <vTaskPlaceOnUnorderedEventList+0x70>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	613b      	str	r3, [r7, #16]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <vTaskPlaceOnUnorderedEventList+0x74>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80068f8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068fa:	4b08      	ldr	r3, [pc, #32]	; (800691c <vTaskPlaceOnUnorderedEventList+0x74>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3318      	adds	r3, #24
 8006900:	4619      	mov	r1, r3
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7fe fe1b 	bl	800553e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006908:	2101      	movs	r1, #1
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fb12 	bl	8006f34 <prvAddCurrentTaskToDelayedList>
}
 8006910:	bf00      	nop
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	2000112c 	.word	0x2000112c
 800691c:	20001004 	.word	0x20001004

08006920 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	617b      	str	r3, [r7, #20]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <vTaskPlaceOnEventListRestricted+0x54>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3318      	adds	r3, #24
 800694e:	4619      	mov	r1, r3
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7fe fdf4 	bl	800553e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800695c:	f04f 33ff 	mov.w	r3, #4294967295
 8006960:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	68b8      	ldr	r0, [r7, #8]
 8006966:	f000 fae5 	bl	8006f34 <prvAddCurrentTaskToDelayedList>
	}
 800696a:	bf00      	nop
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20001004 	.word	0x20001004

08006978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	60fb      	str	r3, [r7, #12]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	3318      	adds	r3, #24
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fe25 	bl	80055f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069ae:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <xTaskRemoveFromEventList+0xac>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11c      	bne.n	80069f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fe1c 	bl	80055f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	2201      	movs	r2, #1
 80069c6:	409a      	lsls	r2, r3
 80069c8:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <xTaskRemoveFromEventList+0xb0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <xTaskRemoveFromEventList+0xb0>)
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <xTaskRemoveFromEventList+0xb4>)
 80069e0:	441a      	add	r2, r3
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7fe fda8 	bl	800553e <vListInsertEnd>
 80069ee:	e005      	b.n	80069fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	3318      	adds	r3, #24
 80069f4:	4619      	mov	r1, r3
 80069f6:	480e      	ldr	r0, [pc, #56]	; (8006a30 <xTaskRemoveFromEventList+0xb8>)
 80069f8:	f7fe fda1 	bl	800553e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <xTaskRemoveFromEventList+0xbc>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d905      	bls.n	8006a16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <xTaskRemoveFromEventList+0xc0>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e001      	b.n	8006a1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a1a:	697b      	ldr	r3, [r7, #20]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	2000112c 	.word	0x2000112c
 8006a28:	2000110c 	.word	0x2000110c
 8006a2c:	20001008 	.word	0x20001008
 8006a30:	200010c4 	.word	0x200010c4
 8006a34:	20001004 	.word	0x20001004
 8006a38:	20001118 	.word	0x20001118

08006a3c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006a46:	4b29      	ldr	r3, [pc, #164]	; (8006aec <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	613b      	str	r3, [r7, #16]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	60fb      	str	r3, [r7, #12]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fe fdb1 	bl	80055f8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fdac 	bl	80055f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4a0d      	ldr	r2, [pc, #52]	; (8006af4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006ac0:	441a      	add	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fe fd38 	bl	800553e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d902      	bls.n	8006ae2 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006adc:	4b07      	ldr	r3, [pc, #28]	; (8006afc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
	}
}
 8006ae2:	bf00      	nop
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	2000112c 	.word	0x2000112c
 8006af0:	2000110c 	.word	0x2000110c
 8006af4:	20001008 	.word	0x20001008
 8006af8:	20001004 	.word	0x20001004
 8006afc:	20001118 	.word	0x20001118

08006b00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <vTaskInternalSetTimeOutState+0x24>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b10:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <vTaskInternalSetTimeOutState+0x28>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	605a      	str	r2, [r3, #4]
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	2000111c 	.word	0x2000111c
 8006b28:	20001108 	.word	0x20001108

08006b2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	613b      	str	r3, [r7, #16]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	60fb      	str	r3, [r7, #12]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b6e:	f000 fee1 	bl	8007934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b72:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <xTaskCheckForTimeOut+0xbc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d102      	bne.n	8006b92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e023      	b.n	8006bda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <xTaskCheckForTimeOut+0xc0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d007      	beq.n	8006bae <xTaskCheckForTimeOut+0x82>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d302      	bcc.n	8006bae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	e015      	b.n	8006bda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d20b      	bcs.n	8006bd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff ff9b 	bl	8006b00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	e004      	b.n	8006bda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bda:	f000 fedb 	bl	8007994 <vPortExitCritical>

	return xReturn;
 8006bde:	69fb      	ldr	r3, [r7, #28]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20001108 	.word	0x20001108
 8006bec:	2000111c 	.word	0x2000111c

08006bf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bf4:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <vTaskMissedYield+0x14>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	20001118 	.word	0x20001118

08006c08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c10:	f000 f852 	bl	8006cb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <prvIdleTask+0x28>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d9f9      	bls.n	8006c10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <prvIdleTask+0x2c>)
 8006c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c2c:	e7f0      	b.n	8006c10 <prvIdleTask+0x8>
 8006c2e:	bf00      	nop
 8006c30:	20001008 	.word	0x20001008
 8006c34:	e000ed04 	.word	0xe000ed04

08006c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c3e:	2300      	movs	r3, #0
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	e00c      	b.n	8006c5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4a12      	ldr	r2, [pc, #72]	; (8006c98 <prvInitialiseTaskLists+0x60>)
 8006c50:	4413      	add	r3, r2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fc46 	bl	80054e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	607b      	str	r3, [r7, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b06      	cmp	r3, #6
 8006c62:	d9ef      	bls.n	8006c44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c64:	480d      	ldr	r0, [pc, #52]	; (8006c9c <prvInitialiseTaskLists+0x64>)
 8006c66:	f7fe fc3d 	bl	80054e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c6a:	480d      	ldr	r0, [pc, #52]	; (8006ca0 <prvInitialiseTaskLists+0x68>)
 8006c6c:	f7fe fc3a 	bl	80054e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c70:	480c      	ldr	r0, [pc, #48]	; (8006ca4 <prvInitialiseTaskLists+0x6c>)
 8006c72:	f7fe fc37 	bl	80054e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c76:	480c      	ldr	r0, [pc, #48]	; (8006ca8 <prvInitialiseTaskLists+0x70>)
 8006c78:	f7fe fc34 	bl	80054e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c7c:	480b      	ldr	r0, [pc, #44]	; (8006cac <prvInitialiseTaskLists+0x74>)
 8006c7e:	f7fe fc31 	bl	80054e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c82:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <prvInitialiseTaskLists+0x78>)
 8006c84:	4a05      	ldr	r2, [pc, #20]	; (8006c9c <prvInitialiseTaskLists+0x64>)
 8006c86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c88:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <prvInitialiseTaskLists+0x7c>)
 8006c8a:	4a05      	ldr	r2, [pc, #20]	; (8006ca0 <prvInitialiseTaskLists+0x68>)
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20001008 	.word	0x20001008
 8006c9c:	20001094 	.word	0x20001094
 8006ca0:	200010a8 	.word	0x200010a8
 8006ca4:	200010c4 	.word	0x200010c4
 8006ca8:	200010d8 	.word	0x200010d8
 8006cac:	200010f0 	.word	0x200010f0
 8006cb0:	200010bc 	.word	0x200010bc
 8006cb4:	200010c0 	.word	0x200010c0

08006cb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cbe:	e019      	b.n	8006cf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cc0:	f000 fe38 	bl	8007934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc4:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <prvCheckTasksWaitingTermination+0x50>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fe fc91 	bl	80055f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <prvCheckTasksWaitingTermination+0x54>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	4a0b      	ldr	r2, [pc, #44]	; (8006d0c <prvCheckTasksWaitingTermination+0x54>)
 8006cde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <prvCheckTasksWaitingTermination+0x58>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	4a0a      	ldr	r2, [pc, #40]	; (8006d10 <prvCheckTasksWaitingTermination+0x58>)
 8006ce8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cea:	f000 fe53 	bl	8007994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f810 	bl	8006d14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cf4:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <prvCheckTasksWaitingTermination+0x58>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e1      	bne.n	8006cc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	200010d8 	.word	0x200010d8
 8006d0c:	20001104 	.word	0x20001104
 8006d10:	200010ec 	.word	0x200010ec

08006d14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	334c      	adds	r3, #76	; 0x4c
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 f95d 	bl	8007fe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d108      	bne.n	8006d42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 ffeb 	bl	8007d10 <vPortFree>
				vPortFree( pxTCB );
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 ffe8 	bl	8007d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d40:	e018      	b.n	8006d74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d103      	bne.n	8006d54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 ffdf 	bl	8007d10 <vPortFree>
	}
 8006d52:	e00f      	b.n	8006d74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d00a      	beq.n	8006d74 <prvDeleteTCB+0x60>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <prvDeleteTCB+0x5e>
	}
 8006d74:	bf00      	nop
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <prvResetNextTaskUnblockTime+0x38>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <prvResetNextTaskUnblockTime+0x3c>)
 8006d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d94:	e008      	b.n	8006da8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <prvResetNextTaskUnblockTime+0x38>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <prvResetNextTaskUnblockTime+0x3c>)
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	200010bc 	.word	0x200010bc
 8006db8:	20001124 	.word	0x20001124

08006dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dc2:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <xTaskGetSchedulerState+0x34>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	e008      	b.n	8006de2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd0:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <xTaskGetSchedulerState+0x38>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	607b      	str	r3, [r7, #4]
 8006ddc:	e001      	b.n	8006de2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dde:	2300      	movs	r3, #0
 8006de0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006de2:	687b      	ldr	r3, [r7, #4]
	}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20001110 	.word	0x20001110
 8006df4:	2000112c 	.word	0x2000112c

08006df8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d06e      	beq.n	8006eec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e0e:	4b3a      	ldr	r3, [pc, #232]	; (8006ef8 <xTaskPriorityDisinherit+0x100>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d00a      	beq.n	8006e2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60fb      	str	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60bb      	str	r3, [r7, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e50:	1e5a      	subs	r2, r3, #1
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d044      	beq.n	8006eec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d140      	bne.n	8006eec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fbc2 	bl	80055f8 <uxListRemove>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d115      	bne.n	8006ea6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	491f      	ldr	r1, [pc, #124]	; (8006efc <xTaskPriorityDisinherit+0x104>)
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <xTaskPriorityDisinherit+0xae>
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	2201      	movs	r2, #1
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <xTaskPriorityDisinherit+0x108>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	4a17      	ldr	r2, [pc, #92]	; (8006f00 <xTaskPriorityDisinherit+0x108>)
 8006ea4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	f1c3 0207 	rsb	r2, r3, #7
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <xTaskPriorityDisinherit+0x108>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	4a0d      	ldr	r2, [pc, #52]	; (8006f00 <xTaskPriorityDisinherit+0x108>)
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4a08      	ldr	r2, [pc, #32]	; (8006efc <xTaskPriorityDisinherit+0x104>)
 8006eda:	441a      	add	r2, r3
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f7fe fb2b 	bl	800553e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006eec:	697b      	ldr	r3, [r7, #20]
	}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20001004 	.word	0x20001004
 8006efc:	20001008 	.word	0x20001008
 8006f00:	2000110c 	.word	0x2000110c

08006f04 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <uxTaskResetEventItemValue+0x2c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f12:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <uxTaskResetEventItemValue+0x2c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <uxTaskResetEventItemValue+0x2c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f1c2 0207 	rsb	r2, r2, #7
 8006f20:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006f22:	687b      	ldr	r3, [r7, #4]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20001004 	.word	0x20001004

08006f34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f3e:	4b29      	ldr	r3, [pc, #164]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f44:	4b28      	ldr	r3, [pc, #160]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fb54 	bl	80055f8 <uxListRemove>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f56:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	43da      	mvns	r2, r3
 8006f64:	4b21      	ldr	r3, [pc, #132]	; (8006fec <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	4a20      	ldr	r2, [pc, #128]	; (8006fec <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d10a      	bne.n	8006f8c <prvAddCurrentTaskToDelayedList+0x58>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7c:	4b1a      	ldr	r3, [pc, #104]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4619      	mov	r1, r3
 8006f84:	481a      	ldr	r0, [pc, #104]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f86:	f7fe fada 	bl	800553e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f8a:	e026      	b.n	8006fda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f94:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d209      	bcs.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa4:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fe fae8 	bl	8005586 <vListInsert>
}
 8006fb6:	e010      	b.n	8006fda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f7fe fade 	bl	8005586 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fca:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d202      	bcs.n	8006fda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006fd4:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6013      	str	r3, [r2, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20001108 	.word	0x20001108
 8006fe8:	20001004 	.word	0x20001004
 8006fec:	2000110c 	.word	0x2000110c
 8006ff0:	200010f0 	.word	0x200010f0
 8006ff4:	200010c0 	.word	0x200010c0
 8006ff8:	200010bc 	.word	0x200010bc
 8006ffc:	20001124 	.word	0x20001124

08007000 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	; 0x28
 8007004:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800700a:	f000 fb07 	bl	800761c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800700e:	4b1c      	ldr	r3, [pc, #112]	; (8007080 <xTimerCreateTimerTask+0x80>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d021      	beq.n	800705a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800701e:	1d3a      	adds	r2, r7, #4
 8007020:	f107 0108 	add.w	r1, r7, #8
 8007024:	f107 030c 	add.w	r3, r7, #12
 8007028:	4618      	mov	r0, r3
 800702a:	f7f9 fa6d 	bl	8000508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	9202      	str	r2, [sp, #8]
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	2302      	movs	r3, #2
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2300      	movs	r3, #0
 800703e:	460a      	mov	r2, r1
 8007040:	4910      	ldr	r1, [pc, #64]	; (8007084 <xTimerCreateTimerTask+0x84>)
 8007042:	4811      	ldr	r0, [pc, #68]	; (8007088 <xTimerCreateTimerTask+0x88>)
 8007044:	f7fe ffea 	bl	800601c <xTaskCreateStatic>
 8007048:	4603      	mov	r3, r0
 800704a:	4a10      	ldr	r2, [pc, #64]	; (800708c <xTimerCreateTimerTask+0x8c>)
 800704c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <xTimerCreateTimerTask+0x8c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007056:	2301      	movs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007076:	697b      	ldr	r3, [r7, #20]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20001160 	.word	0x20001160
 8007084:	080081b8 	.word	0x080081b8
 8007088:	080071c5 	.word	0x080071c5
 800708c:	20001164 	.word	0x20001164

08007090 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08a      	sub	sp, #40	; 0x28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800709e:	2300      	movs	r3, #0
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <xTimerGenericCommand+0x2e>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	623b      	str	r3, [r7, #32]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070be:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <xTimerGenericCommand+0x98>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d02a      	beq.n	800711c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b05      	cmp	r3, #5
 80070d6:	dc18      	bgt.n	800710a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070d8:	f7ff fe70 	bl	8006dbc <xTaskGetSchedulerState>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d109      	bne.n	80070f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070e2:	4b11      	ldr	r3, [pc, #68]	; (8007128 <xTimerGenericCommand+0x98>)
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f107 0110 	add.w	r1, r7, #16
 80070ea:	2300      	movs	r3, #0
 80070ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ee:	f7fe fbad 	bl	800584c <xQueueGenericSend>
 80070f2:	6278      	str	r0, [r7, #36]	; 0x24
 80070f4:	e012      	b.n	800711c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070f6:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <xTimerGenericCommand+0x98>)
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	f107 0110 	add.w	r1, r7, #16
 80070fe:	2300      	movs	r3, #0
 8007100:	2200      	movs	r2, #0
 8007102:	f7fe fba3 	bl	800584c <xQueueGenericSend>
 8007106:	6278      	str	r0, [r7, #36]	; 0x24
 8007108:	e008      	b.n	800711c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800710a:	4b07      	ldr	r3, [pc, #28]	; (8007128 <xTimerGenericCommand+0x98>)
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	f107 0110 	add.w	r1, r7, #16
 8007112:	2300      	movs	r3, #0
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	f7fe fc97 	bl	8005a48 <xQueueGenericSendFromISR>
 800711a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800711e:	4618      	mov	r0, r3
 8007120:	3728      	adds	r7, #40	; 0x28
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20001160 	.word	0x20001160

0800712c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af02      	add	r7, sp, #8
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007136:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <prvProcessExpiredTimer+0x94>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	3304      	adds	r3, #4
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe fa57 	bl	80055f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d022      	beq.n	800719e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	18d1      	adds	r1, r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	6978      	ldr	r0, [r7, #20]
 8007166:	f000 f8d1 	bl	800730c <prvInsertTimerInActiveList>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01f      	beq.n	80071b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007170:	2300      	movs	r3, #0
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	2300      	movs	r3, #0
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	2100      	movs	r1, #0
 800717a:	6978      	ldr	r0, [r7, #20]
 800717c:	f7ff ff88 	bl	8007090 <xTimerGenericCommand>
 8007180:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d113      	bne.n	80071b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	60fb      	str	r3, [r7, #12]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	6978      	ldr	r0, [r7, #20]
 80071b6:	4798      	blx	r3
}
 80071b8:	bf00      	nop
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20001158 	.word	0x20001158

080071c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071cc:	f107 0308 	add.w	r3, r7, #8
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f857 	bl	8007284 <prvGetNextExpireTime>
 80071d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f803 	bl	80071e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071e2:	f000 f8d5 	bl	8007390 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071e6:	e7f1      	b.n	80071cc <prvTimerTask+0x8>

080071e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071f2:	f7ff f961 	bl	80064b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071f6:	f107 0308 	add.w	r3, r7, #8
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f866 	bl	80072cc <prvSampleTimeNow>
 8007200:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d130      	bne.n	800726a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <prvProcessTimerOrBlockTask+0x3c>
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	429a      	cmp	r2, r3
 8007214:	d806      	bhi.n	8007224 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007216:	f7ff f95d 	bl	80064d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff ff85 	bl	800712c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007222:	e024      	b.n	800726e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d008      	beq.n	800723c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800722a:	4b13      	ldr	r3, [pc, #76]	; (8007278 <prvProcessTimerOrBlockTask+0x90>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <prvProcessTimerOrBlockTask+0x50>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <prvProcessTimerOrBlockTask+0x52>
 8007238:	2300      	movs	r3, #0
 800723a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800723c:	4b0f      	ldr	r3, [pc, #60]	; (800727c <prvProcessTimerOrBlockTask+0x94>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	f7fe feb3 	bl	8005fb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800724e:	f7ff f941 	bl	80064d4 <xTaskResumeAll>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007258:	4b09      	ldr	r3, [pc, #36]	; (8007280 <prvProcessTimerOrBlockTask+0x98>)
 800725a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	f3bf 8f6f 	isb	sy
}
 8007268:	e001      	b.n	800726e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800726a:	f7ff f933 	bl	80064d4 <xTaskResumeAll>
}
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	2000115c 	.word	0x2000115c
 800727c:	20001160 	.word	0x20001160
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800728c:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <prvGetNextExpireTime+0x44>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <prvGetNextExpireTime+0x16>
 8007296:	2201      	movs	r2, #1
 8007298:	e000      	b.n	800729c <prvGetNextExpireTime+0x18>
 800729a:	2200      	movs	r2, #0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d105      	bne.n	80072b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072a8:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <prvGetNextExpireTime+0x44>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	e001      	b.n	80072b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072b8:	68fb      	ldr	r3, [r7, #12]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20001158 	.word	0x20001158

080072cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072d4:	f7ff f99a 	bl	800660c <xTaskGetTickCount>
 80072d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072da:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <prvSampleTimeNow+0x3c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d205      	bcs.n	80072f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072e4:	f000 f936 	bl	8007554 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	e002      	b.n	80072f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072f6:	4a04      	ldr	r2, [pc, #16]	; (8007308 <prvSampleTimeNow+0x3c>)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072fc:	68fb      	ldr	r3, [r7, #12]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20001168 	.word	0x20001168

0800730c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	429a      	cmp	r2, r3
 8007330:	d812      	bhi.n	8007358 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	429a      	cmp	r2, r3
 800733e:	d302      	bcc.n	8007346 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e01b      	b.n	800737e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007346:	4b10      	ldr	r3, [pc, #64]	; (8007388 <prvInsertTimerInActiveList+0x7c>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe f918 	bl	8005586 <vListInsert>
 8007356:	e012      	b.n	800737e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d206      	bcs.n	800736e <prvInsertTimerInActiveList+0x62>
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d302      	bcc.n	800736e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e007      	b.n	800737e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <prvInsertTimerInActiveList+0x80>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3304      	adds	r3, #4
 8007376:	4619      	mov	r1, r3
 8007378:	4610      	mov	r0, r2
 800737a:	f7fe f904 	bl	8005586 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800737e:	697b      	ldr	r3, [r7, #20]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	2000115c 	.word	0x2000115c
 800738c:	20001158 	.word	0x20001158

08007390 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	; 0x38
 8007394:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007396:	e0ca      	b.n	800752e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	da18      	bge.n	80073d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800739e:	1d3b      	adds	r3, r7, #4
 80073a0:	3304      	adds	r3, #4
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	61fb      	str	r3, [r7, #28]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c6:	6850      	ldr	r0, [r2, #4]
 80073c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ca:	6892      	ldr	r2, [r2, #8]
 80073cc:	4611      	mov	r1, r2
 80073ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f2c0 80aa 	blt.w	800752c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	3304      	adds	r3, #4
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fe f905 	bl	80055f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073ee:	463b      	mov	r3, r7
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff ff6b 	bl	80072cc <prvSampleTimeNow>
 80073f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b09      	cmp	r3, #9
 80073fc:	f200 8097 	bhi.w	800752e <prvProcessReceivedCommands+0x19e>
 8007400:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <prvProcessReceivedCommands+0x78>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	08007431 	.word	0x08007431
 800740c:	08007431 	.word	0x08007431
 8007410:	08007431 	.word	0x08007431
 8007414:	080074a5 	.word	0x080074a5
 8007418:	080074b9 	.word	0x080074b9
 800741c:	08007503 	.word	0x08007503
 8007420:	08007431 	.word	0x08007431
 8007424:	08007431 	.word	0x08007431
 8007428:	080074a5 	.word	0x080074a5
 800742c:	080074b9 	.word	0x080074b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	b2da      	uxtb	r2, r3
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	18d1      	adds	r1, r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007450:	f7ff ff5c 	bl	800730c <prvInsertTimerInActiveList>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d069      	beq.n	800752e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007460:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d05e      	beq.n	800752e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	441a      	add	r2, r3
 8007478:	2300      	movs	r3, #0
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	2300      	movs	r3, #0
 800747e:	2100      	movs	r1, #0
 8007480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007482:	f7ff fe05 	bl	8007090 <xTimerGenericCommand>
 8007486:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d14f      	bne.n	800752e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	61bb      	str	r3, [r7, #24]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80074b6:	e03a      	b.n	800752e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	617b      	str	r3, [r7, #20]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	18d1      	adds	r1, r2, r3
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074fc:	f7ff ff06 	bl	800730c <prvInsertTimerInActiveList>
					break;
 8007500:	e015      	b.n	800752e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007512:	f000 fbfd 	bl	8007d10 <vPortFree>
 8007516:	e00a      	b.n	800752e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800751e:	f023 0301 	bic.w	r3, r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800752a:	e000      	b.n	800752e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800752c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800752e:	4b08      	ldr	r3, [pc, #32]	; (8007550 <prvProcessReceivedCommands+0x1c0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	1d39      	adds	r1, r7, #4
 8007534:	2200      	movs	r2, #0
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe fb22 	bl	8005b80 <xQueueReceive>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	f47f af2a 	bne.w	8007398 <prvProcessReceivedCommands+0x8>
	}
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	3730      	adds	r7, #48	; 0x30
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20001160 	.word	0x20001160

08007554 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800755a:	e048      	b.n	80075ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800755c:	4b2d      	ldr	r3, [pc, #180]	; (8007614 <prvSwitchTimerLists+0xc0>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007566:	4b2b      	ldr	r3, [pc, #172]	; (8007614 <prvSwitchTimerLists+0xc0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3304      	adds	r3, #4
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe f83f 	bl	80055f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d02e      	beq.n	80075ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4413      	add	r3, r2
 8007598:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d90e      	bls.n	80075c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ae:	4b19      	ldr	r3, [pc, #100]	; (8007614 <prvSwitchTimerLists+0xc0>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f7fd ffe4 	bl	8005586 <vListInsert>
 80075be:	e016      	b.n	80075ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075c0:	2300      	movs	r3, #0
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	2300      	movs	r3, #0
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	2100      	movs	r1, #0
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff fd60 	bl	8007090 <xTimerGenericCommand>
 80075d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	603b      	str	r3, [r7, #0]
}
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <prvSwitchTimerLists+0xc0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1b1      	bne.n	800755c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <prvSwitchTimerLists+0xc0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075fe:	4b06      	ldr	r3, [pc, #24]	; (8007618 <prvSwitchTimerLists+0xc4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a04      	ldr	r2, [pc, #16]	; (8007614 <prvSwitchTimerLists+0xc0>)
 8007604:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007606:	4a04      	ldr	r2, [pc, #16]	; (8007618 <prvSwitchTimerLists+0xc4>)
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	6013      	str	r3, [r2, #0]
}
 800760c:	bf00      	nop
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20001158 	.word	0x20001158
 8007618:	2000115c 	.word	0x2000115c

0800761c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007622:	f000 f987 	bl	8007934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <prvCheckForValidListAndQueue+0x60>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d120      	bne.n	8007670 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800762e:	4814      	ldr	r0, [pc, #80]	; (8007680 <prvCheckForValidListAndQueue+0x64>)
 8007630:	f7fd ff58 	bl	80054e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007634:	4813      	ldr	r0, [pc, #76]	; (8007684 <prvCheckForValidListAndQueue+0x68>)
 8007636:	f7fd ff55 	bl	80054e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800763a:	4b13      	ldr	r3, [pc, #76]	; (8007688 <prvCheckForValidListAndQueue+0x6c>)
 800763c:	4a10      	ldr	r2, [pc, #64]	; (8007680 <prvCheckForValidListAndQueue+0x64>)
 800763e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <prvCheckForValidListAndQueue+0x70>)
 8007642:	4a10      	ldr	r2, [pc, #64]	; (8007684 <prvCheckForValidListAndQueue+0x68>)
 8007644:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007646:	2300      	movs	r3, #0
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	4b11      	ldr	r3, [pc, #68]	; (8007690 <prvCheckForValidListAndQueue+0x74>)
 800764c:	4a11      	ldr	r2, [pc, #68]	; (8007694 <prvCheckForValidListAndQueue+0x78>)
 800764e:	2110      	movs	r1, #16
 8007650:	200a      	movs	r0, #10
 8007652:	f7fe f863 	bl	800571c <xQueueGenericCreateStatic>
 8007656:	4603      	mov	r3, r0
 8007658:	4a08      	ldr	r2, [pc, #32]	; (800767c <prvCheckForValidListAndQueue+0x60>)
 800765a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <prvCheckForValidListAndQueue+0x60>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <prvCheckForValidListAndQueue+0x60>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	490b      	ldr	r1, [pc, #44]	; (8007698 <prvCheckForValidListAndQueue+0x7c>)
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fc78 	bl	8005f60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007670:	f000 f990 	bl	8007994 <vPortExitCritical>
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20001160 	.word	0x20001160
 8007680:	20001130 	.word	0x20001130
 8007684:	20001144 	.word	0x20001144
 8007688:	20001158 	.word	0x20001158
 800768c:	2000115c 	.word	0x2000115c
 8007690:	2000120c 	.word	0x2000120c
 8007694:	2000116c 	.word	0x2000116c
 8007698:	080081c0 	.word	0x080081c0

0800769c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80076aa:	f06f 0301 	mvn.w	r3, #1
 80076ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <xTimerPendFunctionCallFromISR+0x3c>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	f107 0114 	add.w	r1, r7, #20
 80076c4:	2300      	movs	r3, #0
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	f7fe f9be 	bl	8005a48 <xQueueGenericSendFromISR>
 80076cc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3728      	adds	r7, #40	; 0x28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20001160 	.word	0x20001160

080076dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3b04      	subs	r3, #4
 80076ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3b04      	subs	r3, #4
 80076fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f023 0201 	bic.w	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3b04      	subs	r3, #4
 800770a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800770c:	4a0c      	ldr	r2, [pc, #48]	; (8007740 <pxPortInitialiseStack+0x64>)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3b14      	subs	r3, #20
 8007716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3b04      	subs	r3, #4
 8007722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f06f 0202 	mvn.w	r2, #2
 800772a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3b20      	subs	r3, #32
 8007730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007732:	68fb      	ldr	r3, [r7, #12]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	08007745 	.word	0x08007745

08007744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800774e:	4b12      	ldr	r3, [pc, #72]	; (8007798 <prvTaskExitError+0x54>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d00a      	beq.n	800776e <prvTaskExitError+0x2a>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	60fb      	str	r3, [r7, #12]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <prvTaskExitError+0x28>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60bb      	str	r3, [r7, #8]
}
 8007780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007782:	bf00      	nop
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0fc      	beq.n	8007784 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	2000000c 	.word	0x2000000c
 800779c:	00000000 	.word	0x00000000

080077a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <pxCurrentTCBConst2>)
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	6808      	ldr	r0, [r1, #0]
 80077a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	f380 8809 	msr	PSP, r0
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8811 	msr	BASEPRI, r0
 80077ba:	4770      	bx	lr
 80077bc:	f3af 8000 	nop.w

080077c0 <pxCurrentTCBConst2>:
 80077c0:	20001004 	.word	0x20001004
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop

080077c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077c8:	4808      	ldr	r0, [pc, #32]	; (80077ec <prvPortStartFirstTask+0x24>)
 80077ca:	6800      	ldr	r0, [r0, #0]
 80077cc:	6800      	ldr	r0, [r0, #0]
 80077ce:	f380 8808 	msr	MSP, r0
 80077d2:	f04f 0000 	mov.w	r0, #0
 80077d6:	f380 8814 	msr	CONTROL, r0
 80077da:	b662      	cpsie	i
 80077dc:	b661      	cpsie	f
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	df00      	svc	0
 80077e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ea:	bf00      	nop
 80077ec:	e000ed08 	.word	0xe000ed08

080077f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077f6:	4b46      	ldr	r3, [pc, #280]	; (8007910 <xPortStartScheduler+0x120>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a46      	ldr	r2, [pc, #280]	; (8007914 <xPortStartScheduler+0x124>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10a      	bne.n	8007816 <xPortStartScheduler+0x26>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	613b      	str	r3, [r7, #16]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007816:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <xPortStartScheduler+0x120>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a3f      	ldr	r2, [pc, #252]	; (8007918 <xPortStartScheduler+0x128>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10a      	bne.n	8007836 <xPortStartScheduler+0x46>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	60fb      	str	r3, [r7, #12]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007836:	4b39      	ldr	r3, [pc, #228]	; (800791c <xPortStartScheduler+0x12c>)
 8007838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	b2db      	uxtb	r3, r3
 8007840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	22ff      	movs	r2, #255	; 0xff
 8007846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007858:	b2da      	uxtb	r2, r3
 800785a:	4b31      	ldr	r3, [pc, #196]	; (8007920 <xPortStartScheduler+0x130>)
 800785c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800785e:	4b31      	ldr	r3, [pc, #196]	; (8007924 <xPortStartScheduler+0x134>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007864:	e009      	b.n	800787a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007866:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <xPortStartScheduler+0x134>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3b01      	subs	r3, #1
 800786c:	4a2d      	ldr	r2, [pc, #180]	; (8007924 <xPortStartScheduler+0x134>)
 800786e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	b2db      	uxtb	r3, r3
 8007878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d0ef      	beq.n	8007866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007886:	4b27      	ldr	r3, [pc, #156]	; (8007924 <xPortStartScheduler+0x134>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f1c3 0307 	rsb	r3, r3, #7
 800788e:	2b04      	cmp	r3, #4
 8007890:	d00a      	beq.n	80078a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60bb      	str	r3, [r7, #8]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078a8:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <xPortStartScheduler+0x134>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <xPortStartScheduler+0x134>)
 80078b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <xPortStartScheduler+0x134>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <xPortStartScheduler+0x134>)
 80078bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078c6:	4b18      	ldr	r3, [pc, #96]	; (8007928 <xPortStartScheduler+0x138>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a17      	ldr	r2, [pc, #92]	; (8007928 <xPortStartScheduler+0x138>)
 80078cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <xPortStartScheduler+0x138>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a14      	ldr	r2, [pc, #80]	; (8007928 <xPortStartScheduler+0x138>)
 80078d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078de:	f000 f8dd 	bl	8007a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078e2:	4b12      	ldr	r3, [pc, #72]	; (800792c <xPortStartScheduler+0x13c>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078e8:	f000 f8fc 	bl	8007ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078ec:	4b10      	ldr	r3, [pc, #64]	; (8007930 <xPortStartScheduler+0x140>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <xPortStartScheduler+0x140>)
 80078f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078f8:	f7ff ff66 	bl	80077c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078fc:	f7fe ff4e 	bl	800679c <vTaskSwitchContext>
	prvTaskExitError();
 8007900:	f7ff ff20 	bl	8007744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	e000ed00 	.word	0xe000ed00
 8007914:	410fc271 	.word	0x410fc271
 8007918:	410fc270 	.word	0x410fc270
 800791c:	e000e400 	.word	0xe000e400
 8007920:	20001254 	.word	0x20001254
 8007924:	20001258 	.word	0x20001258
 8007928:	e000ed20 	.word	0xe000ed20
 800792c:	2000000c 	.word	0x2000000c
 8007930:	e000ef34 	.word	0xe000ef34

08007934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	607b      	str	r3, [r7, #4]
}
 800794c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800794e:	4b0f      	ldr	r3, [pc, #60]	; (800798c <vPortEnterCritical+0x58>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	4a0d      	ldr	r2, [pc, #52]	; (800798c <vPortEnterCritical+0x58>)
 8007956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007958:	4b0c      	ldr	r3, [pc, #48]	; (800798c <vPortEnterCritical+0x58>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d10f      	bne.n	8007980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <vPortEnterCritical+0x5c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <vPortEnterCritical+0x4c>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	603b      	str	r3, [r7, #0]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <vPortEnterCritical+0x4a>
	}
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	2000000c 	.word	0x2000000c
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800799a:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <vPortExitCritical+0x50>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <vPortExitCritical+0x24>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	607b      	str	r3, [r7, #4]
}
 80079b4:	bf00      	nop
 80079b6:	e7fe      	b.n	80079b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079b8:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <vPortExitCritical+0x50>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3b01      	subs	r3, #1
 80079be:	4a09      	ldr	r2, [pc, #36]	; (80079e4 <vPortExitCritical+0x50>)
 80079c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079c2:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <vPortExitCritical+0x50>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d105      	bne.n	80079d6 <vPortExitCritical+0x42>
 80079ca:	2300      	movs	r3, #0
 80079cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	f383 8811 	msr	BASEPRI, r3
}
 80079d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	2000000c 	.word	0x2000000c
	...

080079f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079f0:	f3ef 8009 	mrs	r0, PSP
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <pxCurrentTCBConst>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	f01e 0f10 	tst.w	lr, #16
 8007a00:	bf08      	it	eq
 8007a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0a:	6010      	str	r0, [r2, #0]
 8007a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a14:	f380 8811 	msr	BASEPRI, r0
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f7fe febc 	bl	800679c <vTaskSwitchContext>
 8007a24:	f04f 0000 	mov.w	r0, #0
 8007a28:	f380 8811 	msr	BASEPRI, r0
 8007a2c:	bc09      	pop	{r0, r3}
 8007a2e:	6819      	ldr	r1, [r3, #0]
 8007a30:	6808      	ldr	r0, [r1, #0]
 8007a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a36:	f01e 0f10 	tst.w	lr, #16
 8007a3a:	bf08      	it	eq
 8007a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a40:	f380 8809 	msr	PSP, r0
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	f3af 8000 	nop.w

08007a50 <pxCurrentTCBConst>:
 8007a50:	20001004 	.word	0x20001004
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop

08007a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a72:	f7fe fddb 	bl	800662c <xTaskIncrementTick>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <SysTick_Handler+0x40>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	2300      	movs	r3, #0
 8007a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f383 8811 	msr	BASEPRI, r3
}
 8007a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <vPortSetupTimerInterrupt+0x34>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <vPortSetupTimerInterrupt+0x38>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aac:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <vPortSetupTimerInterrupt+0x3c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <vPortSetupTimerInterrupt+0x40>)
 8007ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab6:	099b      	lsrs	r3, r3, #6
 8007ab8:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <vPortSetupTimerInterrupt+0x44>)
 8007aba:	3b01      	subs	r3, #1
 8007abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007abe:	4b04      	ldr	r3, [pc, #16]	; (8007ad0 <vPortSetupTimerInterrupt+0x34>)
 8007ac0:	2207      	movs	r2, #7
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	e000e010 	.word	0xe000e010
 8007ad4:	e000e018 	.word	0xe000e018
 8007ad8:	20000000 	.word	0x20000000
 8007adc:	10624dd3 	.word	0x10624dd3
 8007ae0:	e000e014 	.word	0xe000e014

08007ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007af4 <vPortEnableVFP+0x10>
 8007ae8:	6801      	ldr	r1, [r0, #0]
 8007aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007aee:	6001      	str	r1, [r0, #0]
 8007af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007af2:	bf00      	nop
 8007af4:	e000ed88 	.word	0xe000ed88

08007af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007afe:	f3ef 8305 	mrs	r3, IPSR
 8007b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b0f      	cmp	r3, #15
 8007b08:	d914      	bls.n	8007b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <vPortValidateInterruptPriority+0x70>)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b14:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <vPortValidateInterruptPriority+0x74>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	7afa      	ldrb	r2, [r7, #11]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d20a      	bcs.n	8007b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b34:	4b0e      	ldr	r3, [pc, #56]	; (8007b70 <vPortValidateInterruptPriority+0x78>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <vPortValidateInterruptPriority+0x7c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d90a      	bls.n	8007b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	603b      	str	r3, [r7, #0]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <vPortValidateInterruptPriority+0x60>
	}
 8007b5a:	bf00      	nop
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	e000e3f0 	.word	0xe000e3f0
 8007b6c:	20001254 	.word	0x20001254
 8007b70:	e000ed0c 	.word	0xe000ed0c
 8007b74:	20001258 	.word	0x20001258

08007b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08a      	sub	sp, #40	; 0x28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b84:	f7fe fc98 	bl	80064b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b88:	4b5b      	ldr	r3, [pc, #364]	; (8007cf8 <pvPortMalloc+0x180>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b90:	f000 f920 	bl	8007dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b94:	4b59      	ldr	r3, [pc, #356]	; (8007cfc <pvPortMalloc+0x184>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f040 8093 	bne.w	8007cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01d      	beq.n	8007be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ba8:	2208      	movs	r2, #8
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4413      	add	r3, r2
 8007bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d014      	beq.n	8007be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f023 0307 	bic.w	r3, r3, #7
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	617b      	str	r3, [r7, #20]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d06e      	beq.n	8007cc8 <pvPortMalloc+0x150>
 8007bea:	4b45      	ldr	r3, [pc, #276]	; (8007d00 <pvPortMalloc+0x188>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d869      	bhi.n	8007cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bf4:	4b43      	ldr	r3, [pc, #268]	; (8007d04 <pvPortMalloc+0x18c>)
 8007bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bf8:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <pvPortMalloc+0x18c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bfe:	e004      	b.n	8007c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d903      	bls.n	8007c1c <pvPortMalloc+0xa4>
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f1      	bne.n	8007c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c1c:	4b36      	ldr	r3, [pc, #216]	; (8007cf8 <pvPortMalloc+0x180>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d050      	beq.n	8007cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	4413      	add	r3, r2
 8007c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	2308      	movs	r3, #8
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d91f      	bls.n	8007c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <pvPortMalloc+0xf8>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	613b      	str	r3, [r7, #16]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	1ad2      	subs	r2, r2, r3
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c82:	69b8      	ldr	r0, [r7, #24]
 8007c84:	f000 f908 	bl	8007e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c88:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <pvPortMalloc+0x188>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	4a1b      	ldr	r2, [pc, #108]	; (8007d00 <pvPortMalloc+0x188>)
 8007c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <pvPortMalloc+0x188>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	4b1b      	ldr	r3, [pc, #108]	; (8007d08 <pvPortMalloc+0x190>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d203      	bcs.n	8007caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ca2:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <pvPortMalloc+0x188>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a18      	ldr	r2, [pc, #96]	; (8007d08 <pvPortMalloc+0x190>)
 8007ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <pvPortMalloc+0x184>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <pvPortMalloc+0x194>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	4a11      	ldr	r2, [pc, #68]	; (8007d0c <pvPortMalloc+0x194>)
 8007cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cc8:	f7fe fc04 	bl	80064d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <pvPortMalloc+0x174>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	60fb      	str	r3, [r7, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <pvPortMalloc+0x172>
	return pvReturn;
 8007cec:	69fb      	ldr	r3, [r7, #28]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3728      	adds	r7, #40	; 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20001e1c 	.word	0x20001e1c
 8007cfc:	20001e30 	.word	0x20001e30
 8007d00:	20001e20 	.word	0x20001e20
 8007d04:	20001e14 	.word	0x20001e14
 8007d08:	20001e24 	.word	0x20001e24
 8007d0c:	20001e28 	.word	0x20001e28

08007d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d04d      	beq.n	8007dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d22:	2308      	movs	r3, #8
 8007d24:	425b      	negs	r3, r3
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4413      	add	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	4b24      	ldr	r3, [pc, #144]	; (8007dc8 <vPortFree+0xb8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <vPortFree+0x44>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <vPortFree+0x62>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	60bb      	str	r3, [r7, #8]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <vPortFree+0xb8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01e      	beq.n	8007dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11a      	bne.n	8007dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <vPortFree+0xb8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	43db      	mvns	r3, r3
 8007d92:	401a      	ands	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d98:	f7fe fb8e 	bl	80064b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <vPortFree+0xbc>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	4a09      	ldr	r2, [pc, #36]	; (8007dcc <vPortFree+0xbc>)
 8007da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f000 f874 	bl	8007e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <vPortFree+0xc0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	4a06      	ldr	r2, [pc, #24]	; (8007dd0 <vPortFree+0xc0>)
 8007db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dba:	f7fe fb8b 	bl	80064d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dbe:	bf00      	nop
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20001e30 	.word	0x20001e30
 8007dcc:	20001e20 	.word	0x20001e20
 8007dd0:	20001e2c 	.word	0x20001e2c

08007dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007de0:	4b27      	ldr	r3, [pc, #156]	; (8007e80 <prvHeapInit+0xac>)
 8007de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3307      	adds	r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	4a1f      	ldr	r2, [pc, #124]	; (8007e80 <prvHeapInit+0xac>)
 8007e04:	4413      	add	r3, r2
 8007e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <prvHeapInit+0xb0>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e12:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <prvHeapInit+0xb0>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e20:	2208      	movs	r2, #8
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0307 	bic.w	r3, r3, #7
 8007e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <prvHeapInit+0xb4>)
 8007e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e36:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <prvHeapInit+0xb4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <prvHeapInit+0xb4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <prvHeapInit+0xb4>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4a0a      	ldr	r2, [pc, #40]	; (8007e8c <prvHeapInit+0xb8>)
 8007e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <prvHeapInit+0xbc>)
 8007e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e6c:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <prvHeapInit+0xc0>)
 8007e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e72:	601a      	str	r2, [r3, #0]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	2000125c 	.word	0x2000125c
 8007e84:	20001e14 	.word	0x20001e14
 8007e88:	20001e1c 	.word	0x20001e1c
 8007e8c:	20001e24 	.word	0x20001e24
 8007e90:	20001e20 	.word	0x20001e20
 8007e94:	20001e30 	.word	0x20001e30

08007e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ea0:	4b28      	ldr	r3, [pc, #160]	; (8007f44 <prvInsertBlockIntoFreeList+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e002      	b.n	8007eac <prvInsertBlockIntoFreeList+0x14>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d8f7      	bhi.n	8007ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d108      	bne.n	8007eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d118      	bne.n	8007f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d00d      	beq.n	8007f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e008      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <prvInsertBlockIntoFreeList+0xb0>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e003      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d002      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20001e14 	.word	0x20001e14
 8007f48:	20001e1c 	.word	0x20001e1c

08007f4c <__libc_init_array>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	4d0d      	ldr	r5, [pc, #52]	; (8007f84 <__libc_init_array+0x38>)
 8007f50:	4c0d      	ldr	r4, [pc, #52]	; (8007f88 <__libc_init_array+0x3c>)
 8007f52:	1b64      	subs	r4, r4, r5
 8007f54:	10a4      	asrs	r4, r4, #2
 8007f56:	2600      	movs	r6, #0
 8007f58:	42a6      	cmp	r6, r4
 8007f5a:	d109      	bne.n	8007f70 <__libc_init_array+0x24>
 8007f5c:	4d0b      	ldr	r5, [pc, #44]	; (8007f8c <__libc_init_array+0x40>)
 8007f5e:	4c0c      	ldr	r4, [pc, #48]	; (8007f90 <__libc_init_array+0x44>)
 8007f60:	f000 f8f2 	bl	8008148 <_init>
 8007f64:	1b64      	subs	r4, r4, r5
 8007f66:	10a4      	asrs	r4, r4, #2
 8007f68:	2600      	movs	r6, #0
 8007f6a:	42a6      	cmp	r6, r4
 8007f6c:	d105      	bne.n	8007f7a <__libc_init_array+0x2e>
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f74:	4798      	blx	r3
 8007f76:	3601      	adds	r6, #1
 8007f78:	e7ee      	b.n	8007f58 <__libc_init_array+0xc>
 8007f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7e:	4798      	blx	r3
 8007f80:	3601      	adds	r6, #1
 8007f82:	e7f2      	b.n	8007f6a <__libc_init_array+0x1e>
 8007f84:	08008278 	.word	0x08008278
 8007f88:	08008278 	.word	0x08008278
 8007f8c:	08008278 	.word	0x08008278
 8007f90:	0800827c 	.word	0x0800827c

08007f94 <__retarget_lock_acquire_recursive>:
 8007f94:	4770      	bx	lr

08007f96 <__retarget_lock_release_recursive>:
 8007f96:	4770      	bx	lr

08007f98 <memcpy>:
 8007f98:	440a      	add	r2, r1
 8007f9a:	4291      	cmp	r1, r2
 8007f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fa0:	d100      	bne.n	8007fa4 <memcpy+0xc>
 8007fa2:	4770      	bx	lr
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fae:	4291      	cmp	r1, r2
 8007fb0:	d1f9      	bne.n	8007fa6 <memcpy+0xe>
 8007fb2:	bd10      	pop	{r4, pc}

08007fb4 <memset>:
 8007fb4:	4402      	add	r2, r0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d100      	bne.n	8007fbe <memset+0xa>
 8007fbc:	4770      	bx	lr
 8007fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc2:	e7f9      	b.n	8007fb8 <memset+0x4>

08007fc4 <cleanup_glue>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	6809      	ldr	r1, [r1, #0]
 8007fca:	4605      	mov	r5, r0
 8007fcc:	b109      	cbz	r1, 8007fd2 <cleanup_glue+0xe>
 8007fce:	f7ff fff9 	bl	8007fc4 <cleanup_glue>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fda:	f000 b869 	b.w	80080b0 <_free_r>
	...

08007fe0 <_reclaim_reent>:
 8007fe0:	4b2c      	ldr	r3, [pc, #176]	; (8008094 <_reclaim_reent+0xb4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4283      	cmp	r3, r0
 8007fe6:	b570      	push	{r4, r5, r6, lr}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	d051      	beq.n	8008090 <_reclaim_reent+0xb0>
 8007fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007fee:	b143      	cbz	r3, 8008002 <_reclaim_reent+0x22>
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d14a      	bne.n	800808c <_reclaim_reent+0xac>
 8007ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	b111      	cbz	r1, 8008002 <_reclaim_reent+0x22>
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 f857 	bl	80080b0 <_free_r>
 8008002:	6961      	ldr	r1, [r4, #20]
 8008004:	b111      	cbz	r1, 800800c <_reclaim_reent+0x2c>
 8008006:	4620      	mov	r0, r4
 8008008:	f000 f852 	bl	80080b0 <_free_r>
 800800c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800800e:	b111      	cbz	r1, 8008016 <_reclaim_reent+0x36>
 8008010:	4620      	mov	r0, r4
 8008012:	f000 f84d 	bl	80080b0 <_free_r>
 8008016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008018:	b111      	cbz	r1, 8008020 <_reclaim_reent+0x40>
 800801a:	4620      	mov	r0, r4
 800801c:	f000 f848 	bl	80080b0 <_free_r>
 8008020:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008022:	b111      	cbz	r1, 800802a <_reclaim_reent+0x4a>
 8008024:	4620      	mov	r0, r4
 8008026:	f000 f843 	bl	80080b0 <_free_r>
 800802a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800802c:	b111      	cbz	r1, 8008034 <_reclaim_reent+0x54>
 800802e:	4620      	mov	r0, r4
 8008030:	f000 f83e 	bl	80080b0 <_free_r>
 8008034:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008036:	b111      	cbz	r1, 800803e <_reclaim_reent+0x5e>
 8008038:	4620      	mov	r0, r4
 800803a:	f000 f839 	bl	80080b0 <_free_r>
 800803e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008040:	b111      	cbz	r1, 8008048 <_reclaim_reent+0x68>
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f834 	bl	80080b0 <_free_r>
 8008048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804a:	b111      	cbz	r1, 8008052 <_reclaim_reent+0x72>
 800804c:	4620      	mov	r0, r4
 800804e:	f000 f82f 	bl	80080b0 <_free_r>
 8008052:	69a3      	ldr	r3, [r4, #24]
 8008054:	b1e3      	cbz	r3, 8008090 <_reclaim_reent+0xb0>
 8008056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008058:	4620      	mov	r0, r4
 800805a:	4798      	blx	r3
 800805c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800805e:	b1b9      	cbz	r1, 8008090 <_reclaim_reent+0xb0>
 8008060:	4620      	mov	r0, r4
 8008062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008066:	f7ff bfad 	b.w	8007fc4 <cleanup_glue>
 800806a:	5949      	ldr	r1, [r1, r5]
 800806c:	b941      	cbnz	r1, 8008080 <_reclaim_reent+0xa0>
 800806e:	3504      	adds	r5, #4
 8008070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008072:	2d80      	cmp	r5, #128	; 0x80
 8008074:	68d9      	ldr	r1, [r3, #12]
 8008076:	d1f8      	bne.n	800806a <_reclaim_reent+0x8a>
 8008078:	4620      	mov	r0, r4
 800807a:	f000 f819 	bl	80080b0 <_free_r>
 800807e:	e7ba      	b.n	8007ff6 <_reclaim_reent+0x16>
 8008080:	680e      	ldr	r6, [r1, #0]
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f814 	bl	80080b0 <_free_r>
 8008088:	4631      	mov	r1, r6
 800808a:	e7ef      	b.n	800806c <_reclaim_reent+0x8c>
 800808c:	2500      	movs	r5, #0
 800808e:	e7ef      	b.n	8008070 <_reclaim_reent+0x90>
 8008090:	bd70      	pop	{r4, r5, r6, pc}
 8008092:	bf00      	nop
 8008094:	20000010 	.word	0x20000010

08008098 <__malloc_lock>:
 8008098:	4801      	ldr	r0, [pc, #4]	; (80080a0 <__malloc_lock+0x8>)
 800809a:	f7ff bf7b 	b.w	8007f94 <__retarget_lock_acquire_recursive>
 800809e:	bf00      	nop
 80080a0:	20001e34 	.word	0x20001e34

080080a4 <__malloc_unlock>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__malloc_unlock+0x8>)
 80080a6:	f7ff bf76 	b.w	8007f96 <__retarget_lock_release_recursive>
 80080aa:	bf00      	nop
 80080ac:	20001e34 	.word	0x20001e34

080080b0 <_free_r>:
 80080b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080b2:	2900      	cmp	r1, #0
 80080b4:	d044      	beq.n	8008140 <_free_r+0x90>
 80080b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ba:	9001      	str	r0, [sp, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f1a1 0404 	sub.w	r4, r1, #4
 80080c2:	bfb8      	it	lt
 80080c4:	18e4      	addlt	r4, r4, r3
 80080c6:	f7ff ffe7 	bl	8008098 <__malloc_lock>
 80080ca:	4a1e      	ldr	r2, [pc, #120]	; (8008144 <_free_r+0x94>)
 80080cc:	9801      	ldr	r0, [sp, #4]
 80080ce:	6813      	ldr	r3, [r2, #0]
 80080d0:	b933      	cbnz	r3, 80080e0 <_free_r+0x30>
 80080d2:	6063      	str	r3, [r4, #4]
 80080d4:	6014      	str	r4, [r2, #0]
 80080d6:	b003      	add	sp, #12
 80080d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080dc:	f7ff bfe2 	b.w	80080a4 <__malloc_unlock>
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d908      	bls.n	80080f6 <_free_r+0x46>
 80080e4:	6825      	ldr	r5, [r4, #0]
 80080e6:	1961      	adds	r1, r4, r5
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf01      	itttt	eq
 80080ec:	6819      	ldreq	r1, [r3, #0]
 80080ee:	685b      	ldreq	r3, [r3, #4]
 80080f0:	1949      	addeq	r1, r1, r5
 80080f2:	6021      	streq	r1, [r4, #0]
 80080f4:	e7ed      	b.n	80080d2 <_free_r+0x22>
 80080f6:	461a      	mov	r2, r3
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	b10b      	cbz	r3, 8008100 <_free_r+0x50>
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	d9fa      	bls.n	80080f6 <_free_r+0x46>
 8008100:	6811      	ldr	r1, [r2, #0]
 8008102:	1855      	adds	r5, r2, r1
 8008104:	42a5      	cmp	r5, r4
 8008106:	d10b      	bne.n	8008120 <_free_r+0x70>
 8008108:	6824      	ldr	r4, [r4, #0]
 800810a:	4421      	add	r1, r4
 800810c:	1854      	adds	r4, r2, r1
 800810e:	42a3      	cmp	r3, r4
 8008110:	6011      	str	r1, [r2, #0]
 8008112:	d1e0      	bne.n	80080d6 <_free_r+0x26>
 8008114:	681c      	ldr	r4, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	6053      	str	r3, [r2, #4]
 800811a:	4421      	add	r1, r4
 800811c:	6011      	str	r1, [r2, #0]
 800811e:	e7da      	b.n	80080d6 <_free_r+0x26>
 8008120:	d902      	bls.n	8008128 <_free_r+0x78>
 8008122:	230c      	movs	r3, #12
 8008124:	6003      	str	r3, [r0, #0]
 8008126:	e7d6      	b.n	80080d6 <_free_r+0x26>
 8008128:	6825      	ldr	r5, [r4, #0]
 800812a:	1961      	adds	r1, r4, r5
 800812c:	428b      	cmp	r3, r1
 800812e:	bf04      	itt	eq
 8008130:	6819      	ldreq	r1, [r3, #0]
 8008132:	685b      	ldreq	r3, [r3, #4]
 8008134:	6063      	str	r3, [r4, #4]
 8008136:	bf04      	itt	eq
 8008138:	1949      	addeq	r1, r1, r5
 800813a:	6021      	streq	r1, [r4, #0]
 800813c:	6054      	str	r4, [r2, #4]
 800813e:	e7ca      	b.n	80080d6 <_free_r+0x26>
 8008140:	b003      	add	sp, #12
 8008142:	bd30      	pop	{r4, r5, pc}
 8008144:	20001e38 	.word	0x20001e38

08008148 <_init>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	bf00      	nop
 800814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814e:	bc08      	pop	{r3}
 8008150:	469e      	mov	lr, r3
 8008152:	4770      	bx	lr

08008154 <_fini>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	bf00      	nop
 8008158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815a:	bc08      	pop	{r3}
 800815c:	469e      	mov	lr, r3
 800815e:	4770      	bx	lr
